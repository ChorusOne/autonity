// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package autonity

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/autonity/autonity"
	"github.com/autonity/autonity/accounts/abi"
	"github.com/autonity/autonity/accounts/abi/bind"
	"github.com/autonity/autonity/common"
	"github.com/autonity/autonity/core/types"
	"github.com/autonity/autonity/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccountabilityBaseSlashingRates is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityBaseSlashingRates struct {
	Low  *big.Int
	Mid  *big.Int
	High *big.Int
}

// AccountabilityConfig is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityConfig struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRates              AccountabilityBaseSlashingRates
	Factors                        AccountabilityFactors
}

// AccountabilityEvent is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityEvent struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}

// AccountabilityFactors is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityFactors struct {
	Collusion *big.Int
	History   *big.Int
	Jail      *big.Int
}

// AutonityCommitteeMember is an auto generated low-level Go binding around an user-defined struct.
type AutonityCommitteeMember struct {
	Addr         common.Address
	VotingPower  *big.Int
	ConsensusKey []byte
}

// AutonityConfig is an auto generated low-level Go binding around an user-defined struct.
type AutonityConfig struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}

// AutonityContracts is an auto generated low-level Go binding around an user-defined struct.
type AutonityContracts struct {
	AccountabilityContract         common.Address
	OracleContract                 common.Address
	AcuContract                    common.Address
	SupplyControlContract          common.Address
	StabilizationContract          common.Address
	UpgradeManagerContract         common.Address
	InflationControllerContract    common.Address
	OmissionAccountabilityContract common.Address
}

// AutonityEpochInfo is an auto generated low-level Go binding around an user-defined struct.
type AutonityEpochInfo struct {
	Committee          []AutonityCommitteeMember
	PreviousEpochBlock *big.Int
	EpochBlock         *big.Int
	NextEpochBlock     *big.Int
	Delta              *big.Int
}

// AutonityPolicy is an auto generated low-level Go binding around an user-defined struct.
type AutonityPolicy struct {
	TreasuryFee             *big.Int
	MinBaseFee              *big.Int
	DelegationRate          *big.Int
	UnbondingPeriod         *big.Int
	InitialInflationReserve *big.Int
	WithholdingThreshold    *big.Int
	ProposerRewardRate      *big.Int
	OracleRewardRate        *big.Int
	WithheldRewardsPool     common.Address
	TreasuryAccount         common.Address
}

// AutonityProtocol is an auto generated low-level Go binding around an user-defined struct.
type AutonityProtocol struct {
	OperatorAccount     common.Address
	EpochPeriod         *big.Int
	BlockPeriod         *big.Int
	CommitteeSize       *big.Int
	MaxScheduleDuration *big.Int
}

// AutonityValidator is an auto generated low-level Go binding around an user-defined struct.
type AutonityValidator struct {
	Treasury                 common.Address
	NodeAddress              common.Address
	OracleAddress            common.Address
	Enode                    string
	CommissionRate           *big.Int
	BondedStake              *big.Int
	UnbondingStake           *big.Int
	UnbondingShares          *big.Int
	SelfBondedStake          *big.Int
	SelfUnbondingStake       *big.Int
	SelfUnbondingShares      *big.Int
	SelfUnbondingStakeLocked *big.Int
	LiquidStateContract      common.Address
	LiquidSupply             *big.Int
	RegistrationBlock        *big.Int
	TotalSlashed             *big.Int
	JailReleaseBlock         *big.Int
	ConsensusKey             []byte
	State                    uint8
}

// ContractBaseContract is an auto generated low-level Go binding around an user-defined struct.
type ContractBaseContract struct {
	CurrentNTNAmount *big.Int
	WithdrawnValue   *big.Int
	Start            *big.Int
	CliffDuration    *big.Int
	TotalDuration    *big.Int
	CanStake         bool
}

// IOracleReport is an auto generated low-level Go binding around an user-defined struct.
type IOracleReport struct {
	Price      *big.Int
	Confidence uint8
}

// IOracleRoundData is an auto generated low-level Go binding around an user-defined struct.
type IOracleRoundData struct {
	Round     *big.Int
	Price     *big.Int
	Timestamp *big.Int
	Success   bool
}

// InflationControllerParams is an auto generated low-level Go binding around an user-defined struct.
type InflationControllerParams struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}

// NonStakeableVestingScheduleTracker is an auto generated low-level Go binding around an user-defined struct.
type NonStakeableVestingScheduleTracker struct {
	UnsubscribedAmount  *big.Int
	ExpiredFromContract *big.Int
	Initialized         bool
}

// OmissionAccountabilityConfig is an auto generated low-level Go binding around an user-defined struct.
type OmissionAccountabilityConfig struct {
	InactivityThreshold    *big.Int
	LookbackWindow         *big.Int
	PastPerformanceWeight  *big.Int
	InitialJailingPeriod   *big.Int
	InitialProbationPeriod *big.Int
	InitialSlashingRate    *big.Int
	Delta                  *big.Int
}

// OracleConfig is an auto generated low-level Go binding around an user-defined struct.
type OracleConfig struct {
	Autonity                  common.Address
	Operator                  common.Address
	VotePeriod                *big.Int
	OutlierDetectionThreshold *big.Int
	OutlierSlashingThreshold  *big.Int
	BaseSlashingRate          *big.Int
}

// ScheduleControllerSchedule is an auto generated low-level Go binding around an user-defined struct.
type ScheduleControllerSchedule struct {
	TotalAmount    *big.Int
	UnlockedAmount *big.Int
	Start          *big.Int
	TotalDuration  *big.Int
	LastUnlockTime *big.Int
}

// StabilizationConfig is an auto generated low-level Go binding around an user-defined struct.
type StabilizationConfig struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}

// ACUMetaData contains all meta data concerning the ACU contract.
var ACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidBasket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoACUValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"BasketModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"}],\"name\":\"modifyBasket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"44b4708a": "modifyBasket(string[],uint256[],uint256)",
		"d54d2799": "quantities()",
		"146ca531": "round()",
		"f51e181a": "scale()",
		"683dd191": "scaleFactor()",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"07039ff9": "symbols()",
		"a2e62045": "update()",
		"3fa4f245": "value()",
	},
	Bin: "0x60806040523480156200001157600080fd5b50604051620019273803806200192783398101604081905262000034916200036d565b858580518251146200005957604051634ff799c560e01b815260040160405180910390fd5b60005b8151811015620000c0576001600160ff1b038282815181106200008357620000836200052c565b60200260200101511115620000ab57604051634ff799c560e01b815260040160405180910390fd5b80620000b78162000558565b9150506200005c565b508751620000d69060039060208b01906200014b565b508651620000ec9060049060208a0190620001a8565b506001869055620000ff86600a62000673565b6002555050600680546001600160a01b039485166001600160a01b03199182161790915560078054938516938216939093179092556008805491909316911617905550620007e3915050565b82805482825590600052602060002090810192821562000196579160200282015b8281111562000196578251829062000185908262000717565b50916020019190600101906200016c565b50620001a4929150620001f4565b5090565b828054828255906000526020600020908101928215620001e6579160200282015b82811115620001e6578251825591602001919060010190620001c9565b50620001a492915062000215565b80821115620001a45760006200020b82826200022c565b50600101620001f4565b5b80821115620001a4576000815560010162000216565b5080546200023a9062000688565b6000825580601f106200024b575050565b601f0160209004906000526020600020908101906200026b919062000215565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620002af57620002af6200026e565b604052919050565b60006001600160401b03821115620002d357620002d36200026e565b5060051b60200190565b600082601f830112620002ef57600080fd5b81516020620003086200030283620002b7565b62000284565b82815260059290921b840181019181810190868411156200032857600080fd5b8286015b848110156200034557805183529183019183016200032c565b509695505050505050565b80516001600160a01b03811681146200036857600080fd5b919050565b60008060008060008060c087890312156200038757600080fd5b86516001600160401b038111156200039e57600080fd5b8701601f81018913620003b057600080fd5b8051620003c16200030282620002b7565b808282526020820191508b60208460051b8601011115620003e157600080fd5b602084015b60208460051b860101811015620004b85780516001600160401b038111156200040e57600080fd5b8d603f82880101126200042057600080fd5b858101602001516001600160401b038111156200044157620004416200026e565b62000456601f8201601f191660200162000284565b8181528f604083858b01010111156200046e57600080fd5b60005b828110156200049657604081858b010101516020828401015260208101905062000471565b50600060208383010152808652505050602083019250602081019050620003e6565b5060208b0151909950925050506001600160401b03811115620004da57600080fd5b620004e889828a01620002dd565b95505060408701519350620005006060880162000350565b9250620005106080880162000350565b91506200052060a0880162000350565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200056d576200056d62000542565b5060010190565b600181815b80851115620005b557816000190482111562000599576200059962000542565b80851615620005a757918102915b93841c939080029062000579565b509250929050565b600082620005ce575060016200066d565b81620005dd575060006200066d565b8160018114620005f65760028114620006015762000621565b60019150506200066d565b60ff84111562000615576200061562000542565b50506001821b6200066d565b5060208310610133831016604e8410600b841016171562000646575081810a6200066d565b62000652838362000574565b806000190482111562000669576200066962000542565b0290505b92915050565b6000620006818383620005bd565b9392505050565b600181811c908216806200069d57607f821691505b602082108103620006be57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200071257600081815260208120601f850160051c81016020861015620006ed5750805b601f850160051c820191505b818110156200070e57828155600101620006f9565b5050505b505050565b81516001600160401b038111156200073357620007336200026e565b6200074b8162000744845462000688565b84620006c4565b602080601f8311600181146200078357600084156200076a5750858301515b600019600386901b1c1916600185901b1785556200070e565b600085815260208120601f198616915b82811015620007b45788860151825594840194600190910190840162000793565b5085821015620007d35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61113480620007f36000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637adbf973116100665780637adbf973146100fe578063a2e6204514610111578063b3ab15fb14610129578063d54d27991461013c578063f51e181a1461015157600080fd5b806307039ff9146100a3578063146ca531146100c15780633fa4f245146100d857806344b4708a146100e0578063683dd191146100f5575b600080fd5b6100ab61015a565b6040516100b89190610952565b60405180910390f35b6100ca60005481565b6040519081526020016100b8565b6100ca610233565b6100f36100ee366004610a42565b61025e565b005b6100ca60025481565b6100f361010c366004610b74565b61038a565b6101196103d6565b60405190151581526020016100b8565b6100f3610137366004610b74565b61071d565b610144610769565b6040516100b89190610bd8565b6100ca60015481565b60606003805480602002602001604051908101604052809291908181526020016000905b8282101561022a57838290600052602060002001805461019d90610beb565b80601f01602080910402602001604051908101604052809291908181526020018280546101c990610beb565b80156102165780601f106101eb57610100808354040283529160200191610216565b820191906000526020600020905b8154815290600101906020018083116101f957829003601f168201915b50505050508152602001906001019061017e565b50505050905090565b6000805460000361025757604051631d3e00bb60e11b815260040160405180910390fd5b5060055490565b8282805182511461028257604051634ff799c560e01b815260040160405180910390fd5b60005b81518110156102e1576001600160ff1b038282815181106102a8576102a8610c25565b602002602001015111156102cf57604051634ff799c560e01b815260040160405180910390fd5b806102d981610c51565b915050610285565b506007546001600160a01b0316331461030c576040516282b42960e81b815260040160405180910390fd5b845161031f9060039060208801906107c1565b508351610333906004906020870190610817565b50600183905561034483600a610d50565b6002556040517fdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c099061037b90879087908790610d5c565b60405180910390a15050505050565b6006546001600160a01b031633146103b4576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6006546000906001600160a01b03163314610403576040516282b42960e81b815260040160405180910390fd5b60006001600860009054906101000a90046001600160a01b03166001600160a01b0316639f8743f76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190610d92565b6104889190610dab565b9050806000541061049b57600091505090565b600080600860009054906101000a90046001600160a01b03166001600160a01b031663f0141d846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190610dbe565b60ff16905060005b6003548110156106ad57604051661554d10b5554d160ca1b6020820152600090602701604051602081830303815290604052805190602001206003838154811061056957610569610c25565b906000526020600020016040516020016105839190610de1565b60405160208183030381529060405280519060200120036105b0576105a983600a610d50565b9050610664565b600854600380546000926001600160a01b031691633c8510fd91899190879081106105dd576105dd610c25565b906000526020600020016040518363ffffffff1660e01b8152600401610604929190610e57565b608060405180830381865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190610eea565b9050806060015161065d576000965050505050505090565b6020015190505b6004828154811061067757610677610c25565b90600052602060002001548161068d9190610f5b565b6106979085610f8b565b93505080806106a590610c51565b91505061051d565b506106b981600a610d50565b6106c39083610fb3565b60058190556000849055604080514381524260208201528082018690526060810192909252517f23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d269181900360800190a16001935050505090565b6006546001600160a01b03163314610747576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b606060048054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020905b8154815260200190600101908083116107a3575b5050505050905090565b828054828255906000526020600020908101928215610807579160200282015b8281111561080757825182906107f7908261103e565b50916020019190600101906107e1565b5061081392915061085e565b5090565b828054828255906000526020600020908101928215610852579160200282015b82811115610852578251825591602001919060010190610837565b5061081392915061087b565b808211156108135760006108728282610890565b5060010161085e565b5b80821115610813576000815560010161087c565b50805461089c90610beb565b6000825580601f106108ac575050565b601f0160209004906000526020600020908101906108ca919061087b565b50565b600081518084526020808501808196508360051b810191508286016000805b86811015610944578385038a5282518051808752835b8181101561091d578281018901518882018a01528801610902565b5086810188018490529a87019a601f01601f191690950186019450918501916001016108ec565b509298975050505050505050565b60208152600061096560208301846108cd565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109ab576109ab61096c565b604052919050565b600067ffffffffffffffff8211156109cd576109cd61096c565b5060051b60200190565b600082601f8301126109e857600080fd5b813560206109fd6109f8836109b3565b610982565b82815260059290921b84018101918181019086841115610a1c57600080fd5b8286015b84811015610a375780358352918301918301610a20565b509695505050505050565b600080600060608486031215610a5757600080fd5b833567ffffffffffffffff80821115610a6f57600080fd5b818601915086601f830112610a8357600080fd5b81356020610a936109f8836109b3565b82815260059290921b8401810191818101908a841115610ab257600080fd5b8286015b84811015610b3f57803586811115610ace5760008081fd5b8701603f81018d13610ae05760008081fd5b84810135604088821115610af657610af661096c565b610b08601f8301601f19168801610982565b8281528f82848601011115610b1d5760008081fd5b8282850189830137600092810188019290925250845250918301918301610ab6565b5097505087013592505080821115610b5657600080fd5b50610b63868287016109d7565b925050604084013590509250925092565b600060208284031215610b8657600080fd5b81356001600160a01b038116811461096557600080fd5b600081518084526020808501945080840160005b83811015610bcd57815187529582019590820190600101610bb1565b509495945050505050565b6020815260006109656020830184610b9d565b600181811c90821680610bff57607f821691505b602082108103610c1f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610c6357610c63610c3b565b5060010190565b600181815b80851115610ca5578160001904821115610c8b57610c8b610c3b565b80851615610c9857918102915b93841c9390800290610c6f565b509250929050565b600082610cbc57506001610d4a565b81610cc957506000610d4a565b8160018114610cdf5760028114610ce957610d05565b6001915050610d4a565b60ff841115610cfa57610cfa610c3b565b50506001821b610d4a565b5060208310610133831016604e8410600b8410161715610d28575081810a610d4a565b610d328383610c6a565b8060001904821115610d4657610d46610c3b565b0290505b92915050565b60006109658383610cad565b606081526000610d6f60608301866108cd565b8281036020840152610d818186610b9d565b915050826040830152949350505050565b600060208284031215610da457600080fd5b5051919050565b81810381811115610d4a57610d4a610c3b565b600060208284031215610dd057600080fd5b815160ff8116811461096557600080fd5b6000808354610def81610beb565b60018281168015610e075760018114610e1c57610e4b565b60ff1984168752821515830287019450610e4b565b8760005260208060002060005b85811015610e425781548a820152908401908201610e29565b50505082870194505b50929695505050505050565b8281526000602060408184015260008454610e7181610beb565b8060408701526060600180841660008114610e935760018114610ead57610edb565b60ff1985168984015283151560051b890183019550610edb565b896000528660002060005b85811015610ed35781548b8201860152908301908801610eb8565b8a0184019650505b50939998505050505050505050565b600060808284031215610efc57600080fd5b6040516080810181811067ffffffffffffffff82111715610f1f57610f1f61096c565b806040525082518152602083015160208201526040830151604082015260608301518015158114610f4f57600080fd5b60608201529392505050565b80820260008212600160ff1b84141615610f7757610f77610c3b565b8181058314821517610d4a57610d4a610c3b565b8082018281126000831280158216821582161715610fab57610fab610c3b565b505092915050565b600082610fd057634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610fea57610fea610c3b565b500590565b601f82111561103957600081815260208120601f850160051c810160208610156110165750805b601f850160051c820191505b8181101561103557828155600101611022565b5050505b505050565b815167ffffffffffffffff8111156110585761105861096c565b61106c816110668454610beb565b84610fef565b602080601f8311600181146110a157600084156110895750858301515b600019600386901b1c1916600185901b178555611035565b600085815260208120601f198616915b828110156110d0578886015182559484019460019091019084016110b1565b50858210156110ee5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220cb1d3b823d9c9eb356c1feabc6cbc563893db8478967a3c871f12ece3f25f7d964736f6c63430008150033",
}

// ACUABI is the input ABI used to generate the binding from.
// Deprecated: Use ACUMetaData.ABI instead.
var ACUABI = ACUMetaData.ABI

// Deprecated: Use ACUMetaData.Sigs instead.
// ACUFuncSigs maps the 4-byte function signature to its string representation.
var ACUFuncSigs = ACUMetaData.Sigs

// ACUBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ACUMetaData.Bin instead.
var ACUBin = ACUMetaData.Bin

// DeployACU deploys a new Ethereum contract, binding an instance of ACU to it.
func DeployACU(auth *bind.TransactOpts, backend bind.ContractBackend, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int, autonity common.Address, operator common.Address, oracle common.Address) (common.Address, *types.Transaction, *ACU, error) {
	parsed, err := ACUMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ACUBin), backend, symbols_, quantities_, scale_, autonity, operator, oracle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ACU{ACUCaller: ACUCaller{contract: contract}, ACUTransactor: ACUTransactor{contract: contract}, ACUFilterer: ACUFilterer{contract: contract}}, nil
}

// ACU is an auto generated Go binding around an Ethereum contract.
type ACU struct {
	ACUCaller     // Read-only binding to the contract
	ACUTransactor // Write-only binding to the contract
	ACUFilterer   // Log filterer for contract events
}

// ACUCaller is an auto generated read-only Go binding around an Ethereum contract.
type ACUCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ACUTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ACUTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ACUFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ACUFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ACUSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ACUSession struct {
	Contract     *ACU              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ACUCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ACUCallerSession struct {
	Contract *ACUCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ACUTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ACUTransactorSession struct {
	Contract     *ACUTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ACURaw is an auto generated low-level Go binding around an Ethereum contract.
type ACURaw struct {
	Contract *ACU // Generic contract binding to access the raw methods on
}

// ACUCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ACUCallerRaw struct {
	Contract *ACUCaller // Generic read-only contract binding to access the raw methods on
}

// ACUTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ACUTransactorRaw struct {
	Contract *ACUTransactor // Generic write-only contract binding to access the raw methods on
}

// NewACU creates a new instance of ACU, bound to a specific deployed contract.
func NewACU(address common.Address, backend bind.ContractBackend) (*ACU, error) {
	contract, err := bindACU(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ACU{ACUCaller: ACUCaller{contract: contract}, ACUTransactor: ACUTransactor{contract: contract}, ACUFilterer: ACUFilterer{contract: contract}}, nil
}

// NewACUCaller creates a new read-only instance of ACU, bound to a specific deployed contract.
func NewACUCaller(address common.Address, caller bind.ContractCaller) (*ACUCaller, error) {
	contract, err := bindACU(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ACUCaller{contract: contract}, nil
}

// NewACUTransactor creates a new write-only instance of ACU, bound to a specific deployed contract.
func NewACUTransactor(address common.Address, transactor bind.ContractTransactor) (*ACUTransactor, error) {
	contract, err := bindACU(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ACUTransactor{contract: contract}, nil
}

// NewACUFilterer creates a new log filterer instance of ACU, bound to a specific deployed contract.
func NewACUFilterer(address common.Address, filterer bind.ContractFilterer) (*ACUFilterer, error) {
	contract, err := bindACU(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ACUFilterer{contract: contract}, nil
}

// bindACU binds a generic wrapper to an already deployed contract.
func bindACU(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ACUABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ACU *ACURaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ACU.Contract.ACUCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ACU *ACURaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ACU.Contract.ACUTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ACU *ACURaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ACU.Contract.ACUTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ACU *ACUCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ACU.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ACU *ACUTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ACU.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ACU *ACUTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ACU.Contract.contract.Transact(opts, method, params...)
}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACUCaller) Quantities(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "quantities")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACUSession) Quantities() ([]*big.Int, error) {
	return _ACU.Contract.Quantities(&_ACU.CallOpts)
}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACUCallerSession) Quantities() ([]*big.Int, error) {
	return _ACU.Contract.Quantities(&_ACU.CallOpts)
}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACUCaller) Round(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "round")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACUSession) Round() (*big.Int, error) {
	return _ACU.Contract.Round(&_ACU.CallOpts)
}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACUCallerSession) Round() (*big.Int, error) {
	return _ACU.Contract.Round(&_ACU.CallOpts)
}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACUCaller) Scale(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "scale")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACUSession) Scale() (*big.Int, error) {
	return _ACU.Contract.Scale(&_ACU.CallOpts)
}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACUCallerSession) Scale() (*big.Int, error) {
	return _ACU.Contract.Scale(&_ACU.CallOpts)
}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACUCaller) ScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "scaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACUSession) ScaleFactor() (*big.Int, error) {
	return _ACU.Contract.ScaleFactor(&_ACU.CallOpts)
}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACUCallerSession) ScaleFactor() (*big.Int, error) {
	return _ACU.Contract.ScaleFactor(&_ACU.CallOpts)
}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACUCaller) Symbols(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "symbols")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACUSession) Symbols() ([]string, error) {
	return _ACU.Contract.Symbols(&_ACU.CallOpts)
}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACUCallerSession) Symbols() ([]string, error) {
	return _ACU.Contract.Symbols(&_ACU.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACUCaller) Value(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ACU.contract.Call(opts, &out, "value")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACUSession) Value() (*big.Int, error) {
	return _ACU.Contract.Value(&_ACU.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACUCallerSession) Value() (*big.Int, error) {
	return _ACU.Contract.Value(&_ACU.CallOpts)
}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACUTransactor) ModifyBasket(opts *bind.TransactOpts, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "modifyBasket", symbols_, quantities_, scale_)
}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACUSession) ModifyBasket(symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (*types.Transaction, error) {
	return _ACU.Contract.ModifyBasket(&_ACU.TransactOpts, symbols_, quantities_, scale_)
}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACUTransactorSession) ModifyBasket(symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (*types.Transaction, error) {
	return _ACU.Contract.ModifyBasket(&_ACU.TransactOpts, symbols_, quantities_, scale_)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACUTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACUSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOperator(&_ACU.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACUTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOperator(&_ACU.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACUTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACUSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOracle(&_ACU.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACUTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _ACU.Contract.SetOracle(&_ACU.TransactOpts, oracle)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACUTransactor) Update(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ACU.contract.Transact(opts, "update")
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACUSession) Update() (*types.Transaction, error) {
	return _ACU.Contract.Update(&_ACU.TransactOpts)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACUTransactorSession) Update() (*types.Transaction, error) {
	return _ACU.Contract.Update(&_ACU.TransactOpts)
}

// ACUBasketModifiedIterator is returned from FilterBasketModified and is used to iterate over the raw logs and unpacked data for BasketModified events raised by the ACU contract.
type ACUBasketModifiedIterator struct {
	Event *ACUBasketModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ACUBasketModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ACUBasketModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ACUBasketModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ACUBasketModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ACUBasketModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ACUBasketModified represents a BasketModified event raised by the ACU contract.
type ACUBasketModified struct {
	Symbols    []string
	Quantities []*big.Int
	Scale      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBasketModified is a free log retrieval operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
//
// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
func (_ACU *ACUFilterer) FilterBasketModified(opts *bind.FilterOpts) (*ACUBasketModifiedIterator, error) {

	logs, sub, err := _ACU.contract.FilterLogs(opts, "BasketModified")
	if err != nil {
		return nil, err
	}
	return &ACUBasketModifiedIterator{contract: _ACU.contract, event: "BasketModified", logs: logs, sub: sub}, nil
}

// WatchBasketModified is a free log subscription operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
//
// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
func (_ACU *ACUFilterer) WatchBasketModified(opts *bind.WatchOpts, sink chan<- *ACUBasketModified) (event.Subscription, error) {

	logs, sub, err := _ACU.contract.WatchLogs(opts, "BasketModified")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ACUBasketModified)
				if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBasketModified is a log parse operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
//
// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
func (_ACU *ACUFilterer) ParseBasketModified(log types.Log) (*ACUBasketModified, error) {
	event := new(ACUBasketModified)
	if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ACUUpdatedIterator is returned from FilterUpdated and is used to iterate over the raw logs and unpacked data for Updated events raised by the ACU contract.
type ACUUpdatedIterator struct {
	Event *ACUUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ACUUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ACUUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ACUUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ACUUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ACUUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ACUUpdated represents a Updated event raised by the ACU contract.
type ACUUpdated struct {
	Height    *big.Int
	Timestamp *big.Int
	Round     *big.Int
	Value     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUpdated is a free log retrieval operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
//
// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
func (_ACU *ACUFilterer) FilterUpdated(opts *bind.FilterOpts) (*ACUUpdatedIterator, error) {

	logs, sub, err := _ACU.contract.FilterLogs(opts, "Updated")
	if err != nil {
		return nil, err
	}
	return &ACUUpdatedIterator{contract: _ACU.contract, event: "Updated", logs: logs, sub: sub}, nil
}

// WatchUpdated is a free log subscription operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
//
// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
func (_ACU *ACUFilterer) WatchUpdated(opts *bind.WatchOpts, sink chan<- *ACUUpdated) (event.Subscription, error) {

	logs, sub, err := _ACU.contract.WatchLogs(opts, "Updated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ACUUpdated)
				if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdated is a log parse operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
//
// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
func (_ACU *ACUFilterer) ParseUpdated(log types.Log) (*ACUUpdated, error) {
	event := new(ACUUpdated)
	if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessAutonityMetaData contains all meta data concerning the AccessAutonity contract.
var AccessAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
	Bin: "0x6080604052348015600f57600080fd5b5060405160c838038060c8833981016040819052602a91604e565b600080546001600160a01b0319166001600160a01b0392909216919091179055607c565b600060208284031215605f57600080fd5b81516001600160a01b0381168114607557600080fd5b9392505050565b603f8060896000396000f3fe6080604052600080fdfea2646970667358221220cdc789498bb5a76280d3da246c31b063b5aeff203ff8408dcb63f7373932a53f64736f6c63430008150033",
}

// AccessAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessAutonityMetaData.ABI instead.
var AccessAutonityABI = AccessAutonityMetaData.ABI

// AccessAutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessAutonityMetaData.Bin instead.
var AccessAutonityBin = AccessAutonityMetaData.Bin

// DeployAccessAutonity deploys a new Ethereum contract, binding an instance of AccessAutonity to it.
func DeployAccessAutonity(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *AccessAutonity, error) {
	parsed, err := AccessAutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessAutonityBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessAutonity{AccessAutonityCaller: AccessAutonityCaller{contract: contract}, AccessAutonityTransactor: AccessAutonityTransactor{contract: contract}, AccessAutonityFilterer: AccessAutonityFilterer{contract: contract}}, nil
}

// AccessAutonity is an auto generated Go binding around an Ethereum contract.
type AccessAutonity struct {
	AccessAutonityCaller     // Read-only binding to the contract
	AccessAutonityTransactor // Write-only binding to the contract
	AccessAutonityFilterer   // Log filterer for contract events
}

// AccessAutonityCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessAutonityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessAutonityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessAutonityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessAutonityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessAutonityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessAutonitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessAutonitySession struct {
	Contract     *AccessAutonity   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessAutonityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessAutonityCallerSession struct {
	Contract *AccessAutonityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// AccessAutonityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessAutonityTransactorSession struct {
	Contract     *AccessAutonityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// AccessAutonityRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessAutonityRaw struct {
	Contract *AccessAutonity // Generic contract binding to access the raw methods on
}

// AccessAutonityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessAutonityCallerRaw struct {
	Contract *AccessAutonityCaller // Generic read-only contract binding to access the raw methods on
}

// AccessAutonityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessAutonityTransactorRaw struct {
	Contract *AccessAutonityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessAutonity creates a new instance of AccessAutonity, bound to a specific deployed contract.
func NewAccessAutonity(address common.Address, backend bind.ContractBackend) (*AccessAutonity, error) {
	contract, err := bindAccessAutonity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessAutonity{AccessAutonityCaller: AccessAutonityCaller{contract: contract}, AccessAutonityTransactor: AccessAutonityTransactor{contract: contract}, AccessAutonityFilterer: AccessAutonityFilterer{contract: contract}}, nil
}

// NewAccessAutonityCaller creates a new read-only instance of AccessAutonity, bound to a specific deployed contract.
func NewAccessAutonityCaller(address common.Address, caller bind.ContractCaller) (*AccessAutonityCaller, error) {
	contract, err := bindAccessAutonity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessAutonityCaller{contract: contract}, nil
}

// NewAccessAutonityTransactor creates a new write-only instance of AccessAutonity, bound to a specific deployed contract.
func NewAccessAutonityTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessAutonityTransactor, error) {
	contract, err := bindAccessAutonity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessAutonityTransactor{contract: contract}, nil
}

// NewAccessAutonityFilterer creates a new log filterer instance of AccessAutonity, bound to a specific deployed contract.
func NewAccessAutonityFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessAutonityFilterer, error) {
	contract, err := bindAccessAutonity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessAutonityFilterer{contract: contract}, nil
}

// bindAccessAutonity binds a generic wrapper to an already deployed contract.
func bindAccessAutonity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessAutonityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessAutonity *AccessAutonityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessAutonity.Contract.AccessAutonityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessAutonity *AccessAutonityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessAutonity.Contract.AccessAutonityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessAutonity *AccessAutonityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessAutonity.Contract.AccessAutonityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessAutonity *AccessAutonityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessAutonity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessAutonity *AccessAutonityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessAutonity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessAutonity *AccessAutonityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessAutonity.Contract.contract.Transact(opts, method, params...)
}

// AccountabilityMetaData contains all meta data concerning the Accountability contract.
var AccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.BaseSlashingRates\",\"name\":\"baseSlashingRates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"history\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jail\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Factors\",\"name\":\"factors\",\"type\":\"tuple\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.BaseSlashingRates\",\"name\":\"baseSlashingRates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"history\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jail\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Factors\",\"name\":\"factors\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleMisbehaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.BaseSlashingRates\",\"name\":\"_rates\",\"type\":\"tuple\"}],\"name\":\"setBaseSlashingRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newCommittee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"history\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jail\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Factors\",\"name\":\"_factors\",\"type\":\"tuple\"}],\"name\":\"setFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_window\",\"type\":\"uint256\"}],\"name\":\"setInnocenceProofSubmissionWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"1e85f2e5": "handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"e05f8786": "handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"a48a9b50": "handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"931c7c68": "history(address)",
		"a2652078": "setBaseSlashingRates((uint256,uint256,uint256))",
		"e08b14ed": "setCommittee(address[])",
		"8975e977": "setFactors((uint256,uint256,uint256))",
		"433afda8": "setInnocenceProofSubmissionWindow(uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "",
}

// AccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityMetaData.ABI instead.
var AccountabilityABI = AccountabilityMetaData.ABI

// Deprecated: Use AccountabilityMetaData.Sigs instead.
// AccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityFuncSigs = AccountabilityMetaData.Sigs

// AccountabilityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityMetaData.Bin instead.
var AccountabilityBin = AccountabilityMetaData.Bin

// DeployAccountability deploys a new Ethereum contract, binding an instance of Accountability to it.
func DeployAccountability(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _config AccountabilityConfig) (common.Address, *types.Transaction, *Accountability, error) {
	parsed, err := AccountabilityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccountabilityBin), backend, _autonity, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accountability{AccountabilityCaller: AccountabilityCaller{contract: contract}, AccountabilityTransactor: AccountabilityTransactor{contract: contract}, AccountabilityFilterer: AccountabilityFilterer{contract: contract}}, nil
}

// Accountability is an auto generated Go binding around an Ethereum contract.
type Accountability struct {
	AccountabilityCaller     // Read-only binding to the contract
	AccountabilityTransactor // Write-only binding to the contract
	AccountabilityFilterer   // Log filterer for contract events
}

// AccountabilityCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountabilityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountabilityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountabilityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountabilitySession struct {
	Contract     *Accountability   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccountabilityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountabilityCallerSession struct {
	Contract *AccountabilityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// AccountabilityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountabilityTransactorSession struct {
	Contract     *AccountabilityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// AccountabilityRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountabilityRaw struct {
	Contract *Accountability // Generic contract binding to access the raw methods on
}

// AccountabilityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountabilityCallerRaw struct {
	Contract *AccountabilityCaller // Generic read-only contract binding to access the raw methods on
}

// AccountabilityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountabilityTransactorRaw struct {
	Contract *AccountabilityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccountability creates a new instance of Accountability, bound to a specific deployed contract.
func NewAccountability(address common.Address, backend bind.ContractBackend) (*Accountability, error) {
	contract, err := bindAccountability(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accountability{AccountabilityCaller: AccountabilityCaller{contract: contract}, AccountabilityTransactor: AccountabilityTransactor{contract: contract}, AccountabilityFilterer: AccountabilityFilterer{contract: contract}}, nil
}

// NewAccountabilityCaller creates a new read-only instance of Accountability, bound to a specific deployed contract.
func NewAccountabilityCaller(address common.Address, caller bind.ContractCaller) (*AccountabilityCaller, error) {
	contract, err := bindAccountability(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountabilityCaller{contract: contract}, nil
}

// NewAccountabilityTransactor creates a new write-only instance of Accountability, bound to a specific deployed contract.
func NewAccountabilityTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountabilityTransactor, error) {
	contract, err := bindAccountability(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTransactor{contract: contract}, nil
}

// NewAccountabilityFilterer creates a new log filterer instance of Accountability, bound to a specific deployed contract.
func NewAccountabilityFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountabilityFilterer, error) {
	contract, err := bindAccountability(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountabilityFilterer{contract: contract}, nil
}

// bindAccountability binds a generic wrapper to an already deployed contract.
func bindAccountability(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountabilityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accountability *AccountabilityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accountability.Contract.AccountabilityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accountability *AccountabilityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accountability.Contract.AccountabilityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accountability *AccountabilityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accountability.Contract.AccountabilityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accountability *AccountabilityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accountability.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accountability *AccountabilityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accountability.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accountability *AccountabilityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accountability.Contract.contract.Transact(opts, method, params...)
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *AccountabilityCaller) Beneficiaries(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *AccountabilitySession) Beneficiaries(arg0 common.Address) (common.Address, error) {
	return _Accountability.Contract.Beneficiaries(&_Accountability.CallOpts, arg0)
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *AccountabilityCallerSession) Beneficiaries(arg0 common.Address) (common.Address, error) {
	return _Accountability.Contract.Beneficiaries(&_Accountability.CallOpts, arg0)
}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *AccountabilityCaller) CanAccuse(opts *bind.CallOpts, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *AccountabilitySession) CanAccuse(_offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	return _Accountability.Contract.CanAccuse(&_Accountability.CallOpts, _offender, _rule, _block)
}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *AccountabilityCallerSession) CanAccuse(_offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	return _Accountability.Contract.CanAccuse(&_Accountability.CallOpts, _offender, _rule, _block)
}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *AccountabilityCaller) CanSlash(opts *bind.CallOpts, _offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *AccountabilitySession) CanSlash(_offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	return _Accountability.Contract.CanSlash(&_Accountability.CallOpts, _offender, _rule, _block)
}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *AccountabilityCallerSession) CanSlash(_offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	return _Accountability.Contract.CanSlash(&_Accountability.CallOpts, _offender, _rule, _block)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, (uint256,uint256,uint256) baseSlashingRates, (uint256,uint256,uint256) factors)
func (_Accountability *AccountabilityCaller) Config(opts *bind.CallOpts) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRates              AccountabilityBaseSlashingRates
	Factors                        AccountabilityFactors
}, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRates              AccountabilityBaseSlashingRates
		Factors                        AccountabilityFactors
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRates = *abi.ConvertType(out[1], new(AccountabilityBaseSlashingRates)).(*AccountabilityBaseSlashingRates)
	outstruct.Factors = *abi.ConvertType(out[2], new(AccountabilityFactors)).(*AccountabilityFactors)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, (uint256,uint256,uint256) baseSlashingRates, (uint256,uint256,uint256) factors)
func (_Accountability *AccountabilitySession) Config() (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRates              AccountabilityBaseSlashingRates
	Factors                        AccountabilityFactors
}, error) {
	return _Accountability.Contract.Config(&_Accountability.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, (uint256,uint256,uint256) baseSlashingRates, (uint256,uint256,uint256) factors)
func (_Accountability *AccountabilityCallerSession) Config() (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRates              AccountabilityBaseSlashingRates
	Factors                        AccountabilityFactors
}, error) {
	return _Accountability.Contract.Config(&_Accountability.CallOpts)
}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *AccountabilityCaller) Events(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "events", arg0)

	outstruct := new(struct {
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EventType = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *AccountabilitySession) Events(arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	return _Accountability.Contract.Events(&_Accountability.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *AccountabilityCallerSession) Events(arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	return _Accountability.Contract.Events(&_Accountability.CallOpts, arg0)
}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *AccountabilityCaller) GetValidatorAccusation(opts *bind.CallOpts, _val common.Address) (AccountabilityEvent, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)

	return out0, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *AccountabilitySession) GetValidatorAccusation(_val common.Address) (AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorAccusation(&_Accountability.CallOpts, _val)
}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *AccountabilityCallerSession) GetValidatorAccusation(_val common.Address) (AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorAccusation(&_Accountability.CallOpts, _val)
}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *AccountabilityCaller) GetValidatorFaults(opts *bind.CallOpts, _val common.Address) ([]AccountabilityEvent, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)

	return out0, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *AccountabilitySession) GetValidatorFaults(_val common.Address) ([]AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorFaults(&_Accountability.CallOpts, _val)
}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *AccountabilityCallerSession) GetValidatorFaults(_val common.Address) ([]AccountabilityEvent, error) {
	return _Accountability.Contract.GetValidatorFaults(&_Accountability.CallOpts, _val)
}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_Accountability *AccountabilityCaller) History(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "history", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_Accountability *AccountabilitySession) History(arg0 common.Address) (*big.Int, error) {
	return _Accountability.Contract.History(&_Accountability.CallOpts, arg0)
}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_Accountability *AccountabilityCallerSession) History(arg0 common.Address) (*big.Int, error) {
	return _Accountability.Contract.History(&_Accountability.CallOpts, arg0)
}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *AccountabilityCaller) SlashingHistory(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Accountability.contract.Call(opts, &out, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *AccountabilitySession) SlashingHistory(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Accountability.Contract.SlashingHistory(&_Accountability.CallOpts, arg0, arg1)
}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *AccountabilityCallerSession) SlashingHistory(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Accountability.Contract.SlashingHistory(&_Accountability.CallOpts, arg0, arg1)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _offender, uint256 _ntnReward) payable returns()
func (_Accountability *AccountabilityTransactor) DistributeRewards(opts *bind.TransactOpts, _offender common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "distributeRewards", _offender, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _offender, uint256 _ntnReward) payable returns()
func (_Accountability *AccountabilitySession) DistributeRewards(_offender common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.DistributeRewards(&_Accountability.TransactOpts, _offender, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _offender, uint256 _ntnReward) payable returns()
func (_Accountability *AccountabilityTransactorSession) DistributeRewards(_offender common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.DistributeRewards(&_Accountability.TransactOpts, _offender, _ntnReward)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *AccountabilityTransactor) Finalize(opts *bind.TransactOpts, _epochEnd bool) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "finalize", _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *AccountabilitySession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _Accountability.Contract.Finalize(&_Accountability.TransactOpts, _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *AccountabilityTransactorSession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _Accountability.Contract.Finalize(&_Accountability.TransactOpts, _epochEnd)
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactor) HandleAccusation(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "handleAccusation", _event)
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilitySession) HandleAccusation(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleAccusation(&_Accountability.TransactOpts, _event)
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactorSession) HandleAccusation(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleAccusation(&_Accountability.TransactOpts, _event)
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactor) HandleInnocenceProof(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "handleInnocenceProof", _event)
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilitySession) HandleInnocenceProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleInnocenceProof(&_Accountability.TransactOpts, _event)
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactorSession) HandleInnocenceProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleInnocenceProof(&_Accountability.TransactOpts, _event)
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactor) HandleMisbehaviour(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "handleMisbehaviour", _event)
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilitySession) HandleMisbehaviour(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleMisbehaviour(&_Accountability.TransactOpts, _event)
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *AccountabilityTransactorSession) HandleMisbehaviour(_event AccountabilityEvent) (*types.Transaction, error) {
	return _Accountability.Contract.HandleMisbehaviour(&_Accountability.TransactOpts, _event)
}

// SetBaseSlashingRates is a paid mutator transaction binding the contract method 0xa2652078.
//
// Solidity: function setBaseSlashingRates((uint256,uint256,uint256) _rates) returns()
func (_Accountability *AccountabilityTransactor) SetBaseSlashingRates(opts *bind.TransactOpts, _rates AccountabilityBaseSlashingRates) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "setBaseSlashingRates", _rates)
}

// SetBaseSlashingRates is a paid mutator transaction binding the contract method 0xa2652078.
//
// Solidity: function setBaseSlashingRates((uint256,uint256,uint256) _rates) returns()
func (_Accountability *AccountabilitySession) SetBaseSlashingRates(_rates AccountabilityBaseSlashingRates) (*types.Transaction, error) {
	return _Accountability.Contract.SetBaseSlashingRates(&_Accountability.TransactOpts, _rates)
}

// SetBaseSlashingRates is a paid mutator transaction binding the contract method 0xa2652078.
//
// Solidity: function setBaseSlashingRates((uint256,uint256,uint256) _rates) returns()
func (_Accountability *AccountabilityTransactorSession) SetBaseSlashingRates(_rates AccountabilityBaseSlashingRates) (*types.Transaction, error) {
	return _Accountability.Contract.SetBaseSlashingRates(&_Accountability.TransactOpts, _rates)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_Accountability *AccountabilityTransactor) SetCommittee(opts *bind.TransactOpts, _newCommittee []common.Address) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "setCommittee", _newCommittee)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_Accountability *AccountabilitySession) SetCommittee(_newCommittee []common.Address) (*types.Transaction, error) {
	return _Accountability.Contract.SetCommittee(&_Accountability.TransactOpts, _newCommittee)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_Accountability *AccountabilityTransactorSession) SetCommittee(_newCommittee []common.Address) (*types.Transaction, error) {
	return _Accountability.Contract.SetCommittee(&_Accountability.TransactOpts, _newCommittee)
}

// SetFactors is a paid mutator transaction binding the contract method 0x8975e977.
//
// Solidity: function setFactors((uint256,uint256,uint256) _factors) returns()
func (_Accountability *AccountabilityTransactor) SetFactors(opts *bind.TransactOpts, _factors AccountabilityFactors) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "setFactors", _factors)
}

// SetFactors is a paid mutator transaction binding the contract method 0x8975e977.
//
// Solidity: function setFactors((uint256,uint256,uint256) _factors) returns()
func (_Accountability *AccountabilitySession) SetFactors(_factors AccountabilityFactors) (*types.Transaction, error) {
	return _Accountability.Contract.SetFactors(&_Accountability.TransactOpts, _factors)
}

// SetFactors is a paid mutator transaction binding the contract method 0x8975e977.
//
// Solidity: function setFactors((uint256,uint256,uint256) _factors) returns()
func (_Accountability *AccountabilityTransactorSession) SetFactors(_factors AccountabilityFactors) (*types.Transaction, error) {
	return _Accountability.Contract.SetFactors(&_Accountability.TransactOpts, _factors)
}

// SetInnocenceProofSubmissionWindow is a paid mutator transaction binding the contract method 0x433afda8.
//
// Solidity: function setInnocenceProofSubmissionWindow(uint256 _window) returns()
func (_Accountability *AccountabilityTransactor) SetInnocenceProofSubmissionWindow(opts *bind.TransactOpts, _window *big.Int) (*types.Transaction, error) {
	return _Accountability.contract.Transact(opts, "setInnocenceProofSubmissionWindow", _window)
}

// SetInnocenceProofSubmissionWindow is a paid mutator transaction binding the contract method 0x433afda8.
//
// Solidity: function setInnocenceProofSubmissionWindow(uint256 _window) returns()
func (_Accountability *AccountabilitySession) SetInnocenceProofSubmissionWindow(_window *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.SetInnocenceProofSubmissionWindow(&_Accountability.TransactOpts, _window)
}

// SetInnocenceProofSubmissionWindow is a paid mutator transaction binding the contract method 0x433afda8.
//
// Solidity: function setInnocenceProofSubmissionWindow(uint256 _window) returns()
func (_Accountability *AccountabilityTransactorSession) SetInnocenceProofSubmissionWindow(_window *big.Int) (*types.Transaction, error) {
	return _Accountability.Contract.SetInnocenceProofSubmissionWindow(&_Accountability.TransactOpts, _window)
}

// AccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the Accountability contract.
type AccountabilityInnocenceProvenIterator struct {
	Event *AccountabilityInnocenceProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityInnocenceProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityInnocenceProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityInnocenceProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityInnocenceProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityInnocenceProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityInnocenceProven represents a InnocenceProven event raised by the Accountability contract.
type AccountabilityInnocenceProven struct {
	Offender common.Address
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_Accountability *AccountabilityFilterer) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityInnocenceProvenIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityInnocenceProvenIterator{contract: _Accountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
}

// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_Accountability *AccountabilityFilterer) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityInnocenceProven)
				if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_Accountability *AccountabilityFilterer) ParseInnocenceProven(log types.Log) (*AccountabilityInnocenceProven, error) {
	event := new(AccountabilityInnocenceProven)
	if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the Accountability contract.
type AccountabilityNewAccusationIterator struct {
	Event *AccountabilityNewAccusation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityNewAccusationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityNewAccusation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityNewAccusation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityNewAccusationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityNewAccusationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityNewAccusation represents a NewAccusation event raised by the Accountability contract.
type AccountabilityNewAccusation struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewAccusationIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityNewAccusationIterator{contract: _Accountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
}

// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityNewAccusation)
				if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_Accountability *AccountabilityFilterer) ParseNewAccusation(log types.Log) (*AccountabilityNewAccusation, error) {
	event := new(AccountabilityNewAccusation)
	if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the Accountability contract.
type AccountabilityNewFaultProofIterator struct {
	Event *AccountabilityNewFaultProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityNewFaultProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityNewFaultProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityNewFaultProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityNewFaultProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityNewFaultProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityNewFaultProof represents a NewFaultProof event raised by the Accountability contract.
type AccountabilityNewFaultProof struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Epoch    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_Accountability *AccountabilityFilterer) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewFaultProofIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityNewFaultProofIterator{contract: _Accountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
}

// WatchNewFaultProof is a free log subscription operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_Accountability *AccountabilityFilterer) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityNewFaultProof)
				if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewFaultProof is a log parse operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_Accountability *AccountabilityFilterer) ParseNewFaultProof(log types.Log) (*AccountabilityNewFaultProof, error) {
	event := new(AccountabilityNewFaultProof)
	if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the Accountability contract.
type AccountabilitySlashingEventIterator struct {
	Event *AccountabilitySlashingEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilitySlashingEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilitySlashingEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilitySlashingEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilitySlashingEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilitySlashingEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilitySlashingEvent represents a SlashingEvent event raised by the Accountability contract.
type AccountabilitySlashingEvent struct {
	Validator    common.Address
	Amount       *big.Int
	ReleaseBlock *big.Int
	IsJailbound  bool
	EventId      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_Accountability *AccountabilityFilterer) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilitySlashingEventIterator, error) {

	logs, sub, err := _Accountability.contract.FilterLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return &AccountabilitySlashingEventIterator{contract: _Accountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
}

// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_Accountability *AccountabilityFilterer) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilitySlashingEvent) (event.Subscription, error) {

	logs, sub, err := _Accountability.contract.WatchLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilitySlashingEvent)
				if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_Accountability *AccountabilityFilterer) ParseSlashingEvent(log types.Log) (*AccountabilitySlashingEvent, error) {
	event := new(AccountabilitySlashingEvent)
	if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityTestMetaData contains all meta data concerning the AccountabilityTest contract.
var AccountabilityTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.BaseSlashingRates\",\"name\":\"baseSlashingRates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"history\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jail\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Factors\",\"name\":\"factors\",\"type\":\"tuple\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.BaseSlashingRates\",\"name\":\"baseSlashingRates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"history\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jail\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Factors\",\"name\":\"factors\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleMisbehaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidFaultProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performSlashingTasks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoteGuiltyAccusations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.BaseSlashingRates\",\"name\":\"_rates\",\"type\":\"tuple\"}],\"name\":\"setBaseSlashingRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newCommittee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"history\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jail\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Factors\",\"name\":\"_factors\",\"type\":\"tuple\"}],\"name\":\"setFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_window\",\"type\":\"uint256\"}],\"name\":\"setInnocenceProofSubmissionWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_epochOffencesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"0af86dc2": "addBeneficiary(address,address)",
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"1e85f2e5": "handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"e05f8786": "handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"a48a9b50": "handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"239a49ba": "handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"51772af9": "handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"653cd199": "handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"931c7c68": "history(address)",
		"633b5e5e": "performSlashingTasks()",
		"7ec8be1d": "promoteGuiltyAccusations()",
		"a2652078": "setBaseSlashingRates((uint256,uint256,uint256))",
		"e08b14ed": "setCommittee(address[])",
		"8975e977": "setFactors((uint256,uint256,uint256))",
		"433afda8": "setInnocenceProofSubmissionWindow(uint256)",
		"0d20e5ea": "slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256),uint256,uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "0x608060405260006013553480156200001657600080fd5b5060405162004b9b38038062004b9b833981016040819052620000399162000520565b600080546001600160a01b0319166001600160a01b0384161790556020810151829082906200006890620001fe565b604081015162000078906200034a565b60008060009054906101000a90046001600160a01b03166001600160a01b031663ab8f6ffe6040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000f791908101906200059d565b905060005b8151811015620001bd57600e8282815181106200011d576200011d6200073b565b6020908102919091018101515182546001808201855560009485529284200180546001600160a01b0319166001600160a01b0390921691909117905583519091600f918590859081106200017557620001756200073b565b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620001b48162000767565b915050620000fc565b505080516002556020808201518051600355808201516004556040908101516005559182015180516006559081015160075501516008555062000897915050565b602081015181511115620002655760405162461bcd60e51b8152602060048201526024808201527f736c617368696e6720726174653a206c6f772063616e6e6f7420657863656564604482015263081b5a5960e21b60648201526084015b60405180910390fd5b806040015181602001511115620002cd5760405162461bcd60e51b815260206004820152602560248201527f736c617368696e6720726174653a206d69642063616e6e6f7420657863656564604482015264040d0d2ced60db1b60648201526084016200025c565b620002db6004600a62000882565b81604001511115620003475760405162461bcd60e51b815260206004820152602e60248201527f736c617368696e6720726174653a20686967682063616e6e6f7420657863656560448201526d321039b1b0b632903330b1ba37b960911b60648201526084016200025c565b50565b620003586004600a62000882565b81511115620003d05760405162461bcd60e51b815260206004820152603960248201527f636f6c6c7573696f6e20666163746f722063616e6e6f7420657863656564207360448201527f6c617368696e672072617465207363616c6520666163746f720000000000000060648201526084016200025c565b620003de6004600a62000882565b81602001511115620003475760405162461bcd60e51b815260206004820152603760248201527f686973746f727920666163746f722063616e6e6f742065786365656420736c6160448201527f7368696e672072617465207363616c6520666163746f7200000000000000000060648201526084016200025c565b6001600160a01b03811681146200034757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620004aa57620004aa6200046f565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004db57620004db6200046f565b604052919050565b600060608284031215620004f657600080fd5b6200050062000485565b905081518152602082015160208201526040820151604082015292915050565b6000808284036101008112156200053657600080fd5b8351620005438162000459565b925060e0601f19820112156200055857600080fd5b506200056362000485565b60208401518152620005798560408601620004e3565b60208201526200058d8560a08601620004e3565b6040820152809150509250929050565b60006020808385031215620005b157600080fd5b82516001600160401b0380821115620005c957600080fd5b818501915085601f830112620005de57600080fd5b815181811115620005f357620005f36200046f565b8060051b62000604858201620004b0565b91825283810185019185810190898411156200061f57600080fd5b86860192505b838310156200072e578251858111156200063f5760008081fd5b86016060601f19828d038101821315620006595760008081fd5b6200066362000485565b8a840151620006728162000459565b81526040848101518c830152928401519289841115620006925760008081fd5b83850194508e603f860112620006aa57600093508384fd5b8b850151935089841115620006c357620006c36200046f565b620006d58c84601f87011601620004b0565b92508383528e81858701011115620006ed5760008081fd5b60005b848110156200070d578581018201518482018e01528c01620006f0565b5060009383018c019390935291820152835250918601919086019062000625565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016200077c576200077c62000751565b5060010190565b600181815b80851115620007c4578160001904821115620007a857620007a862000751565b80851615620007b657918102915b93841c939080029062000788565b509250929050565b600082620007dd575060016200087c565b81620007ec575060006200087c565b8160018114620008055760028114620008105762000830565b60019150506200087c565b60ff84111562000824576200082462000751565b50506001821b6200087c565b5060208310610133831016604e8410600b841016171562000855575081810a6200087c565b62000861838362000783565b806000190482111562000878576200087862000751565b0290505b92915050565b6000620008908383620007cc565b9392505050565b6142f480620008a76000396000f3fe6080604052600436106101665760003560e01c806379502c55116100d1578063a26520781161008a578063bebaa8fc11610064578063bebaa8fc146104f2578063e05f87861461051f578063e08b14ed1461053f578063e7bb0b521461055f57600080fd5b8063a26520781461049f578063a48a9b50146104bf578063a8031a1d146104df57600080fd5b806379502c55146103645780637ccecadd146103cb5780637ec8be1d146104025780638975e97714610417578063931c7c68146104375780639cb22b061461047257600080fd5b80634108a95a116101235780634108a95a1461029f578063433afda8146102cf57806351772af9146102ef578063633b5e5e1461030f578063653cd199146103245780636c9789b01461034457600080fd5b8063015677391461016b5780630af86dc2146101be5780630b791430146102095780630d20e5ea1461023f5780631e85f2e51461025f578063239a49ba1461027f575b600080fd5b34801561017757600080fd5b506101a16101863660046134a2565b6009602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ca57600080fd5b506102076101d93660046134c6565b6001600160a01b03918216600090815260096020526040902080546001600160a01b03191691909216179055565b005b34801561021557600080fd5b506102296102243660046134ff565b610597565b6040516101b59a999897969594939291906135a2565b34801561024b57600080fd5b5061020761025a36600461380c565b610694565b34801561026b57600080fd5b5061020761027a36600461385a565b6106a4565b34801561028b57600080fd5b5061020761029a36600461385a565b61077b565b3480156102ab57600080fd5b506102bf6102ba366004613897565b610784565b60405190151581526020016101b5565b3480156102db57600080fd5b506102076102ea3660046134ff565b6108ac565b3480156102fb57600080fd5b5061020761030a36600461385a565b610944565b34801561031b57600080fd5b5061020761094d565b34801561033057600080fd5b5061020761033f36600461385a565b610957565b34801561035057600080fd5b5061020761035f3660046138e3565b610960565b34801561037057600080fd5b50600254604080516060808201835260035482526004546020808401919091526005548385015283519182018452600654825260075490820152600854928101929092526103bc929183565b6040516101b593929190613900565b3480156103d757600080fd5b506103eb6103e6366004613897565b6109a0565b6040805192151583526020830191909152016101b5565b34801561040e57600080fd5b50610207610b6b565b34801561042357600080fd5b506102076104323660046139a4565b610b73565b34801561044357600080fd5b506104646104523660046134a2565b600b6020526000908152604090205481565b6040519081526020016101b5565b34801561047e57600080fd5b5061049261048d3660046134a2565b610c25565b6040516101b59190613a73565b3480156104ab57600080fd5b506102076104ba3660046139a4565b610e27565b3480156104cb57600080fd5b506102076104da36600461385a565b610ed9565b6102076104ed366004613a86565b610fae565b3480156104fe57600080fd5b5061051261050d3660046134a2565b611227565b6040516101b59190613ab2565b34801561052b57600080fd5b5061020761053a36600461385a565b6114a2565b34801561054b57600080fd5b5061020761055a366004613b14565b611579565b34801561056b57600080fd5b5061046461057a366004613a86565b601060209081526000928352604080842090915290825290205481565b600181815481106105a757600080fd5b600091825260209091206008909102018054600182015460028301805460ff808516965061010085041694620100009094046001600160a01b039081169493169291906105f390613bc6565b80601f016020809104026020016040519081016040528092919081815260200182805461061f90613bc6565b801561066c5780601f106106415761010080835404028352916020019161066c565b820191906000526020600020905b81548152906001019060200180831161064f57829003601f168201915b505050505090806003015490806004015490806005015490806006015490806007015490508a565b61069f83838361169a565b505050565b336000908152600f602052604090205460ff1615156001146106e15760405162461bcd60e51b81526004016106d890613c00565b60405180910390fd5b60408101516001600160a01b0316331461070d5760405162461bcd60e51b81526004016106d890613c49565b60018151600281111561072257610722613518565b1461076f5760405162461bcd60e51b815260206004820152601f60248201527f77726f6e67206576656e74207479706520666f722061636375736174696f6e0060448201526064016106d8565b61077881611915565b50565b61077881611a8b565b60008083600981111561079957610799613518565b101580156107b9575060098360098111156107b6576107b6613518565b11155b6107fd5760405162461bcd60e51b81526020600482015260156024820152741c9d5b19481a59081b5d5cdd081899481d985b1a59605a1b60448201526064016106d8565b600061080884611d11565b600080546040516396b477cb60e01b81526004810187905292935090916001600160a01b03909116906396b477cb90602401602060405180830381865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190613c80565b6001600160a01b03871660009081526010602090815260408083209383529290522054919091109150509392505050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa1580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190613ca4565b6001600160a01b03161461093f5760405162461bcd60e51b81526004016106d890613cc1565b600255565b61077881611e8c565b61095561213b565b565b61077881612468565b6000546001600160a01b0316331461098a5760405162461bcd60e51b81526004016106d890613cf8565b61099261276d565b80156107785761077861213b565b600080808460098111156109b6576109b6613518565b101580156109d6575060098460098111156109d3576109d3613518565b11155b610a1a5760405162461bcd60e51b81526020600482015260156024820152741c9d5b19481a59081b5d5cdd081899481d985b1a59605a1b60448201526064016106d8565b6000610a2585611d11565b600080546040516396b477cb60e01b81526004810188905292935090916001600160a01b03909116906396b477cb90602401602060405180830381865afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a989190613c80565b6001600160a01b03881660009081526010602090815260408083208484529091529020549091508211610ad2576000935060009250610b61565b6001600160a01b0387166000908152600c602052604090205415610b58576001600160a01b0387166000908152600c6020526040812054600190610b17908290613d56565b81548110610b2757610b27613d69565b90600052602060002090600802019050600094506002600001548160040154610b509190613d7f565b935050610b61565b60019350600092505b5050935093915050565b61095561276d565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190613ca4565b6001600160a01b031614610c065760405162461bcd60e51b81526004016106d890613cc1565b610c0f81612b16565b8051600655602081015160075560400151600855565b610c2d613321565b6001600160a01b0382166000908152600c6020526040902054610c825760405162461bcd60e51b815260206004820152600d60248201526c37379030b1b1bab9b0ba34b7b760991b60448201526064016106d8565b6001600160a01b0382166000908152600c6020526040902054600190610ca9908290613d56565b81548110610cb957610cb9613d69565b600091825260209091206040805161014081019091526008909202018054829060ff166002811115610ced57610ced613518565b6002811115610cfe57610cfe613518565b81528154602090910190610100900460ff166009811115610d2157610d21613518565b6009811115610d3257610d32613518565b815281546001600160a01b0362010000909104811660208301526001830154166040820152600282018054606090920191610d6c90613bc6565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9890613bc6565b8015610de55780601f10610dba57610100808354040283529160200191610de5565b820191906000526020600020905b815481529060010190602001808311610dc857829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190613ca4565b6001600160a01b031614610eba5760405162461bcd60e51b81526004016106d890613cc1565b610ec381612c1d565b8051600355602081015160045560400151600555565b336000908152600f602052604090205460ff161515600114610f0d5760405162461bcd60e51b81526004016106d890613c00565b60408101516001600160a01b03163314610f395760405162461bcd60e51b81526004016106d890613c49565b600081516002811115610f4e57610f4e613518565b14610fa55760405162461bcd60e51b815260206004820152602160248201527f77726f6e67206576656e74207479706520666f72206d69736265686176696f756044820152603960f91b60648201526084016106d8565b61077881612d5a565b6000546001600160a01b03163314610fd85760405162461bcd60e51b81526004016106d890613cf8565b600080546001600160a01b03848116835260096020526040808420549051630c825d9760e11b81529082166004820152911690631904bb2e90602401600060405180830381865afa158015611031573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110599190810190613de6565b600080546020830151604051630f7fcc5160e41b81526001600160a01b039182166004820152602481018790526044810193909352929350919091169063f7fcc51090606401600060405180830381600087803b1580156110b957600080fd5b505af11580156110cd573d6000803e3d6000fd5b50505050600081600001516001600160a01b0316346108fc90604051600060405180830381858888f193505050503d8060008114611127576040519150601f19603f3d011682016040523d82523d6000602084013e61112c565b606091505b50509050806111fd5760008054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190613ca4565b6001600160a01b03163460405160006040518083038185875af1925050503d80600081146111f4576040519150601f19603f3d011682016040523d82523d6000602084013e6111f9565b606091505b5050505b5050506001600160a01b0316600090815260096020526040902080546001600160a01b0319169055565b6001600160a01b0381166000908152600a60205260408120546060919067ffffffffffffffff81111561125c5761125c613618565b60405190808252806020026020018201604052801561129557816020015b611282613321565b81526020019060019003908161127a5790505b50905060005b6001600160a01b0384166000908152600a602052604090205481101561149b576001600160a01b0384166000908152600a60205260409020805460019190839081106112e9576112e9613d69565b90600052602060002001548154811061130457611304613d69565b600091825260209091206040805161014081019091526008909202018054829060ff16600281111561133857611338613518565b600281111561134957611349613518565b81528154602090910190610100900460ff16600981111561136c5761136c613518565b600981111561137d5761137d613518565b815281546001600160a01b03620100009091048116602083015260018301541660408201526002820180546060909201916113b790613bc6565b80601f01602080910402602001604051908101604052809291908181526020018280546113e390613bc6565b80156114305780601f1061140557610100808354040283529160200191611430565b820191906000526020600020905b81548152906001019060200180831161141357829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505082828151811061147d5761147d613d69565b6020026020010181905250808061149390613f59565b91505061129b565b5092915050565b336000908152600f602052604090205460ff1615156001146114d65760405162461bcd60e51b81526004016106d890613c00565b60408101516001600160a01b031633146115025760405162461bcd60e51b81526004016106d890613c49565b60028151600281111561151757611517613518565b146115705760405162461bcd60e51b8152602060048201526024808201527f77726f6e67206576656e74207479706520666f7220696e6e6f63656e636520706044820152633937b7b360e11b60648201526084016106d8565b61077881612f55565b6000546001600160a01b031633146115a35760405162461bcd60e51b81526004016106d890613cf8565b611606600d8054806020026020016040519081016040528092919081815260200182805480156115fc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115de575b505050505061309b565b611669600e80548060200260200160405190810160405280929190818152602001828054801561165f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611641575b5050505050613167565b600e805461167991600d91613387565b5061168381613167565b805161169690600e9060208401906133d7565b5050565b60608301516040808501516001600160a01b038084166000818152600960205284812080549484166001600160a01b03199095169490941790935591549251632dbeb61b60e11b815260048101929092526003921690635b7d6c3690602401602060405180830381865afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190613f72565b600581111561174b5761174b613518565b036117565750505050565b600061176d6117688660200151611d11565b61324d565b6007546001600160a01b0384166000908152600b6020526040812054929350916117979190613f8d565b6006546117a49087613f8d565b6117ae9084613d7f565b6117b89190613d7f565b6001600160a01b0384166000908152600b6020526040812080549293506001929091906117e6908490613d7f565b90915550506001600160a01b0383166000908152600b6020526040812054600854869161181291613f8d565b61181c9190613f8d565b60008054604051630915a09160e11b81529293509091829182916001600160a01b039091169063122b412290611860908a9089908990600290600390600401613fb4565b6060604051808303816000875af115801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a39190613ff6565b60a0808e0151604080516001600160a01b038e168152602081018790529081018590528315156060820152608081019190915293965091945092507f6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9910160405180910390a150505050505050505050565b600080600080600061192c60fc87608001516132ba565b94509450945094509450846119835760405162461bcd60e51b815260206004820152601e60248201527f6661696c65642061636375736174696f6e20766572696669636174696f6e000060448201526064016106d8565b85606001516001600160a01b0316846001600160a01b0316146119b85760405162461bcd60e51b81526004016106d89061402f565b856020015160098111156119ce576119ce613518565b83146119ec5760405162461bcd60e51b81526004016106d89061405a565b600080546040516396b477cb60e01b8152600481018590526001600160a01b03909116906396b477cb90602401602060405180830381865afa158015611a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5a9190613c80565b60c0880184905260e088018190524361010089015261012088018390529050611a8287611a8b565b50505050505050565b60608101516001600160a01b03166000908152600c602052604090205415611af55760405162461bcd60e51b815260206004820181905260248201527f616c72656164792070726f63657373696e6720616e2061636375736174696f6e60448201526064016106d8565b6000611b048260200151611d11565b60608301516001600160a01b0316600090815260106020908152604080832060e087015184529091529020549091508111611b515760405162461bcd60e51b81526004016106d890614084565b6001805460a0840181905280820182556000829052835160089091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180548593919291839160ff191690836002811115611baf57611baf613518565b021790555060208201518154829061ff001916610100836009811115611bd757611bd7613518565b02179055506040820151815462010000600160b01b031916620100006001600160a01b039283160217825560608301516001830180546001600160a01b0319169190921617905560808201516002820190611c32908261410e565b5060a082810151600383015560c0830151600483015560e08301516005830155610100830151600683015561012090920151600790910155820151611c78906001613d7f565b60608301516001600160a01b03166000908152600c602052604090205560a0820151601290611ca8906001613d7f565b815460018101835560009283526020928390200155606083015160a084015160408051858152938401919091526001600160a01b03909116917f2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba4035191015b60405180910390a25050565b60006009826009811115611d2757611d27613518565b03611d355760015b92915050565b6000826009811115611d4957611d49613518565b03611d55576002611d2f565b6001826009811115611d6957611d69613518565b03611d75576002611d2f565b6002826009811115611d8957611d89613518565b03611d95576002611d2f565b6003826009811115611da957611da9613518565b03611db5576002611d2f565b6004826009811115611dc957611dc9613518565b03611dd5576002611d2f565b6005826009811115611de957611de9613518565b03611df5576002611d2f565b6006826009811115611e0957611e09613518565b03611e15576002611d2f565b6007826009811115611e2957611e29613518565b03611e35576003611d2f565b6008826009811115611e4957611e49613518565b03611e55576003611d2f565b60405162461bcd60e51b815260206004820152600c60248201526b756e6b6e6f776e2072756c6560a01b60448201526064016106d8565b6000611e9b8260200151611d11565b60608301516001600160a01b0316600090815260106020908152604080832060e087015184529091529020549091508111611ee85760405162461bcd60e51b81526004016106d890614084565b6001805460a0840181905280820182556000829052835160089091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180548593919291839160ff191690836002811115611f4657611f46613518565b021790555060208201518154829061ff001916610100836009811115611f6e57611f6e613518565b02179055506040820151815462010000600160b01b031916620100006001600160a01b039283160217825560608301516001830180546001600160a01b0319169190921617905560808201516002820190611fc9908261410e565b5060a082810151600383015560c083015160048084019190915560e08085015160058501556101008501516006850155610120909401516007909301929092556060850180516001600160a01b039081166000908152600a60209081526040808320958a018051875460018181018a559886528486200155805160118054988901815585527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c689097019690965584518416835260108252808320978a0151835296815286822088905592519351905486516332765ebd60e21b81529651948316967f5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d79689969395929094169363c9d97af49382820193929091908290030181865afa1580156120fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121209190613c80565b60408051938452602084019290925290820152606001611d05565b60008054604080516332765ebd60e21b8152905183926001600160a01b03169163c9d97af49160048083019260209291908290030181865afa158015612185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a99190613c80565b905060005b60115481101561222057816001601183815481106121ce576121ce613d69565b9060005260206000200154815481106121e9576121e9613d69565b9060005260206000209060080201600501540361220e5761220b600184613d7f565b92505b8061221881613f59565b9150506121ae565b5060008060009054906101000a90046001600160a01b03166001600160a01b0316630aac2da16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122999190613c80565b905060005b60115481101561245b576124496001601183815481106122c0576122c0613d69565b9060005260206000200154815481106122db576122db613d69565b600091825260209091206040805161014081019091526008909202018054829060ff16600281111561230f5761230f613518565b600281111561232057612320613518565b81528154602090910190610100900460ff16600981111561234357612343613518565b600981111561235457612354613518565b815281546001600160a01b036201000090910481166020830152600183015416604082015260028201805460609092019161238e90613bc6565b80601f01602080910402602001604051908101604052809291908181526020018280546123ba90613bc6565b80156124075780601f106123dc57610100808354040283529160200191612407565b820191906000526020600020905b8154815290600101906020018083116123ea57829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050858461169a565b8061245381613f59565b91505061229e565b5061069f6011600061342c565b60608101516001600160a01b03166000908152600c6020526040812054908190036124d55760405162461bcd60e51b815260206004820152601860248201527f6e6f206173736f6369617465642061636375736174696f6e000000000000000060448201526064016106d8565b816020015160098111156124eb576124eb613518565b60016124f78184613d56565b8154811061250757612507613d69565b6000918252602090912060089091020154610100900460ff16600981111561253157612531613518565b1461258e5760405162461bcd60e51b815260206004820152602760248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152661c9d5b19481a5960ca1b60648201526084016106d8565b60c0820151600161259f8184613d56565b815481106125af576125af613d69565b9060005260206000209060080201600401541461261c5760405162461bcd60e51b815260206004820152602560248201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e20604482015264626c6f636b60d81b60648201526084016106d8565b610120820151600161262e8184613d56565b8154811061263e5761263e613d69565b906000526020600020906008020160070154146126a95760405162461bcd60e51b8152602060048201526024808201527f756e6d61746368696e672070726f6f6620616e642061636375736174696f6e206044820152630d0c2e6d60e31b60648201526084016106d8565b6013545b6012548110156127135781601282815481106126cb576126cb613d69565b906000526020600020015403612701576000601282815481106126f0576126f0613d69565b600091825260209091200155612713565b8061270b81613f59565b9150506126ad565b506060820180516001600160a01b039081166000908152600c602090815260408083208390559351935191825292909116917f1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f9101611d05565b60135460008054604080516332765ebd60e21b815290516001600160a01b039092169163c9d97af4916004808201926020929091908290030181865afa1580156127bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127df9190613c80565b90505b601254821015612b105760006012838154811061280157612801613d69565b906000526020600020015490508060000361281c5750612afe565b612827600182613d56565b905060006001828154811061283e5761283e613d69565b600091825260209091206040805161014081019091526008909202018054829060ff16600281111561287257612872613518565b600281111561288357612883613518565b81528154602090910190610100900460ff1660098111156128a6576128a6613518565b60098111156128b7576128b7613518565b815281546001600160a01b03620100009091048116602083015260018301541660408201526002820180546060909201916128f190613bc6565b80601f016020809104026020016040519081016040528092919081815260200182805461291d90613bc6565b801561296a5780601f1061293f5761010080835404028352916020019161296a565b820191906000526020600020905b81548152906001019060200180831161294d57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050436002600001548261010001516129be9190613d7f565b11156129cb575050612b10565b60608101516001600160a01b03166000908152600c6020908152604082208290558201516129f890611d11565b60608301516001600160a01b0316600090815260106020908152604080832060e087015184529091529020549091508111612a3557505050612afe565b606082810180516001600160a01b03908116600090815260106020908152604080832060e089015184528252808320879055845184168352600a8252808320805460018082018355918552838520018a90556011805491820181559093527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c689092018890559251815186815293840188905290830188905216917f5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7910160405180910390a25050505b81612b0881613f59565b9250506127e2565b50601355565b612b226004600a6142b2565b81511115612b985760405162461bcd60e51b815260206004820152603960248201527f636f6c6c7573696f6e20666163746f722063616e6e6f7420657863656564207360448201527f6c617368696e672072617465207363616c6520666163746f720000000000000060648201526084016106d8565b612ba46004600a6142b2565b816020015111156107785760405162461bcd60e51b815260206004820152603760248201527f686973746f727920666163746f722063616e6e6f742065786365656420736c6160448201527f7368696e672072617465207363616c6520666163746f7200000000000000000060648201526084016106d8565b602081015181511115612c7e5760405162461bcd60e51b8152602060048201526024808201527f736c617368696e6720726174653a206c6f772063616e6e6f7420657863656564604482015263081b5a5960e21b60648201526084016106d8565b806040015181602001511115612ce45760405162461bcd60e51b815260206004820152602560248201527f736c617368696e6720726174653a206d69642063616e6e6f7420657863656564604482015264040d0d2ced60db1b60648201526084016106d8565b612cf06004600a6142b2565b816040015111156107785760405162461bcd60e51b815260206004820152602e60248201527f736c617368696e6720726174653a20686967682063616e6e6f7420657863656560448201526d321039b1b0b632903330b1ba37b960911b60648201526084016106d8565b6000806000806000612d7160fe87608001516132ba565b9450945094509450945084612dc85760405162461bcd60e51b815260206004820152601960248201527f6661696c65642070726f6f6620766572696669636174696f6e0000000000000060448201526064016106d8565b85606001516001600160a01b0316846001600160a01b031614612dfd5760405162461bcd60e51b81526004016106d89061402f565b85602001516009811115612e1357612e13613518565b8314612e315760405162461bcd60e51b81526004016106d89061405a565b438210612e795760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b60448201526064016106d8565b60008211612ebf5760405162461bcd60e51b815260206004820152601360248201527263616e27742062652061742067656e6573697360681b60448201526064016106d8565b600080546040516396b477cb60e01b8152600481018590526001600160a01b03909116906396b477cb90602401602060405180830381865afa158015612f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2d9190613c80565b60c0880184905260e088018190524361010089015261012088018390529050611a8287611e8c565b6000806000806000612f6c60fd87608001516132ba565b9450945094509450945084612fc35760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420696e6e6f63656e636520766572696669636174696f6e00000060448201526064016106d8565b85606001516001600160a01b0316846001600160a01b031614612ff85760405162461bcd60e51b81526004016106d89061402f565b8560200151600981111561300e5761300e613518565b831461302c5760405162461bcd60e51b81526004016106d89061405a565b4382106130745760405162461bcd60e51b815260206004820152601660248201527563616e277420626520696e207468652066757475726560501b60448201526064016106d8565b60c0860182905261012086018190524361010087015261309386612468565b505050505050565b6000546001600160a01b031633146130c55760405162461bcd60e51b81526004016106d890613cf8565b60005b815181101561169657600f60008383815181106130e7576130e7613d69565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561315557600f600083838151811061312957613129613d69565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191690555b8061315f81613f59565b9150506130c8565b6000546001600160a01b031633146131915760405162461bcd60e51b81526004016106d890613cf8565b60005b815181101561169657600f60008383815181106131b3576131b3613d69565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16151560011461323b576001600f60008484815181106131fb576131fb613d69565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8061324581613f59565b915050613194565b60006001820361325f57505060035490565b6002820361326f57505060045490565b6003820361327f57505060055490565b60405162461bcd60e51b815260206004820152601060248201526f756e6b6e6f776e20736576657269747960801b60448201526064016106d8565b600080600080600080865160206132d19190613d7f565b90506132db61344a565b60a081838a8c5afa6132ec57600080fd5b80516001036132fa57600196505b602081015160408201516060830151608090930151989b919a509850909695509350505050565b60408051610140810190915280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b8280548282559060005260206000209081019282156133c75760005260206000209182015b828111156133c75782548255916001019190600101906133ac565b506133d3929150613468565b5090565b8280548282559060005260206000209081019282156133c7579160200282015b828111156133c757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906133f7565b50805460008255906000526020600020908101906107789190613468565b6040518060a001604052806005906020820280368337509192915050565b5b808211156133d35760008155600101613469565b6001600160a01b038116811461077857600080fd5b803561349d8161347d565b919050565b6000602082840312156134b457600080fd5b81356134bf8161347d565b9392505050565b600080604083850312156134d957600080fd5b82356134e48161347d565b915060208301356134f48161347d565b809150509250929050565b60006020828403121561351157600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061353e5761353e613518565b9052565b600a811061353e5761353e613518565b60005b8381101561356d578181015183820152602001613555565b50506000910152565b6000815180845261358e816020860160208601613552565b601f01601f19169290920160200192915050565b60006101406135b1838e61352e565b6135be602084018d613542565b6001600160a01b038b811660408501528a166060840152608083018190526135e88184018a613576565b60a0840198909852505060c081019490945260e08401929092526101008301526101209091015295945050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561365257613652613618565b60405290565b604051610260810167ffffffffffffffff8111828210171561365257613652613618565b604051601f8201601f1916810167ffffffffffffffff811182821017156136a5576136a5613618565b604052919050565b80356003811061349d57600080fd5b8035600a811061349d57600080fd5b600067ffffffffffffffff8211156136e5576136e5613618565b50601f01601f191660200190565b600082601f83011261370457600080fd5b8135613717613712826136cb565b61367c565b81815284602083860101111561372c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000610140828403121561375c57600080fd5b61376461362e565b905061376f826136ad565b815261377d602083016136bc565b602082015261378e60408301613492565b604082015261379f60608301613492565b6060820152608082013567ffffffffffffffff8111156137be57600080fd5b6137ca848285016136f3565b60808301525060a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b60008060006060848603121561382157600080fd5b833567ffffffffffffffff81111561383857600080fd5b61384486828701613749565b9660208601359650604090950135949350505050565b60006020828403121561386c57600080fd5b813567ffffffffffffffff81111561388357600080fd5b61388f84828501613749565b949350505050565b6000806000606084860312156138ac57600080fd5b83356138b78161347d565b92506138c5602085016136bc565b9150604084013590509250925092565b801515811461077857600080fd5b6000602082840312156138f557600080fd5b81356134bf816138d5565b83815260e0810161392860208301858051825260208082015190830152604090810151910152565b82516080830152602083015160a0830152604083015160c083015261388f565b60006060828403121561395a57600080fd5b6040516060810181811067ffffffffffffffff8211171561397d5761397d613618565b80604052508091508235815260208301356020820152604083013560408201525092915050565b6000606082840312156139b657600080fd5b6134bf8383613948565b60006101406139d084845161352e565b60208301516139e26020860182613542565b5060408301516139fd60408601826001600160a01b03169052565b506060830151613a1860608601826001600160a01b03169052565b506080830151816080860152613a3082860182613576565b91505060a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152508091505092915050565b6020815260006134bf60208301846139c0565b60008060408385031215613a9957600080fd5b8235613aa48161347d565b946020939093013593505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613b0757603f19888603018452613af58583516139c0565b94509285019290850190600101613ad9565b5092979650505050505050565b60006020808385031215613b2757600080fd5b823567ffffffffffffffff80821115613b3f57600080fd5b818501915085601f830112613b5357600080fd5b813581811115613b6557613b65613618565b8060051b9150613b7684830161367c565b8181529183018401918481019088841115613b9057600080fd5b938501935b83851015613bba5784359250613baa8361347d565b8282529385019390850190613b95565b98975050505050505050565b600181811c90821680613bda57607f821691505b602082108103613bfa57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526029908201527f66756e6374696f6e207265737472696374656420746f206120636f6d6d69747460408201526832b29036b2b6b132b960b91b606082015260800190565b6020808252601d908201527f6576656e74207265706f72746572206d7573742062652063616c6c6572000000604082015260600190565b600060208284031215613c9257600080fd5b5051919050565b805161349d8161347d565b600060208284031215613cb657600080fd5b81516134bf8161347d565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60208082526028908201527f66756e6374696f6e207265737472696374656420746f204175746f6e6974792060408201526718dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611d2f57611d2f613d40565b634e487b7160e01b600052603260045260246000fd5b80820180821115611d2f57611d2f613d40565b600082601f830112613da357600080fd5b8151613db1613712826136cb565b818152846020838601011115613dc657600080fd5b61388f826020830160208701613552565b80516006811061349d57600080fd5b600060208284031215613df857600080fd5b815167ffffffffffffffff80821115613e1057600080fd5b908301906102608286031215613e2557600080fd5b613e2d613658565b613e3683613c99565b8152613e4460208401613c99565b6020820152613e5560408401613c99565b6040820152606083015182811115613e6c57600080fd5b613e7887828601613d92565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160808401518183015250610180613ee4818501613c99565b908201526101a083810151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015183811115613f2857600080fd5b613f3488828701613d92565b8284015250506102409150613f4a828401613dd7565b91810191909152949350505050565b600060018201613f6b57613f6b613d40565b5060010190565b600060208284031215613f8457600080fd5b6134bf82613dd7565b8082028115828204841417611d2f57611d2f613d40565b6006811061353e5761353e613518565b6001600160a01b0386168152602081018590526040810184905260a08101613fdf6060830185613fa4565b613fec6080830184613fa4565b9695505050505050565b60008060006060848603121561400b57600080fd5b83519250602084015191506040840151614024816138d5565b809150509250925092565b6020808252601190820152700decccccadcc8cae440dad2e6dac2e8c6d607b1b604082015260600190565b60208082526010908201526f0e4ead8ca40d2c840dad2e6dac2e8c6d60831b604082015260600190565b60208082526024908201527f616c726561647920736c6173686564206174207468652070726f6f66277320656040820152630e0dec6d60e31b606082015260800190565b601f82111561069f57600081815260208120601f850160051c810160208610156140ef5750805b601f850160051c820191505b81811015613093578281556001016140fb565b815167ffffffffffffffff81111561412857614128613618565b61413c816141368454613bc6565b846140c8565b602080601f83116001811461417157600084156141595750858301515b600019600386901b1c1916600185901b178555613093565b600085815260208120601f198616915b828110156141a057888601518255948401946001909101908401614181565b50858210156141be5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600181815b808511156142095781600019048211156141ef576141ef613d40565b808516156141fc57918102915b93841c93908002906141d3565b509250929050565b60008261422057506001611d2f565b8161422d57506000611d2f565b8160018114614243576002811461424d57614269565b6001915050611d2f565b60ff84111561425e5761425e613d40565b50506001821b611d2f565b5060208310610133831016604e8410600b841016171561428c575081810a611d2f565b61429683836141ce565b80600019048211156142aa576142aa613d40565b029392505050565b60006134bf838361421156fea2646970667358221220e0c8f58e391447142179fd2b2eee1ebec5d462322bd9b0e20260f85af4c62b3e64736f6c63430008150033",
}

// AccountabilityTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityTestMetaData.ABI instead.
var AccountabilityTestABI = AccountabilityTestMetaData.ABI

// Deprecated: Use AccountabilityTestMetaData.Sigs instead.
// AccountabilityTestFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityTestFuncSigs = AccountabilityTestMetaData.Sigs

// AccountabilityTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityTestMetaData.Bin instead.
var AccountabilityTestBin = AccountabilityTestMetaData.Bin

// DeployAccountabilityTest deploys a new Ethereum contract, binding an instance of AccountabilityTest to it.
func DeployAccountabilityTest(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _config AccountabilityConfig) (common.Address, *types.Transaction, *AccountabilityTest, error) {
	parsed, err := AccountabilityTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccountabilityTestBin), backend, _autonity, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccountabilityTest{AccountabilityTestCaller: AccountabilityTestCaller{contract: contract}, AccountabilityTestTransactor: AccountabilityTestTransactor{contract: contract}, AccountabilityTestFilterer: AccountabilityTestFilterer{contract: contract}}, nil
}

// AccountabilityTest is an auto generated Go binding around an Ethereum contract.
type AccountabilityTest struct {
	AccountabilityTestCaller     // Read-only binding to the contract
	AccountabilityTestTransactor // Write-only binding to the contract
	AccountabilityTestFilterer   // Log filterer for contract events
}

// AccountabilityTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountabilityTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilityTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountabilityTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilityTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountabilityTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountabilityTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountabilityTestSession struct {
	Contract     *AccountabilityTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// AccountabilityTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountabilityTestCallerSession struct {
	Contract *AccountabilityTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// AccountabilityTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountabilityTestTransactorSession struct {
	Contract     *AccountabilityTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// AccountabilityTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountabilityTestRaw struct {
	Contract *AccountabilityTest // Generic contract binding to access the raw methods on
}

// AccountabilityTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountabilityTestCallerRaw struct {
	Contract *AccountabilityTestCaller // Generic read-only contract binding to access the raw methods on
}

// AccountabilityTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountabilityTestTransactorRaw struct {
	Contract *AccountabilityTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccountabilityTest creates a new instance of AccountabilityTest, bound to a specific deployed contract.
func NewAccountabilityTest(address common.Address, backend bind.ContractBackend) (*AccountabilityTest, error) {
	contract, err := bindAccountabilityTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTest{AccountabilityTestCaller: AccountabilityTestCaller{contract: contract}, AccountabilityTestTransactor: AccountabilityTestTransactor{contract: contract}, AccountabilityTestFilterer: AccountabilityTestFilterer{contract: contract}}, nil
}

// NewAccountabilityTestCaller creates a new read-only instance of AccountabilityTest, bound to a specific deployed contract.
func NewAccountabilityTestCaller(address common.Address, caller bind.ContractCaller) (*AccountabilityTestCaller, error) {
	contract, err := bindAccountabilityTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTestCaller{contract: contract}, nil
}

// NewAccountabilityTestTransactor creates a new write-only instance of AccountabilityTest, bound to a specific deployed contract.
func NewAccountabilityTestTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountabilityTestTransactor, error) {
	contract, err := bindAccountabilityTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTestTransactor{contract: contract}, nil
}

// NewAccountabilityTestFilterer creates a new log filterer instance of AccountabilityTest, bound to a specific deployed contract.
func NewAccountabilityTestFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountabilityTestFilterer, error) {
	contract, err := bindAccountabilityTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTestFilterer{contract: contract}, nil
}

// bindAccountabilityTest binds a generic wrapper to an already deployed contract.
func bindAccountabilityTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountabilityTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountabilityTest *AccountabilityTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccountabilityTest.Contract.AccountabilityTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountabilityTest *AccountabilityTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.AccountabilityTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountabilityTest *AccountabilityTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.AccountabilityTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountabilityTest *AccountabilityTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccountabilityTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountabilityTest *AccountabilityTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountabilityTest *AccountabilityTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.contract.Transact(opts, method, params...)
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_AccountabilityTest *AccountabilityTestCaller) Beneficiaries(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_AccountabilityTest *AccountabilityTestSession) Beneficiaries(arg0 common.Address) (common.Address, error) {
	return _AccountabilityTest.Contract.Beneficiaries(&_AccountabilityTest.CallOpts, arg0)
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_AccountabilityTest *AccountabilityTestCallerSession) Beneficiaries(arg0 common.Address) (common.Address, error) {
	return _AccountabilityTest.Contract.Beneficiaries(&_AccountabilityTest.CallOpts, arg0)
}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_AccountabilityTest *AccountabilityTestCaller) CanAccuse(opts *bind.CallOpts, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_AccountabilityTest *AccountabilityTestSession) CanAccuse(_offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	return _AccountabilityTest.Contract.CanAccuse(&_AccountabilityTest.CallOpts, _offender, _rule, _block)
}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_AccountabilityTest *AccountabilityTestCallerSession) CanAccuse(_offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, error) {
	return _AccountabilityTest.Contract.CanAccuse(&_AccountabilityTest.CallOpts, _offender, _rule, _block)
}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_AccountabilityTest *AccountabilityTestCaller) CanSlash(opts *bind.CallOpts, _offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_AccountabilityTest *AccountabilityTestSession) CanSlash(_offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	return _AccountabilityTest.Contract.CanSlash(&_AccountabilityTest.CallOpts, _offender, _rule, _block)
}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_AccountabilityTest *AccountabilityTestCallerSession) CanSlash(_offender common.Address, _rule uint8, _block *big.Int) (bool, error) {
	return _AccountabilityTest.Contract.CanSlash(&_AccountabilityTest.CallOpts, _offender, _rule, _block)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, (uint256,uint256,uint256) baseSlashingRates, (uint256,uint256,uint256) factors)
func (_AccountabilityTest *AccountabilityTestCaller) Config(opts *bind.CallOpts) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRates              AccountabilityBaseSlashingRates
	Factors                        AccountabilityFactors
}, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRates              AccountabilityBaseSlashingRates
		Factors                        AccountabilityFactors
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRates = *abi.ConvertType(out[1], new(AccountabilityBaseSlashingRates)).(*AccountabilityBaseSlashingRates)
	outstruct.Factors = *abi.ConvertType(out[2], new(AccountabilityFactors)).(*AccountabilityFactors)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, (uint256,uint256,uint256) baseSlashingRates, (uint256,uint256,uint256) factors)
func (_AccountabilityTest *AccountabilityTestSession) Config() (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRates              AccountabilityBaseSlashingRates
	Factors                        AccountabilityFactors
}, error) {
	return _AccountabilityTest.Contract.Config(&_AccountabilityTest.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, (uint256,uint256,uint256) baseSlashingRates, (uint256,uint256,uint256) factors)
func (_AccountabilityTest *AccountabilityTestCallerSession) Config() (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRates              AccountabilityBaseSlashingRates
	Factors                        AccountabilityFactors
}, error) {
	return _AccountabilityTest.Contract.Config(&_AccountabilityTest.CallOpts)
}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_AccountabilityTest *AccountabilityTestCaller) Events(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "events", arg0)

	outstruct := new(struct {
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EventType = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_AccountabilityTest *AccountabilityTestSession) Events(arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	return _AccountabilityTest.Contract.Events(&_AccountabilityTest.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_AccountabilityTest *AccountabilityTestCallerSession) Events(arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, error) {
	return _AccountabilityTest.Contract.Events(&_AccountabilityTest.CallOpts, arg0)
}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_AccountabilityTest *AccountabilityTestCaller) GetValidatorAccusation(opts *bind.CallOpts, _val common.Address) (AccountabilityEvent, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)

	return out0, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_AccountabilityTest *AccountabilityTestSession) GetValidatorAccusation(_val common.Address) (AccountabilityEvent, error) {
	return _AccountabilityTest.Contract.GetValidatorAccusation(&_AccountabilityTest.CallOpts, _val)
}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_AccountabilityTest *AccountabilityTestCallerSession) GetValidatorAccusation(_val common.Address) (AccountabilityEvent, error) {
	return _AccountabilityTest.Contract.GetValidatorAccusation(&_AccountabilityTest.CallOpts, _val)
}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_AccountabilityTest *AccountabilityTestCaller) GetValidatorFaults(opts *bind.CallOpts, _val common.Address) ([]AccountabilityEvent, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)

	return out0, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_AccountabilityTest *AccountabilityTestSession) GetValidatorFaults(_val common.Address) ([]AccountabilityEvent, error) {
	return _AccountabilityTest.Contract.GetValidatorFaults(&_AccountabilityTest.CallOpts, _val)
}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_AccountabilityTest *AccountabilityTestCallerSession) GetValidatorFaults(_val common.Address) ([]AccountabilityEvent, error) {
	return _AccountabilityTest.Contract.GetValidatorFaults(&_AccountabilityTest.CallOpts, _val)
}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTestCaller) History(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "history", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTestSession) History(arg0 common.Address) (*big.Int, error) {
	return _AccountabilityTest.Contract.History(&_AccountabilityTest.CallOpts, arg0)
}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTestCallerSession) History(arg0 common.Address) (*big.Int, error) {
	return _AccountabilityTest.Contract.History(&_AccountabilityTest.CallOpts, arg0)
}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTestCaller) SlashingHistory(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AccountabilityTest.contract.Call(opts, &out, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTestSession) SlashingHistory(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _AccountabilityTest.Contract.SlashingHistory(&_AccountabilityTest.CallOpts, arg0, arg1)
}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTestCallerSession) SlashingHistory(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _AccountabilityTest.Contract.SlashingHistory(&_AccountabilityTest.CallOpts, arg0, arg1)
}

// AddBeneficiary is a paid mutator transaction binding the contract method 0x0af86dc2.
//
// Solidity: function addBeneficiary(address _offender, address _reporter) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) AddBeneficiary(opts *bind.TransactOpts, _offender common.Address, _reporter common.Address) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "addBeneficiary", _offender, _reporter)
}

// AddBeneficiary is a paid mutator transaction binding the contract method 0x0af86dc2.
//
// Solidity: function addBeneficiary(address _offender, address _reporter) returns()
func (_AccountabilityTest *AccountabilityTestSession) AddBeneficiary(_offender common.Address, _reporter common.Address) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.AddBeneficiary(&_AccountabilityTest.TransactOpts, _offender, _reporter)
}

// AddBeneficiary is a paid mutator transaction binding the contract method 0x0af86dc2.
//
// Solidity: function addBeneficiary(address _offender, address _reporter) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) AddBeneficiary(_offender common.Address, _reporter common.Address) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.AddBeneficiary(&_AccountabilityTest.TransactOpts, _offender, _reporter)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _offender, uint256 _ntnReward) payable returns()
func (_AccountabilityTest *AccountabilityTestTransactor) DistributeRewards(opts *bind.TransactOpts, _offender common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "distributeRewards", _offender, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _offender, uint256 _ntnReward) payable returns()
func (_AccountabilityTest *AccountabilityTestSession) DistributeRewards(_offender common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.DistributeRewards(&_AccountabilityTest.TransactOpts, _offender, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _offender, uint256 _ntnReward) payable returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) DistributeRewards(_offender common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.DistributeRewards(&_AccountabilityTest.TransactOpts, _offender, _ntnReward)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) Finalize(opts *bind.TransactOpts, _epochEnd bool) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "finalize", _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_AccountabilityTest *AccountabilityTestSession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.Finalize(&_AccountabilityTest.TransactOpts, _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.Finalize(&_AccountabilityTest.TransactOpts, _epochEnd)
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) HandleAccusation(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "handleAccusation", _event)
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestSession) HandleAccusation(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleAccusation(&_AccountabilityTest.TransactOpts, _event)
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) HandleAccusation(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleAccusation(&_AccountabilityTest.TransactOpts, _event)
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) HandleInnocenceProof(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "handleInnocenceProof", _event)
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestSession) HandleInnocenceProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleInnocenceProof(&_AccountabilityTest.TransactOpts, _event)
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) HandleInnocenceProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleInnocenceProof(&_AccountabilityTest.TransactOpts, _event)
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) HandleMisbehaviour(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "handleMisbehaviour", _event)
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestSession) HandleMisbehaviour(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleMisbehaviour(&_AccountabilityTest.TransactOpts, _event)
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) HandleMisbehaviour(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleMisbehaviour(&_AccountabilityTest.TransactOpts, _event)
}

// HandleValidAccusation is a paid mutator transaction binding the contract method 0x239a49ba.
//
// Solidity: function handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) HandleValidAccusation(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "handleValidAccusation", _event)
}

// HandleValidAccusation is a paid mutator transaction binding the contract method 0x239a49ba.
//
// Solidity: function handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestSession) HandleValidAccusation(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleValidAccusation(&_AccountabilityTest.TransactOpts, _event)
}

// HandleValidAccusation is a paid mutator transaction binding the contract method 0x239a49ba.
//
// Solidity: function handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) HandleValidAccusation(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleValidAccusation(&_AccountabilityTest.TransactOpts, _event)
}

// HandleValidFaultProof is a paid mutator transaction binding the contract method 0x51772af9.
//
// Solidity: function handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) HandleValidFaultProof(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "handleValidFaultProof", _event)
}

// HandleValidFaultProof is a paid mutator transaction binding the contract method 0x51772af9.
//
// Solidity: function handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestSession) HandleValidFaultProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleValidFaultProof(&_AccountabilityTest.TransactOpts, _event)
}

// HandleValidFaultProof is a paid mutator transaction binding the contract method 0x51772af9.
//
// Solidity: function handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) HandleValidFaultProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleValidFaultProof(&_AccountabilityTest.TransactOpts, _event)
}

// HandleValidInnocenceProof is a paid mutator transaction binding the contract method 0x653cd199.
//
// Solidity: function handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) HandleValidInnocenceProof(opts *bind.TransactOpts, _event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "handleValidInnocenceProof", _event)
}

// HandleValidInnocenceProof is a paid mutator transaction binding the contract method 0x653cd199.
//
// Solidity: function handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestSession) HandleValidInnocenceProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleValidInnocenceProof(&_AccountabilityTest.TransactOpts, _event)
}

// HandleValidInnocenceProof is a paid mutator transaction binding the contract method 0x653cd199.
//
// Solidity: function handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) HandleValidInnocenceProof(_event AccountabilityEvent) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.HandleValidInnocenceProof(&_AccountabilityTest.TransactOpts, _event)
}

// PerformSlashingTasks is a paid mutator transaction binding the contract method 0x633b5e5e.
//
// Solidity: function performSlashingTasks() returns()
func (_AccountabilityTest *AccountabilityTestTransactor) PerformSlashingTasks(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "performSlashingTasks")
}

// PerformSlashingTasks is a paid mutator transaction binding the contract method 0x633b5e5e.
//
// Solidity: function performSlashingTasks() returns()
func (_AccountabilityTest *AccountabilityTestSession) PerformSlashingTasks() (*types.Transaction, error) {
	return _AccountabilityTest.Contract.PerformSlashingTasks(&_AccountabilityTest.TransactOpts)
}

// PerformSlashingTasks is a paid mutator transaction binding the contract method 0x633b5e5e.
//
// Solidity: function performSlashingTasks() returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) PerformSlashingTasks() (*types.Transaction, error) {
	return _AccountabilityTest.Contract.PerformSlashingTasks(&_AccountabilityTest.TransactOpts)
}

// PromoteGuiltyAccusations is a paid mutator transaction binding the contract method 0x7ec8be1d.
//
// Solidity: function promoteGuiltyAccusations() returns()
func (_AccountabilityTest *AccountabilityTestTransactor) PromoteGuiltyAccusations(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "promoteGuiltyAccusations")
}

// PromoteGuiltyAccusations is a paid mutator transaction binding the contract method 0x7ec8be1d.
//
// Solidity: function promoteGuiltyAccusations() returns()
func (_AccountabilityTest *AccountabilityTestSession) PromoteGuiltyAccusations() (*types.Transaction, error) {
	return _AccountabilityTest.Contract.PromoteGuiltyAccusations(&_AccountabilityTest.TransactOpts)
}

// PromoteGuiltyAccusations is a paid mutator transaction binding the contract method 0x7ec8be1d.
//
// Solidity: function promoteGuiltyAccusations() returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) PromoteGuiltyAccusations() (*types.Transaction, error) {
	return _AccountabilityTest.Contract.PromoteGuiltyAccusations(&_AccountabilityTest.TransactOpts)
}

// SetBaseSlashingRates is a paid mutator transaction binding the contract method 0xa2652078.
//
// Solidity: function setBaseSlashingRates((uint256,uint256,uint256) _rates) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) SetBaseSlashingRates(opts *bind.TransactOpts, _rates AccountabilityBaseSlashingRates) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "setBaseSlashingRates", _rates)
}

// SetBaseSlashingRates is a paid mutator transaction binding the contract method 0xa2652078.
//
// Solidity: function setBaseSlashingRates((uint256,uint256,uint256) _rates) returns()
func (_AccountabilityTest *AccountabilityTestSession) SetBaseSlashingRates(_rates AccountabilityBaseSlashingRates) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetBaseSlashingRates(&_AccountabilityTest.TransactOpts, _rates)
}

// SetBaseSlashingRates is a paid mutator transaction binding the contract method 0xa2652078.
//
// Solidity: function setBaseSlashingRates((uint256,uint256,uint256) _rates) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) SetBaseSlashingRates(_rates AccountabilityBaseSlashingRates) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetBaseSlashingRates(&_AccountabilityTest.TransactOpts, _rates)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) SetCommittee(opts *bind.TransactOpts, _newCommittee []common.Address) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "setCommittee", _newCommittee)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_AccountabilityTest *AccountabilityTestSession) SetCommittee(_newCommittee []common.Address) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetCommittee(&_AccountabilityTest.TransactOpts, _newCommittee)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) SetCommittee(_newCommittee []common.Address) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetCommittee(&_AccountabilityTest.TransactOpts, _newCommittee)
}

// SetFactors is a paid mutator transaction binding the contract method 0x8975e977.
//
// Solidity: function setFactors((uint256,uint256,uint256) _factors) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) SetFactors(opts *bind.TransactOpts, _factors AccountabilityFactors) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "setFactors", _factors)
}

// SetFactors is a paid mutator transaction binding the contract method 0x8975e977.
//
// Solidity: function setFactors((uint256,uint256,uint256) _factors) returns()
func (_AccountabilityTest *AccountabilityTestSession) SetFactors(_factors AccountabilityFactors) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetFactors(&_AccountabilityTest.TransactOpts, _factors)
}

// SetFactors is a paid mutator transaction binding the contract method 0x8975e977.
//
// Solidity: function setFactors((uint256,uint256,uint256) _factors) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) SetFactors(_factors AccountabilityFactors) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetFactors(&_AccountabilityTest.TransactOpts, _factors)
}

// SetInnocenceProofSubmissionWindow is a paid mutator transaction binding the contract method 0x433afda8.
//
// Solidity: function setInnocenceProofSubmissionWindow(uint256 _window) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) SetInnocenceProofSubmissionWindow(opts *bind.TransactOpts, _window *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "setInnocenceProofSubmissionWindow", _window)
}

// SetInnocenceProofSubmissionWindow is a paid mutator transaction binding the contract method 0x433afda8.
//
// Solidity: function setInnocenceProofSubmissionWindow(uint256 _window) returns()
func (_AccountabilityTest *AccountabilityTestSession) SetInnocenceProofSubmissionWindow(_window *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetInnocenceProofSubmissionWindow(&_AccountabilityTest.TransactOpts, _window)
}

// SetInnocenceProofSubmissionWindow is a paid mutator transaction binding the contract method 0x433afda8.
//
// Solidity: function setInnocenceProofSubmissionWindow(uint256 _window) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) SetInnocenceProofSubmissionWindow(_window *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.SetInnocenceProofSubmissionWindow(&_AccountabilityTest.TransactOpts, _window)
}

// Slash is a paid mutator transaction binding the contract method 0x0d20e5ea.
//
// Solidity: function slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event, uint256 _epochOffencesCount, uint256 _epochPeriod) returns()
func (_AccountabilityTest *AccountabilityTestTransactor) Slash(opts *bind.TransactOpts, _event AccountabilityEvent, _epochOffencesCount *big.Int, _epochPeriod *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.contract.Transact(opts, "slash", _event, _epochOffencesCount, _epochPeriod)
}

// Slash is a paid mutator transaction binding the contract method 0x0d20e5ea.
//
// Solidity: function slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event, uint256 _epochOffencesCount, uint256 _epochPeriod) returns()
func (_AccountabilityTest *AccountabilityTestSession) Slash(_event AccountabilityEvent, _epochOffencesCount *big.Int, _epochPeriod *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.Slash(&_AccountabilityTest.TransactOpts, _event, _epochOffencesCount, _epochPeriod)
}

// Slash is a paid mutator transaction binding the contract method 0x0d20e5ea.
//
// Solidity: function slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event, uint256 _epochOffencesCount, uint256 _epochPeriod) returns()
func (_AccountabilityTest *AccountabilityTestTransactorSession) Slash(_event AccountabilityEvent, _epochOffencesCount *big.Int, _epochPeriod *big.Int) (*types.Transaction, error) {
	return _AccountabilityTest.Contract.Slash(&_AccountabilityTest.TransactOpts, _event, _epochOffencesCount, _epochPeriod)
}

// AccountabilityTestInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the AccountabilityTest contract.
type AccountabilityTestInnocenceProvenIterator struct {
	Event *AccountabilityTestInnocenceProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityTestInnocenceProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityTestInnocenceProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityTestInnocenceProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityTestInnocenceProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityTestInnocenceProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityTestInnocenceProven represents a InnocenceProven event raised by the AccountabilityTest contract.
type AccountabilityTestInnocenceProven struct {
	Offender common.Address
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_AccountabilityTest *AccountabilityTestFilterer) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestInnocenceProvenIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTestInnocenceProvenIterator{contract: _AccountabilityTest.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
}

// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_AccountabilityTest *AccountabilityTestFilterer) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityTestInnocenceProven, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityTestInnocenceProven)
				if err := _AccountabilityTest.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_AccountabilityTest *AccountabilityTestFilterer) ParseInnocenceProven(log types.Log) (*AccountabilityTestInnocenceProven, error) {
	event := new(AccountabilityTestInnocenceProven)
	if err := _AccountabilityTest.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityTestNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the AccountabilityTest contract.
type AccountabilityTestNewAccusationIterator struct {
	Event *AccountabilityTestNewAccusation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityTestNewAccusationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityTestNewAccusation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityTestNewAccusation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityTestNewAccusationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityTestNewAccusationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityTestNewAccusation represents a NewAccusation event raised by the AccountabilityTest contract.
type AccountabilityTestNewAccusation struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_AccountabilityTest *AccountabilityTestFilterer) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestNewAccusationIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTestNewAccusationIterator{contract: _AccountabilityTest.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
}

// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_AccountabilityTest *AccountabilityTestFilterer) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityTestNewAccusation, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityTestNewAccusation)
				if err := _AccountabilityTest.contract.UnpackLog(event, "NewAccusation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_AccountabilityTest *AccountabilityTestFilterer) ParseNewAccusation(log types.Log) (*AccountabilityTestNewAccusation, error) {
	event := new(AccountabilityTestNewAccusation)
	if err := _AccountabilityTest.contract.UnpackLog(event, "NewAccusation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityTestNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the AccountabilityTest contract.
type AccountabilityTestNewFaultProofIterator struct {
	Event *AccountabilityTestNewFaultProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityTestNewFaultProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityTestNewFaultProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityTestNewFaultProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityTestNewFaultProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityTestNewFaultProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityTestNewFaultProof represents a NewFaultProof event raised by the AccountabilityTest contract.
type AccountabilityTestNewFaultProof struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Epoch    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_AccountabilityTest *AccountabilityTestFilterer) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestNewFaultProofIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &AccountabilityTestNewFaultProofIterator{contract: _AccountabilityTest.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
}

// WatchNewFaultProof is a free log subscription operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_AccountabilityTest *AccountabilityTestFilterer) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityTestNewFaultProof, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityTestNewFaultProof)
				if err := _AccountabilityTest.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewFaultProof is a log parse operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_AccountabilityTest *AccountabilityTestFilterer) ParseNewFaultProof(log types.Log) (*AccountabilityTestNewFaultProof, error) {
	event := new(AccountabilityTestNewFaultProof)
	if err := _AccountabilityTest.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccountabilityTestSlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the AccountabilityTest contract.
type AccountabilityTestSlashingEventIterator struct {
	Event *AccountabilityTestSlashingEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountabilityTestSlashingEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountabilityTestSlashingEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountabilityTestSlashingEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountabilityTestSlashingEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountabilityTestSlashingEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountabilityTestSlashingEvent represents a SlashingEvent event raised by the AccountabilityTest contract.
type AccountabilityTestSlashingEvent struct {
	Validator    common.Address
	Amount       *big.Int
	ReleaseBlock *big.Int
	IsJailbound  bool
	EventId      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_AccountabilityTest *AccountabilityTestFilterer) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilityTestSlashingEventIterator, error) {

	logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return &AccountabilityTestSlashingEventIterator{contract: _AccountabilityTest.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
}

// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_AccountabilityTest *AccountabilityTestFilterer) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilityTestSlashingEvent) (event.Subscription, error) {

	logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountabilityTestSlashingEvent)
				if err := _AccountabilityTest.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_AccountabilityTest *AccountabilityTestFilterer) ParseSlashingEvent(log types.Log) (*AccountabilityTestSlashingEvent, error) {
	event := new(AccountabilityTestSlashingEvent)
	if err := _AccountabilityTest.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityMetaData contains all meta data concerning the Autonity contract.
var AutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator[]\",\"name\":\"_validators\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withholdingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposerRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"withheldRewardsPool\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"omissionAccountabilityContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scheduleVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"NewSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"STANDARD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STANDARD_SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_selfBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegated\",\"type\":\"uint256\"}],\"name\":\"autobond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withholdingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposerRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"withheldRewardsPool\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"omissionAccountabilityContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getEpochByHeight\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxScheduleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidatorState\",\"outputs\":[{\"internalType\":\"enumValidatorState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxScheduleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOmissionAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleRewardRate\",\"type\":\"uint256\"}],\"name\":\"setOracleRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposerRewardRate\",\"type\":\"uint256\"}],\"name\":\"setProposerRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"}],\"name\":\"setSlasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setWithheldRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withholdingThreshold\",\"type\":\"uint256\"}],\"name\":\"setWithholdingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"f3c70aad": "STANDARD_DECIMALS()",
		"d144f00a": "STANDARD_SCALE_FACTOR()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"f7fcc510": "autobond(address,uint256,uint256)",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"9358928b": "circulatingSupply()",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"354c40a7": "createSchedule(address,uint256,uint256,uint256)",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"4da3baec": "finalizeInitialization(uint256)",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"0aac2da1": "getCurrentEpochPeriod()",
		"affb1cf1": "getEpochByHeight(uint256)",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"fed76a56": "getMaxScheduleDuration()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"8d347287": "getUnbondingShare(uint256)",
		"1904bb2e": "getValidator(address)",
		"5b7d6c36": "getValidatorState(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"e294df7c": "isUnbondingReleased(uint256)",
		"154d76d7": "jail(address,uint256,uint8)",
		"8ef8c2fd": "jailbound(address,uint8)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"241ed650": "newEpochPeriod()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"8bb2e477": "setMaxScheduleDuration(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"b47c3eaa": "setOmissionAccountabilityContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"ed5676e9": "setOracleRewardRate(uint256)",
		"416f86a2": "setProposerRewardRate(uint256)",
		"aabc2496": "setSlasher(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"39f9eb1f": "setWithheldRewardsPool(address)",
		"905d76e9": "setWithholdingThreshold(uint256)",
		"02fb4d85": "slash(address,uint256)",
		"122b4122": "slashAndJail(address,uint256,uint256,uint8,uint8)",
		"b1344271": "slasher()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600e556000600f553480156200001b57600080fd5b506040516200e8653803806200e8658339810160408190526200003e9162001250565b6027546000036200006757603980546001600160a01b031916331790556200006782826200006f565b50506200181e565b80518051601055602080820151601155604080830151601255606080840151601355608080850151601481905560a08087015160155560c08088015160165560e080890151601755610100890151601880546001600160a01b03199081166001600160a01b0393841617909155610120909a0151601980548c16918316919091179055888b01518051601a80548d16918416919091179055808a0151601b80548d1691841691909117905580890151601c80548d1691841691909117905580880151601d80548d1691841691909117905580870151601e80548d1691841691909117905593840151601f80548c169183169190911790559183015188548a169083161788559190910151602180548916918316919091179055848801518051602280549099169216919091179096559385015160238190558584015160245585830151602555940151602655840151602755602b9290925560385551620001d69062000e2d565b604051809103906000f080158015620001f3573d6000803e3d6000fd5b50603a80546001600160a01b0319166001600160a01b03929092169190911790556040513090620002249062000e3b565b6001600160a01b039091168152602001604051809103906000f08015801562000251573d6000803e3d6000fd5b50603b80546001600160a01b0319166001600160a01b039290921691909117905560005b82518110156200064a57600083828151811062000296576200029662001482565b602002602001015160a0015190506000848381518110620002bb57620002bb62001482565b60200260200101516101a00181815250506000848381518110620002e357620002e362001482565b602002602001015161018001906001600160a01b031690816001600160a01b03168152505060008483815181106200031f576200031f62001482565b602002602001015160a0018181525050600084838151811062000346576200034662001482565b602002602001015161010001818152505060008483815181106200036e576200036e62001482565b60209081029190910101516101c00152601254845185908490811062000398576200039862001482565b602002602001015160800181815250506000848381518110620003bf57620003bf62001482565b602002602001015161024001906005811115620003e057620003e062001498565b90816005811115620003f657620003f662001498565b81525050600084838151811062000411576200041162001482565b6020026020010151610160018181525050600084838151811062000439576200043962001482565b602002602001015160c0018181525050600084838151811062000460576200046062001482565b6020026020010151610120018181525050600084838151811062000488576200048862001482565b602002602001015160e00181815250506000848381518110620004af57620004af62001482565b6020026020010151610140018181525050620004ed848381518110620004d957620004d962001482565b60200260200101516200064f60201b60201c565b6200051e84838151811062000506576200050662001482565b6020026020010151604001516200079560201b60201c565b6200054b84838151811062000537576200053762001482565b60200260200101516200081a60201b60201c565b806033600086858151811062000565576200056562001482565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000828254620005a29190620014c4565b925050819055508060366000828254620005bd9190620014c4565b925050819055508060376000828254620005d89190620014c4565b9250508190555062000632848381518110620005f857620005f862001482565b602002602001015160200151828685815181106200061a576200061a62001482565b60200260200101516000015162000abc60201b60201c565b505080806200064190620014e0565b91505062000275565b505050565b600062000666826060015162000cbf60201b60201c565b6001600160a01b03909116602084015290508015620006ba5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064015b60405180910390fd5b6020808301516001600160a01b039081166000908152603490925260409091206001015416156200072e5760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c72656164792072656769737465726564000000006044820152606401620006b1565b6200073c6004600a620015f9565b82608001511115620007915760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401620006b1565b5050565b6001600160a01b03811660009081526035602052604090205415620007fd5760405162461bcd60e51b815260206004820152601460248201527f6f7261636c6520736572766572206578697374730000000000000000000000006044820152606401620006b1565b6001600160a01b0316600090815260356020526040902060019055565b6101808101516001600160a01b03166200091957603a546001600160a01b0316620008935760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b6064820152608401620006b1565b602854600090620008a49062000d0d565b905081602001518260000151836080015183603a60009054906101000a90046001600160a01b0316604051620008da9062000e49565b620008ea9594939291906200160e565b604051809103906000f08015801562000907573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602880546001808201835560009283527fe16da923a2d88192e5070f37b4571d58682c0d66212ec634d495f33de3f77ab590910180546001600160a01b03199081166001600160a01b0395861617909155845184168352603490955260409182902086518154871690851617815593519084018054861691841691909117905584015160028301805490941691161790915560608201518291906003820190620009cb9082620016f8565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062000a8a9082620016f8565b5061024082015160128201805460ff1916600183600581111562000ab25762000ab262001498565b0217905550505050565b600080831162000b1b5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b6064820152608401620006b1565b6001600160a01b03821660009081526033602052604090205483111562000b855760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e636500000000006044820152606401620006b1565b6001600160a01b0382166000908152603360205260408120805485929062000baf908490620017c4565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000c3e83620014e0565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462000cb59190620017c4565b9695505050505050565b60008062000ccc62000e57565b60008060ff9050604083875160208901845afa62000ce957600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000d355750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000d65578062000d4c81620014e0565b915062000d5d9050600a83620017f0565b915062000d39565b6000816001600160401b0381111562000d825762000d8262000e75565b6040519080825280601f01601f19166020018201604052801562000dad576020820181803683370190505b5090505b841562000e255762000dc5600183620017c4565b915062000dd4600a8662001807565b62000de1906030620014c4565b60f81b81838151811062000df95762000df962001482565b60200101906001600160f81b031916908160001a90535062000e1d600a86620017f0565b945062000db1565b949350505050565b61156a806200be7483390190565b610ebc806200d3de83390190565b6105cb806200e29a83390190565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000eb05762000eb062000e75565b60405290565b60405161014081016001600160401b038111828210171562000eb05762000eb062000e75565b60405161026081016001600160401b038111828210171562000eb05762000eb062000e75565b604051601f8201601f191681016001600160401b038111828210171562000f2d5762000f2d62000e75565b604052919050565b6001600160a01b038116811462000f4b57600080fd5b50565b805162000f5b8162000f35565b919050565b60005b8381101562000f7d57818101518382015260200162000f63565b50506000910152565b600082601f83011262000f9857600080fd5b81516001600160401b0381111562000fb45762000fb462000e75565b62000fc9601f8201601f191660200162000f02565b81815284602083860101111562000fdf57600080fd5b62000e2582602083016020870162000f60565b80516006811062000f5b57600080fd5b60006101008083850312156200101757600080fd5b604051908101906001600160401b03821181831017156200103c576200103c62000e75565b8160405280925083519150620010528262000f35565b818152620010636020850162000f4e565b6020820152620010766040850162000f4e565b6040820152620010896060850162000f4e565b60608201526200109c6080850162000f4e565b6080820152620010af60a0850162000f4e565b60a0820152620010c260c0850162000f4e565b60c0820152620010d560e0850162000f4e565b60e0820152505092915050565b600060a08284031215620010f557600080fd5b60405160a081016001600160401b03811182821017156200111a576200111a62000e75565b806040525080915082516200112f8162000f35565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201525092915050565b60008183036103008112156200117757600080fd5b6200118162000e8b565b9150610140808212156200119457600080fd5b6200119e62000eb6565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e0830152610100620011fa81860162000f4e565b908301526101206200120e85820162000f4e565b90830152818352620012238585830162001002565b602084015250506200123a836102408401620010e2565b60408201526102e0820151606082015292915050565b60008061032083850312156200126557600080fd5b82516001600160401b03808211156200127d57600080fd5b818501915085601f8301126200129257600080fd5b8151602082821115620012a957620012a962000e75565b8160051b620012ba82820162000f02565b928352848101820192828101908a851115620012d557600080fd5b83870192505b848310156200146157825186811115620012f457600080fd5b8701610260818d03601f190112156200130c57600080fd5b6200131662000edc565b6200132386830162000f4e565b8152620013336040830162000f4e565b86820152620013456060830162000f4e565b60408201526080820151888111156200135d57600080fd5b6200136d8e888386010162000f86565b60608301525060a0820151608082015260c082015160a082015260e082015160c082015261010082015160e0820152610120820151610100820152610140820151610120820152610160820151610140820152610180820151610160820152620013db6101a0830162000f4e565b6101808201526101c08201516101a08201526101e08201516101c08201526102008201516101e082015261022082015161020082015261024080830151898111156200142657600080fd5b620014368f898387010162000f86565b610220840152506200144c610260840162000ff2565b908201528352509183019190830190620012db565b809850505050620014758882890162001162565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620014da57620014da620014ae565b92915050565b600060018201620014f557620014f5620014ae565b5060010190565b600181815b808511156200153d578160001904821115620015215762001521620014ae565b808516156200152f57918102915b93841c939080029062001501565b509250929050565b6000826200155657506001620014da565b816200156557506000620014da565b81600181146200157e57600281146200158957620015a9565b6001915050620014da565b60ff8411156200159d576200159d620014ae565b50506001821b620014da565b5060208310610133831016604e8410600b8410161715620015ce575081810a620014da565b620015da8383620014fc565b8060001904821115620015f157620015f1620014ae565b029392505050565b600062001607838362001545565b9392505050565b600060018060a01b038088168352808716602084015285604084015260a0606084015284518060a08501526200164c8160c086016020890162000f60565b9316608083015250601f91909101601f19160160c001949350505050565b600181811c908216806200167f57607f821691505b602082108103620016a057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200064a57600081815260208120601f850160051c81016020861015620016cf5750805b601f850160051c820191505b81811015620016f057828155600101620016db565b505050505050565b81516001600160401b0381111562001714576200171462000e75565b6200172c816200172584546200166a565b84620016a6565b602080601f8311600181146200176457600084156200174b5750858301515b600019600386901b1c1916600185901b178555620016f0565b600085815260208120601f198616915b82811015620017955788860151825594840194600190910190840162001774565b5085821015620017b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115620014da57620014da620014ae565b634e487b7160e01b600052601260045260246000fd5b600082620018025762001802620017da565b500490565b600082620018195762001819620017da565b500690565b61a646806200182e6000396000f3fe608060405260043610620005375760003560e01c80638ef8c2fd11620002ab578063b47c3eaa116200016b578063d886f8a211620000d7578063f03b959d116200008d578063f03b959d14620012fb578063f1d592a71462001320578063f3c70aad1462001345578063f7866ee3146200135c578063f7fcc510146200137c578063fed76a5614620013a157005b8063d886f8a214620011f4578063dd62ed3e1462001219578063dfb1a4d21462001263578063e294df7c146200127a578063e7f43c6814620012b6578063ed5676e914620012d657005b8063ceaad455116200012d578063ceaad4551462001133578063cf9c57191462001158578063cfd19fb91462001170578063d144f00a1462001195578063d372c07e14620011ad578063d5f3948814620011d257005b8063b47c3eaa1462001082578063b66b3e7914620010a7578063b7ab4db514620010cf578063c9d97af414620010f6578063cb696f54146200110e57005b8063a8b2216e1162000217578063ae1f5fa011620001cd578063ae1f5fa01462000fa3578063affb1cf11462000fcc578063b13442711462000ff1578063b2ea9adb1462001013578063b3ecbadd1462001038578063b46e5520146200105d57005b8063a8b2216e1462000ecc578063a9059cbb1462000ef3578063a9fd1a8f1462000f18578063aabc24961462000f3f578063ab8f6ffe1462000f64578063ae1da0b51462000f8b57005b806396f18a32116200026d57806396f18a321462000e0b5780639ac310741462000e2d5780639c98e4711462000e455780639dc29fac1462000e5d578063a515366a1462000e82578063a5d059ca1462000ea757005b80638ef8c2fd1462000d57578063905d76e91462000d7c5780639358928b1462000da157806395d89b411462000db857806396b477cb1462000de657005b80634364596911620003f757806377e741c71162000363578063852c48491162000319578063852c48491462000c93578063872cf0591462000cb857806389c614b81462000cd05780638bac7dad1462000ce85780638bb2e4771462000d0d5780638d3472871462000d3257005b806377e741c71462000aa7578063784304b51462000acc57806379502c551462000af1578063819b64631462000c23578063833b1fce1462000c3a57806384467fdb1462000c6e57005b80635b7d6c3611620003b95780635b7d6c36146200096c5780636b5f444c14620009a05780636fd2c80b14620009c557806370a0823114620009dc5780637264c4da1462000a16578063731b3a031462000a7e57005b80634364596914620008ba578063496ccd9b14620008d15780634bb278f314620008f65780634da3baec1462000922578063520fdbbc146200094757005b8063154d76d711620004a357806329070c6d116200045957806329070c6d14620007f1578063313ce5671462000808578063354c40a7146200082657806339f9eb1f146200084b57806340c10f191462000870578063416f86a2146200089557005b8063154d76d7146200071b57806318160ddd14620007405780631904bb2e146200075757806323b872dd146200078b578063241ed65014620007b057806325ce1bb914620007c857005b80630ae65e7a11620004f95780630ae65e7a146200063b5780630d8e6e2c1462000660578063112206331462000677578063114eaf55146200068e578063122b412214620006b35780631250a28d14620006f657005b806302fb4d85146200054157806306fdde031462000579578063088566e914620005b4578063095ea7b314620005ee5780630aac2da1146200062457005b366200053f57005b005b3480156200054e57600080fd5b506200056662000560366004620089cd565b620013b8565b6040519081526020015b60405180910390f35b3480156200058657600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b60405162000570919062008a50565b348015620005c157600080fd5b5062000566620005d336600462008a65565b6001600160a01b031660009081526001602052604090205490565b348015620005fb57600080fd5b50620006136200060d366004620089cd565b62001650565b604051901515815260200162000570565b3480156200063157600080fd5b5060235462000566565b3480156200064857600080fd5b506200053f6200065a36600462008a65565b62001669565b3480156200066d57600080fd5b5060275462000566565b3480156200068457600080fd5b5060115462000566565b3480156200069b57600080fd5b506200053f620006ad36600462008a85565b62001707565b348015620006c057600080fd5b50620006d8620006d236600462008aad565b62001739565b60408051938452602084019290925215159082015260600162000570565b3480156200070357600080fd5b506200053f6200071536600462008a65565b620019e3565b3480156200072857600080fd5b50620005666200073a36600462008b13565b62001a32565b3480156200074d57600080fd5b5060365462000566565b3480156200076457600080fd5b506200077c6200077636600462008a65565b62001c8e565b60405162000570919062008cd8565b3480156200079857600080fd5b5062000613620007aa36600462008ced565b62001ca3565b348015620007bd57600080fd5b5062000566602b5481565b348015620007d557600080fd5b506029546000908152602f602052604090206003015462000566565b348015620007fe57600080fd5b5060105462000566565b3480156200081557600080fd5b506040516012815260200162000570565b3480156200083357600080fd5b506200053f6200084536600462008d33565b62001da8565b3480156200085857600080fd5b506200053f6200086a36600462008a65565b62001e80565b3480156200087d57600080fd5b506200053f6200088f366004620089cd565b62001f27565b348015620008a257600080fd5b506200053f620008b436600462008a85565b62001f64565b348015620008c757600080fd5b5060245462000566565b348015620008de57600080fd5b506200053f620008f036600462008a65565b62001fc6565b3480156200090357600080fd5b506200090e620020d0565b604051620005709695949392919062008df3565b3480156200092f57600080fd5b506200053f6200094136600462008a85565b62002973565b3480156200095457600080fd5b506200053f6200096636600462008a65565b62002b24565b3480156200097957600080fd5b50620009916200098b36600462008a65565b62002d80565b60405162000570919062008e36565b348015620009ad57600080fd5b506200053f620009bf36600462008a85565b62002d98565b348015620009d257600080fd5b5060135462000566565b348015620009e957600080fd5b5062000566620009fb36600462008a65565b6001600160a01b031660009081526033602052604090205490565b34801562000a2357600080fd5b5062000a3b62000a35366004620089cd565b620030bf565b604051620005709190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801562000a8b57600080fd5b506029546000908152602f602052604090206002015462000566565b34801562000ab457600080fd5b506200053f62000ac636600462008a85565b620031c5565b34801562000ad957600080fd5b506200053f62000aeb36600462008f41565b620031f7565b34801562000afe57600080fd5b50604080516101408101825260105481526011546020808301919091526012548284015260135460608084019190915260145460808085019190915260155460a08086019190915260165460c08087019190915260175460e0808801919091526018546001600160a01b03908116610100808a019190915260195482166101208a015289519081018a52601a5482168152601b54821681890152601c548216818b0152601d54821681880152601e54821681870152601f548216818601528754821693810193909352602154811691830191909152875192830188526022541682526023549482019490945260245495810195909552602554918501919091526026549084015260275462000c11939084565b60405162000570949392919062008f96565b34801562000c3057600080fd5b5060255462000566565b34801562000c4757600080fd5b50601b546001600160a01b03165b6040516001600160a01b03909116815260200162000570565b34801562000c7b57600080fd5b506200053f62000c8d366004620090c5565b620033a2565b34801562000ca057600080fd5b506200053f62000cb2366004620089cd565b620034bb565b34801562000cc557600080fd5b506200053f62003657565b34801562000cdd57600080fd5b5062000566602d5481565b34801562000cf557600080fd5b506200053f62000d0736600462008a85565b62003693565b34801562000d1a57600080fd5b506200053f62000d2c36600462008a85565b62003717565b34801562000d3f57600080fd5b506200056662000d5136600462008a85565b62003749565b34801562000d6457600080fd5b506200053f62000d763660046200916d565b620037c2565b34801562000d8957600080fd5b506200053f62000d9b36600462008a85565b62003a0f565b34801562000dae57600080fd5b5060375462000566565b34801562000dc557600080fd5b50604080518082019091526003815262272a2760e91b6020820152620005a5565b34801562000df357600080fd5b506200056662000e0536600462008a85565b62003a71565b34801562000e1857600080fd5b50603a5462000c55906001600160a01b031681565b34801562000e3a57600080fd5b506200056660385481565b34801562000e5257600080fd5b5062000566602e5481565b34801562000e6a57600080fd5b506200053f62000e7c366004620089cd565b62003b09565b34801562000e8f57600080fd5b506200056662000ea1366004620089cd565b62003c41565b34801562000eb457600080fd5b506200056662000ec6366004620089cd565b62003d28565b34801562000ed957600080fd5b5062000ee462003dcb565b604051620005709190620091ab565b34801562000f0057600080fd5b506200061362000f12366004620089cd565b62003eae565b34801562000f2557600080fd5b5062000f3062003f06565b60405162000570919062009211565b34801562000f4c57600080fd5b506200053f62000f5e36600462008a65565b62004095565b34801562000f7157600080fd5b5062000f7c62004150565b60405162000570919062009263565b34801562000f9857600080fd5b5062000566602c5481565b34801562000fb057600080fd5b5062000fbb62004262565b6040516200057093929190620092be565b34801562000fd957600080fd5b5062000f3062000feb36600462008a85565b620045ad565b34801562000ffe57600080fd5b50603b5462000c55906001600160a01b031681565b3480156200102057600080fd5b506200053f62001032366004620092fd565b620047c7565b3480156200104557600080fd5b506200053f6200105736600462008a65565b6200480e565b3480156200106a57600080fd5b506200053f6200107c36600462008a65565b6200485d565b3480156200108f57600080fd5b506200053f620010a136600462008a65565b62004b65565b348015620010b457600080fd5b50620010bf62004bb4565b604051620005709291906200935d565b348015620010dc57600080fd5b50620010e762004ceb565b6040516200057091906200938f565b3480156200110357600080fd5b506200056660295481565b3480156200111b57600080fd5b506200053f6200112d36600462008a85565b62004d4f565b3480156200114057600080fd5b506200053f6200115236600462008a65565b62004db7565b3480156200116557600080fd5b506200053f62004e06565b3480156200117d57600080fd5b506200053f6200118f36600462008a65565b62004e5b565b348015620011a257600080fd5b506200056662004eaa565b348015620011ba57600080fd5b506200053f620011cc36600462008a65565b62004ebb565b348015620011df57600080fd5b5060395462000c55906001600160a01b031681565b3480156200120157600080fd5b506200053f6200121336600462008a65565b62004f0a565b3480156200122657600080fd5b506200056662001238366004620093a4565b6001600160a01b03918216600090815260326020908152604080832093909416825291909152205490565b3480156200127057600080fd5b50602b5462000566565b3480156200128757600080fd5b50620006136200129936600462008a85565b600090815260096020526040902060050154610100900460ff1690565b348015620012c357600080fd5b506022546001600160a01b031662000c55565b348015620012e357600080fd5b506200053f620012f536600462008a85565b62004f59565b3480156200130857600080fd5b506200053f6200131a36600462008a65565b62004fbb565b3480156200132d57600080fd5b506200053f6200133f36600462008a65565b6200500a565b3480156200135257600080fd5b5062000566600481565b3480156200136957600080fd5b506019546001600160a01b031662000c55565b3480156200138957600080fd5b506200053f6200139b366004620093d7565b620050c3565b348015620013ae57600080fd5b5060265462000566565b601a546000906001600160a01b0316331480620013df57506021546001600160a01b031633145b80620013f55750601b546001600160a01b031633145b6200141d5760405162461bcd60e51b815260040162001414906200940f565b60405180910390fd5b62001427620087eb565b603b546001600160a01b031663f774fac0620014438662005314565b856040518363ffffffff1660e01b81526004016200146392919062009457565b6000604051808303816000875af115801562001483573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014ad919081019062009647565b6019546001600160a01b031660009081526033602052604081208054929550929350849291620014df908490620096a7565b90915550506001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b0319918216178255918501516001820180549186169184169190911790559184015160028301805491909416911617909155606082015182919060038201906200155a908262009743565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062001619908262009743565b5061024082015160128201805460ff1916600183600581111562001641576200164162008b5a565b02179055509050505092915050565b60006200165f3384846200560f565b5060015b92915050565b6200167362005738565b6001600160a01b0380821660008181526034602052604090206001015490911614620016b35760405162461bcd60e51b815260040162001414906200980f565b6001600160a01b03818116600090815260346020526040902054163314620016ef5760405162461bcd60e51b8152600401620014149062009846565b620016fa8162005787565b6200170460008055565b50565b6022546001600160a01b03163314620017345760405162461bcd60e51b8152600401620014149062009892565b601355565b601a54600090819081906001600160a01b03163314806200176457506021546001600160a01b031633145b806200177a5750601b546001600160a01b031633145b620017995760405162461bcd60e51b815260040162001414906200940f565b620017a3620087eb565b603b546001600160a01b03166364d61bbe620017bf8b62005314565b8a8a8a8a6040518663ffffffff1660e01b8152600401620017e5959493929190620098c9565b6000604051808303816000875af115801562001805573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200182f91908101906200991b565b6102008301516019546001600160a01b0316600090815260336020526040812080549499509197509195509293508692916200186d908490620096a7565b90915550506001600160a01b03808a16600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201518291906003820190620018e8908262009743565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620019a7908262009743565b5061024082015160128201805460ff19166001836005811115620019cf57620019cf62008b5a565b021790555090505050955095509592505050565b6022546001600160a01b0316331462001a105760405162461bcd60e51b8152600401620014149062009892565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601a546000906001600160a01b031633148062001a5957506021546001600160a01b031633145b8062001a6f5750601b546001600160a01b031633145b62001a8e5760405162461bcd60e51b815260040162001414906200940f565b603b546000906001600160a01b031663f189d66c62001aad8762005314565b86866040518463ffffffff1660e01b815260040162001acf939291906200996e565b6000604051808303816000875af115801562001aef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b1991908101906200999a565b6001600160a01b03808716600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201519192508291600382019062001b91908262009743565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062001c50908262009743565b5061024082015160128201805460ff1916600183600581111562001c785762001c7862008b5a565b02179055505050610200015190505b9392505050565b62001c98620087eb565b620016638262005314565b6001600160a01b03831660009081526032602090815260408083203384529091528120548281101562001d2a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840162001414565b62001d3785858562005877565b62001d4f853362001d498685620099d2565b6200560f565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405162001d9591815260200190565b60405180910390a3506001949350505050565b6022546001600160a01b0316331462001dd55760405162461bcd60e51b8152600401620014149062009892565b60265481111562001e465760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b606482015260840162001414565b62001e5284846200593d565b826037600082825462001e669190620099d2565b9091555062001e7a905084848484620059de565b50505050565b6022546001600160a01b0316331462001ead5760405162461bcd60e51b8152600401620014149062009892565b6001600160a01b03811662001f055760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c2063616e6e6f74206265207a65726f20616464726573730000000000604482015260640162001414565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462001f545760405162461bcd60e51b8152600401620014149062009892565b62001f6082826200593d565b5050565b6022546001600160a01b0316331462001f915760405162461bcd60e51b8152600401620014149062009892565b62001f9f6004600a62009ae5565b81111562001fc15760405162461bcd60e51b8152600401620014149062009af3565b601655565b6022546001600160a01b0316331462001ff35760405162461bcd60e51b8152600401620014149062009892565b601b80546001600160a01b0319166001600160a01b03838116918217909255601c54604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b1580156200205257600080fd5b505af115801562002067573d6000803e3d6000fd5b5050601e54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b158015620020b457600080fd5b505af1158015620020c9573d6000803e3d6000fd5b5050505050565b60395460009081906060908290819081906001600160a01b031633146200210b5760405162461bcd60e51b8152600401620014149062009b1f565b6200211562005738565b43602c8190556029546000828152602a60209081526040808320849055928252602f905281902060030154601a5491516306c9789b60e41b815292101560048301819052916001600160a01b0390911690636c9789b090602401600060405180830381600087803b1580156200218a57600080fd5b505af11580156200219f573d6000803e3d6000fd5b50506021546040516306c9789b60e41b81528415156004820152600093506001600160a01b039091169150636c9789b0906024016020604051808303816000875af1158015620021f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002219919062009b62565b601b5460408051634bb278f360e01b815290519293506000926001600160a01b0390921691634bb278f391600480820192602092909190829003018187875af11580156200226b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002291919062009b7c565b905082156200273857602054603754603854602d546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562002302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002328919062009b62565b90508060385410156200233a57506038545b6200234630826200593d565b80603860008282546200235a9190620099d2565b909155506200236b90504262005c60565b603760008282546200237e9190620096a7565b909155505030600090815260336020526040902054620023a090479062005e20565b620023aa62006ada565b620023b462006bc9565b6000806000620023c362004262565b601b54604051636d3c088760e11b815293965091945092506001600160a01b03169063da78110e90620023ff90869085908790600401620092be565b600060405180830381600087803b1580156200241a57600080fd5b505af11580156200242f573d6000803e3d6000fd5b5050601a5460405163e08b14ed60e01b81526001600160a01b03909116925063e08b14ed9150620024659085906004016200938f565b600060405180830381600087803b1580156200248057600080fd5b505af115801562002495573d6000803e3d6000fd5b50506021546040516338f7bbe760e21b81526001600160a01b03909116925063e3deef9c9150620024ce90603090859060040162009b9a565b600060405180830381600087803b158015620024e957600080fd5b505af1158015620024fe573d6000803e3d6000fd5b5050602b546023555050602154604051633009330b60e21b81524360048201526001600160a01b039091169063c024cc2c90602401600060405180830381600087803b1580156200254e57600080fd5b505af115801562002563573d6000803e3d6000fd5b50506029546000908152602f60205260408120600201546023549093509091506200258f9043620096a7565b905042602d81905550600160296000828254620025ad9190620096a7565b9091555050602954604080516030805460c0602082028401810190945260a08301818152620026f59594849391929060009085015b82821015620026d0576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916200263890620096bd565b80601f01602080910402602001604051908101604052809291908181526020018280546200266690620096bd565b8015620026b75780601f106200268b57610100808354040283529160200191620026b7565b820191906000526020600020905b8154815290600101906020018083116200269957829003601f168201915b50505050508152505081526020019060010190620025e2565b5050505081526020018581526020014381526020018481526020018b81525062006ce6565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e3356029546040516200272991815260200190565b60405180910390a15050505050505b80156200281257601b546040805163b6a702b360e01b815290516001600160a01b039092169163b6a702b39160048082019260009290919082900301818387803b1580156200278657600080fd5b505af11580156200279b573d6000803e3d6000fd5b5050601c546040805163a2e6204560e01b815290516001600160a01b03909216935063a2e62045925060048082019260209290919082900301816000875af19250505080156200280a575060408051601f3d908101601f19168201909252620028079181019062009b7c565b60015b156200281257505b6005546029546000908152602f6020908152604080832060018101546003909101546030805484518187028101870190955280855260ff909716968a969195939492938a939287929184015b828210156200294c576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620028b490620096bd565b80601f0160208091040260200160405190810160405280929190818152602001828054620028e290620096bd565b8015620029335780601f10620029075761010080835404028352916020019162002933565b820191906000526020600020905b8154815290600101906020018083116200291557829003601f168201915b505050505081525050815260200190600101906200285e565b5050505093509850985098509850985098505050506200296b60008055565b909192939495565b6039546001600160a01b03163314620029a05760405162461bcd60e51b8152600401620014149062009b1f565b620029aa62005738565b620029b462006ada565b620029be62004262565b505042602d555043602c8190556000908152602a6020908152604080832083905560295481516030805460c09581028301860190945260a08201848152620016fa96939592948594919390919085015b8282101562002afc576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162002a6490620096bd565b80601f016020809104026020016040519081016040528092919081815260200182805462002a9290620096bd565b801562002ae35780601f1062002ab75761010080835404028352916020019162002ae3565b820191906000526020600020905b81548152906001019060200180831162002ac557829003601f168201915b5050505050815250508152602001906001019062002a0e565b5050509082525060006020820152436040820152602354606082015260800184905262006ce6565b6022546001600160a01b0316331462002b515760405162461bcd60e51b8152600401620014149062009892565b602280546001600160a01b0319166001600160a01b03838116918217909255601b5460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b15801562002bb057600080fd5b505af115801562002bc5573d6000803e3d6000fd5b5050601c5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002c1157600080fd5b505af115801562002c26573d6000803e3d6000fd5b5050601d5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002c7257600080fd5b505af115801562002c87573d6000803e3d6000fd5b5050601e5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002cd357600080fd5b505af115801562002ce8573d6000803e3d6000fd5b5050601f5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002d3457600080fd5b505af115801562002d49573d6000803e3d6000fd5b505060215460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb915060240162002099565b600062002d8d8262005314565b610240015192915050565b6022546001600160a01b0316331462002dc55760405162461bcd60e51b8152600401620014149062009892565b60215460408051631728602760e21b815290516000926001600160a01b031691635ca1809c9160048083019260209291908290030181865afa15801562002e10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e36919062009b62565b602154604080516362a48bb760e11b815290519293506000926001600160a01b039092169163c549176e916004808201926020929091908290030181865afa15801562002e87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ead919062009b62565b90506000831162002f015760405162461bcd60e51b815260206004820152601860248201527f65706f636820706572696f642063616e6e6f7420626520300000000000000000604482015260640162001414565b600162002f0f8383620096a7565b62002f1b9190620099d2565b831162002f915760405162461bcd60e51b815260206004820152603c60248201527f65706f636820706572696f64206e6565647320746f206265206772656174657260448201527f207468616e2064656c74612b6c6f6f6b6261636b57696e646f772d3100000000606482015260840162001414565b601b5460408051635bc6f62960e11b815290516000926001600160a01b03169163b78dec529160048083019260209291908290030181865afa15801562002fdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003002919062009b62565b9050836200301282600262009cb2565b1115620030625760405162461bcd60e51b815260206004820152601960248201527f65706f636820706572696f6420697320746f6f20736d616c6c00000000000000604482015260640162001414565b602b8490556029546000908152602f6020908152604091829020600301548251878152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc791015b60405180910390a15050505050565b620030f26040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0383166000908152600160205260409020805483106200315c5760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f74206578697374000000000000000000604482015260640162001414565b80838154811062003171576200317162009ccc565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505091505092915050565b6022546001600160a01b03163314620031f25760405162461bcd60e51b8152600401620014149062009892565b601055565b6001600160a01b038083166000818152603460205260409020600181015490921614620032385760405162461bcd60e51b8152600401620014149062009ce2565b80546001600160a01b03163314620032645760405162461bcd60e51b8152600401620014149062009d19565b6200326f8362006dc0565b15620032c95760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b606482015260840162001414565b600080620032d78462006e31565b925090508115620033195760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001414565b60018301546001600160a01b038281169116146200338a5760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b606482015260840162001414565b600383016200339a858262009743565b505050505050565b6000604051806102600160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160106000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020014381526020016000815260200160008152602001848152602001600060058111156200346a576200346a62008b5a565b905290506200347a818362006e76565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c92620030b092339289918b9162009d68565b6001600160a01b0380831660008181526034602052604090206001015490911614620034fb5760405162461bcd60e51b815260040162001414906200980f565b6001600160a01b03828116600090815260346020526040902054163314620035375760405162461bcd60e51b8152600401620014149062009846565b620035456004600a62009ae5565b811115620035965760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e207261746500604482015260640162001414565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600f80546000908152600d909352958220855181546001600160a01b0319169516949094178455915160018085019190915591516002909301929092558354929390929091906200360f908490620096a7565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b6022546001600160a01b03163314620036845760405162461bcd60e51b8152600401620014149062009892565b6005805460ff19166001179055565b6022546001600160a01b03163314620036c05760405162461bcd60e51b8152600401620014149062009892565b60008111620037125760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e2774206265203000000000000000604482015260640162001414565b602555565b6022546001600160a01b03163314620037445760405162461bcd60e51b8152600401620014149062009892565b602655565b60008181526009602052604081206005015460ff16620037ac5760405162461bcd60e51b815260206004820152601960248201527f756e626f6e64696e67206e6f74206170706c6965642079657400000000000000604482015260640162001414565b5060009081526009602052604090206003015490565b601a546001600160a01b0316331480620037e657506021546001600160a01b031633145b80620037fc5750601b546001600160a01b031633145b6200381b5760405162461bcd60e51b815260040162001414906200940f565b603b546000906001600160a01b031663c44a5b216200383a8562005314565b846040518363ffffffff1660e01b81526004016200385a92919062009db1565b6000604051808303816000875af11580156200387a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620038a491908101906200999a565b6001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b03199182161782559185015160018201805491861691841691909117905591840151600283018054919094169116179091556060820151919250829160038201906200391c908262009743565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620039db908262009743565b5061024082015160128201805460ff1916600183600581111562003a035762003a0362008b5a565b02179055505050505050565b6022546001600160a01b0316331462003a3c5760405162461bcd60e51b8152600401620014149062009892565b62003a4a6004600a62009ae5565b81111562003a6c5760405162461bcd60e51b8152600401620014149062009af3565b601555565b6000602c54600162003a849190620096a7565b82111562003ae45760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74206765742065706f636820696420666f7220612066757475726560448201526520626c6f636b60d01b606482015260840162001414565b602c54821162003b0157506000908152602a602052604090205490565b505060295490565b6022546001600160a01b0316331462003b365760405162461bcd60e51b8152600401620014149062009892565b6001600160a01b03821660009081526033602052604090205481111562003b995760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b604482015260640162001414565b6001600160a01b0382166000908152603360205260408120805483929062003bc3908490620099d2565b92505081905550806036600082825462003bde9190620099d2565b92505081905550806037600082825462003bf99190620099d2565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062003c4d62005738565b6001600160a01b038084166000818152603460205260409020600101549091161462003c8d5760405162461bcd60e51b8152600401620014149062009ce2565b6001600160a01b03831660009081526034602052604081206012015460ff16600581111562003cc05762003cc062008b5a565b1462003d0f5760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f206265206163746976650000000000604482015260640162001414565b62003d1c838333620072df565b90506200166360008055565b600062003d3462005738565b6001600160a01b038084166000818152603460205260409020600101549091161462003d745760405162461bcd60e51b8152600401620014149062009ce2565b6000821162003dbe5760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b604482015260640162001414565b62003d1c838333620074e2565b60606031805480602002602001604051908101604052809291908181526020016000905b8282101562003ea557838290600052602060002001805462003e1190620096bd565b80601f016020809104026020016040519081016040528092919081815260200182805462003e3f90620096bd565b801562003e905780601f1062003e645761010080835404028352916020019162003e90565b820191906000526020600020905b81548152906001019060200180831162003e7257829003601f168201915b50505050508152602001906001019062003def565b50505050905090565b600062003ebd33848462005877565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b62003f396040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b6029546000908152602f602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b8282101562004060576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003fc890620096bd565b80601f016020809104026020016040519081016040528092919081815260200182805462003ff690620096bd565b8015620040475780601f106200401b5761010080835404028352916020019162004047565b820191906000526020600020905b8154815290600101906020018083116200402957829003601f168201915b5050505050815250508152602001906001019062003f72565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905090565b6022546001600160a01b03163314620040c25760405162461bcd60e51b8152600401620014149062009892565b6001600160a01b0381166200412e5760405162461bcd60e51b815260206004820152602b60248201527f736c617368657220636f6e74726163742063616e6e6f7420626520746865207a60448201526a65726f206164647265737360a81b606482015260840162001414565b603b80546001600160a01b0319166001600160a01b0392909216919091179055565b60606030805480602002602001604051908101604052809291908181526020016000905b8282101562003ea5576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620041ca90620096bd565b80601f0160208091040260200160405190810160405280929190818152602001828054620041f890620096bd565b8015620042495780601f106200421d5761010080835404028352916020019162004249565b820191906000526020600020905b8154815290600101906020018083116200422b57829003601f168201915b5050505050815250508152602001906001019062004174565b603954606090819081906001600160a01b03163314620042965760405162461bcd60e51b8152600401620014149062009b1f565b602854620042e75760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f72730000000000000000604482015260640162001414565b620042f1620088b4565b6025546080820152602881526034602082015260306040820152602e60608201526200431d816200784b565b6200432b60316000620088d2565b60305480620043725760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b604482015260640162001414565b6000816001600160401b038111156200438f576200438f62008e46565b604051908082528060200260200182016040528015620043b9578160200160208202803683370190505b5090506000826001600160401b03811115620043d957620043d962008e46565b60405190808252806020026020018201604052801562004403578160200160208202803683370190505b5090506000836001600160401b0381111562004423576200442362008e46565b6040519080825280602002602001820160405280156200444d578160200160208202803683370190505b50905060005b848110156200459e576000603460006030848154811062004478576200447862009ccc565b60009182526020808320600392830201546001600160a01b031684528301939093526040909101812060318054600181018255925292507fc54045fa7c6ec765e825df7f9e9bf9dec12c5cef146f93a5eee56772ee647fbc0190620044e09083018262009dd7565b50600281015485516001600160a01b039091169086908490811062004509576200450962009ccc565b6001600160a01b039283166020918202929092010152600182015485519116908590849081106200453e576200453e62009ccc565b6001600160a01b0392831660209182029290920101528154845191169084908490811062004570576200457062009ccc565b6001600160a01b03909216602092830291909101909101525080620045958162009eb8565b91505062004453565b50919650945092505050909192565b620045e06040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b602c54620045f0906001620096a7565b8211156200464d5760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b606482015260840162001414565b602954602c5483116200466b57506000828152602a60205260409020545b6000818152602f602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b828210156200478f576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620046f790620096bd565b80601f01602080910402602001604051908101604052809291908181526020018280546200472590620096bd565b8015620047765780601f106200474a5761010080835404028352916020019162004776565b820191906000526020600020905b8154815290600101906020018083116200475857829003601f168201915b50505050508152505081526020019060010190620046a1565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050915050919050565b6022546001600160a01b03163314620047f45760405162461bcd60e51b8152600401620014149062009892565b620048016003836200786b565b62001f606004826200786b565b6022546001600160a01b031633146200483b5760405162461bcd60e51b8152600401620014149062009892565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6200486762005738565b6001600160a01b0380821660008181526034602052604090206001015490911614620048a75760405162461bcd60e51b815260040162001414906200980f565b6001600160a01b03808216600090815260346020526040902080549091163314620048e65760405162461bcd60e51b8152600401620014149062009d19565b6000601282015460ff16600581111562004904576200490462008b5a565b03620049535760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c7265616479206163746976650000000000000000604482015260640162001414565b6002601282015460ff16600581111562004971576200497162008b5a565b148015620049825750438160100154115b15620049d15760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c000000000000000000604482015260640162001414565b6004601282015460ff166005811115620049ef57620049ef62008b5a565b14801562004a005750438160100154115b1562004a5e5760405162461bcd60e51b815260206004820152602660248201527f76616c696461746f72207374696c6c20696e206a61696c20666f7220696e616360448201526574697669747960d01b606482015260840162001414565b6003601282015460ff16600581111562004a7c5762004a7c62008b5a565b1415801562004aa757506005601282015460ff16600581111562004aa45762004aa462008b5a565b14155b62004af55760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c7900000000604482015260640162001414565b60128101805460ff1916905580546029546000908152602f60209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200170460008055565b6022546001600160a01b0316331462004b925760405162461bcd60e51b8152600401620014149062009892565b602180546001600160a01b0319166001600160a01b0392909216919091179055565b6060806003600481805462004bc990620096bd565b80601f016020809104026020016040519081016040528092919081815260200182805462004bf790620096bd565b801562004c485780601f1062004c1c5761010080835404028352916020019162004c48565b820191906000526020600020905b81548152906001019060200180831162004c2a57829003601f168201915b5050505050915080805462004c5d90620096bd565b80601f016020809104026020016040519081016040528092919081815260200182805462004c8b90620096bd565b801562004cdc5780601f1062004cb05761010080835404028352916020019162004cdc565b820191906000526020600020905b81548152906001019060200180831162004cbe57829003601f168201915b50505050509050915091509091565b6060602880548060200260200160405190810160405280929190818152602001828054801562004d4557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162004d26575b5050505050905090565b6022546001600160a01b0316331462004d7c5760405162461bcd60e51b8152600401620014149062009892565b60118190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b6022546001600160a01b0316331462004de45760405162461bcd60e51b8152600401620014149062009892565b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462004e335760405162461bcd60e51b8152600401620014149062009892565b62004e4160036000620088f2565b62004e4f60046000620088f2565b6005805460ff19169055565b6022546001600160a01b0316331462004e885760405162461bcd60e51b8152600401620014149062009892565b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b62004eb86004600a62009ae5565b81565b6022546001600160a01b0316331462004ee85760405162461bcd60e51b8152600401620014149062009892565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462004f375760405162461bcd60e51b8152600401620014149062009892565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462004f865760405162461bcd60e51b8152600401620014149062009892565b62004f946004600a62009ae5565b81111562004fb65760405162461bcd60e51b8152600401620014149062009af3565b601755565b6022546001600160a01b0316331462004fe85760405162461bcd60e51b8152600401620014149062009892565b602080546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b03163314620050375760405162461bcd60e51b8152600401620014149062009892565b6001600160a01b038116620050a15760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b606482015260840162001414565b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6029546000908152602f60205260409020600301544310156200511e5760405162461bcd60e51b8152602060048201526012602482015271195c1bd8da081a5cc81b9bdd08195b99195960721b604482015260640162001414565b601a5483906001600160a01b03163314806200514457506021546001600160a01b031633145b806200516c57506001600160a01b038181166000908152603460205260409020600c01541633145b80620051825750601b546001600160a01b031633145b620051db5760405162461bcd60e51b815260206004820152602260248201527f63616c6c6572206973206e6f742061207265776172642064697374726962757460448201526137b960f11b606482015260840162001414565b620051e78284620096a7565b3360009081526033602052604090205410156200523c5760405162461bcd60e51b81526020600482015260126024820152716e6f7420656e6f7567682062616c616e636560701b604482015260640162001414565b6001600160a01b038416620052945760405162461bcd60e51b815260206004820181905260248201527f76616c696461746f7220616464726573732063616e6e6f74206265207a65726f604482015260640162001414565b6001600160a01b0380851660008181526034602052604090206001015490911614620052d45760405162461bcd60e51b8152600401620014149062009ce2565b620052e08284620096a7565b336000908152603360205260408120805490919062005301908490620099d2565b9091555062001e7a9050848484620079be565b6200531e620087eb565b6001600160a01b038216620053765760405162461bcd60e51b815260206004820152601e60248201527f63616e6e6f74207265717565737420656d7074792076616c696461746f720000604482015260640162001414565b6001600160a01b0380831660008181526034602052604090206001015490911614620053b65760405162461bcd60e51b8152600401620014149062009ce2565b6001600160a01b0380831660009081526034602090815260409182902082516102608101845281548516815260018201548516928101929092526002810154909316918101919091526003820180549192916060840191906200541990620096bd565b80601f01602080910402602001604051908101604052809291908181526020018280546200544790620096bd565b8015620054985780601f106200546c5761010080835404028352916020019162005498565b820191906000526020600020905b8154815290600101906020018083116200547a57829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a08201526011820180546101c0909201916200554990620096bd565b80601f01602080910402602001604051908101604052809291908181526020018280546200557790620096bd565b8015620055c85780601f106200559c57610100808354040283529160200191620055c8565b820191906000526020600020905b815481529060010190602001808311620055aa57829003601f168201915b5050509183525050601282015460209091019060ff166005811115620055f257620055f262008b5a565b600581111562005606576200560662008b5a565b90525092915050565b6001600160a01b038316620056735760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162001414565b6001600160a01b038216620056d65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162001414565b6001600160a01b0383811660008181526032602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60005415620057805760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b604482015260640162001414565b6001600055565b6001600160a01b038116600090815260346020526040812090601282015460ff166005811115620057bc57620057bc62008b5a565b146200580b5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d757374206265206163746976650000000000000000604482015260640162001414565b60128101805460ff1916600117905580546029546000908152602f60209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b038316600090815260336020526040902054811115620058da5760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b604482015260640162001414565b6001600160a01b0383166000908152603360205260408120805483929062005904908490620099d2565b90915550506001600160a01b0382166000908152603360205260408120805483929062005933908490620096a7565b9091555050505050565b6001600160a01b0382166000908152603360205260408120805483929062005967908490620096a7565b925050819055508060366000828254620059829190620096a7565b9250508190555080603760008282546200599d9190620096a7565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162003c35565b6001600160a01b03841662005a365760405162461bcd60e51b815260206004820152601c60248201527f7661756c7420616464726573732063616e6e6f74206265207a65726f00000000604482015260640162001414565b6000811162005a885760405162461bcd60e51b815260206004820181905260248201527f7363686564756c65206475726174696f6e2063616e6e6f74206265207a65726f604482015260640162001414565b4282101562005ae85760405162461bcd60e51b815260206004820152602560248201527f7363686564756c652063616e6e6f74207374617274206265666f72652063726560448201526430ba34b7b760d91b606482015260840162001414565b6000831162005b3a5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f73697469766500000000000000604482015260640162001414565b6001600160a01b0384166000908152600160205260408120805490910362005ba857600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0387161790555b6040805160a08101825285815260006020808301828152838501888152606080860189815260808701868152895460018082018c558b8952978790209851600590910290980197885593519587019590955590516002860155925160038501555160049093019290925582518781529182018690529181018490526001600160a01b038716917fe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd910160405180910390a25050505050565b600254600090815b8181101562005e19576000600160006002848154811062005c8d5762005c8d62009ccc565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909250905b8181101562005e0057600083828154811062005cd85762005cd862009ccc565b90600052602060002090600502019050806004015488101562005d4f5760405162461bcd60e51b815260206004820152602860248201527f7363686564756c6520616c726561647920756e6c6f636b656420666f7220676960448201526776656e2074696d6560c01b606482015260840162001414565b8060020154881162005d62575062005deb565b60048101889055600381015460028201546000919062005d83908b620099d2565b1062005d925750805462005dc5565b60038201548254600284015462005daa908c620099d2565b62005db6919062009cb2565b62005dc2919062009eea565b90505b600182015462005dd69082620099d2565b62005de29089620096a7565b60019092015595505b8062005df78162009eb8565b91505062005cb8565b505050808062005e109062009eb8565b91505062005c68565b5050919050565b8115801562005e2d575080155b1562005e37575050565b601054600090670de0b6b3a76400009062005e5490859062009cb2565b62005e60919062009eea565b9050801562005ede576019546040516000916001600160a01b03169083908381818185875af1925050503d806000811462005eb8576040519150601f19603f3d011682016040523d82523d6000602084013e62005ebd565b606091505b509091505080151560010362005edc5762005ed98285620099d2565b93505b505b6000808062005ef06004600a62009ae5565b60175462005eff908862009cb2565b62005f0b919062009eea565b9050600062005f1d6004600a62009ae5565b60175462005f2c908862009cb2565b62005f38919062009eea565b602154604080516353b1821b60e01b815290519293506000926001600160a01b03909216916353b1821b916004808201926020929091908290030181865afa15801562005f89573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005faf919062009b62565b11156200604a5760255462005fc76004600a62009ae5565b62005fd3919062009cb2565b60305460165462005fe5908a62009cb2565b62005ff1919062009cb2565b62005ffd919062009eea565b602554909450620060116004600a62009ae5565b6200601d919062009cb2565b6030546016546200602f908962009cb2565b6200603b919062009cb2565b62006047919062009eea565b92505b620060568483620096a7565b620060629088620099d2565b9650620060708382620096a7565b6200607c9087620099d2565b60215460408051637f5e2f1160e01b815290519298506000926001600160a01b0390921691637f5e2f11916004808201926020929091908290030181865afa158015620060cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620060f3919062009b62565b6030549091506000906001600160401b0381111562006116576200611662008e46565b60405190808252806020026020018201604052801562006140578160200160208202803683370190505b5090506000806000805b603054811015620066bd576000603460006030848154811062006171576200617162009ccc565b906000526020600020906003020160000160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002090506000602e548f60308581548110620061d457620061d462009ccc565b906000526020600020906003020160010154620061f2919062009cb2565b620061fe919062009eea565b90506000602e548f603086815481106200621c576200621c62009ccc565b9060005260206000209060030201600101546200623a919062009cb2565b62006246919062009eea565b90506000821180620062585750600081115b15620066a4576002601284015460ff1660058111156200627c576200627c62008b5a565b1480620062a457506003601284015460ff166005811115620062a257620062a262008b5a565b145b15620062e35783888881518110620062c057620062c062009ccc565b602090810291909101015286620062d78162009eb8565b975050505050620066a8565b6004601284015460ff16600581111562006301576200630162008b5a565b14806200632957506005601284015460ff16600581111562006327576200632762008b5a565b145b1562006354576200633b8287620096a7565b9550620063498186620096a7565b9450505050620066a8565b6021546001840154604051634d08f07360e11b81526001600160a01b0391821660048201526000929190911690639a11e0e690602401602060405180830381865afa158015620063a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620063ce919062009b62565b601554909150811115620064515760008a620063eb838662009cb2565b620063f7919062009eea565b905060008b62006408848662009cb2565b62006414919062009eea565b905062006422828a620096a7565b9850620064308189620096a7565b97506200643e8286620099d2565b94506200644c8185620099d2565b935050505b600084600501548486600801546200646a919062009cb2565b62006476919062009eea565b905080156200653857845460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d8060008114620064d6576040519150601f19603f3d011682016040523d82523d6000602084013e620064db565b606091505b509092509050811515600003620065355786546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352916200652c916001600160a01b0390911690849062009f01565b60405180910390a15b50505b6000856005015484876008015462006551919062009cb2565b6200655d919062009eea565b60018701549091506200657c906001600160a01b0316826000620079be565b60006200658a8286620099d2565b905060006200659a8488620099d2565b90506000811180620065ac5750600082115b156200665457600c880154620065ce9030906001600160a01b03168462005877565b600c8801546001600160a01b03166000818152603360205260409081902054905163a0ce552d60e01b8152600481019190915263a0ce552d90839060240160206040518083038185885af11580156200662b573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062006652919062009b62565b505b600188015460408051898152602081018990526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a250505050505b5050505b80620066b48162009eb8565b9150506200614a565b508215620068595760005b8381101562006857576000858281518110620066e857620066e862009ccc565b602002602001015190506000602e548f603084815481106200670e576200670e62009ccc565b9060005260206000209060030201600101546200672c919062009cb2565b62006738919062009eea565b90506000602e548f6030858154811062006756576200675662009ccc565b90600052602060002090600302016001015462006774919062009cb2565b62006780919062009eea565b601a549091506200679d9030906001600160a01b03168362005877565b601a54603080546001600160a01b039092169163a8031a1d91859187908110620067cb57620067cb62009ccc565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b1580156200682457600080fd5b505af115801562006839573d6000803e3d6000fd5b505050505050505080806200684e9062009eb8565b915050620066c8565b505b602154604080516353b1821b60e01b815290516000926001600160a01b0316916353b1821b9160048083019260209291908290030181865afa158015620068a4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620068ca919062009b62565b111562006961576021546001600160a01b0316620068ea30828b62005877565b6021546001600160a01b038281166000908152603360205260409081902054905163eeb9223360e01b8152600481019190915291169063eeb92233908c906024016000604051808303818588803b1580156200694557600080fd5b505af11580156200695a573d6000803e3d6000fd5b5050505050505b601b546200697b9030906001600160a01b03168862005877565b601b546001600160a01b031660008181526033602052604090819020549051630b32e9c760e31b815260048101919091526359974e389089906024016000604051808303818588803b158015620069d157600080fd5b505af1158015620069e6573d6000803e3d6000fd5b5050505050600082111562006aab5760185460405160009182916001600160a01b039091169085908381818185875af1925050503d806000811462006a48576040519150601f19603f3d011682016040523d82523d6000602084013e62006a4d565b606091505b50909250905081151560000362006aa8576018546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162006a9f916001600160a01b0390911690849062009f01565b60405180910390a15b50505b801562006acc5760185462006acc9030906001600160a01b03168362005877565b505050505050505050505050565b6007545b60085481101562006b075762006b018162006af98162009eb8565b925062007a37565b62006ade565b50600854600755600b54600a540362006b1c57565b600c545b600b5481101562006b495762006b438162006b3b8162009eb8565b925062007c68565b62006b20565b50600b54600c55600a54805b600b5481101562006bc357601354600082815260096020526040902060040154439162006b8291620096a7565b1162006ba85762006b938162007f59565b62006ba0600183620096a7565b915062006bae565b62006bc3565b8062006bba8162009eb8565b91505062006b55565b50600a55565b600f54600e54101562006ce457600e546000908152600d602052604090206013546001820154439162006bfc91620096a7565b111562006c065750565b80546001600160a01b039081166000908152603460205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd9262006c5e92910190815260200190565b600060405180830381600087803b15801562006c7957600080fd5b505af115801562006c8e573d6000803e3d6000fd5b5050600e80546000908152600d6020526040812080546001600160a01b03191681556001808201839055600290910182905582549094509192509062006cd6908490620096a7565b9091555062006bc992505050565b565b6000828152602f6020908152604080832091840151600183015583015160028201556060830151600382015560808301516004820155905b82515181101562001e7a57825180518391908390811062006d435762006d4362009ccc565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b0390921691909117815591810151928201929092556040820151600282019062006da7908262009743565b505050808062006db79062009eb8565b91505062006d1e565b6000805b60305481101562006e28576030818154811062006de55762006de562009ccc565b60009182526020909120600390910201546001600160a01b039081169084160362006e135750600192915050565b8062006e1f8162009eb8565b91505062006dc4565b50600092915050565b60008062006e3e62008931565b60008060ff9050604083875160208901845afa62006e5b57600080fd5b50508051602090910151600160601b90910494909350915050565b60e281511462006ec05760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640162001414565b6030826102200151511462006f185760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e67746800000000604482015260640162001414565b62006f2382620080b6565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262006f86920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262006fa68351620081ee565b8360405160200162006fbb9392919062009f32565b60408051601f19818403018152828252805160209182012060028085526060850184529094506000939290918301908036833701905050905060008080806200701389826200700d6041600262009cb2565b6200830e565b90506000620070328a6200702a6041600262009cb2565b60606200830e565b905060205b825181101562007103576200704d838262008427565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa158015620070a9573d6000803e3d6000fd5b5050604051601f190151905087620070c360418462009eea565b81518110620070d657620070d662009ccc565b6001600160a01b0390921660209283029190910190910152620070fb604182620096a7565b905062007037565b508a602001516001600160a01b03168660008151811062007128576200712862009ccc565b60200260200101516001600160a01b0316146200719a5760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b606482015260840162001414565b8a604001516001600160a01b031686600181518110620071be57620071be62009ccc565b60200260200101516001600160a01b031614620072325760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b606482015260840162001414565b60016200724a8c6102200151838e600001516200845e565b14620072b85760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b606482015260840162001414565b620072c78b60400151620084cd565b620072d28b62008549565b5050505050505050505050565b60008083116200733e5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162001414565b6001600160a01b038216600090815260336020526040902054831115620073a85760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162001414565b6001600160a01b03821660009081526033602052604081208054859290620073d2908490620099d2565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b031991821617825594516001820180549190971695169490941790945551600283015591516003909101558254919290620074618362009eb8565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a36001600854620074d89190620099d2565b9695505050505050565b6001600160a01b038084166000908152603460205260408120805491929091848216911614806200765a57600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa1580156200755b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062007581919062009b62565b905085811015620075e95760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b606482015260840162001414565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b1580156200763a57600080fd5b505af11580156200764f573d6000803e3d6000fd5b5050505050620076ed565b8482600b01548360080154620076719190620099d2565b1015620076d15760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b606482015260840162001414565b8482600b016000828254620076e79190620096a7565b90915550505b6040805161010080820183526001600160a01b03878116835289811660208085019182528486018b8152600060608701818152436080890190815260a0890183815260c08a018481528c151560e08c01908152600b8054875260099098529b85209a518b546001600160a01b0319908116918b16919091178c55975160018c01805490991699169890981790965592516002890155516003880155905160048701559151600590950180549351965161ffff1990941695151561ff001916959095179515159093029490941762ff00001916620100009115159190910217909155805491620077dc8362009eb8565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc8388604051620078329291909115158252602082015260400190565b60405180910390a36001600b54620074d89190620099d2565b60fa60a06000808285855af462007866573d6000803e3d6000fd5b505050565b8154600260018083161561010002038216048251808201602081106020841001600281146200791a576001811462007940578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b80821015620079035781518455600184019350602082019150620078e4565b815191036101000a908190040290915550620079b5565b60028302826020036101000a846020036101000a602089015104020185018755620079b5565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015620079a3578151845560018401935060208201915062007984565b815191036101000a9081900402909155505b50505050505050565b81158015620079cb575080155b15620079d657505050565b6001600160a01b03831660009081526034602052604081206008810180549192859262007a05908490620096a7565b9091555062007a1790508284620096a7565b81600501600082825462007a2c9190620096a7565b909155505050505050565b600081815260066020908152604080832060018101546001600160a01b03168452603490925282209091601282015460ff16600581111562007a7d5762007a7d62008b5a565b1462007b1157600282015482546001600160a01b03166000908152603360205260408120805490919062007ab3908490620096a7565b909155505081546001830154600284015460128401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342926200572b92909160ff9091169062009f7b565b805482546001600160a01b0390811691161462007c2e576000808260080154836005015462007b419190620099d2565b90508060000362007b59578360020154915062007b7f565b80846002015484600d015462007b70919062009cb2565b62007b7c919062009eea565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b15801562007bd157600080fd5b505af115801562007be6573d6000803e3d6000fd5b505050508183600d01600082825462007c009190620096a7565b9091555050600284015460058401805460009062007c20908490620096a7565b909155506200786692505050565b816002015481600801600082825462007c489190620096a7565b9091555050600282015460058201805460009062005933908490620096a7565b600081815260096020908152604080832060018101546001600160a01b031684526034909252822060058201549192909162010000900460ff1662007e5d576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b15801562007cfe57600080fd5b505af115801562007d13573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801562007d6957600080fd5b505af115801562007d7e573d6000803e3d6000fd5b5050505060008360080154846005015462007d9a9190620099d2565b600d85015490915062007dae828462009cb2565b62007dba919062009eea565b92508184600d01600082825462007dd29190620099d2565b9091555050600684015460000362007df1576003850183905562007e19565b6006840154600785015462007e07908562009cb2565b62007e13919062009eea565b60038601555b8284600601600082825462007e2f9190620096a7565b9091555050600385015460078501805460009062007e4f908490620096a7565b9091555062007f3292505050565b506002820154600882015481111562007e77575060088101545b816009015460000362007e91576003830181905562007eb9565b6009820154600a83015462007ea7908362009cb2565b62007eb3919062009eea565b60038401555b8082600901600082825462007ecf9190620096a7565b90915550506003830154600a8301805460009062007eef908490620096a7565b925050819055508082600801600082825462007f0c9190620099d2565b90915550506002830154600b8301805460009062007f2c908490620099d2565b90915550505b6005808401805460ff191660011790558201805482919060009062007a2c908490620099d2565b600081815260096020526040812060058101805461ff001916610100179055600381015490910362007f89575050565b60018101546001600160a01b03166000908152603460205260408120600583015490919062010000900460ff16620080265781600701548260060154846003015462007fd6919062009cb2565b62007fe2919062009eea565b90508082600601600082825462007ffa9190620099d2565b909155505060038301546007830180546000906200801a908490620099d2565b909155506200808b9050565b81600a01548260090154846003015462008041919062009cb2565b6200804d919062009eea565b905080826009016000828254620080659190620099d2565b90915550506003830154600a8301805460009062008085908490620099d2565b90915550505b82546001600160a01b03166000908152603360205260408120805483929062007a2c908490620096a7565b6000620080c7826060015162006e31565b6001600160a01b03909116602084015290508015620081175760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001414565b6020808301516001600160a01b039081166000908152603490925260409091206001015416156200818b5760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162001414565b620081996004600a62009ae5565b8260800151111562001f605760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162001414565b606081600003620082165750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200824657806200822d8162009eb8565b91506200823e9050600a8362009eea565b91506200821a565b6000816001600160401b0381111562008263576200826362008e46565b6040519080825280601f01601f1916602001820160405280156200828e576020820181803683370190505b5090505b84156200830657620082a6600183620099d2565b9150620082b5600a8662009f91565b620082c2906030620096a7565b60f81b818381518110620082da57620082da62009ccc565b60200101906001600160f81b031916908160001a905350620082fe600a8662009eea565b945062008292565b949350505050565b6060816200831e81601f620096a7565b10156200835f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640162001414565b6200836b8284620096a7565b84511015620083b15760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640162001414565b606082158015620083d257604051915060008252602082016040526200841e565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200840d578051835260209283019201620083f3565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b811015620084575762008454601b8262009fa8565b90505b9250925092565b60006200846a6200894f565b6000858585604051602001620084839392919062009fc4565b6040516020818303038152906040529050600060fb9050600082516020620084ac9190620096a7565b90506020848285855afa620084c057600080fd5b5050905195945050505050565b6001600160a01b038116600090815260356020526040902054156200852c5760405162461bcd60e51b81526020600482015260146024820152736f7261636c65207365727665722065786973747360601b604482015260640162001414565b6001600160a01b0316600090815260356020526040902060019055565b6101808101516001600160a01b03166200864857603a546001600160a01b0316620085c25760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162001414565b602854600090620085d390620081ee565b905081602001518260000151836080015183603a60009054906101000a90046001600160a01b031660405162008609906200896d565b620086199594939291906200a013565b604051809103906000f08015801562008636573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602880546001808201835560009283527fe16da923a2d88192e5070f37b4571d58682c0d66212ec634d495f33de3f77ab590910180546001600160a01b03199081166001600160a01b0395861617909155845184168352603490955260409182902086518154871690851617815593519084018054861691841691909117905584015160028301805490941691161790915560608201518291906003820190620086fa908262009743565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620087b9908262009743565b5061024082015160128201805460ff19166001836005811115620087e157620087e162008b5a565b0217905550505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160006005811115620088af57620088af62008b5a565b905290565b6040518060a001604052806005906020820280368337509192915050565b50805460008255906000526020600020908101906200170491906200897b565b5080546200890090620096bd565b6000825580601f1062008911575050565b601f016020900490600052602060002090810190620017049190620089a0565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105cb806200a04683390190565b808211156200899c576000620089928282620088f2565b506001016200897b565b5090565b5b808211156200899c5760008155600101620089a1565b6001600160a01b03811681146200170457600080fd5b60008060408385031215620089e157600080fd5b8235620089ee81620089b7565b946020939093013593505050565b60005b8381101562008a19578181015183820152602001620089ff565b50506000910152565b6000815180845262008a3c816020860160208601620089fc565b601f01601f19169290920160200192915050565b60208152600062001c87602083018462008a22565b60006020828403121562008a7857600080fd5b813562001c8781620089b7565b60006020828403121562008a9857600080fd5b5035919050565b600681106200170457600080fd5b600080600080600060a0868803121562008ac657600080fd5b853562008ad381620089b7565b94506020860135935060408601359250606086013562008af38162008a9f565b9150608086013562008b058162008a9f565b809150509295509295909350565b60008060006060848603121562008b2957600080fd5b833562008b3681620089b7565b925060208401359150604084013562008b4f8162008a9f565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b6006811062008b8f57634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b031682526000610260602083015162008bc060208601826001600160a01b03169052565b50604083015162008bdc60408601826001600160a01b03169052565b50606083015181606086015262008bf68286018262008a22565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152506101408084015181860152506101608084015181860152506101808084015162008c6d828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e080840151908501526102008084015190850152610220808401518583038287015262008cb5838262008a22565b925050506102408084015162008cce8287018262008b70565b5090949350505050565b60208152600062001c87602083018462008b93565b60008060006060848603121562008d0357600080fd5b833562008d1081620089b7565b9250602084013562008d2281620089b7565b929592945050506040919091013590565b6000806000806080858703121562008d4a57600080fd5b843562008d5781620089b7565b966020860135965060408601359560600135945092505050565b600081518084526020808501808196508360051b8101915082860160005b8581101562008de6578284038952815180516001600160a01b03168552858101518686015260409081015160609186018290529062008dd18187018362008a22565b9a87019a955050509084019060010162008d8f565b5091979650505050505050565b8615158152851515602082015260c06040820152600062008e1860c083018762008d71565b606083019590955250608081019290925260a0909101529392505050565b6020810162001663828462008b70565b634e487b7160e01b600052604160045260246000fd5b60405161026081016001600160401b038111828210171562008e825762008e8262008e46565b60405290565b604051601f8201601f191681016001600160401b038111828210171562008eb35762008eb362008e46565b604052919050565b60006001600160401b0382111562008ed75762008ed762008e46565b50601f01601f191660200190565b600082601f83011262008ef757600080fd5b813562008f0e62008f088262008ebb565b62008e88565b81815284602083860101111562008f2457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562008f5557600080fd5b823562008f6281620089b7565b915060208301356001600160401b0381111562008f7e57600080fd5b62008f8c8582860162008ee5565b9150509250929050565b600061030082019050855182526020860151602083015260408601516040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e08301526101008087015162009005828501826001600160a01b03169052565b5050610120958601516001600160a01b0390811696830196909652845186166101408301526020808601518716610160840152604080870151881661018085015260608088015189166101a08601526080808901518a166101c087015260a08901518a166101e087015260c08901518a1661020087015260e0909801518916610220860152865190981661024085015290850151610260840152840151610280830152948301516102a082015291909201516102c08201526102e0015290565b60008060008060808587031215620090dc57600080fd5b84356001600160401b0380821115620090f457600080fd5b620091028883890162008ee5565b9550602087013591506200911682620089b7565b909350604086013590808211156200912d57600080fd5b6200913b8883890162008ee5565b935060608701359150808211156200915257600080fd5b50620091618782880162008ee5565b91505092959194509250565b600080604083850312156200918157600080fd5b82356200918e81620089b7565b91506020830135620091a08162008a9f565b809150509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200920457603f19888603018452620091f185835162008a22565b94509285019290850190600101620091d2565b5092979650505050505050565b602081526000825160a060208401526200922f60c084018262008d71565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60208152600062001c87602083018462008d71565b600081518084526020808501945080840160005b83811015620092b35781516001600160a01b0316875295820195908201906001016200928c565b509495945050505050565b606081526000620092d3606083018662009278565b8281036020840152620092e7818662009278565b90508281036040840152620074d8818562009278565b600080604083850312156200931157600080fd5b82356001600160401b03808211156200932957600080fd5b620093378683870162008ee5565b935060208501359150808211156200934e57600080fd5b5062008f8c8582860162008ee5565b60408152600062009372604083018562008a22565b828103602084015262009386818562008a22565b95945050505050565b60208152600062001c87602083018462009278565b60008060408385031215620093b857600080fd5b8235620093c581620089b7565b91506020830135620091a081620089b7565b600080600060608486031215620093ed57600080fd5b8335620093fa81620089b7565b95602085013595506040909401359392505050565b60208082526028908201527f63616c6c6572206973206e6f7420616e206163636f756e746162696c6974792060408201526718dbdb9d1c9858dd60c21b606082015260800190565b6040815260006200946c604083018562008b93565b90508260208301529392505050565b80516200948881620089b7565b919050565b600082601f8301126200949f57600080fd5b8151620094b062008f088262008ebb565b818152846020838601011115620094c657600080fd5b62008306826020830160208701620089fc565b8051620094888162008a9f565b60006102608284031215620094fa57600080fd5b6200950462008e5c565b905062009511826200947b565b815262009521602083016200947b565b602082015262009534604083016200947b565b604082015260608201516001600160401b03808211156200955457600080fd5b62009562858386016200948d565b60608401526080848101519084015260a0808501519084015260c0808501519084015260e0808501519084015261010080850151908401526101208085015190840152610140808501519084015261016080850151908401526101809150620095cd8285016200947b565b918301919091526101a083810151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151909190818111156200961857600080fd5b62009626868287016200948d565b838501525050506102406200963d818401620094d9565b9082015292915050565b600080604083850312156200965b57600080fd5b82516001600160401b038111156200967257600080fd5b6200968085828601620094e6565b925050602083015190509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111562001663576200166362009691565b600181811c90821680620096d257607f821691505b602082108103620096f357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200786657600081815260208120601f850160051c81016020861015620097225750805b601f850160051c820191505b818110156200339a578281556001016200972e565b81516001600160401b038111156200975f576200975f62008e46565b6200977781620097708454620096bd565b84620096f9565b602080601f831160018114620097af5760008415620097965750858301515b600019600386901b1c1916600185901b1785556200339a565b600085815260208120601f198616915b82811015620097e057888601518255948401946001909101908401620097bf565b5085821015620097ff5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60a081526000620098de60a083018862008b93565b9050856020830152846040830152620098fb606083018562008b70565b620074d8608083018462008b70565b805180151581146200948857600080fd5b6000806000606084860312156200993157600080fd5b83516001600160401b038111156200994857600080fd5b6200995686828701620094e6565b9350506020840151915062008454604085016200990a565b60608152600062009983606083018662008b93565b905083602083015262008306604083018462008b70565b600060208284031215620099ad57600080fd5b81516001600160401b03811115620099c457600080fd5b6200830684828501620094e6565b8181038181111562001663576200166362009691565b600181815b8085111562009a2957816000190482111562009a0d5762009a0d62009691565b8085161562009a1b57918102915b93841c9390800290620099ed565b509250929050565b60008262009a425750600162001663565b8162009a515750600062001663565b816001811462009a6a576002811462009a755762009a95565b600191505062001663565b60ff84111562009a895762009a8962009691565b50506001821b62001663565b5060208310610133831016604e8410600b841016171562009aba575081810a62001663565b62009ac68383620099e8565b806000190482111562009add5762009add62009691565b029392505050565b600062001c87838362009a31565b60208082526012908201527143616e6e6f7420657863656564203130302560701b604082015260600190565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b60006020828403121562009b7557600080fd5b5051919050565b60006020828403121562009b8f57600080fd5b62001c87826200990a565b6000604082016040835280855480835260608501915060608160051b8601019250600087815260208120815b8381101562009c9957878603605f1901855281546001600160a01b031686526001820154602087015260606040870152600282018054849062009c0981620096bd565b8060608b0152600182166000811462009c2b576001811462009c485762009c7b565b60ff19831660808c0152608082151560051b8c0101935062009c7b565b84885260208820885b8381101562009c725781548d82016080015260019091019060200162009c51565b8c016080019450505b50919850505060209590950194506003919091019060010162009bc6565b5050505050828103602084015262009386818562009278565b808202811582820484141762001663576200166362009691565b634e487b7160e01b600052603260045260246000fd5b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b600060018060a01b0380881683528087166020840152808616604084015260a0606084015262009d9c60a084018662008a22565b91508084166080840152509695505050505050565b60408152600062009dc6604083018562008b93565b905062001c87602083018462008b70565b81810362009de3575050565b62009def8254620096bd565b6001600160401b0381111562009e095762009e0962008e46565b62009e1a81620097708454620096bd565b6000601f82116001811462009e51576000831562009e385750848201545b600019600385901b1c1916600184901b178455620020c9565b600085815260209020601f19841690600086815260209020845b8381101562009e8d578286015482556001958601959091019060200162009e6b565b5085831015620097ff5793015460001960f8600387901b161c19169092555050600190811b01905550565b60006001820162009ecd5762009ecd62009691565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008262009efc5762009efc62009ed4565b500490565b60018060a01b0383168152606060208201526000606082015260806040820152600062008306608083018462008a22565b6000845162009f46818460208901620089fc565b84519083019062009f5c818360208901620089fc565b845191019062009f71818360208801620089fc565b0195945050505050565b8281526040810162001c87602083018462008b70565b60008262009fa35762009fa362009ed4565b500690565b60ff818116838216019081111562001663576200166362009691565b6000845162009fd8818460208901620089fc565b84519083019062009fee818360208901620089fc565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a0606084015262009d9c60a084018662008a2256fe608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b031663f5be34896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556040516100e39083906020016102b8565b60405160208183030381529060405260079081610100919061036e565b508160405160200161011291906102b8565b6040516020818303038152906040526008908161012f919061036e565b5050600d80546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220181e4d7042d93d798d5c3f1896a32d7d1d12f69bf0d7622e91e21cc768c2d3e464736f6c63430008150033a2646970667358221220fbd15385c26b4f789e62299737030d354fcc3d3c61f749e95cf7f02ef81948d164736f6c63430008150033608060405234801561001057600080fd5b50600d80546001600160a01b03191633179055611538806100326000396000f3fe6080604052600436106101bb5760003560e01c806340c10f19116100ec57806395d89b411161008a578063a9059cbb11610064578063a9059cbb1461051a578063bd96102f1461053a578063dd62ed3e1461054f578063f5be348914610595576101c2565b806395d89b41146104d25780639dc29fac146104e7578063a0ce552d14610507576101c2565b806372c81963116100c657806372c819631461045d5780637eee288d1461047257806384955c8814610492578063949813b8146104b2576101c2565b806340c10f19146103d157806359355736146103f157806370a0823114610427576101c2565b806323b872dd11610159578063372500ab11610133578063372500ab146103745780633b19e84a146103895780633b80e355146103a75780633e4eb36c146103bc576101c2565b806323b872dd14610318578063282d3fdf14610338578063313ce56714610358576101c2565b806318160ddd1161019557806318160ddd146102ad578063187cf4d7146102cc57806319fac8fd146102e15780631eeffad014610303576101c2565b806306fdde0314610220578063095ea7b31461024b5780631195e07e1461027b576101c2565b366101c257005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b34801561022c57600080fd5b506102356105aa565b60405161024291906111c9565b60405180910390f35b34801561025757600080fd5b5061026b61026636600461122e565b61063c565b6040519015158152602001610242565b34801561028757600080fd5b506009546001600160a01b03165b6040516001600160a01b039091168152602001610242565b3480156102b957600080fd5b506003545b604051908152602001610242565b3480156102d857600080fd5b506102be610653565b3480156102ed57600080fd5b506103016102fc366004611258565b610662565b005b34801561030f57600080fd5b50600c546102be565b34801561032457600080fd5b5061026b610333366004611271565b610691565b34801561034457600080fd5b5061030161035336600461122e565b610786565b34801561036457600080fd5b5060405160128152602001610242565b34801561038057600080fd5b5061030161086a565b34801561039557600080fd5b50600a546001600160a01b0316610295565b3480156103b357600080fd5b506102be600981565b3480156103c857600080fd5b50600b546102be565b3480156103dd57600080fd5b506103016103ec36600461122e565b610916565b3480156103fd57600080fd5b506102be61040c3660046112ad565b6001600160a01b031660009081526001602052604090205490565b34801561043357600080fd5b506102be6104423660046112ad565b6001600160a01b031660009081526020819052604090205490565b34801561046957600080fd5b506102be600481565b34801561047e57600080fd5b5061030161048d36600461122e565b61097e565b34801561049e57600080fd5b506102be6104ad3660046112ad565b610a44565b3480156104be57600080fd5b506102be6104cd3660046112ad565b610a71565b3480156104de57600080fd5b50610235610ad5565b3480156104f357600080fd5b5061030161050236600461122e565b610ae4565b6102be610515366004611258565b610b44565b34801561052657600080fd5b5061026b61053536600461122e565b610d22565b34801561054657600080fd5b50610301610d6f565b34801561055b57600080fd5b506102be61056a3660046112c8565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b3480156105a157600080fd5b506102be610e76565b6060600780546105b9906112fb565b80601f01602080910402602001604051908101604052809291908181526020018280546105e5906112fb565b80156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b5050505050905090565b6000610649338484610e82565b5060015b92915050565b61065f6009600a61142f565b81565b600d546001600160a01b0316331461068c5760405162461bcd60e51b81526004016102179061143b565b600b55565b6001600160a01b0383166000908152600260209081526040808320338452909152812054828110156107165760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610217565b61072a85336107258685611483565b610e82565b6107348584610fa6565b61073e848461108c565b836001600160a01b0316856001600160a01b03166000805160206114e38339815191528560405161077191815260200190565b60405180910390a360019150505b9392505050565b600d546001600160a01b031633146107b05760405162461bcd60e51b81526004016102179061143b565b6001600160a01b038216600090815260016020908152604080832054918390529091205482916107df91611483565b10156108395760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b6064820152608401610217565b6001600160a01b03821660009081526001602052604081208054839290610861908490611496565b90915550505050565b6000610875336110d7565b33600081815260046020526040808220829055519293509183908381818185875af1925050503d80600081146108c7576040519150601f19603f3d011682016040523d82523d6000602084013e6108cc565b606091505b50509050806109125760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b6044820152606401610217565b5050565b600d546001600160a01b031633146109405760405162461bcd60e51b81526004016102179061143b565b61094a828261108c565b6040518181526001600160a01b038316906000906000805160206114e3833981519152906020015b60405180910390a35050565b600d546001600160a01b031633146109a85760405162461bcd60e51b81526004016102179061143b565b6001600160a01b038216600090815260016020526040902054811115610a1c5760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b6064820152608401610217565b6001600160a01b03821660009081526001602052604081208054839290610861908490611483565b6001600160a01b0381166000908152600160209081526040808320549183905282205461064d9190611483565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205490918391610aa6918491611166565b6001600160a01b038516600090815260046020526040902054909150610acd908290611496565b949350505050565b6060600880546105b9906112fb565b600d546001600160a01b03163314610b0e5760405162461bcd60e51b81526004016102179061143b565b610b188282610fa6565b6040518181526000906001600160a01b038416906000805160206114e383398151915290602001610972565b600d546000906001600160a01b03163314610b715760405162461bcd60e51b81526004016102179061143b565b346000610b7d826111a3565b9050610b898183611483565b600a546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610be0576040519150601f19603f3d011682016040523d82523d6000602084013e610be5565b606091505b5090915050801515600003610c0c5781600c6000828254610c069190611496565b90915550505b6000610c17866111a3565b90508515610caa57600d546009546001600160a01b039182169163f7fcc510911683610c43818b611483565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b505050505b600354600090610cbc6009600a61142f565b610cc690876114a9565b610cd091906114c0565b905080600654610ce09190611496565b6006556000610cf16009600a61142f565b600354610cfe90846114a9565b610d0891906114c0565b9050610d148186611496565b96505050505050505b919050565b6000610d2e3383610fa6565b610d38838361108c565b6040518281526001600160a01b0384169033906000805160206114e38339815191529060200160405180910390a350600192915050565b600a546001600160a01b03163314610dd45760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b6064820152608401610217565b600a54600c546040516000926001600160a01b031691908381818185875af1925050503d8060008114610e23576040519150601f19603f3d011682016040523d82523d6000602084013e610e28565b606091505b5050905080610e6e5760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b6044820152606401610217565b506000600c55565b61065f6004600a61142f565b6001600160a01b038316610ee45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610217565b6001600160a01b038216610f455760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610217565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610faf826110d7565b506001600160a01b03821660009081526020818152604080832054600190925290912054610fdd9082611483565b82111561102c5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e647300000000006044820152606401610217565b6110368282611483565b6001600160a01b038416600090815260208190526040902055808203611070576001600160a01b0383166000908152600560205260408120555b81600360008282546110829190611483565b9091555050505050565b611095826110d7565b506001600160a01b038216600090815260208190526040812080548392906110be908490611496565b9250508190555080600360008282546108619190611496565b6001600160a01b038116600090815260208181526040808320546006546005909352908320549091839161110c918491611166565b6001600160a01b038516600090815260046020526040902054909150611133908290611496565b6001600160a01b039094166000908152600460209081526040808320879055600654600590925290912055509192915050565b6000836000036111785750600061077f565b6111846009600a61142f565b8461118f8486611483565b61119991906114a9565b610acd91906114c0565b6000806111b26004600a61142f565b600b546111bf90856114a9565b61077f91906114c0565b600060208083528351808285015260005b818110156111f6578581018301518582016040015282016111da565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610d1d57600080fd5b6000806040838503121561124157600080fd5b61124a83611217565b946020939093013593505050565b60006020828403121561126a57600080fd5b5035919050565b60008060006060848603121561128657600080fd5b61128f84611217565b925061129d60208501611217565b9150604084013590509250925092565b6000602082840312156112bf57600080fd5b61077f82611217565b600080604083850312156112db57600080fd5b6112e483611217565b91506112f260208401611217565b90509250929050565b600181811c9082168061130f57607f821691505b60208210810361132f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561138657816000190482111561136c5761136c611335565b8085161561137957918102915b93841c9390800290611350565b509250929050565b60008261139d5750600161064d565b816113aa5750600061064d565b81600181146113c057600281146113ca576113e6565b600191505061064d565b60ff8411156113db576113db611335565b50506001821b61064d565b5060208310610133831016604e8410600b8410161715611409575081810a61064d565b611413838361134b565b806000190482111561142757611427611335565b029392505050565b600061077f838361138e565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b8181038181111561064d5761064d611335565b8082018082111561064d5761064d611335565b808202811582820484141761064d5761064d611335565b6000826114dd57634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220793cff6570aa2b8f874e8857627f6f1dd5654738349947241c11d6ffa4d8a96764736f6c63430008150033608060405234801561001057600080fd5b50604051610ebc380380610ebc83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610e29806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806364d61bbe1461005c578063c44a5b2114610087578063d0c66054146100a7578063f189d66c146100bd578063f774fac0146100d0575b600080fd5b61006f61006a3660046108ca565b6100f1565b60405161007e93929190610af6565b60405180910390f35b61009a610095366004610b20565b6101e5565b60405161007e9190610b6e565b6100af61022a565b60405190815260200161007e565b61009a6100cb366004610b88565b61023d565b6100e36100de366004610bdf565b610282565b60405161007e929190610c24565b6100f96105bf565b6000805481906001600160a01b0316331461012f5760405162461bcd60e51b815260040161012690610c46565b60405180910390fd5b61013b6004600a610d88565b87106101b75760008861012001518960c001518a60a0015161015d9190610d94565b6101679190610d94565b600060a08b018190526101008b018190526101208b0181905260c08b01526101e08a018051919250829161019c908390610d94565b9052506101a989866102ca565b8893509150600190506101da565b60006101c38989610303565b90506101d089888861057d565b8893509150600090505b955095509592505050565b6101ed6105bf565b6000546001600160a01b031633146102175760405162461bcd60e51b815260040161012690610c46565b61022183836102ca565b50815b92915050565b60006102386004600a610d88565b905090565b6102456105bf565b6000546001600160a01b0316331461026f5760405162461bcd60e51b815260040161012690610c46565b61027a84848461057d565b509192915050565b61028a6105bf565b600080546001600160a01b031633146102b55760405162461bcd60e51b815260040161012690610c46565b60006102c18585610303565b94959350505050565b600061020083015261024082018160058111156102e9576102e9610982565b908160058111156102fc576102fc610982565b9052505050565b60006103116004600a610d88565b821061036e5760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f7420736c617368203130302520776974686f7574206a61696c626f604482015265756e64696e6760d01b6064820152608401610126565b60008361012001518460c001518560a0015161038a9190610d94565b6103949190610d94565b905060006103a46004600a610d88565b6103ae8386610da7565b6103b89190610dbe565b9050600081905080866101200151106103ea578086610120018181516103de9190610de0565b90525060009050610405565b6101208601516103fa9082610de0565b600061012088015290505b801561048257808661010001511061044d5780866101000181815161042a9190610de0565b90525060a086018051829190610441908390610de0565b90525060009050610482565b61010086015161045d9082610de0565b90508561010001518660a0018181516104769190610de0565b90525060006101008701525b6000811180156104a5575060008660a001518760c001516104a39190610d94565b115b156105515760008660a001518760c001516104c09190610d94565b60c08801516104cf9084610da7565b6104d99190610dbe565b905060008760a001518860c001516104f19190610d94565b60a08901516105009085610da7565b61050a9190610dbe565b9050818860c00181815161051e9190610de0565b90525060a088018051829190610535908390610de0565b9052506105428183610d94565b61054c9084610de0565b925050505b61055b8183610de0565b915081866101e0018181516105709190610d94565b9052509095945050505050565b6105878243610d94565b61020084015261024083018160058111156105a4576105a4610982565b908160058111156105b7576105b7610982565b905250505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600581111561068057610680610982565b905290565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff811182821017156106bf576106bf610685565b60405290565b80356001600160a01b03811681146106dc57600080fd5b919050565b600082601f8301126106f257600080fd5b813567ffffffffffffffff8082111561070d5761070d610685565b604051601f8301601f19908116603f0116810190828211818310171561073557610735610685565b8160405283815286602085880101111561074e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600681106106dc57600080fd5b6000610260828403121561079057600080fd5b61079861069b565b90506107a3826106c5565b81526107b1602083016106c5565b60208201526107c2604083016106c5565b6040820152606082013567ffffffffffffffff808211156107e257600080fd5b6107ee858386016106e1565b60608401526080848101359084015260a0808501359084015260c0808501359084015260e08085013590840152610100808501359084015261012080850135908401526101408085013590840152610160808501359084015261018091506108578285016106c5565b918301919091526101a083810135908301526101c080840135908301526101e08084013590830152610200808401359083015261022090818401358181111561089f57600080fd5b6108ab868287016106e1565b838501525050506102406108c081840161076e565b9082015292915050565b600080600080600060a086880312156108e257600080fd5b853567ffffffffffffffff8111156108f957600080fd5b6109058882890161077d565b95505060208601359350604086013592506109226060870161076e565b91506109306080870161076e565b90509295509295909350565b6000815180845260005b8181101561096257602081850181015186830182015201610946565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b600681106109b657634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061026060208301516109e660208601826001600160a01b03169052565b506040830151610a0160408601826001600160a01b03169052565b506060830151816060860152610a198286018261093c565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151610a8f828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152610ad5838261093c565b9250505061024080840151610aec82870182610998565b5090949350505050565b606081526000610b0960608301866109ba565b602083019490945250901515604090910152919050565b60008060408385031215610b3357600080fd5b823567ffffffffffffffff811115610b4a57600080fd5b610b568582860161077d565b925050610b656020840161076e565b90509250929050565b602081526000610b8160208301846109ba565b9392505050565b600080600060608486031215610b9d57600080fd5b833567ffffffffffffffff811115610bb457600080fd5b610bc08682870161077d565b93505060208401359150610bd66040850161076e565b90509250925092565b60008060408385031215610bf257600080fd5b823567ffffffffffffffff811115610c0957600080fd5b610c158582860161077d565b95602094909401359450505050565b604081526000610c3760408301856109ba565b90508260208301529392505050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610cdf578160001904821115610cc557610cc5610c8e565b80851615610cd257918102915b93841c9390800290610ca9565b509250929050565b600082610cf657506001610224565b81610d0357506000610224565b8160018114610d195760028114610d2357610d3f565b6001915050610224565b60ff841115610d3457610d34610c8e565b50506001821b610224565b5060208310610133831016604e8410600b8410161715610d62575081810a610224565b610d6c8383610ca4565b8060001904821115610d8057610d80610c8e565b029392505050565b6000610b818383610ce7565b8082018082111561022457610224610c8e565b808202811582820484141761022457610224610c8e565b600082610ddb57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561022457610224610c8e56fea2646970667358221220b51097ab68900dec1131d424c1f814a398d2154c32aa29a1fa9ef122a1b0619064736f6c63430008150033608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b031663f5be34896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556040516100e39083906020016102b8565b60405160208183030381529060405260079081610100919061036e565b508160405160200161011291906102b8565b6040516020818303038152906040526008908161012f919061036e565b5050600d80546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220181e4d7042d93d798d5c3f1896a32d7d1d12f69bf0d7622e91e21cc768c2d3e464736f6c63430008150033",
}

// AutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityMetaData.ABI instead.
var AutonityABI = AutonityMetaData.ABI

// Deprecated: Use AutonityMetaData.Sigs instead.
// AutonityFuncSigs maps the 4-byte function signature to its string representation.
var AutonityFuncSigs = AutonityMetaData.Sigs

// AutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityMetaData.Bin instead.
var AutonityBin = AutonityMetaData.Bin

// DeployAutonity deploys a new Ethereum contract, binding an instance of Autonity to it.
func DeployAutonity(auth *bind.TransactOpts, backend bind.ContractBackend, _validators []AutonityValidator, _config AutonityConfig) (common.Address, *types.Transaction, *Autonity, error) {
	parsed, err := AutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AutonityBin), backend, _validators, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Autonity{AutonityCaller: AutonityCaller{contract: contract}, AutonityTransactor: AutonityTransactor{contract: contract}, AutonityFilterer: AutonityFilterer{contract: contract}}, nil
}

// Autonity is an auto generated Go binding around an Ethereum contract.
type Autonity struct {
	AutonityCaller     // Read-only binding to the contract
	AutonityTransactor // Write-only binding to the contract
	AutonityFilterer   // Log filterer for contract events
}

// AutonityCaller is an auto generated read-only Go binding around an Ethereum contract.
type AutonityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AutonityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AutonityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AutonitySession struct {
	Contract     *Autonity         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AutonityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AutonityCallerSession struct {
	Contract *AutonityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// AutonityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AutonityTransactorSession struct {
	Contract     *AutonityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// AutonityRaw is an auto generated low-level Go binding around an Ethereum contract.
type AutonityRaw struct {
	Contract *Autonity // Generic contract binding to access the raw methods on
}

// AutonityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AutonityCallerRaw struct {
	Contract *AutonityCaller // Generic read-only contract binding to access the raw methods on
}

// AutonityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AutonityTransactorRaw struct {
	Contract *AutonityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAutonity creates a new instance of Autonity, bound to a specific deployed contract.
func NewAutonity(address common.Address, backend bind.ContractBackend) (*Autonity, error) {
	contract, err := bindAutonity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Autonity{AutonityCaller: AutonityCaller{contract: contract}, AutonityTransactor: AutonityTransactor{contract: contract}, AutonityFilterer: AutonityFilterer{contract: contract}}, nil
}

// NewAutonityCaller creates a new read-only instance of Autonity, bound to a specific deployed contract.
func NewAutonityCaller(address common.Address, caller bind.ContractCaller) (*AutonityCaller, error) {
	contract, err := bindAutonity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityCaller{contract: contract}, nil
}

// NewAutonityTransactor creates a new write-only instance of Autonity, bound to a specific deployed contract.
func NewAutonityTransactor(address common.Address, transactor bind.ContractTransactor) (*AutonityTransactor, error) {
	contract, err := bindAutonity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityTransactor{contract: contract}, nil
}

// NewAutonityFilterer creates a new log filterer instance of Autonity, bound to a specific deployed contract.
func NewAutonityFilterer(address common.Address, filterer bind.ContractFilterer) (*AutonityFilterer, error) {
	contract, err := bindAutonity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AutonityFilterer{contract: contract}, nil
}

// bindAutonity binds a generic wrapper to an already deployed contract.
func bindAutonity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AutonityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Autonity *AutonityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Autonity.Contract.AutonityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Autonity *AutonityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.Contract.AutonityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Autonity *AutonityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Autonity.Contract.AutonityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Autonity *AutonityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Autonity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Autonity *AutonityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Autonity *AutonityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Autonity.Contract.contract.Transact(opts, method, params...)
}

// STANDARDDECIMALS is a free data retrieval call binding the contract method 0xf3c70aad.
//
// Solidity: function STANDARD_DECIMALS() view returns(uint256)
func (_Autonity *AutonityCaller) STANDARDDECIMALS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "STANDARD_DECIMALS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STANDARDDECIMALS is a free data retrieval call binding the contract method 0xf3c70aad.
//
// Solidity: function STANDARD_DECIMALS() view returns(uint256)
func (_Autonity *AutonitySession) STANDARDDECIMALS() (*big.Int, error) {
	return _Autonity.Contract.STANDARDDECIMALS(&_Autonity.CallOpts)
}

// STANDARDDECIMALS is a free data retrieval call binding the contract method 0xf3c70aad.
//
// Solidity: function STANDARD_DECIMALS() view returns(uint256)
func (_Autonity *AutonityCallerSession) STANDARDDECIMALS() (*big.Int, error) {
	return _Autonity.Contract.STANDARDDECIMALS(&_Autonity.CallOpts)
}

// STANDARDSCALEFACTOR is a free data retrieval call binding the contract method 0xd144f00a.
//
// Solidity: function STANDARD_SCALE_FACTOR() view returns(uint256)
func (_Autonity *AutonityCaller) STANDARDSCALEFACTOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "STANDARD_SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STANDARDSCALEFACTOR is a free data retrieval call binding the contract method 0xd144f00a.
//
// Solidity: function STANDARD_SCALE_FACTOR() view returns(uint256)
func (_Autonity *AutonitySession) STANDARDSCALEFACTOR() (*big.Int, error) {
	return _Autonity.Contract.STANDARDSCALEFACTOR(&_Autonity.CallOpts)
}

// STANDARDSCALEFACTOR is a free data retrieval call binding the contract method 0xd144f00a.
//
// Solidity: function STANDARD_SCALE_FACTOR() view returns(uint256)
func (_Autonity *AutonityCallerSession) STANDARDSCALEFACTOR() (*big.Int, error) {
	return _Autonity.Contract.STANDARDSCALEFACTOR(&_Autonity.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonityCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonitySession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Autonity.Contract.Allowance(&_Autonity.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *AutonityCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Autonity.Contract.Allowance(&_Autonity.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *AutonityCaller) BalanceOf(opts *bind.CallOpts, _addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *AutonitySession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _Autonity.Contract.BalanceOf(&_Autonity.CallOpts, _addr)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *AutonityCallerSession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _Autonity.Contract.BalanceOf(&_Autonity.CallOpts, _addr)
}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_Autonity *AutonityCaller) CirculatingSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "circulatingSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_Autonity *AutonitySession) CirculatingSupply() (*big.Int, error) {
	return _Autonity.Contract.CirculatingSupply(&_Autonity.CallOpts)
}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_Autonity *AutonityCallerSession) CirculatingSupply() (*big.Int, error) {
	return _Autonity.Contract.CirculatingSupply(&_Autonity.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *AutonityCaller) Config(opts *bind.CallOpts) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *AutonitySession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _Autonity.Contract.Config(&_Autonity.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *AutonityCallerSession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _Autonity.Contract.Config(&_Autonity.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *AutonityCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *AutonitySession) Decimals() (uint8, error) {
	return _Autonity.Contract.Decimals(&_Autonity.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *AutonityCallerSession) Decimals() (uint8, error) {
	return _Autonity.Contract.Decimals(&_Autonity.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonityCaller) Deployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "deployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonitySession) Deployer() (common.Address, error) {
	return _Autonity.Contract.Deployer(&_Autonity.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *AutonityCallerSession) Deployer() (common.Address, error) {
	return _Autonity.Contract.Deployer(&_Autonity.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *AutonityCaller) EpochID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "epochID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *AutonitySession) EpochID() (*big.Int, error) {
	return _Autonity.Contract.EpochID(&_Autonity.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *AutonityCallerSession) EpochID() (*big.Int, error) {
	return _Autonity.Contract.EpochID(&_Autonity.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *AutonityCaller) EpochTotalBondedStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *AutonitySession) EpochTotalBondedStake() (*big.Int, error) {
	return _Autonity.Contract.EpochTotalBondedStake(&_Autonity.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *AutonityCallerSession) EpochTotalBondedStake() (*big.Int, error) {
	return _Autonity.Contract.EpochTotalBondedStake(&_Autonity.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) GetBlockPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *AutonitySession) GetBlockPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetBlockPeriod(&_Autonity.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetBlockPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetBlockPeriod(&_Autonity.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *AutonityCaller) GetCommittee(opts *bind.CallOpts) ([]AutonityCommitteeMember, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)

	return out0, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *AutonitySession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _Autonity.Contract.GetCommittee(&_Autonity.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *AutonityCallerSession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _Autonity.Contract.GetCommittee(&_Autonity.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *AutonityCaller) GetCommitteeEnodes(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *AutonitySession) GetCommitteeEnodes() ([]string, error) {
	return _Autonity.Contract.GetCommitteeEnodes(&_Autonity.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *AutonityCallerSession) GetCommitteeEnodes() ([]string, error) {
	return _Autonity.Contract.GetCommitteeEnodes(&_Autonity.CallOpts)
}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) GetCurrentEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getCurrentEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_Autonity *AutonitySession) GetCurrentEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetCurrentEpochPeriod(&_Autonity.CallOpts)
}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetCurrentEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetCurrentEpochPeriod(&_Autonity.CallOpts)
}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *AutonityCaller) GetEpochByHeight(opts *bind.CallOpts, _height *big.Int) (AutonityEpochInfo, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getEpochByHeight", _height)

	if err != nil {
		return *new(AutonityEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)

	return out0, err

}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *AutonitySession) GetEpochByHeight(_height *big.Int) (AutonityEpochInfo, error) {
	return _Autonity.Contract.GetEpochByHeight(&_Autonity.CallOpts, _height)
}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *AutonityCallerSession) GetEpochByHeight(_height *big.Int) (AutonityEpochInfo, error) {
	return _Autonity.Contract.GetEpochByHeight(&_Autonity.CallOpts, _height)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *AutonityCaller) GetEpochFromBlock(opts *bind.CallOpts, _block *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *AutonitySession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetEpochFromBlock(&_Autonity.CallOpts, _block)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *AutonityCallerSession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetEpochFromBlock(&_Autonity.CallOpts, _block)
}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *AutonityCaller) GetEpochInfo(opts *bind.CallOpts) (AutonityEpochInfo, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getEpochInfo")

	if err != nil {
		return *new(AutonityEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)

	return out0, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *AutonitySession) GetEpochInfo() (AutonityEpochInfo, error) {
	return _Autonity.Contract.GetEpochInfo(&_Autonity.CallOpts)
}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *AutonityCallerSession) GetEpochInfo() (AutonityEpochInfo, error) {
	return _Autonity.Contract.GetEpochInfo(&_Autonity.CallOpts)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) GetEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *AutonitySession) GetEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetEpochPeriod(&_Autonity.CallOpts)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetEpochPeriod(&_Autonity.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *AutonityCaller) GetLastEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *AutonitySession) GetLastEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.GetLastEpochBlock(&_Autonity.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetLastEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.GetLastEpochBlock(&_Autonity.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonityCaller) GetMaxCommitteeSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonitySession) GetMaxCommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.GetMaxCommitteeSize(&_Autonity.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetMaxCommitteeSize() (*big.Int, error) {
	return _Autonity.Contract.GetMaxCommitteeSize(&_Autonity.CallOpts)
}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_Autonity *AutonityCaller) GetMaxScheduleDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getMaxScheduleDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_Autonity *AutonitySession) GetMaxScheduleDuration() (*big.Int, error) {
	return _Autonity.Contract.GetMaxScheduleDuration(&_Autonity.CallOpts)
}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetMaxScheduleDuration() (*big.Int, error) {
	return _Autonity.Contract.GetMaxScheduleDuration(&_Autonity.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *AutonityCaller) GetMinimumBaseFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *AutonitySession) GetMinimumBaseFee() (*big.Int, error) {
	return _Autonity.Contract.GetMinimumBaseFee(&_Autonity.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetMinimumBaseFee() (*big.Int, error) {
	return _Autonity.Contract.GetMinimumBaseFee(&_Autonity.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *AutonityCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *AutonitySession) GetNewContract() ([]byte, string, error) {
	return _Autonity.Contract.GetNewContract(&_Autonity.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *AutonityCallerSession) GetNewContract() ([]byte, string, error) {
	return _Autonity.Contract.GetNewContract(&_Autonity.CallOpts)
}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_Autonity *AutonityCaller) GetNextEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_Autonity *AutonitySession) GetNextEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.GetNextEpochBlock(&_Autonity.CallOpts)
}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetNextEpochBlock() (*big.Int, error) {
	return _Autonity.Contract.GetNextEpochBlock(&_Autonity.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *AutonityCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *AutonitySession) GetOperator() (common.Address, error) {
	return _Autonity.Contract.GetOperator(&_Autonity.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *AutonityCallerSession) GetOperator() (common.Address, error) {
	return _Autonity.Contract.GetOperator(&_Autonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *AutonityCaller) GetOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *AutonitySession) GetOracle() (common.Address, error) {
	return _Autonity.Contract.GetOracle(&_Autonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *AutonityCallerSession) GetOracle() (common.Address, error) {
	return _Autonity.Contract.GetOracle(&_Autonity.CallOpts)
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_Autonity *AutonityCaller) GetSchedule(opts *bind.CallOpts, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)

	return out0, err

}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_Autonity *AutonitySession) GetSchedule(_vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	return _Autonity.Contract.GetSchedule(&_Autonity.CallOpts, _vault, _id)
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_Autonity *AutonityCallerSession) GetSchedule(_vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	return _Autonity.Contract.GetSchedule(&_Autonity.CallOpts, _vault, _id)
}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_Autonity *AutonityCaller) GetTotalSchedules(opts *bind.CallOpts, _vault common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_Autonity *AutonitySession) GetTotalSchedules(_vault common.Address) (*big.Int, error) {
	return _Autonity.Contract.GetTotalSchedules(&_Autonity.CallOpts, _vault)
}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_Autonity *AutonityCallerSession) GetTotalSchedules(_vault common.Address) (*big.Int, error) {
	return _Autonity.Contract.GetTotalSchedules(&_Autonity.CallOpts, _vault)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *AutonityCaller) GetTreasuryAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *AutonitySession) GetTreasuryAccount() (common.Address, error) {
	return _Autonity.Contract.GetTreasuryAccount(&_Autonity.CallOpts)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *AutonityCallerSession) GetTreasuryAccount() (common.Address, error) {
	return _Autonity.Contract.GetTreasuryAccount(&_Autonity.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *AutonityCaller) GetTreasuryFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *AutonitySession) GetTreasuryFee() (*big.Int, error) {
	return _Autonity.Contract.GetTreasuryFee(&_Autonity.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetTreasuryFee() (*big.Int, error) {
	return _Autonity.Contract.GetTreasuryFee(&_Autonity.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) GetUnbondingPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *AutonitySession) GetUnbondingPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetUnbondingPeriod(&_Autonity.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetUnbondingPeriod() (*big.Int, error) {
	return _Autonity.Contract.GetUnbondingPeriod(&_Autonity.CallOpts)
}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_Autonity *AutonityCaller) GetUnbondingShare(opts *bind.CallOpts, _unbondingID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getUnbondingShare", _unbondingID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_Autonity *AutonitySession) GetUnbondingShare(_unbondingID *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetUnbondingShare(&_Autonity.CallOpts, _unbondingID)
}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_Autonity *AutonityCallerSession) GetUnbondingShare(_unbondingID *big.Int) (*big.Int, error) {
	return _Autonity.Contract.GetUnbondingShare(&_Autonity.CallOpts, _unbondingID)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *AutonityCaller) GetValidator(opts *bind.CallOpts, _addr common.Address) (AutonityValidator, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *AutonitySession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _Autonity.Contract.GetValidator(&_Autonity.CallOpts, _addr)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *AutonityCallerSession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _Autonity.Contract.GetValidator(&_Autonity.CallOpts, _addr)
}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_Autonity *AutonityCaller) GetValidatorState(opts *bind.CallOpts, _addr common.Address) (uint8, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getValidatorState", _addr)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_Autonity *AutonitySession) GetValidatorState(_addr common.Address) (uint8, error) {
	return _Autonity.Contract.GetValidatorState(&_Autonity.CallOpts, _addr)
}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_Autonity *AutonityCallerSession) GetValidatorState(_addr common.Address) (uint8, error) {
	return _Autonity.Contract.GetValidatorState(&_Autonity.CallOpts, _addr)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonityCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonitySession) GetValidators() ([]common.Address, error) {
	return _Autonity.Contract.GetValidators(&_Autonity.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *AutonityCallerSession) GetValidators() ([]common.Address, error) {
	return _Autonity.Contract.GetValidators(&_Autonity.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *AutonityCaller) GetVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *AutonitySession) GetVersion() (*big.Int, error) {
	return _Autonity.Contract.GetVersion(&_Autonity.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *AutonityCallerSession) GetVersion() (*big.Int, error) {
	return _Autonity.Contract.GetVersion(&_Autonity.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *AutonityCaller) InflationReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "inflationReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *AutonitySession) InflationReserve() (*big.Int, error) {
	return _Autonity.Contract.InflationReserve(&_Autonity.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *AutonityCallerSession) InflationReserve() (*big.Int, error) {
	return _Autonity.Contract.InflationReserve(&_Autonity.CallOpts)
}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_Autonity *AutonityCaller) IsUnbondingReleased(opts *bind.CallOpts, _unbondingID *big.Int) (bool, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_Autonity *AutonitySession) IsUnbondingReleased(_unbondingID *big.Int) (bool, error) {
	return _Autonity.Contract.IsUnbondingReleased(&_Autonity.CallOpts, _unbondingID)
}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_Autonity *AutonityCallerSession) IsUnbondingReleased(_unbondingID *big.Int) (bool, error) {
	return _Autonity.Contract.IsUnbondingReleased(&_Autonity.CallOpts, _unbondingID)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *AutonityCaller) LastEpochTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *AutonitySession) LastEpochTime() (*big.Int, error) {
	return _Autonity.Contract.LastEpochTime(&_Autonity.CallOpts)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *AutonityCallerSession) LastEpochTime() (*big.Int, error) {
	return _Autonity.Contract.LastEpochTime(&_Autonity.CallOpts)
}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_Autonity *AutonityCaller) LastFinalizedBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_Autonity *AutonitySession) LastFinalizedBlock() (*big.Int, error) {
	return _Autonity.Contract.LastFinalizedBlock(&_Autonity.CallOpts)
}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_Autonity *AutonityCallerSession) LastFinalizedBlock() (*big.Int, error) {
	return _Autonity.Contract.LastFinalizedBlock(&_Autonity.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *AutonityCaller) LiquidLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *AutonitySession) LiquidLogicContract() (common.Address, error) {
	return _Autonity.Contract.LiquidLogicContract(&_Autonity.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *AutonityCallerSession) LiquidLogicContract() (common.Address, error) {
	return _Autonity.Contract.LiquidLogicContract(&_Autonity.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonityCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonitySession) Name() (string, error) {
	return _Autonity.Contract.Name(&_Autonity.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *AutonityCallerSession) Name() (string, error) {
	return _Autonity.Contract.Name(&_Autonity.CallOpts)
}

// NewEpochPeriod is a free data retrieval call binding the contract method 0x241ed650.
//
// Solidity: function newEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCaller) NewEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "newEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewEpochPeriod is a free data retrieval call binding the contract method 0x241ed650.
//
// Solidity: function newEpochPeriod() view returns(uint256)
func (_Autonity *AutonitySession) NewEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.NewEpochPeriod(&_Autonity.CallOpts)
}

// NewEpochPeriod is a free data retrieval call binding the contract method 0x241ed650.
//
// Solidity: function newEpochPeriod() view returns(uint256)
func (_Autonity *AutonityCallerSession) NewEpochPeriod() (*big.Int, error) {
	return _Autonity.Contract.NewEpochPeriod(&_Autonity.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_Autonity *AutonityCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_Autonity *AutonitySession) Slasher() (common.Address, error) {
	return _Autonity.Contract.Slasher(&_Autonity.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_Autonity *AutonityCallerSession) Slasher() (common.Address, error) {
	return _Autonity.Contract.Slasher(&_Autonity.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonityCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonitySession) Symbol() (string, error) {
	return _Autonity.Contract.Symbol(&_Autonity.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *AutonityCallerSession) Symbol() (string, error) {
	return _Autonity.Contract.Symbol(&_Autonity.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonityCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Autonity.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonitySession) TotalSupply() (*big.Int, error) {
	return _Autonity.Contract.TotalSupply(&_Autonity.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *AutonityCallerSession) TotalSupply() (*big.Int, error) {
	return _Autonity.Contract.TotalSupply(&_Autonity.CallOpts)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *AutonityTransactor) SetLiquidLogicContract(opts *bind.TransactOpts, _contract common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "SetLiquidLogicContract", _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *AutonitySession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetLiquidLogicContract(&_Autonity.TransactOpts, _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *AutonityTransactorSession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetLiquidLogicContract(&_Autonity.TransactOpts, _contract)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *AutonityTransactor) ActivateValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "activateValidator", _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *AutonitySession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.ActivateValidator(&_Autonity.TransactOpts, _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *AutonityTransactorSession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.ActivateValidator(&_Autonity.TransactOpts, _address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonitySession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Approve(&_Autonity.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *AutonityTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Approve(&_Autonity.TransactOpts, spender, amount)
}

// Autobond is a paid mutator transaction binding the contract method 0xf7fcc510.
//
// Solidity: function autobond(address _validator, uint256 _selfBond, uint256 _delegated) returns()
func (_Autonity *AutonityTransactor) Autobond(opts *bind.TransactOpts, _validator common.Address, _selfBond *big.Int, _delegated *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "autobond", _validator, _selfBond, _delegated)
}

// Autobond is a paid mutator transaction binding the contract method 0xf7fcc510.
//
// Solidity: function autobond(address _validator, uint256 _selfBond, uint256 _delegated) returns()
func (_Autonity *AutonitySession) Autobond(_validator common.Address, _selfBond *big.Int, _delegated *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Autobond(&_Autonity.TransactOpts, _validator, _selfBond, _delegated)
}

// Autobond is a paid mutator transaction binding the contract method 0xf7fcc510.
//
// Solidity: function autobond(address _validator, uint256 _selfBond, uint256 _delegated) returns()
func (_Autonity *AutonityTransactorSession) Autobond(_validator common.Address, _selfBond *big.Int, _delegated *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Autobond(&_Autonity.TransactOpts, _validator, _selfBond, _delegated)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *AutonityTransactor) Bond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "bond", _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *AutonitySession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Bond(&_Autonity.TransactOpts, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *AutonityTransactorSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Bond(&_Autonity.TransactOpts, _validator, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactor) Burn(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "burn", _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *AutonitySession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Burn(&_Autonity.TransactOpts, _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactorSession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Burn(&_Autonity.TransactOpts, _addr, _amount)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *AutonityTransactor) ChangeCommissionRate(opts *bind.TransactOpts, _validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "changeCommissionRate", _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *AutonitySession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.ChangeCommissionRate(&_Autonity.TransactOpts, _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *AutonityTransactorSession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.ChangeCommissionRate(&_Autonity.TransactOpts, _validator, _rate)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *AutonityTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *AutonitySession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.CompleteContractUpgrade(&_Autonity.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *AutonityTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.CompleteContractUpgrade(&_Autonity.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_Autonity *AutonityTransactor) ComputeCommittee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "computeCommittee")
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_Autonity *AutonitySession) ComputeCommittee() (*types.Transaction, error) {
	return _Autonity.Contract.ComputeCommittee(&_Autonity.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_Autonity *AutonityTransactorSession) ComputeCommittee() (*types.Transaction, error) {
	return _Autonity.Contract.ComputeCommittee(&_Autonity.TransactOpts)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_Autonity *AutonityTransactor) CreateSchedule(opts *bind.TransactOpts, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_Autonity *AutonitySession) CreateSchedule(_scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.CreateSchedule(&_Autonity.TransactOpts, _scheduleVault, _amount, _startTime, _totalDuration)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_Autonity *AutonityTransactorSession) CreateSchedule(_scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.CreateSchedule(&_Autonity.TransactOpts, _scheduleVault, _amount, _startTime, _totalDuration)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *AutonityTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *AutonitySession) Finalize() (*types.Transaction, error) {
	return _Autonity.Contract.Finalize(&_Autonity.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *AutonityTransactorSession) Finalize() (*types.Transaction, error) {
	return _Autonity.Contract.Finalize(&_Autonity.TransactOpts)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_Autonity *AutonityTransactor) FinalizeInitialization(opts *bind.TransactOpts, delta *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "finalizeInitialization", delta)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_Autonity *AutonitySession) FinalizeInitialization(delta *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.FinalizeInitialization(&_Autonity.TransactOpts, delta)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_Autonity *AutonityTransactorSession) FinalizeInitialization(delta *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.FinalizeInitialization(&_Autonity.TransactOpts, delta)
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_Autonity *AutonityTransactor) Jail(opts *bind.TransactOpts, _nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "jail", _nodeAddress, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_Autonity *AutonitySession) Jail(_nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _Autonity.Contract.Jail(&_Autonity.TransactOpts, _nodeAddress, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_Autonity *AutonityTransactorSession) Jail(_nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _Autonity.Contract.Jail(&_Autonity.TransactOpts, _nodeAddress, _jailtime, _newJailedState)
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_Autonity *AutonityTransactor) Jailbound(opts *bind.TransactOpts, _nodeAddress common.Address, _newJailboundState uint8) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "jailbound", _nodeAddress, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_Autonity *AutonitySession) Jailbound(_nodeAddress common.Address, _newJailboundState uint8) (*types.Transaction, error) {
	return _Autonity.Contract.Jailbound(&_Autonity.TransactOpts, _nodeAddress, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_Autonity *AutonityTransactorSession) Jailbound(_nodeAddress common.Address, _newJailboundState uint8) (*types.Transaction, error) {
	return _Autonity.Contract.Jailbound(&_Autonity.TransactOpts, _nodeAddress, _newJailboundState)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactor) Mint(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "mint", _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *AutonitySession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Mint(&_Autonity.TransactOpts, _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *AutonityTransactorSession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Mint(&_Autonity.TransactOpts, _addr, _amount)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *AutonityTransactor) PauseValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "pauseValidator", _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *AutonitySession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.PauseValidator(&_Autonity.TransactOpts, _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *AutonityTransactorSession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.PauseValidator(&_Autonity.TransactOpts, _address)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *AutonityTransactor) RegisterValidator(opts *bind.TransactOpts, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *AutonitySession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _Autonity.Contract.RegisterValidator(&_Autonity.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *AutonityTransactorSession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _Autonity.Contract.RegisterValidator(&_Autonity.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *AutonityTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *AutonitySession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.ResetContractUpgrade(&_Autonity.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *AutonityTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Autonity.Contract.ResetContractUpgrade(&_Autonity.TransactOpts)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetAccountabilityContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setAccountabilityContract", _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *AutonitySession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAccountabilityContract(&_Autonity.TransactOpts, _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAccountabilityContract(&_Autonity.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetAcuContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setAcuContract", _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *AutonitySession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAcuContract(&_Autonity.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetAcuContract(&_Autonity.TransactOpts, _address)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *AutonityTransactor) SetCommitteeSize(opts *bind.TransactOpts, _size *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setCommitteeSize", _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *AutonitySession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetCommitteeSize(&_Autonity.TransactOpts, _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *AutonityTransactorSession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetCommitteeSize(&_Autonity.TransactOpts, _size)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactor) SetEpochPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setEpochPeriod", _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *AutonitySession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetEpochPeriod(&_Autonity.TransactOpts, _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactorSession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetEpochPeriod(&_Autonity.TransactOpts, _period)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetInflationControllerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setInflationControllerContract", _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *AutonitySession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetInflationControllerContract(&_Autonity.TransactOpts, _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetInflationControllerContract(&_Autonity.TransactOpts, _address)
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_Autonity *AutonityTransactor) SetMaxScheduleDuration(opts *bind.TransactOpts, _newMaxDuration *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMaxScheduleDuration", _newMaxDuration)
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_Autonity *AutonitySession) SetMaxScheduleDuration(_newMaxDuration *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxScheduleDuration(&_Autonity.TransactOpts, _newMaxDuration)
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_Autonity *AutonityTransactorSession) SetMaxScheduleDuration(_newMaxDuration *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMaxScheduleDuration(&_Autonity.TransactOpts, _newMaxDuration)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *AutonityTransactor) SetMinimumBaseFee(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setMinimumBaseFee", _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *AutonitySession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMinimumBaseFee(&_Autonity.TransactOpts, _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *AutonityTransactorSession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetMinimumBaseFee(&_Autonity.TransactOpts, _price)
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetOmissionAccountabilityContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setOmissionAccountabilityContract", _address)
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_Autonity *AutonitySession) SetOmissionAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOmissionAccountabilityContract(&_Autonity.TransactOpts, _address)
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetOmissionAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOmissionAccountabilityContract(&_Autonity.TransactOpts, _address)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *AutonityTransactor) SetOperatorAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setOperatorAccount", _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *AutonitySession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOperatorAccount(&_Autonity.TransactOpts, _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *AutonityTransactorSession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOperatorAccount(&_Autonity.TransactOpts, _account)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetOracleContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setOracleContract", _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *AutonitySession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOracleContract(&_Autonity.TransactOpts, _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetOracleContract(&_Autonity.TransactOpts, _address)
}

// SetOracleRewardRate is a paid mutator transaction binding the contract method 0xed5676e9.
//
// Solidity: function setOracleRewardRate(uint256 _oracleRewardRate) returns()
func (_Autonity *AutonityTransactor) SetOracleRewardRate(opts *bind.TransactOpts, _oracleRewardRate *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setOracleRewardRate", _oracleRewardRate)
}

// SetOracleRewardRate is a paid mutator transaction binding the contract method 0xed5676e9.
//
// Solidity: function setOracleRewardRate(uint256 _oracleRewardRate) returns()
func (_Autonity *AutonitySession) SetOracleRewardRate(_oracleRewardRate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetOracleRewardRate(&_Autonity.TransactOpts, _oracleRewardRate)
}

// SetOracleRewardRate is a paid mutator transaction binding the contract method 0xed5676e9.
//
// Solidity: function setOracleRewardRate(uint256 _oracleRewardRate) returns()
func (_Autonity *AutonityTransactorSession) SetOracleRewardRate(_oracleRewardRate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetOracleRewardRate(&_Autonity.TransactOpts, _oracleRewardRate)
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_Autonity *AutonityTransactor) SetProposerRewardRate(opts *bind.TransactOpts, _proposerRewardRate *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setProposerRewardRate", _proposerRewardRate)
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_Autonity *AutonitySession) SetProposerRewardRate(_proposerRewardRate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetProposerRewardRate(&_Autonity.TransactOpts, _proposerRewardRate)
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_Autonity *AutonityTransactorSession) SetProposerRewardRate(_proposerRewardRate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetProposerRewardRate(&_Autonity.TransactOpts, _proposerRewardRate)
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_Autonity *AutonityTransactor) SetSlasher(opts *bind.TransactOpts, _slasher common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setSlasher", _slasher)
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_Autonity *AutonitySession) SetSlasher(_slasher common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetSlasher(&_Autonity.TransactOpts, _slasher)
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_Autonity *AutonityTransactorSession) SetSlasher(_slasher common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetSlasher(&_Autonity.TransactOpts, _slasher)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetStabilizationContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setStabilizationContract", _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *AutonitySession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetStabilizationContract(&_Autonity.TransactOpts, _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetStabilizationContract(&_Autonity.TransactOpts, _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetSupplyControlContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setSupplyControlContract", _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *AutonitySession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetSupplyControlContract(&_Autonity.TransactOpts, _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetSupplyControlContract(&_Autonity.TransactOpts, _address)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *AutonityTransactor) SetTreasuryAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setTreasuryAccount", _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *AutonitySession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryAccount(&_Autonity.TransactOpts, _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *AutonityTransactorSession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryAccount(&_Autonity.TransactOpts, _account)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *AutonityTransactor) SetTreasuryFee(opts *bind.TransactOpts, _treasuryFee *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setTreasuryFee", _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *AutonitySession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryFee(&_Autonity.TransactOpts, _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *AutonityTransactorSession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetTreasuryFee(&_Autonity.TransactOpts, _treasuryFee)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactor) SetUnbondingPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setUnbondingPeriod", _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *AutonitySession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetUnbondingPeriod(&_Autonity.TransactOpts, _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *AutonityTransactorSession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetUnbondingPeriod(&_Autonity.TransactOpts, _period)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *AutonityTransactor) SetUpgradeManagerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setUpgradeManagerContract", _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *AutonitySession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetUpgradeManagerContract(&_Autonity.TransactOpts, _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *AutonityTransactorSession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetUpgradeManagerContract(&_Autonity.TransactOpts, _address)
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_Autonity *AutonityTransactor) SetWithheldRewardsPool(opts *bind.TransactOpts, _pool common.Address) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setWithheldRewardsPool", _pool)
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_Autonity *AutonitySession) SetWithheldRewardsPool(_pool common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetWithheldRewardsPool(&_Autonity.TransactOpts, _pool)
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_Autonity *AutonityTransactorSession) SetWithheldRewardsPool(_pool common.Address) (*types.Transaction, error) {
	return _Autonity.Contract.SetWithheldRewardsPool(&_Autonity.TransactOpts, _pool)
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_Autonity *AutonityTransactor) SetWithholdingThreshold(opts *bind.TransactOpts, _withholdingThreshold *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "setWithholdingThreshold", _withholdingThreshold)
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_Autonity *AutonitySession) SetWithholdingThreshold(_withholdingThreshold *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetWithholdingThreshold(&_Autonity.TransactOpts, _withholdingThreshold)
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_Autonity *AutonityTransactorSession) SetWithholdingThreshold(_withholdingThreshold *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.SetWithholdingThreshold(&_Autonity.TransactOpts, _withholdingThreshold)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_Autonity *AutonityTransactor) Slash(opts *bind.TransactOpts, _nodeAddress common.Address, _slashingRate *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "slash", _nodeAddress, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_Autonity *AutonitySession) Slash(_nodeAddress common.Address, _slashingRate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Slash(&_Autonity.TransactOpts, _nodeAddress, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_Autonity *AutonityTransactorSession) Slash(_nodeAddress common.Address, _slashingRate *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Slash(&_Autonity.TransactOpts, _nodeAddress, _slashingRate)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_Autonity *AutonityTransactor) SlashAndJail(opts *bind.TransactOpts, _nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "slashAndJail", _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_Autonity *AutonitySession) SlashAndJail(_nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _Autonity.Contract.SlashAndJail(&_Autonity.TransactOpts, _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_Autonity *AutonityTransactorSession) SlashAndJail(_nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _Autonity.Contract.SlashAndJail(&_Autonity.TransactOpts, _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactor) Transfer(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "transfer", _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonitySession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Transfer(&_Autonity.TransactOpts, _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactorSession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Transfer(&_Autonity.TransactOpts, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactor) TransferFrom(opts *bind.TransactOpts, _sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "transferFrom", _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonitySession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.TransferFrom(&_Autonity.TransactOpts, _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *AutonityTransactorSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.TransferFrom(&_Autonity.TransactOpts, _sender, _recipient, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *AutonityTransactor) Unbond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "unbond", _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *AutonitySession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Unbond(&_Autonity.TransactOpts, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *AutonityTransactorSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Autonity.Contract.Unbond(&_Autonity.TransactOpts, _validator, _amount)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *AutonityTransactor) UpdateEnode(opts *bind.TransactOpts, _nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "updateEnode", _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *AutonitySession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _Autonity.Contract.UpdateEnode(&_Autonity.TransactOpts, _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *AutonityTransactorSession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _Autonity.Contract.UpdateEnode(&_Autonity.TransactOpts, _nodeAddress, _enode)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *AutonityTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Autonity.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *AutonitySession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Autonity.Contract.UpgradeContract(&_Autonity.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *AutonityTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Autonity.Contract.UpgradeContract(&_Autonity.TransactOpts, _bytecode, _abi)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonityTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Autonity.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonitySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Autonity.Contract.Fallback(&_Autonity.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Autonity *AutonityTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Autonity.Contract.Fallback(&_Autonity.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonityTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Autonity.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonitySession) Receive() (*types.Transaction, error) {
	return _Autonity.Contract.Receive(&_Autonity.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Autonity *AutonityTransactorSession) Receive() (*types.Transaction, error) {
	return _Autonity.Contract.Receive(&_Autonity.TransactOpts)
}

// AutonityActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the Autonity contract.
type AutonityActivatedValidatorIterator struct {
	Event *AutonityActivatedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityActivatedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityActivatedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityActivatedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityActivatedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityActivatedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityActivatedValidator represents a ActivatedValidator event raised by the Autonity contract.
type AutonityActivatedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityActivatedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityActivatedValidatorIterator{contract: _Autonity.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
}

// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityActivatedValidator)
				if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) ParseActivatedValidator(log types.Log) (*AutonityActivatedValidator, error) {
	event := new(AutonityActivatedValidator)
	if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Autonity contract.
type AutonityApprovalIterator struct {
	Event *AutonityApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityApproval represents a Approval event raised by the Autonity contract.
type AutonityApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &AutonityApprovalIterator{contract: _Autonity.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityApproval)
				if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Autonity *AutonityFilterer) ParseApproval(log types.Log) (*AutonityApproval, error) {
	event := new(AutonityApproval)
	if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the Autonity contract.
type AutonityBondingRejectedIterator struct {
	Event *AutonityBondingRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityBondingRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityBondingRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityBondingRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityBondingRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityBondingRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityBondingRejected represents a BondingRejected event raised by the Autonity contract.
type AutonityBondingRejected struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	State     uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_Autonity *AutonityFilterer) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityBondingRejectedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityBondingRejectedIterator{contract: _Autonity.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
}

// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_Autonity *AutonityFilterer) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityBondingRejected)
				if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_Autonity *AutonityFilterer) ParseBondingRejected(log types.Log) (*AutonityBondingRejected, error) {
	event := new(AutonityBondingRejected)
	if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the Autonity contract.
type AutonityBurnedStakeIterator struct {
	Event *AutonityBurnedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityBurnedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityBurnedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityBurnedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityBurnedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityBurnedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityBurnedStake represents a BurnedStake event raised by the Autonity contract.
type AutonityBurnedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityBurnedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityBurnedStakeIterator{contract: _Autonity.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
}

// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityBurnedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityBurnedStake)
				if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) ParseBurnedStake(log types.Log) (*AutonityBurnedStake, error) {
	event := new(AutonityBurnedStake)
	if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the Autonity contract.
type AutonityCallFailedIterator struct {
	Event *AutonityCallFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityCallFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityCallFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityCallFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityCallFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityCallFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityCallFailed represents a CallFailed event raised by the Autonity contract.
type AutonityCallFailed struct {
	To              common.Address
	MethodSignature string
	ReturnData      []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_Autonity *AutonityFilterer) FilterCallFailed(opts *bind.FilterOpts) (*AutonityCallFailedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return &AutonityCallFailedIterator{contract: _Autonity.contract, event: "CallFailed", logs: logs, sub: sub}, nil
}

// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_Autonity *AutonityFilterer) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityCallFailed) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityCallFailed)
				if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_Autonity *AutonityFilterer) ParseCallFailed(log types.Log) (*AutonityCallFailed, error) {
	event := new(AutonityCallFailed)
	if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the Autonity contract.
type AutonityCommissionRateChangeIterator struct {
	Event *AutonityCommissionRateChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityCommissionRateChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityCommissionRateChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityCommissionRateChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityCommissionRateChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityCommissionRateChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityCommissionRateChange represents a CommissionRateChange event raised by the Autonity contract.
type AutonityCommissionRateChange struct {
	Validator common.Address
	Rate      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_Autonity *AutonityFilterer) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityCommissionRateChangeIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityCommissionRateChangeIterator{contract: _Autonity.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
}

// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_Autonity *AutonityFilterer) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityCommissionRateChange, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityCommissionRateChange)
				if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_Autonity *AutonityFilterer) ParseCommissionRateChange(log types.Log) (*AutonityCommissionRateChange, error) {
	event := new(AutonityCommissionRateChange)
	if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the Autonity contract.
type AutonityEpochPeriodUpdatedIterator struct {
	Event *AutonityEpochPeriodUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityEpochPeriodUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityEpochPeriodUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityEpochPeriodUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityEpochPeriodUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityEpochPeriodUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the Autonity contract.
type AutonityEpochPeriodUpdated struct {
	Period         *big.Int
	AppliedAtBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
//
// Solidity: event EpochPeriodUpdated(uint256 period, uint256 appliedAtBlock)
func (_Autonity *AutonityFilterer) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityEpochPeriodUpdatedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityEpochPeriodUpdatedIterator{contract: _Autonity.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
}

// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
//
// Solidity: event EpochPeriodUpdated(uint256 period, uint256 appliedAtBlock)
func (_Autonity *AutonityFilterer) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityEpochPeriodUpdated) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityEpochPeriodUpdated)
				if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
//
// Solidity: event EpochPeriodUpdated(uint256 period, uint256 appliedAtBlock)
func (_Autonity *AutonityFilterer) ParseEpochPeriodUpdated(log types.Log) (*AutonityEpochPeriodUpdated, error) {
	event := new(AutonityEpochPeriodUpdated)
	if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the Autonity contract.
type AutonityMinimumBaseFeeUpdatedIterator struct {
	Event *AutonityMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityMinimumBaseFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityMinimumBaseFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityMinimumBaseFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityMinimumBaseFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityMinimumBaseFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the Autonity contract.
type AutonityMinimumBaseFeeUpdated struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityMinimumBaseFeeUpdatedIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityMinimumBaseFeeUpdatedIterator{contract: _Autonity.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityMinimumBaseFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityMinimumBaseFeeUpdated)
				if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_Autonity *AutonityFilterer) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityMinimumBaseFeeUpdated, error) {
	event := new(AutonityMinimumBaseFeeUpdated)
	if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the Autonity contract.
type AutonityMintedStakeIterator struct {
	Event *AutonityMintedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityMintedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityMintedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityMintedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityMintedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityMintedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityMintedStake represents a MintedStake event raised by the Autonity contract.
type AutonityMintedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityMintedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityMintedStakeIterator{contract: _Autonity.contract, event: "MintedStake", logs: logs, sub: sub}, nil
}

// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityMintedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityMintedStake)
				if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_Autonity *AutonityFilterer) ParseMintedStake(log types.Log) (*AutonityMintedStake, error) {
	event := new(AutonityMintedStake)
	if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the Autonity contract.
type AutonityNewBondingRequestIterator struct {
	Event *AutonityNewBondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityNewBondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityNewBondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityNewBondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityNewBondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityNewBondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityNewBondingRequest represents a NewBondingRequest event raised by the Autonity contract.
type AutonityNewBondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewBondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityNewBondingRequestIterator{contract: _Autonity.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityNewBondingRequest)
				if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) ParseNewBondingRequest(log types.Log) (*AutonityNewBondingRequest, error) {
	event := new(AutonityNewBondingRequest)
	if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Autonity contract.
type AutonityNewEpochIterator struct {
	Event *AutonityNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityNewEpoch represents a NewEpoch event raised by the Autonity contract.
type AutonityNewEpoch struct {
	Epoch *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_Autonity *AutonityFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityNewEpochIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &AutonityNewEpochIterator{contract: _Autonity.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_Autonity *AutonityFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityNewEpoch) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityNewEpoch)
				if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_Autonity *AutonityFilterer) ParseNewEpoch(log types.Log) (*AutonityNewEpoch, error) {
	event := new(AutonityNewEpoch)
	if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityNewScheduleIterator is returned from FilterNewSchedule and is used to iterate over the raw logs and unpacked data for NewSchedule events raised by the Autonity contract.
type AutonityNewScheduleIterator struct {
	Event *AutonityNewSchedule // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityNewScheduleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityNewSchedule)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityNewSchedule)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityNewScheduleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityNewScheduleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityNewSchedule represents a NewSchedule event raised by the Autonity contract.
type AutonityNewSchedule struct {
	ScheduleVault common.Address
	Amount        *big.Int
	Start         *big.Int
	TotalDuration *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNewSchedule is a free log retrieval operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_Autonity *AutonityFilterer) FilterNewSchedule(opts *bind.FilterOpts, scheduleVault []common.Address) (*AutonityNewScheduleIterator, error) {

	var scheduleVaultRule []interface{}
	for _, scheduleVaultItem := range scheduleVault {
		scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewSchedule", scheduleVaultRule)
	if err != nil {
		return nil, err
	}
	return &AutonityNewScheduleIterator{contract: _Autonity.contract, event: "NewSchedule", logs: logs, sub: sub}, nil
}

// WatchNewSchedule is a free log subscription operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_Autonity *AutonityFilterer) WatchNewSchedule(opts *bind.WatchOpts, sink chan<- *AutonityNewSchedule, scheduleVault []common.Address) (event.Subscription, error) {

	var scheduleVaultRule []interface{}
	for _, scheduleVaultItem := range scheduleVault {
		scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewSchedule", scheduleVaultRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityNewSchedule)
				if err := _Autonity.contract.UnpackLog(event, "NewSchedule", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSchedule is a log parse operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_Autonity *AutonityFilterer) ParseNewSchedule(log types.Log) (*AutonityNewSchedule, error) {
	event := new(AutonityNewSchedule)
	if err := _Autonity.contract.UnpackLog(event, "NewSchedule", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the Autonity contract.
type AutonityNewUnbondingRequestIterator struct {
	Event *AutonityNewUnbondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityNewUnbondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityNewUnbondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityNewUnbondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityNewUnbondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityNewUnbondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityNewUnbondingRequest represents a NewUnbondingRequest event raised by the Autonity contract.
type AutonityNewUnbondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewUnbondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityNewUnbondingRequestIterator{contract: _Autonity.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityNewUnbondingRequest)
				if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_Autonity *AutonityFilterer) ParseNewUnbondingRequest(log types.Log) (*AutonityNewUnbondingRequest, error) {
	event := new(AutonityNewUnbondingRequest)
	if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the Autonity contract.
type AutonityPausedValidatorIterator struct {
	Event *AutonityPausedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityPausedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityPausedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityPausedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityPausedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityPausedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityPausedValidator represents a PausedValidator event raised by the Autonity contract.
type AutonityPausedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityPausedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityPausedValidatorIterator{contract: _Autonity.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
}

// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityPausedValidator)
				if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_Autonity *AutonityFilterer) ParsePausedValidator(log types.Log) (*AutonityPausedValidator, error) {
	event := new(AutonityPausedValidator)
	if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the Autonity contract.
type AutonityRegisteredValidatorIterator struct {
	Event *AutonityRegisteredValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityRegisteredValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityRegisteredValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityRegisteredValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityRegisteredValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityRegisteredValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityRegisteredValidator represents a RegisteredValidator event raised by the Autonity contract.
type AutonityRegisteredValidator struct {
	Treasury            common.Address
	Addr                common.Address
	OracleAddress       common.Address
	Enode               string
	LiquidStateContract common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_Autonity *AutonityFilterer) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityRegisteredValidatorIterator, error) {

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return &AutonityRegisteredValidatorIterator{contract: _Autonity.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
}

// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_Autonity *AutonityFilterer) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityRegisteredValidator) (event.Subscription, error) {

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityRegisteredValidator)
				if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_Autonity *AutonityFilterer) ParseRegisteredValidator(log types.Log) (*AutonityRegisteredValidator, error) {
	event := new(AutonityRegisteredValidator)
	if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the Autonity contract.
type AutonityRewardedIterator struct {
	Event *AutonityRewarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityRewardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityRewarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityRewarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityRewardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityRewardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityRewarded represents a Rewarded event raised by the Autonity contract.
type AutonityRewarded struct {
	Addr      common.Address
	AtnAmount *big.Int
	NtnAmount *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_Autonity *AutonityFilterer) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityRewardedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityRewardedIterator{contract: _Autonity.contract, event: "Rewarded", logs: logs, sub: sub}, nil
}

// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_Autonity *AutonityFilterer) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityRewarded, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityRewarded)
				if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_Autonity *AutonityFilterer) ParseRewarded(log types.Log) (*AutonityRewarded, error) {
	event := new(AutonityRewarded)
	if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Autonity contract.
type AutonityTransferIterator struct {
	Event *AutonityTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityTransfer represents a Transfer event raised by the Autonity contract.
type AutonityTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Autonity.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AutonityTransferIterator{contract: _Autonity.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Autonity.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityTransfer)
				if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Autonity *AutonityFilterer) ParseTransfer(log types.Log) (*AutonityTransfer, error) {
	event := new(AutonityTransfer)
	if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestMetaData contains all meta data concerning the AutonityUpgradeTest contract.
var AutonityUpgradeTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scheduleVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"NewSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"STANDARD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STANDARD_SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_selfBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegated\",\"type\":\"uint256\"}],\"name\":\"autobond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withholdingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposerRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"withheldRewardsPool\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"omissionAccountabilityContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getEpochByHeight\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxScheduleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidatorState\",\"outputs\":[{\"internalType\":\"enumValidatorState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxScheduleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOmissionAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleRewardRate\",\"type\":\"uint256\"}],\"name\":\"setOracleRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposerRewardRate\",\"type\":\"uint256\"}],\"name\":\"setProposerRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"}],\"name\":\"setSlasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setWithheldRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withholdingThreshold\",\"type\":\"uint256\"}],\"name\":\"setWithholdingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"f3c70aad": "STANDARD_DECIMALS()",
		"d144f00a": "STANDARD_SCALE_FACTOR()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"f7fcc510": "autobond(address,uint256,uint256)",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"9358928b": "circulatingSupply()",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"354c40a7": "createSchedule(address,uint256,uint256,uint256)",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"4da3baec": "finalizeInitialization(uint256)",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"0aac2da1": "getCurrentEpochPeriod()",
		"affb1cf1": "getEpochByHeight(uint256)",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"fed76a56": "getMaxScheduleDuration()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"8d347287": "getUnbondingShare(uint256)",
		"1904bb2e": "getValidator(address)",
		"5b7d6c36": "getValidatorState(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"e294df7c": "isUnbondingReleased(uint256)",
		"154d76d7": "jail(address,uint256,uint8)",
		"8ef8c2fd": "jailbound(address,uint8)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"241ed650": "newEpochPeriod()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"8bb2e477": "setMaxScheduleDuration(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"b47c3eaa": "setOmissionAccountabilityContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"ed5676e9": "setOracleRewardRate(uint256)",
		"416f86a2": "setProposerRewardRate(uint256)",
		"aabc2496": "setSlasher(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"39f9eb1f": "setWithheldRewardsPool(address)",
		"905d76e9": "setWithholdingThreshold(uint256)",
		"02fb4d85": "slash(address,uint256)",
		"122b4122": "slashAndJail(address,uint256,uint256,uint8,uint8)",
		"b1344271": "slasher()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600e556000600f553480156200001b57600080fd5b50604080516000808252602082019092529062000051565b6200003d620010e5565b815260200190600190039081620000335790505b50604080516101c081018252601054608080830191825260115460a08085019190915260125460c08086019190915260135460e080870191909152601454610100808801919091526015546101208801526016546101408801526017546101608801526018546001600160a01b0390811661018089015260195481166101a089015295875287519081018852601a5486168152601b548616602082810191909152601c548716828a0152601d548716606080840191909152601e54881683880152601f548816838701528154881694830194909452602154871692820192909252818701528651928301875260225490941682526023549382019390935260245481860152602554818401526026549181019190915292820192909252602754918101829052906000036200019e57603980546001600160a01b031916331790556200019e8282620001bb565b5050602754600103620001b557620001b56200079b565b62001629565b80518051601055602080820151601155604080830151601255606080840151601355608080850151601481905560a08087015160155560c08088015160165560e080890151601755610100890151601880546001600160a01b03199081166001600160a01b0393841617909155610120909a0151601980548c16918316919091179055888b01518051601a80548d16918416919091179055808a0151601b80548d1691841691909117905580890151601c80548d1691841691909117905580880151601d80548d1691841691909117905580870151601e80548d1691841691909117905593840151601f80548c169183169190911790559183015188548a169083161788559190910151602180548916918316919091179055848801518051602280549099169216919091179096559385015160238190558584015160245585830151602555940151602655840151602755602b92909255603855516200032290620011ae565b604051809103906000f0801580156200033f573d6000803e3d6000fd5b50603a80546001600160a01b0319166001600160a01b039290921691909117905560405130906200037090620011bc565b6001600160a01b039091168152602001604051809103906000f0801580156200039d573d6000803e3d6000fd5b50603b80546001600160a01b0319166001600160a01b039290921691909117905560005b825181101562000796576000838281518110620003e257620003e262001269565b602002602001015160a001519050600084838151811062000407576200040762001269565b60200260200101516101a001818152505060008483815181106200042f576200042f62001269565b602002602001015161018001906001600160a01b031690816001600160a01b03168152505060008483815181106200046b576200046b62001269565b602002602001015160a0018181525050600084838151811062000492576200049262001269565b60200260200101516101000181815250506000848381518110620004ba57620004ba62001269565b60209081029190910101516101c001526012548451859084908110620004e457620004e462001269565b6020026020010151608001818152505060008483815181106200050b576200050b62001269565b6020026020010151610240019060058111156200052c576200052c6200127f565b908160058111156200054257620005426200127f565b8152505060008483815181106200055d576200055d62001269565b6020026020010151610160018181525050600084838151811062000585576200058562001269565b602002602001015160c00181815250506000848381518110620005ac57620005ac62001269565b60200260200101516101200181815250506000848381518110620005d457620005d462001269565b602002602001015160e00181815250506000848381518110620005fb57620005fb62001269565b60200260200101516101400181815250506200063984838151811062000625576200062562001269565b60200260200101516200090b60201b60201c565b6200066a84838151811062000652576200065262001269565b60200260200101516040015162000a4d60201b60201c565b6200069784838151811062000683576200068362001269565b602002602001015162000ad260201b60201c565b8060336000868581518110620006b157620006b162001269565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000828254620006ee9190620012ab565b925050819055508060366000828254620007099190620012ab565b925050819055508060376000828254620007249190620012ab565b925050819055506200077e84838151811062000744576200074462001269565b6020026020010151602001518286858151811062000766576200076662001269565b60200260200101516000015162000d7460201b60201c565b505080806200078d90620012c7565b915050620003c1565b505050565b6039546001600160a01b03163314620008075760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60448201526218dbdb60ea1b60648201526084015b60405180910390fd5b600260346000602860018154811062000824576200082462001269565b60009182526020808320909101546001600160a01b03168352820192909252604001812060050180549091906200085d908490620012f9565b92505081905550600260346000602860018154811062000881576200088162001269565b60009182526020808320909101546001600160a01b0316835282019290925260400181206008018054909190620008ba908490620012f9565b909155505060026027556022546001600160a01b031660009081526033602052604081206103e89055620008f190600390620011ca565b620008ff60046000620011ca565b6005805460ff19169055565b600062000922826060015162000f7760201b60201c565b6001600160a01b03909116602084015290508015620009725760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b6044820152606401620007fe565b6020808301516001600160a01b03908116600090815260349092526040909120600101541615620009e65760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c72656164792072656769737465726564000000006044820152606401620007fe565b620009f46004600a6200140d565b8260800151111562000a495760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401620007fe565b5050565b6001600160a01b0381166000908152603560205260409020541562000ab55760405162461bcd60e51b815260206004820152601460248201527f6f7261636c6520736572766572206578697374730000000000000000000000006044820152606401620007fe565b6001600160a01b0316600090815260356020526040902060019055565b6101808101516001600160a01b031662000bd157603a546001600160a01b031662000b4b5760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b6064820152608401620007fe565b60285460009062000b5c9062000fc5565b905081602001518260000151836080015183603a60009054906101000a90046001600160a01b031660405162000b92906200120c565b62000ba295949392919062001422565b604051809103906000f08015801562000bbf573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602880546001808201835560009283527fe16da923a2d88192e5070f37b4571d58682c0d66212ec634d495f33de3f77ab590910180546001600160a01b03199081166001600160a01b039586161790915584518416835260349095526040918290208651815487169085161781559351908401805486169184169190911790558401516002830180549094169116179091556060820151829190600382019062000c83908262001530565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062000d42908262001530565b5061024082015160128201805460ff1916600183600581111562000d6a5762000d6a6200127f565b0217905550505050565b600080831162000dd35760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b6064820152608401620007fe565b6001600160a01b03821660009081526033602052604090205483111562000e3d5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e636500000000006044820152606401620007fe565b6001600160a01b0382166000908152603360205260408120805485929062000e67908490620015fc565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000ef683620012c7565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462000f6d9190620015fc565b9695505050505050565b60008062000f846200121a565b60008060ff9050604083875160208901845afa62000fa157600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000fed5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200101d57806200100481620012c7565b9150620010159050600a83620012f9565b915062000ff1565b6000816001600160401b038111156200103a576200103a62001253565b6040519080825280601f01601f19166020018201604052801562001065576020820181803683370190505b5090505b8415620010dd576200107d600183620015fc565b91506200108c600a8662001612565b62001099906030620012ab565b60f81b818381518110620010b157620010b162001269565b60200101906001600160f81b031916908160001a905350620010d5600a86620012f9565b945062001069565b949350505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160006005811115620011a957620011a96200127f565b905290565b61156a806200bcf583390190565b610ebc806200d25f83390190565b508054620011d890620014a2565b6000825580601f10620011e9575050565b601f01602090049060005260206000209081019062001209919062001238565b50565b6105cb806200e11b83390190565b60405180604001604052806002906020820280368337509192915050565b5b808211156200124f576000815560010162001239565b5090565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620012c157620012c162001295565b92915050565b600060018201620012dc57620012dc62001295565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826200130b576200130b620012e3565b500490565b600181815b808511156200135157816000190482111562001335576200133562001295565b808516156200134357918102915b93841c939080029062001315565b509250929050565b6000826200136a57506001620012c1565b816200137957506000620012c1565b81600181146200139257600281146200139d57620013bd565b6001915050620012c1565b60ff841115620013b157620013b162001295565b50506001821b620012c1565b5060208310610133831016604e8410600b8410161715620013e2575081810a620012c1565b620013ee838362001310565b806000190482111562001405576200140562001295565b029392505050565b60006200141b838362001359565b9392505050565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b82811015620014715786810182015185820160c00152810162001453565b5050600060c0828501015260c0601f19601f83011684010191505062000f6d60808301846001600160a01b03169052565b600181811c90821680620014b757607f821691505b602082108103620014d857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200079657600081815260208120601f850160051c81016020861015620015075750805b601f850160051c820191505b81811015620015285782815560010162001513565b505050505050565b81516001600160401b038111156200154c576200154c62001253565b62001564816200155d8454620014a2565b84620014de565b602080601f8311600181146200159c5760008415620015835750858301515b600019600386901b1c1916600185901b17855562001528565b600085815260208120601f198616915b82811015620015cd57888601518255948401946001909101908401620015ac565b5085821015620015ec5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115620012c157620012c162001295565b600082620016245762001624620012e3565b500690565b61a6bc80620016396000396000f3fe608060405260043610620005375760003560e01c80638ef8c2fd11620002ab578063b47c3eaa116200016b578063d886f8a211620000d7578063f03b959d116200008d578063f03b959d14620012fb578063f1d592a71462001320578063f3c70aad1462001345578063f7866ee3146200135c578063f7fcc510146200137c578063fed76a5614620013a157005b8063d886f8a214620011f4578063dd62ed3e1462001219578063dfb1a4d21462001263578063e294df7c146200127a578063e7f43c6814620012b6578063ed5676e914620012d657005b8063ceaad455116200012d578063ceaad4551462001133578063cf9c57191462001158578063cfd19fb91462001170578063d144f00a1462001195578063d372c07e14620011ad578063d5f3948814620011d257005b8063b47c3eaa1462001082578063b66b3e7914620010a7578063b7ab4db514620010cf578063c9d97af414620010f6578063cb696f54146200110e57005b8063a8b2216e1162000217578063ae1f5fa011620001cd578063ae1f5fa01462000fa3578063affb1cf11462000fcc578063b13442711462000ff1578063b2ea9adb1462001013578063b3ecbadd1462001038578063b46e5520146200105d57005b8063a8b2216e1462000ecc578063a9059cbb1462000ef3578063a9fd1a8f1462000f18578063aabc24961462000f3f578063ab8f6ffe1462000f64578063ae1da0b51462000f8b57005b806396f18a32116200026d57806396f18a321462000e0b5780639ac310741462000e2d5780639c98e4711462000e455780639dc29fac1462000e5d578063a515366a1462000e82578063a5d059ca1462000ea757005b80638ef8c2fd1462000d57578063905d76e91462000d7c5780639358928b1462000da157806395d89b411462000db857806396b477cb1462000de657005b80634364596911620003f757806377e741c71162000363578063852c48491162000319578063852c48491462000c93578063872cf0591462000cb857806389c614b81462000cd05780638bac7dad1462000ce85780638bb2e4771462000d0d5780638d3472871462000d3257005b806377e741c71462000aa7578063784304b51462000acc57806379502c551462000af1578063819b64631462000c23578063833b1fce1462000c3a57806384467fdb1462000c6e57005b80635b7d6c3611620003b95780635b7d6c36146200096c5780636b5f444c14620009a05780636fd2c80b14620009c557806370a0823114620009dc5780637264c4da1462000a16578063731b3a031462000a7e57005b80634364596914620008ba578063496ccd9b14620008d15780634bb278f314620008f65780634da3baec1462000922578063520fdbbc146200094757005b8063154d76d711620004a357806329070c6d116200045957806329070c6d14620007f1578063313ce5671462000808578063354c40a7146200082657806339f9eb1f146200084b57806340c10f191462000870578063416f86a2146200089557005b8063154d76d7146200071b57806318160ddd14620007405780631904bb2e146200075757806323b872dd146200078b578063241ed65014620007b057806325ce1bb914620007c857005b80630ae65e7a11620004f95780630ae65e7a146200063b5780630d8e6e2c1462000660578063112206331462000677578063114eaf55146200068e578063122b412214620006b35780631250a28d14620006f657005b806302fb4d85146200054157806306fdde031462000579578063088566e914620005b4578063095ea7b314620005ee5780630aac2da1146200062457005b366200053f57005b005b3480156200054e57600080fd5b50620005666200056036600462008a43565b620013b8565b6040519081526020015b60405180910390f35b3480156200058657600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b60405162000570919062008ac6565b348015620005c157600080fd5b5062000566620005d336600462008adb565b6001600160a01b031660009081526001602052604090205490565b348015620005fb57600080fd5b50620006136200060d36600462008a43565b62001650565b604051901515815260200162000570565b3480156200063157600080fd5b5060235462000566565b3480156200064857600080fd5b506200053f6200065a36600462008adb565b62001669565b3480156200066d57600080fd5b5060275462000566565b3480156200068457600080fd5b5060115462000566565b3480156200069b57600080fd5b506200053f620006ad36600462008afb565b62001707565b348015620006c057600080fd5b50620006d8620006d236600462008b23565b62001739565b60408051938452602084019290925215159082015260600162000570565b3480156200070357600080fd5b506200053f6200071536600462008adb565b620019e3565b3480156200072857600080fd5b50620005666200073a36600462008b89565b62001a32565b3480156200074d57600080fd5b5060365462000566565b3480156200076457600080fd5b506200077c6200077636600462008adb565b62001c8e565b60405162000570919062008d4e565b3480156200079857600080fd5b5062000613620007aa36600462008d63565b62001ca3565b348015620007bd57600080fd5b5062000566602b5481565b348015620007d557600080fd5b506029546000908152602f602052604090206003015462000566565b348015620007fe57600080fd5b5060105462000566565b3480156200081557600080fd5b506040516012815260200162000570565b3480156200083357600080fd5b506200053f6200084536600462008da9565b62001da8565b3480156200085857600080fd5b506200053f6200086a36600462008adb565b62001e80565b3480156200087d57600080fd5b506200053f6200088f36600462008a43565b62001f27565b348015620008a257600080fd5b506200053f620008b436600462008afb565b62001f64565b348015620008c757600080fd5b5060245462000566565b348015620008de57600080fd5b506200053f620008f036600462008adb565b62001fc6565b3480156200090357600080fd5b506200090e620020d0565b604051620005709695949392919062008e69565b3480156200092f57600080fd5b506200053f6200094136600462008afb565b62002973565b3480156200095457600080fd5b506200053f6200096636600462008adb565b62002b24565b3480156200097957600080fd5b50620009916200098b36600462008adb565b62002d80565b60405162000570919062008eac565b348015620009ad57600080fd5b506200053f620009bf36600462008afb565b62002d98565b348015620009d257600080fd5b5060135462000566565b348015620009e957600080fd5b5062000566620009fb36600462008adb565b6001600160a01b031660009081526033602052604090205490565b34801562000a2357600080fd5b5062000a3b62000a3536600462008a43565b620030bf565b604051620005709190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801562000a8b57600080fd5b506029546000908152602f602052604090206002015462000566565b34801562000ab457600080fd5b506200053f62000ac636600462008afb565b620031c5565b34801562000ad957600080fd5b506200053f62000aeb36600462008fb7565b620031f7565b34801562000afe57600080fd5b50604080516101408101825260105481526011546020808301919091526012548284015260135460608084019190915260145460808085019190915260155460a08086019190915260165460c08087019190915260175460e0808801919091526018546001600160a01b03908116610100808a019190915260195482166101208a015289519081018a52601a5482168152601b54821681890152601c548216818b0152601d54821681880152601e54821681870152601f548216818601528754821693810193909352602154811691830191909152875192830188526022541682526023549482019490945260245495810195909552602554918501919091526026549084015260275462000c11939084565b6040516200057094939291906200900c565b34801562000c3057600080fd5b5060255462000566565b34801562000c4757600080fd5b50601b546001600160a01b03165b6040516001600160a01b03909116815260200162000570565b34801562000c7b57600080fd5b506200053f62000c8d3660046200913b565b620033a2565b34801562000ca057600080fd5b506200053f62000cb236600462008a43565b620034bb565b34801562000cc557600080fd5b506200053f62003657565b34801562000cdd57600080fd5b5062000566602d5481565b34801562000cf557600080fd5b506200053f62000d0736600462008afb565b62003693565b34801562000d1a57600080fd5b506200053f62000d2c36600462008afb565b62003717565b34801562000d3f57600080fd5b506200056662000d5136600462008afb565b62003749565b34801562000d6457600080fd5b506200053f62000d76366004620091e3565b620037c2565b34801562000d8957600080fd5b506200053f62000d9b36600462008afb565b62003a0f565b34801562000dae57600080fd5b5060375462000566565b34801562000dc557600080fd5b50604080518082019091526003815262272a2760e91b6020820152620005a5565b34801562000df357600080fd5b506200056662000e0536600462008afb565b62003a71565b34801562000e1857600080fd5b50603a5462000c55906001600160a01b031681565b34801562000e3a57600080fd5b506200056660385481565b34801562000e5257600080fd5b5062000566602e5481565b34801562000e6a57600080fd5b506200053f62000e7c36600462008a43565b62003b09565b34801562000e8f57600080fd5b506200056662000ea136600462008a43565b62003c41565b34801562000eb457600080fd5b506200056662000ec636600462008a43565b62003d28565b34801562000ed957600080fd5b5062000ee462003dcb565b60405162000570919062009221565b34801562000f0057600080fd5b506200061362000f1236600462008a43565b62003eae565b34801562000f2557600080fd5b5062000f3062003f06565b60405162000570919062009287565b34801562000f4c57600080fd5b506200053f62000f5e36600462008adb565b62004095565b34801562000f7157600080fd5b5062000f7c62004150565b604051620005709190620092d9565b34801562000f9857600080fd5b5062000566602c5481565b34801562000fb057600080fd5b5062000fbb62004262565b604051620005709392919062009334565b34801562000fd957600080fd5b5062000f3062000feb36600462008afb565b620045ad565b34801562000ffe57600080fd5b50603b5462000c55906001600160a01b031681565b3480156200102057600080fd5b506200053f6200103236600462009373565b620047c7565b3480156200104557600080fd5b506200053f6200105736600462008adb565b6200480e565b3480156200106a57600080fd5b506200053f6200107c36600462008adb565b6200485d565b3480156200108f57600080fd5b506200053f620010a136600462008adb565b62004b65565b348015620010b457600080fd5b50620010bf62004bb4565b60405162000570929190620093d3565b348015620010dc57600080fd5b50620010e762004ceb565b60405162000570919062009405565b3480156200110357600080fd5b506200056660295481565b3480156200111b57600080fd5b506200053f6200112d36600462008afb565b62004d4f565b3480156200114057600080fd5b506200053f6200115236600462008adb565b62004db7565b3480156200116557600080fd5b506200053f62004e06565b3480156200117d57600080fd5b506200053f6200118f36600462008adb565b62004e5b565b348015620011a257600080fd5b506200056662004eaa565b348015620011ba57600080fd5b506200053f620011cc36600462008adb565b62004ebb565b348015620011df57600080fd5b5060395462000c55906001600160a01b031681565b3480156200120157600080fd5b506200053f6200121336600462008adb565b62004f0a565b3480156200122657600080fd5b5062000566620012383660046200941a565b6001600160a01b03918216600090815260326020908152604080832093909416825291909152205490565b3480156200127057600080fd5b50602b5462000566565b3480156200128757600080fd5b50620006136200129936600462008afb565b600090815260096020526040902060050154610100900460ff1690565b348015620012c357600080fd5b506022546001600160a01b031662000c55565b348015620012e357600080fd5b506200053f620012f536600462008afb565b62004f59565b3480156200130857600080fd5b506200053f6200131a36600462008adb565b62004fbb565b3480156200132d57600080fd5b506200053f6200133f36600462008adb565b6200500a565b3480156200135257600080fd5b5062000566600481565b3480156200136957600080fd5b506019546001600160a01b031662000c55565b3480156200138957600080fd5b506200053f6200139b3660046200944d565b620050c3565b348015620013ae57600080fd5b5060265462000566565b601a546000906001600160a01b0316331480620013df57506021546001600160a01b031633145b80620013f55750601b546001600160a01b031633145b6200141d5760405162461bcd60e51b8152600401620014149062009485565b60405180910390fd5b6200142762008861565b603b546001600160a01b031663f774fac0620014438662005314565b856040518363ffffffff1660e01b815260040162001463929190620094cd565b6000604051808303816000875af115801562001483573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014ad9190810190620096bd565b6019546001600160a01b031660009081526033602052604081208054929550929350849291620014df9084906200971d565b90915550506001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b0319918216178255918501516001820180549186169184169190911790559184015160028301805491909416911617909155606082015182919060038201906200155a9082620097b9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620016199082620097b9565b5061024082015160128201805460ff1916600183600581111562001641576200164162008bd0565b02179055509050505092915050565b60006200165f3384846200560f565b5060015b92915050565b6200167362005738565b6001600160a01b0380821660008181526034602052604090206001015490911614620016b35760405162461bcd60e51b8152600401620014149062009885565b6001600160a01b03818116600090815260346020526040902054163314620016ef5760405162461bcd60e51b81526004016200141490620098bc565b620016fa8162005787565b6200170460008055565b50565b6022546001600160a01b03163314620017345760405162461bcd60e51b8152600401620014149062009908565b601355565b601a54600090819081906001600160a01b03163314806200176457506021546001600160a01b031633145b806200177a5750601b546001600160a01b031633145b620017995760405162461bcd60e51b8152600401620014149062009485565b620017a362008861565b603b546001600160a01b03166364d61bbe620017bf8b62005314565b8a8a8a8a6040518663ffffffff1660e01b8152600401620017e59594939291906200993f565b6000604051808303816000875af115801562001805573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200182f919081019062009991565b6102008301516019546001600160a01b0316600090815260336020526040812080549499509197509195509293508692916200186d9084906200971d565b90915550506001600160a01b03808a16600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201518291906003820190620018e89082620097b9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620019a79082620097b9565b5061024082015160128201805460ff19166001836005811115620019cf57620019cf62008bd0565b021790555090505050955095509592505050565b6022546001600160a01b0316331462001a105760405162461bcd60e51b8152600401620014149062009908565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b601a546000906001600160a01b031633148062001a5957506021546001600160a01b031633145b8062001a6f5750601b546001600160a01b031633145b62001a8e5760405162461bcd60e51b8152600401620014149062009485565b603b546000906001600160a01b031663f189d66c62001aad8762005314565b86866040518463ffffffff1660e01b815260040162001acf93929190620099e4565b6000604051808303816000875af115801562001aef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b19919081019062009a10565b6001600160a01b03808716600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201519192508291600382019062001b919082620097b9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062001c509082620097b9565b5061024082015160128201805460ff1916600183600581111562001c785762001c7862008bd0565b02179055505050610200015190505b9392505050565b62001c9862008861565b620016638262005314565b6001600160a01b03831660009081526032602090815260408083203384529091528120548281101562001d2a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840162001414565b62001d3785858562005877565b62001d4f853362001d49868562009a48565b6200560f565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405162001d9591815260200190565b60405180910390a3506001949350505050565b6022546001600160a01b0316331462001dd55760405162461bcd60e51b8152600401620014149062009908565b60265481111562001e465760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b606482015260840162001414565b62001e528484620059a9565b826037600082825462001e66919062009a48565b9091555062001e7a90508484848462005a4a565b50505050565b6022546001600160a01b0316331462001ead5760405162461bcd60e51b8152600401620014149062009908565b6001600160a01b03811662001f055760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c2063616e6e6f74206265207a65726f20616464726573730000000000604482015260640162001414565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462001f545760405162461bcd60e51b8152600401620014149062009908565b62001f608282620059a9565b5050565b6022546001600160a01b0316331462001f915760405162461bcd60e51b8152600401620014149062009908565b62001f9f6004600a62009b5b565b81111562001fc15760405162461bcd60e51b8152600401620014149062009b69565b601655565b6022546001600160a01b0316331462001ff35760405162461bcd60e51b8152600401620014149062009908565b601b80546001600160a01b0319166001600160a01b03838116918217909255601c54604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b1580156200205257600080fd5b505af115801562002067573d6000803e3d6000fd5b5050601e54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b158015620020b457600080fd5b505af1158015620020c9573d6000803e3d6000fd5b5050505050565b60395460009081906060908290819081906001600160a01b031633146200210b5760405162461bcd60e51b8152600401620014149062009b95565b6200211562005738565b43602c8190556029546000828152602a60209081526040808320849055928252602f905281902060030154601a5491516306c9789b60e41b815292101560048301819052916001600160a01b0390911690636c9789b090602401600060405180830381600087803b1580156200218a57600080fd5b505af11580156200219f573d6000803e3d6000fd5b50506021546040516306c9789b60e41b81528415156004820152600093506001600160a01b039091169150636c9789b0906024016020604051808303816000875af1158015620021f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002219919062009bd8565b601b5460408051634bb278f360e01b815290519293506000926001600160a01b0390921691634bb278f391600480820192602092909190829003018187875af11580156200226b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002291919062009bf2565b905082156200273857602054603754603854602d546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa15801562002302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002328919062009bd8565b90508060385410156200233a57506038545b620023463082620059a9565b80603860008282546200235a919062009a48565b909155506200236b90504262005ccc565b603760008282546200237e91906200971d565b909155505030600090815260336020526040902054620023a090479062005e8c565b620023aa62006b46565b620023b462006c35565b6000806000620023c362004262565b601b54604051636d3c088760e11b815293965091945092506001600160a01b03169063da78110e90620023ff9086908590879060040162009334565b600060405180830381600087803b1580156200241a57600080fd5b505af11580156200242f573d6000803e3d6000fd5b5050601a5460405163e08b14ed60e01b81526001600160a01b03909116925063e08b14ed91506200246590859060040162009405565b600060405180830381600087803b1580156200248057600080fd5b505af115801562002495573d6000803e3d6000fd5b50506021546040516338f7bbe760e21b81526001600160a01b03909116925063e3deef9c9150620024ce90603090859060040162009c10565b600060405180830381600087803b158015620024e957600080fd5b505af1158015620024fe573d6000803e3d6000fd5b5050602b546023555050602154604051633009330b60e21b81524360048201526001600160a01b039091169063c024cc2c90602401600060405180830381600087803b1580156200254e57600080fd5b505af115801562002563573d6000803e3d6000fd5b50506029546000908152602f60205260408120600201546023549093509091506200258f90436200971d565b905042602d81905550600160296000828254620025ad91906200971d565b9091555050602954604080516030805460c0602082028401810190945260a08301818152620026f59594849391929060009085015b82821015620026d0576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620026389062009733565b80601f0160208091040260200160405190810160405280929190818152602001828054620026669062009733565b8015620026b75780601f106200268b57610100808354040283529160200191620026b7565b820191906000526020600020905b8154815290600101906020018083116200269957829003601f168201915b50505050508152505081526020019060010190620025e2565b5050505081526020018581526020014381526020018481526020018b81525062006d52565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e3356029546040516200272991815260200190565b60405180910390a15050505050505b80156200281257601b546040805163b6a702b360e01b815290516001600160a01b039092169163b6a702b39160048082019260009290919082900301818387803b1580156200278657600080fd5b505af11580156200279b573d6000803e3d6000fd5b5050601c546040805163a2e6204560e01b815290516001600160a01b03909216935063a2e62045925060048082019260209290919082900301816000875af19250505080156200280a575060408051601f3d908101601f19168201909252620028079181019062009bf2565b60015b156200281257505b6005546029546000908152602f6020908152604080832060018101546003909101546030805484518187028101870190955280855260ff909716968a969195939492938a939287929184015b828210156200294c576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620028b49062009733565b80601f0160208091040260200160405190810160405280929190818152602001828054620028e29062009733565b8015620029335780601f10620029075761010080835404028352916020019162002933565b820191906000526020600020905b8154815290600101906020018083116200291557829003601f168201915b505050505081525050815260200190600101906200285e565b5050505093509850985098509850985098505050506200296b60008055565b909192939495565b6039546001600160a01b03163314620029a05760405162461bcd60e51b8152600401620014149062009b95565b620029aa62005738565b620029b462006b46565b620029be62004262565b505042602d555043602c8190556000908152602a6020908152604080832083905560295481516030805460c09581028301860190945260a08201848152620016fa96939592948594919390919085015b8282101562002afc576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162002a649062009733565b80601f016020809104026020016040519081016040528092919081815260200182805462002a929062009733565b801562002ae35780601f1062002ab75761010080835404028352916020019162002ae3565b820191906000526020600020905b81548152906001019060200180831162002ac557829003601f168201915b5050505050815250508152602001906001019062002a0e565b5050509082525060006020820152436040820152602354606082015260800184905262006d52565b6022546001600160a01b0316331462002b515760405162461bcd60e51b8152600401620014149062009908565b602280546001600160a01b0319166001600160a01b03838116918217909255601b5460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b15801562002bb057600080fd5b505af115801562002bc5573d6000803e3d6000fd5b5050601c5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002c1157600080fd5b505af115801562002c26573d6000803e3d6000fd5b5050601d5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002c7257600080fd5b505af115801562002c87573d6000803e3d6000fd5b5050601e5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002cd357600080fd5b505af115801562002ce8573d6000803e3d6000fd5b5050601f5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002d3457600080fd5b505af115801562002d49573d6000803e3d6000fd5b505060215460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb915060240162002099565b600062002d8d8262005314565b610240015192915050565b6022546001600160a01b0316331462002dc55760405162461bcd60e51b8152600401620014149062009908565b60215460408051631728602760e21b815290516000926001600160a01b031691635ca1809c9160048083019260209291908290030181865afa15801562002e10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e36919062009bd8565b602154604080516362a48bb760e11b815290519293506000926001600160a01b039092169163c549176e916004808201926020929091908290030181865afa15801562002e87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ead919062009bd8565b90506000831162002f015760405162461bcd60e51b815260206004820152601860248201527f65706f636820706572696f642063616e6e6f7420626520300000000000000000604482015260640162001414565b600162002f0f83836200971d565b62002f1b919062009a48565b831162002f915760405162461bcd60e51b815260206004820152603c60248201527f65706f636820706572696f64206e6565647320746f206265206772656174657260448201527f207468616e2064656c74612b6c6f6f6b6261636b57696e646f772d3100000000606482015260840162001414565b601b5460408051635bc6f62960e11b815290516000926001600160a01b03169163b78dec529160048083019260209291908290030181865afa15801562002fdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003002919062009bd8565b9050836200301282600262009d28565b1115620030625760405162461bcd60e51b815260206004820152601960248201527f65706f636820706572696f6420697320746f6f20736d616c6c00000000000000604482015260640162001414565b602b8490556029546000908152602f6020908152604091829020600301548251878152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc791015b60405180910390a15050505050565b620030f26040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0383166000908152600160205260409020805483106200315c5760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f74206578697374000000000000000000604482015260640162001414565b80838154811062003171576200317162009d42565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505091505092915050565b6022546001600160a01b03163314620031f25760405162461bcd60e51b8152600401620014149062009908565b601055565b6001600160a01b038083166000818152603460205260409020600181015490921614620032385760405162461bcd60e51b8152600401620014149062009d58565b80546001600160a01b03163314620032645760405162461bcd60e51b8152600401620014149062009d8f565b6200326f8362006e2c565b15620032c95760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b606482015260840162001414565b600080620032d78462006e9d565b925090508115620033195760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001414565b60018301546001600160a01b038281169116146200338a5760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b606482015260840162001414565b600383016200339a8582620097b9565b505050505050565b6000604051806102600160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160106000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020014381526020016000815260200160008152602001848152602001600060058111156200346a576200346a62008bd0565b905290506200347a818362006ee2565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c92620030b092339289918b9162009dde565b6001600160a01b0380831660008181526034602052604090206001015490911614620034fb5760405162461bcd60e51b8152600401620014149062009885565b6001600160a01b03828116600090815260346020526040902054163314620035375760405162461bcd60e51b81526004016200141490620098bc565b620035456004600a62009b5b565b811115620035965760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e207261746500604482015260640162001414565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600f80546000908152600d909352958220855181546001600160a01b0319169516949094178455915160018085019190915591516002909301929092558354929390929091906200360f9084906200971d565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b6022546001600160a01b03163314620036845760405162461bcd60e51b8152600401620014149062009908565b6005805460ff19166001179055565b6022546001600160a01b03163314620036c05760405162461bcd60e51b8152600401620014149062009908565b60008111620037125760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e2774206265203000000000000000604482015260640162001414565b602555565b6022546001600160a01b03163314620037445760405162461bcd60e51b8152600401620014149062009908565b602655565b60008181526009602052604081206005015460ff16620037ac5760405162461bcd60e51b815260206004820152601960248201527f756e626f6e64696e67206e6f74206170706c6965642079657400000000000000604482015260640162001414565b5060009081526009602052604090206003015490565b601a546001600160a01b0316331480620037e657506021546001600160a01b031633145b80620037fc5750601b546001600160a01b031633145b6200381b5760405162461bcd60e51b8152600401620014149062009485565b603b546000906001600160a01b031663c44a5b216200383a8562005314565b846040518363ffffffff1660e01b81526004016200385a92919062009e27565b6000604051808303816000875af11580156200387a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620038a4919081019062009a10565b6001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b03199182161782559185015160018201805491861691841691909117905591840151600283018054919094169116179091556060820151919250829160038201906200391c9082620097b9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620039db9082620097b9565b5061024082015160128201805460ff1916600183600581111562003a035762003a0362008bd0565b02179055505050505050565b6022546001600160a01b0316331462003a3c5760405162461bcd60e51b8152600401620014149062009908565b62003a4a6004600a62009b5b565b81111562003a6c5760405162461bcd60e51b8152600401620014149062009b69565b601555565b6000602c54600162003a8491906200971d565b82111562003ae45760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74206765742065706f636820696420666f7220612066757475726560448201526520626c6f636b60d01b606482015260840162001414565b602c54821162003b0157506000908152602a602052604090205490565b505060295490565b6022546001600160a01b0316331462003b365760405162461bcd60e51b8152600401620014149062009908565b6001600160a01b03821660009081526033602052604090205481111562003b995760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b604482015260640162001414565b6001600160a01b0382166000908152603360205260408120805483929062003bc390849062009a48565b92505081905550806036600082825462003bde919062009a48565b92505081905550806037600082825462003bf9919062009a48565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062003c4d62005738565b6001600160a01b038084166000818152603460205260409020600101549091161462003c8d5760405162461bcd60e51b8152600401620014149062009d58565b6001600160a01b03831660009081526034602052604081206012015460ff16600581111562003cc05762003cc062008bd0565b1462003d0f5760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f206265206163746976650000000000604482015260640162001414565b62003d1c8383336200734b565b90506200166360008055565b600062003d3462005738565b6001600160a01b038084166000818152603460205260409020600101549091161462003d745760405162461bcd60e51b8152600401620014149062009d58565b6000821162003dbe5760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b604482015260640162001414565b62003d1c8383336200754e565b60606031805480602002602001604051908101604052809291908181526020016000905b8282101562003ea557838290600052602060002001805462003e119062009733565b80601f016020809104026020016040519081016040528092919081815260200182805462003e3f9062009733565b801562003e905780601f1062003e645761010080835404028352916020019162003e90565b820191906000526020600020905b81548152906001019060200180831162003e7257829003601f168201915b50505050508152602001906001019062003def565b50505050905090565b600062003ebd33848462005877565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b62003f396040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b6029546000908152602f602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b8282101562004060576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003fc89062009733565b80601f016020809104026020016040519081016040528092919081815260200182805462003ff69062009733565b8015620040475780601f106200401b5761010080835404028352916020019162004047565b820191906000526020600020905b8154815290600101906020018083116200402957829003601f168201915b5050505050815250508152602001906001019062003f72565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905090565b6022546001600160a01b03163314620040c25760405162461bcd60e51b8152600401620014149062009908565b6001600160a01b0381166200412e5760405162461bcd60e51b815260206004820152602b60248201527f736c617368657220636f6e74726163742063616e6e6f7420626520746865207a60448201526a65726f206164647265737360a81b606482015260840162001414565b603b80546001600160a01b0319166001600160a01b0392909216919091179055565b60606030805480602002602001604051908101604052809291908181526020016000905b8282101562003ea5576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620041ca9062009733565b80601f0160208091040260200160405190810160405280929190818152602001828054620041f89062009733565b8015620042495780601f106200421d5761010080835404028352916020019162004249565b820191906000526020600020905b8154815290600101906020018083116200422b57829003601f168201915b5050505050815250508152602001906001019062004174565b603954606090819081906001600160a01b03163314620042965760405162461bcd60e51b8152600401620014149062009b95565b602854620042e75760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f72730000000000000000604482015260640162001414565b620042f16200892a565b6025546080820152602881526034602082015260306040820152602e60608201526200431d81620078b7565b6200432b6031600062008948565b60305480620043725760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b604482015260640162001414565b6000816001600160401b038111156200438f576200438f62008ebc565b604051908082528060200260200182016040528015620043b9578160200160208202803683370190505b5090506000826001600160401b03811115620043d957620043d962008ebc565b60405190808252806020026020018201604052801562004403578160200160208202803683370190505b5090506000836001600160401b0381111562004423576200442362008ebc565b6040519080825280602002602001820160405280156200444d578160200160208202803683370190505b50905060005b848110156200459e576000603460006030848154811062004478576200447862009d42565b60009182526020808320600392830201546001600160a01b031684528301939093526040909101812060318054600181018255925292507fc54045fa7c6ec765e825df7f9e9bf9dec12c5cef146f93a5eee56772ee647fbc0190620044e09083018262009e4d565b50600281015485516001600160a01b039091169086908490811062004509576200450962009d42565b6001600160a01b039283166020918202929092010152600182015485519116908590849081106200453e576200453e62009d42565b6001600160a01b0392831660209182029290920101528154845191169084908490811062004570576200457062009d42565b6001600160a01b03909216602092830291909101909101525080620045958162009f2e565b91505062004453565b50919650945092505050909192565b620045e06040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b602c54620045f09060016200971d565b8211156200464d5760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b606482015260840162001414565b602954602c5483116200466b57506000828152602a60205260409020545b6000818152602f602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b828210156200478f576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620046f79062009733565b80601f0160208091040260200160405190810160405280929190818152602001828054620047259062009733565b8015620047765780601f106200474a5761010080835404028352916020019162004776565b820191906000526020600020905b8154815290600101906020018083116200475857829003601f168201915b50505050508152505081526020019060010190620046a1565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050915050919050565b6022546001600160a01b03163314620047f45760405162461bcd60e51b8152600401620014149062009908565b62004801600383620078d7565b62001f60600482620078d7565b6022546001600160a01b031633146200483b5760405162461bcd60e51b8152600401620014149062009908565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6200486762005738565b6001600160a01b0380821660008181526034602052604090206001015490911614620048a75760405162461bcd60e51b8152600401620014149062009885565b6001600160a01b03808216600090815260346020526040902080549091163314620048e65760405162461bcd60e51b8152600401620014149062009d8f565b6000601282015460ff16600581111562004904576200490462008bd0565b03620049535760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c7265616479206163746976650000000000000000604482015260640162001414565b6002601282015460ff16600581111562004971576200497162008bd0565b148015620049825750438160100154115b15620049d15760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c000000000000000000604482015260640162001414565b6004601282015460ff166005811115620049ef57620049ef62008bd0565b14801562004a005750438160100154115b1562004a5e5760405162461bcd60e51b815260206004820152602660248201527f76616c696461746f72207374696c6c20696e206a61696c20666f7220696e616360448201526574697669747960d01b606482015260840162001414565b6003601282015460ff16600581111562004a7c5762004a7c62008bd0565b1415801562004aa757506005601282015460ff16600581111562004aa45762004aa462008bd0565b14155b62004af55760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c7900000000604482015260640162001414565b60128101805460ff1916905580546029546000908152602f60209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200170460008055565b6022546001600160a01b0316331462004b925760405162461bcd60e51b8152600401620014149062009908565b602180546001600160a01b0319166001600160a01b0392909216919091179055565b6060806003600481805462004bc99062009733565b80601f016020809104026020016040519081016040528092919081815260200182805462004bf79062009733565b801562004c485780601f1062004c1c5761010080835404028352916020019162004c48565b820191906000526020600020905b81548152906001019060200180831162004c2a57829003601f168201915b5050505050915080805462004c5d9062009733565b80601f016020809104026020016040519081016040528092919081815260200182805462004c8b9062009733565b801562004cdc5780601f1062004cb05761010080835404028352916020019162004cdc565b820191906000526020600020905b81548152906001019060200180831162004cbe57829003601f168201915b50505050509050915091509091565b6060602880548060200260200160405190810160405280929190818152602001828054801562004d4557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162004d26575b5050505050905090565b6022546001600160a01b0316331462004d7c5760405162461bcd60e51b8152600401620014149062009908565b60118190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b6022546001600160a01b0316331462004de45760405162461bcd60e51b8152600401620014149062009908565b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462004e335760405162461bcd60e51b8152600401620014149062009908565b62004e416003600062008968565b62004e4f6004600062008968565b6005805460ff19169055565b6022546001600160a01b0316331462004e885760405162461bcd60e51b8152600401620014149062009908565b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b62004eb86004600a62009b5b565b81565b6022546001600160a01b0316331462004ee85760405162461bcd60e51b8152600401620014149062009908565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462004f375760405162461bcd60e51b8152600401620014149062009908565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b0316331462004f865760405162461bcd60e51b8152600401620014149062009908565b62004f946004600a62009b5b565b81111562004fb65760405162461bcd60e51b8152600401620014149062009b69565b601755565b6022546001600160a01b0316331462004fe85760405162461bcd60e51b8152600401620014149062009908565b602080546001600160a01b0319166001600160a01b0392909216919091179055565b6022546001600160a01b03163314620050375760405162461bcd60e51b8152600401620014149062009908565b6001600160a01b038116620050a15760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b606482015260840162001414565b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6029546000908152602f60205260409020600301544310156200511e5760405162461bcd60e51b8152602060048201526012602482015271195c1bd8da081a5cc81b9bdd08195b99195960721b604482015260640162001414565b601a5483906001600160a01b03163314806200514457506021546001600160a01b031633145b806200516c57506001600160a01b038181166000908152603460205260409020600c01541633145b80620051825750601b546001600160a01b031633145b620051db5760405162461bcd60e51b815260206004820152602260248201527f63616c6c6572206973206e6f742061207265776172642064697374726962757460448201526137b960f11b606482015260840162001414565b620051e782846200971d565b3360009081526033602052604090205410156200523c5760405162461bcd60e51b81526020600482015260126024820152716e6f7420656e6f7567682062616c616e636560701b604482015260640162001414565b6001600160a01b038416620052945760405162461bcd60e51b815260206004820181905260248201527f76616c696461746f7220616464726573732063616e6e6f74206265207a65726f604482015260640162001414565b6001600160a01b0380851660008181526034602052604090206001015490911614620052d45760405162461bcd60e51b8152600401620014149062009d58565b620052e082846200971d565b33600090815260336020526040812080549091906200530190849062009a48565b9091555062001e7a905084848462007a2a565b6200531e62008861565b6001600160a01b038216620053765760405162461bcd60e51b815260206004820152601e60248201527f63616e6e6f74207265717565737420656d7074792076616c696461746f720000604482015260640162001414565b6001600160a01b0380831660008181526034602052604090206001015490911614620053b65760405162461bcd60e51b8152600401620014149062009d58565b6001600160a01b038083166000908152603460209081526040918290208251610260810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620054199062009733565b80601f0160208091040260200160405190810160405280929190818152602001828054620054479062009733565b8015620054985780601f106200546c5761010080835404028352916020019162005498565b820191906000526020600020905b8154815290600101906020018083116200547a57829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a08201526011820180546101c090920191620055499062009733565b80601f0160208091040260200160405190810160405280929190818152602001828054620055779062009733565b8015620055c85780601f106200559c57610100808354040283529160200191620055c8565b820191906000526020600020905b815481529060010190602001808311620055aa57829003601f168201915b5050509183525050601282015460209091019060ff166005811115620055f257620055f262008bd0565b600581111562005606576200560662008bd0565b90525092915050565b6001600160a01b038316620056735760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840162001414565b6001600160a01b038216620056d65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840162001414565b6001600160a01b0383811660008181526032602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60005415620057805760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b604482015260640162001414565b6001600055565b6001600160a01b038116600090815260346020526040812090601282015460ff166005811115620057bc57620057bc62008bd0565b146200580b5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d757374206265206163746976650000000000000000604482015260640162001414565b60128101805460ff1916600117905580546029546000908152602f60209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b038316600090815260336020526040902054811115620058da5760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b604482015260640162001414565b6001600160a01b038316600090815260336020526040812080548392906200590490849062009a48565b9250508190555080603660008282546200591f91906200971d565b9091555062005932905081600262009d28565b6001600160a01b038316600090815260336020526040812080549091906200595c9084906200971d565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200572b91815260200190565b6001600160a01b03821660009081526033602052604081208054839290620059d39084906200971d565b925050819055508060366000828254620059ee91906200971d565b92505081905550806037600082825462005a0991906200971d565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162003c35565b6001600160a01b03841662005aa25760405162461bcd60e51b815260206004820152601c60248201527f7661756c7420616464726573732063616e6e6f74206265207a65726f00000000604482015260640162001414565b6000811162005af45760405162461bcd60e51b815260206004820181905260248201527f7363686564756c65206475726174696f6e2063616e6e6f74206265207a65726f604482015260640162001414565b4282101562005b545760405162461bcd60e51b815260206004820152602560248201527f7363686564756c652063616e6e6f74207374617274206265666f72652063726560448201526430ba34b7b760d91b606482015260840162001414565b6000831162005ba65760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f73697469766500000000000000604482015260640162001414565b6001600160a01b0384166000908152600160205260408120805490910362005c1457600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0387161790555b6040805160a08101825285815260006020808301828152838501888152606080860189815260808701868152895460018082018c558b8952978790209851600590910290980197885593519587019590955590516002860155925160038501555160049093019290925582518781529182018690529181018490526001600160a01b038716917fe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd910160405180910390a25050505050565b600254600090815b8181101562005e85576000600160006002848154811062005cf95762005cf962009d42565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909250905b8181101562005e6c57600083828154811062005d445762005d4462009d42565b90600052602060002090600502019050806004015488101562005dbb5760405162461bcd60e51b815260206004820152602860248201527f7363686564756c6520616c726561647920756e6c6f636b656420666f7220676960448201526776656e2074696d6560c01b606482015260840162001414565b8060020154881162005dce575062005e57565b60048101889055600381015460028201546000919062005def908b62009a48565b1062005dfe5750805462005e31565b60038201548254600284015462005e16908c62009a48565b62005e22919062009d28565b62005e2e919062009f60565b90505b600182015462005e42908262009a48565b62005e4e90896200971d565b60019092015595505b8062005e638162009f2e565b91505062005d24565b505050808062005e7c9062009f2e565b91505062005cd4565b5050919050565b8115801562005e99575080155b1562005ea3575050565b601054600090670de0b6b3a76400009062005ec090859062009d28565b62005ecc919062009f60565b9050801562005f4a576019546040516000916001600160a01b03169083908381818185875af1925050503d806000811462005f24576040519150601f19603f3d011682016040523d82523d6000602084013e62005f29565b606091505b509091505080151560010362005f485762005f45828562009a48565b93505b505b6000808062005f5c6004600a62009b5b565b60175462005f6b908862009d28565b62005f77919062009f60565b9050600062005f896004600a62009b5b565b60175462005f98908862009d28565b62005fa4919062009f60565b602154604080516353b1821b60e01b815290519293506000926001600160a01b03909216916353b1821b916004808201926020929091908290030181865afa15801562005ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200601b919062009bd8565b1115620060b657602554620060336004600a62009b5b565b6200603f919062009d28565b60305460165462006051908a62009d28565b6200605d919062009d28565b62006069919062009f60565b6025549094506200607d6004600a62009b5b565b62006089919062009d28565b6030546016546200609b908962009d28565b620060a7919062009d28565b620060b3919062009f60565b92505b620060c284836200971d565b620060ce908862009a48565b9650620060dc83826200971d565b620060e8908762009a48565b60215460408051637f5e2f1160e01b815290519298506000926001600160a01b0390921691637f5e2f11916004808201926020929091908290030181865afa15801562006139573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200615f919062009bd8565b6030549091506000906001600160401b0381111562006182576200618262008ebc565b604051908082528060200260200182016040528015620061ac578160200160208202803683370190505b5090506000806000805b603054811015620067295760006034600060308481548110620061dd57620061dd62009d42565b906000526020600020906003020160000160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002090506000602e548f6030858154811062006240576200624062009d42565b9060005260206000209060030201600101546200625e919062009d28565b6200626a919062009f60565b90506000602e548f6030868154811062006288576200628862009d42565b906000526020600020906003020160010154620062a6919062009d28565b620062b2919062009f60565b90506000821180620062c45750600081115b1562006710576002601284015460ff166005811115620062e857620062e862008bd0565b14806200631057506003601284015460ff1660058111156200630e576200630e62008bd0565b145b156200634f57838888815181106200632c576200632c62009d42565b602090810291909101015286620063438162009f2e565b97505050505062006714565b6004601284015460ff1660058111156200636d576200636d62008bd0565b14806200639557506005601284015460ff16600581111562006393576200639362008bd0565b145b15620063c057620063a782876200971d565b9550620063b581866200971d565b945050505062006714565b6021546001840154604051634d08f07360e11b81526001600160a01b0391821660048201526000929190911690639a11e0e690602401602060405180830381865afa15801562006414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200643a919062009bd8565b601554909150811115620064bd5760008a62006457838662009d28565b62006463919062009f60565b905060008b62006474848662009d28565b62006480919062009f60565b90506200648e828a6200971d565b98506200649c81896200971d565b9750620064aa828662009a48565b9450620064b8818562009a48565b935050505b60008460050154848660080154620064d6919062009d28565b620064e2919062009f60565b90508015620065a457845460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d806000811462006542576040519150601f19603f3d011682016040523d82523d6000602084013e62006547565b606091505b509092509050811515600003620065a15786546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162006598916001600160a01b0390911690849062009f77565b60405180910390a15b50505b60008560050154848760080154620065bd919062009d28565b620065c9919062009f60565b6001870154909150620065e8906001600160a01b031682600062007a2a565b6000620065f6828662009a48565b9050600062006606848862009a48565b90506000811180620066185750600082115b15620066c057600c8801546200663a9030906001600160a01b03168462005877565b600c8801546001600160a01b03166000818152603360205260409081902054905163a0ce552d60e01b8152600481019190915263a0ce552d90839060240160206040518083038185885af115801562006697573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190620066be919062009bd8565b505b600188015460408051898152602081018990526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a250505050505b5050505b80620067208162009f2e565b915050620061b6565b508215620068c55760005b83811015620068c357600085828151811062006754576200675462009d42565b602002602001015190506000602e548f603084815481106200677a576200677a62009d42565b90600052602060002090600302016001015462006798919062009d28565b620067a4919062009f60565b90506000602e548f60308581548110620067c257620067c262009d42565b906000526020600020906003020160010154620067e0919062009d28565b620067ec919062009f60565b601a54909150620068099030906001600160a01b03168362005877565b601a54603080546001600160a01b039092169163a8031a1d9185918790811062006837576200683762009d42565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b1580156200689057600080fd5b505af1158015620068a5573d6000803e3d6000fd5b50505050505050508080620068ba9062009f2e565b91505062006734565b505b602154604080516353b1821b60e01b815290516000926001600160a01b0316916353b1821b9160048083019260209291908290030181865afa15801562006910573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006936919062009bd8565b1115620069cd576021546001600160a01b03166200695630828b62005877565b6021546001600160a01b038281166000908152603360205260409081902054905163eeb9223360e01b8152600481019190915291169063eeb92233908c906024016000604051808303818588803b158015620069b157600080fd5b505af1158015620069c6573d6000803e3d6000fd5b5050505050505b601b54620069e79030906001600160a01b03168862005877565b601b546001600160a01b031660008181526033602052604090819020549051630b32e9c760e31b815260048101919091526359974e389089906024016000604051808303818588803b15801562006a3d57600080fd5b505af115801562006a52573d6000803e3d6000fd5b5050505050600082111562006b175760185460405160009182916001600160a01b039091169085908381818185875af1925050503d806000811462006ab4576040519150601f19603f3d011682016040523d82523d6000602084013e62006ab9565b606091505b50909250905081151560000362006b14576018546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162006b0b916001600160a01b0390911690849062009f77565b60405180910390a15b50505b801562006b385760185462006b389030906001600160a01b03168362005877565b505050505050505050505050565b6007545b60085481101562006b735762006b6d8162006b658162009f2e565b925062007aa3565b62006b4a565b50600854600755600b54600a540362006b8857565b600c545b600b5481101562006bb55762006baf8162006ba78162009f2e565b925062007cde565b62006b8c565b50600b54600c55600a54805b600b5481101562006c2f57601354600082815260096020526040902060040154439162006bee916200971d565b1162006c145762006bff8162007fcf565b62006c0c6001836200971d565b915062006c1a565b62006c2f565b8062006c268162009f2e565b91505062006bc1565b50600a55565b600f54600e54101562006d5057600e546000908152600d602052604090206013546001820154439162006c68916200971d565b111562006c725750565b80546001600160a01b039081166000908152603460205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd9262006cca92910190815260200190565b600060405180830381600087803b15801562006ce557600080fd5b505af115801562006cfa573d6000803e3d6000fd5b5050600e80546000908152600d6020526040812080546001600160a01b03191681556001808201839055600290910182905582549094509192509062006d429084906200971d565b9091555062006c3592505050565b565b6000828152602f6020908152604080832091840151600183015583015160028201556060830151600382015560808301516004820155905b82515181101562001e7a57825180518391908390811062006daf5762006daf62009d42565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b0390921691909117815591810151928201929092556040820151600282019062006e139082620097b9565b505050808062006e239062009f2e565b91505062006d8a565b6000805b60305481101562006e94576030818154811062006e515762006e5162009d42565b60009182526020909120600390910201546001600160a01b039081169084160362006e7f5750600192915050565b8062006e8b8162009f2e565b91505062006e30565b50600092915050565b60008062006eaa620089a7565b60008060ff9050604083875160208901845afa62006ec757600080fd5b50508051602090910151600160601b90910494909350915050565b60e281511462006f2c5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640162001414565b6030826102200151511462006f845760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e67746800000000604482015260640162001414565b62006f8f826200812c565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262006ff2920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262007012835162008264565b83604051602001620070279392919062009fa8565b60408051601f19818403018152828252805160209182012060028085526060850184529094506000939290918301908036833701905050905060008080806200707f8982620070796041600262009d28565b62008384565b905060006200709e8a620070966041600262009d28565b606062008384565b905060205b82518110156200716f57620070b983826200849d565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa15801562007115573d6000803e3d6000fd5b5050604051601f1901519050876200712f60418462009f60565b8151811062007142576200714262009d42565b6001600160a01b0390921660209283029190910190910152620071676041826200971d565b9050620070a3565b508a602001516001600160a01b03168660008151811062007194576200719462009d42565b60200260200101516001600160a01b031614620072065760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b606482015260840162001414565b8a604001516001600160a01b0316866001815181106200722a576200722a62009d42565b60200260200101516001600160a01b0316146200729e5760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b606482015260840162001414565b6001620072b68c6102200151838e60000151620084d4565b14620073245760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b606482015260840162001414565b620073338b6040015162008543565b6200733e8b620085bf565b5050505050505050505050565b6000808311620073aa5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b606482015260840162001414565b6001600160a01b038216600090815260336020526040902054831115620074145760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e63650000000000604482015260640162001414565b6001600160a01b038216600090815260336020526040812080548592906200743e90849062009a48565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b031991821617825594516001820180549190971695169490941790945551600283015591516003909101558254919290620074cd8362009f2e565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462007544919062009a48565b9695505050505050565b6001600160a01b03808416600090815260346020526040812080549192909184821691161480620076c657600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa158015620075c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620075ed919062009bd8565b905085811015620076555760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b606482015260840162001414565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b158015620076a657600080fd5b505af1158015620076bb573d6000803e3d6000fd5b505050505062007759565b8482600b01548360080154620076dd919062009a48565b10156200773d5760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b606482015260840162001414565b8482600b0160008282546200775391906200971d565b90915550505b6040805161010080820183526001600160a01b03878116835289811660208085019182528486018b8152600060608701818152436080890190815260a0890183815260c08a018481528c151560e08c01908152600b8054875260099098529b85209a518b546001600160a01b0319908116918b16919091178c55975160018c01805490991699169890981790965592516002890155516003880155905160048701559151600590950180549351965161ffff1990941695151561ff001916959095179515159093029490941762ff00001916620100009115159190910217909155805491620078488362009f2e565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc83886040516200789e9291909115158252602082015260400190565b60405180910390a36001600b5462007544919062009a48565b60fa60a06000808285855af4620078d2573d6000803e3d6000fd5b505050565b815460026001808316156101000203821604825180820160208110602084100160028114620079865760018114620079ac578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b808210156200796f578151845560018401935060208201915062007950565b815191036101000a90819004029091555062007a21565b60028302826020036101000a846020036101000a60208901510402018501875562007a21565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101562007a0f5781518455600184019350602082019150620079f0565b815191036101000a9081900402909155505b50505050505050565b8115801562007a37575080155b1562007a4257505050565b6001600160a01b03831660009081526034602052604081206008810180549192859262007a719084906200971d565b9091555062007a83905082846200971d565b81600501600082825462007a9891906200971d565b909155505050505050565b600081815260066020908152604080832060018101546001600160a01b03168452603490925282209091601282015460ff16600581111562007ae95762007ae962008bd0565b1462007b7d57600282015482546001600160a01b03166000908152603360205260408120805490919062007b1f9084906200971d565b909155505081546001830154600284015460128401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342926200572b92909160ff9091169062009ff1565b805482546001600160a01b0390811691161462007c9a576000808260080154836005015462007bad919062009a48565b90508060000362007bc5578360020154915062007beb565b80846002015484600d015462007bdc919062009d28565b62007be8919062009f60565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b15801562007c3d57600080fd5b505af115801562007c52573d6000803e3d6000fd5b505050508183600d01600082825462007c6c91906200971d565b9091555050600284015460058401805460009062007c8c9084906200971d565b90915550620078d292505050565b816002015481600801600082825462007cb491906200971d565b9091555050600282015460058201805460009062007cd49084906200971d565b9091555050505050565b600081815260096020908152604080832060018101546001600160a01b031684526034909252822060058201549192909162010000900460ff1662007ed3576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b15801562007d7457600080fd5b505af115801562007d89573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b15801562007ddf57600080fd5b505af115801562007df4573d6000803e3d6000fd5b5050505060008360080154846005015462007e10919062009a48565b600d85015490915062007e24828462009d28565b62007e30919062009f60565b92508184600d01600082825462007e48919062009a48565b9091555050600684015460000362007e67576003850183905562007e8f565b6006840154600785015462007e7d908562009d28565b62007e89919062009f60565b60038601555b8284600601600082825462007ea591906200971d565b9091555050600385015460078501805460009062007ec59084906200971d565b9091555062007fa892505050565b506002820154600882015481111562007eed575060088101545b816009015460000362007f07576003830181905562007f2f565b6009820154600a83015462007f1d908362009d28565b62007f29919062009f60565b60038401555b8082600901600082825462007f4591906200971d565b90915550506003830154600a8301805460009062007f659084906200971d565b925050819055508082600801600082825462007f82919062009a48565b90915550506002830154600b8301805460009062007fa290849062009a48565b90915550505b6005808401805460ff191660011790558201805482919060009062007a9890849062009a48565b600081815260096020526040812060058101805461ff001916610100179055600381015490910362007fff575050565b60018101546001600160a01b03166000908152603460205260408120600583015490919062010000900460ff166200809c578160070154826006015484600301546200804c919062009d28565b62008058919062009f60565b90508082600601600082825462008070919062009a48565b909155505060038301546007830180546000906200809090849062009a48565b90915550620081019050565b81600a015482600901548460030154620080b7919062009d28565b620080c3919062009f60565b905080826009016000828254620080db919062009a48565b90915550506003830154600a83018054600090620080fb90849062009a48565b90915550505b82546001600160a01b03166000908152603360205260408120805483929062007a989084906200971d565b60006200813d826060015162006e9d565b6001600160a01b039091166020840152905080156200818d5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b604482015260640162001414565b6020808301516001600160a01b03908116600090815260349092526040909120600101541615620082015760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c7265616479207265676973746572656400000000604482015260640162001414565b6200820f6004600a62009b5b565b8260800151111562001f605760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e2072617465000000000000000000604482015260640162001414565b6060816000036200828c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620082bc5780620082a38162009f2e565b9150620082b49050600a8362009f60565b915062008290565b6000816001600160401b03811115620082d957620082d962008ebc565b6040519080825280601f01601f19166020018201604052801562008304576020820181803683370190505b5090505b84156200837c576200831c60018362009a48565b91506200832b600a866200a007565b620083389060306200971d565b60f81b81838151811062008350576200835062009d42565b60200101906001600160f81b031916908160001a90535062008374600a8662009f60565b945062008308565b949350505050565b6060816200839481601f6200971d565b1015620083d55760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640162001414565b620083e182846200971d565b84511015620084275760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640162001414565b60608215801562008448576040519150600082526020820160405262008494565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200848357805183526020928301920162008469565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b811015620084cd57620084ca601b826200a01e565b90505b9250925092565b6000620084e0620089c5565b6000858585604051602001620084f9939291906200a03a565b6040516020818303038152906040529050600060fb90506000825160206200852291906200971d565b90506020848285855afa6200853657600080fd5b5050905195945050505050565b6001600160a01b03811660009081526035602052604090205415620085a25760405162461bcd60e51b81526020600482015260146024820152736f7261636c65207365727665722065786973747360601b604482015260640162001414565b6001600160a01b0316600090815260356020526040902060019055565b6101808101516001600160a01b0316620086be57603a546001600160a01b0316620086385760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b606482015260840162001414565b602854600090620086499062008264565b905081602001518260000151836080015183603a60009054906101000a90046001600160a01b03166040516200867f90620089e3565b6200868f9594939291906200a089565b604051809103906000f080158015620086ac573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602880546001808201835560009283527fe16da923a2d88192e5070f37b4571d58682c0d66212ec634d495f33de3f77ab590910180546001600160a01b03199081166001600160a01b0395861617909155845184168352603490955260409182902086518154871690851617815593519084018054861691841691909117905584015160028301805490941691161790915560608201518291906003820190620087709082620097b9565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f820155610200820151601082015561022082015160118201906200882f9082620097b9565b5061024082015160128201805460ff1916600183600581111562008857576200885762008bd0565b0217905550505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600581111562008925576200892562008bd0565b905290565b6040518060a001604052806005906020820280368337509192915050565b5080546000825590600052602060002090810190620017049190620089f1565b508054620089769062009733565b6000825580601f1062008987575050565b601f01602090049060005260206000209081019062001704919062008a16565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105cb806200a0bc83390190565b8082111562008a1257600062008a08828262008968565b50600101620089f1565b5090565b5b8082111562008a12576000815560010162008a17565b6001600160a01b03811681146200170457600080fd5b6000806040838503121562008a5757600080fd5b823562008a648162008a2d565b946020939093013593505050565b60005b8381101562008a8f57818101518382015260200162008a75565b50506000910152565b6000815180845262008ab281602086016020860162008a72565b601f01601f19169290920160200192915050565b60208152600062001c87602083018462008a98565b60006020828403121562008aee57600080fd5b813562001c878162008a2d565b60006020828403121562008b0e57600080fd5b5035919050565b600681106200170457600080fd5b600080600080600060a0868803121562008b3c57600080fd5b853562008b498162008a2d565b94506020860135935060408601359250606086013562008b698162008b15565b9150608086013562008b7b8162008b15565b809150509295509295909350565b60008060006060848603121562008b9f57600080fd5b833562008bac8162008a2d565b925060208401359150604084013562008bc58162008b15565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b6006811062008c0557634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b031682526000610260602083015162008c3660208601826001600160a01b03169052565b50604083015162008c5260408601826001600160a01b03169052565b50606083015181606086015262008c6c8286018262008a98565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152506101408084015181860152506101608084015181860152506101808084015162008ce3828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e080840151908501526102008084015190850152610220808401518583038287015262008d2b838262008a98565b925050506102408084015162008d448287018262008be6565b5090949350505050565b60208152600062001c87602083018462008c09565b60008060006060848603121562008d7957600080fd5b833562008d868162008a2d565b9250602084013562008d988162008a2d565b929592945050506040919091013590565b6000806000806080858703121562008dc057600080fd5b843562008dcd8162008a2d565b966020860135965060408601359560600135945092505050565b600081518084526020808501808196508360051b8101915082860160005b8581101562008e5c578284038952815180516001600160a01b03168552858101518686015260409081015160609186018290529062008e478187018362008a98565b9a87019a955050509084019060010162008e05565b5091979650505050505050565b8615158152851515602082015260c06040820152600062008e8e60c083018762008de7565b606083019590955250608081019290925260a0909101529392505050565b6020810162001663828462008be6565b634e487b7160e01b600052604160045260246000fd5b60405161026081016001600160401b038111828210171562008ef85762008ef862008ebc565b60405290565b604051601f8201601f191681016001600160401b038111828210171562008f295762008f2962008ebc565b604052919050565b60006001600160401b0382111562008f4d5762008f4d62008ebc565b50601f01601f191660200190565b600082601f83011262008f6d57600080fd5b813562008f8462008f7e8262008f31565b62008efe565b81815284602083860101111562008f9a57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562008fcb57600080fd5b823562008fd88162008a2d565b915060208301356001600160401b0381111562008ff457600080fd5b620090028582860162008f5b565b9150509250929050565b600061030082019050855182526020860151602083015260408601516040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e0830152610100808701516200907b828501826001600160a01b03169052565b5050610120958601516001600160a01b0390811696830196909652845186166101408301526020808601518716610160840152604080870151881661018085015260608088015189166101a08601526080808901518a166101c087015260a08901518a166101e087015260c08901518a1661020087015260e0909801518916610220860152865190981661024085015290850151610260840152840151610280830152948301516102a082015291909201516102c08201526102e0015290565b600080600080608085870312156200915257600080fd5b84356001600160401b03808211156200916a57600080fd5b620091788883890162008f5b565b9550602087013591506200918c8262008a2d565b90935060408601359080821115620091a357600080fd5b620091b18883890162008f5b565b93506060870135915080821115620091c857600080fd5b50620091d78782880162008f5b565b91505092959194509250565b60008060408385031215620091f757600080fd5b8235620092048162008a2d565b91506020830135620092168162008b15565b809150509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200927a57603f198886030184526200926785835162008a98565b9450928501929085019060010162009248565b5092979650505050505050565b602081526000825160a06020840152620092a560c084018262008de7565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60208152600062001c87602083018462008de7565b600081518084526020808501945080840160005b83811015620093295781516001600160a01b03168752958201959082019060010162009302565b509495945050505050565b606081526000620093496060830186620092ee565b82810360208401526200935d8186620092ee565b90508281036040840152620075448185620092ee565b600080604083850312156200938757600080fd5b82356001600160401b03808211156200939f57600080fd5b620093ad8683870162008f5b565b93506020850135915080821115620093c457600080fd5b50620090028582860162008f5b565b604081526000620093e8604083018562008a98565b8281036020840152620093fc818562008a98565b95945050505050565b60208152600062001c876020830184620092ee565b600080604083850312156200942e57600080fd5b82356200943b8162008a2d565b91506020830135620092168162008a2d565b6000806000606084860312156200946357600080fd5b8335620094708162008a2d565b95602085013595506040909401359392505050565b60208082526028908201527f63616c6c6572206973206e6f7420616e206163636f756e746162696c6974792060408201526718dbdb9d1c9858dd60c21b606082015260800190565b604081526000620094e2604083018562008c09565b90508260208301529392505050565b8051620094fe8162008a2d565b919050565b600082601f8301126200951557600080fd5b81516200952662008f7e8262008f31565b8181528460208386010111156200953c57600080fd5b6200837c82602083016020870162008a72565b8051620094fe8162008b15565b600061026082840312156200957057600080fd5b6200957a62008ed2565b90506200958782620094f1565b81526200959760208301620094f1565b6020820152620095aa60408301620094f1565b604082015260608201516001600160401b0380821115620095ca57600080fd5b620095d88583860162009503565b60608401526080848101519084015260a0808501519084015260c0808501519084015260e080850151908401526101008085015190840152610120808501519084015261014080850151908401526101608085015190840152610180915062009643828501620094f1565b918301919091526101a083810151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151909190818111156200968e57600080fd5b6200969c8682870162009503565b83850152505050610240620096b38184016200954f565b9082015292915050565b60008060408385031215620096d157600080fd5b82516001600160401b03811115620096e857600080fd5b620096f6858286016200955c565b925050602083015190509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111562001663576200166362009707565b600181811c908216806200974857607f821691505b6020821081036200976957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620078d257600081815260208120601f850160051c81016020861015620097985750805b601f850160051c820191505b818110156200339a57828155600101620097a4565b81516001600160401b03811115620097d557620097d562008ebc565b620097ed81620097e6845462009733565b846200976f565b602080601f8311600181146200982557600084156200980c5750858301515b600019600386901b1c1916600185901b1785556200339a565b600085815260208120601f198616915b82811015620098565788860151825594840194600190910190840162009835565b5085821015620098755787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60a0815260006200995460a083018862008c09565b905085602083015284604083015262009971606083018562008be6565b62007544608083018462008be6565b80518015158114620094fe57600080fd5b600080600060608486031215620099a757600080fd5b83516001600160401b03811115620099be57600080fd5b620099cc868287016200955c565b93505060208401519150620084ca6040850162009980565b606081526000620099f9606083018662008c09565b90508360208301526200837c604083018462008be6565b60006020828403121562009a2357600080fd5b81516001600160401b0381111562009a3a57600080fd5b6200837c848285016200955c565b8181038181111562001663576200166362009707565b600181815b8085111562009a9f57816000190482111562009a835762009a8362009707565b8085161562009a9157918102915b93841c939080029062009a63565b509250929050565b60008262009ab85750600162001663565b8162009ac75750600062001663565b816001811462009ae0576002811462009aeb5762009b0b565b600191505062001663565b60ff84111562009aff5762009aff62009707565b50506001821b62001663565b5060208310610133831016604e8410600b841016171562009b30575081810a62001663565b62009b3c838362009a5e565b806000190482111562009b535762009b5362009707565b029392505050565b600062001c87838362009aa7565b60208082526012908201527143616e6e6f7420657863656564203130302560701b604082015260600190565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b60006020828403121562009beb57600080fd5b5051919050565b60006020828403121562009c0557600080fd5b62001c878262009980565b6000604082016040835280855480835260608501915060608160051b8601019250600087815260208120815b8381101562009d0f57878603605f1901855281546001600160a01b031686526001820154602087015260606040870152600282018054849062009c7f8162009733565b8060608b0152600182166000811462009ca1576001811462009cbe5762009cf1565b60ff19831660808c0152608082151560051b8c0101935062009cf1565b84885260208820885b8381101562009ce85781548d82016080015260019091019060200162009cc7565b8c016080019450505b50919850505060209590950194506003919091019060010162009c3c565b50505050508281036020840152620093fc8185620092ee565b808202811582820484141762001663576200166362009707565b634e487b7160e01b600052603260045260246000fd5b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b600060018060a01b0380881683528087166020840152808616604084015260a0606084015262009e1260a084018662008a98565b91508084166080840152509695505050505050565b60408152600062009e3c604083018562008c09565b905062001c87602083018462008be6565b81810362009e59575050565b62009e65825462009733565b6001600160401b0381111562009e7f5762009e7f62008ebc565b62009e9081620097e6845462009733565b6000601f82116001811462009ec7576000831562009eae5750848201545b600019600385901b1c1916600184901b178455620020c9565b600085815260209020601f19841690600086815260209020845b8381101562009f03578286015482556001958601959091019060200162009ee1565b5085831015620098755793015460001960f8600387901b161c19169092555050600190811b01905550565b60006001820162009f435762009f4362009707565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008262009f725762009f7262009f4a565b500490565b60018060a01b038316815260606020820152600060608201526080604082015260006200837c608083018462008a98565b6000845162009fbc81846020890162008a72565b84519083019062009fd281836020890162008a72565b845191019062009fe781836020880162008a72565b0195945050505050565b8281526040810162001c87602083018462008be6565b6000826200a019576200a01962009f4a565b500690565b60ff818116838216019081111562001663576200166362009707565b600084516200a04e81846020890162008a72565b8451908301906200a06481836020890162008a72565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a0606084015262009e1260a084018662008a9856fe608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b031663f5be34896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556040516100e39083906020016102b8565b60405160208183030381529060405260079081610100919061036e565b508160405160200161011291906102b8565b6040516020818303038152906040526008908161012f919061036e565b5050600d80546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220181e4d7042d93d798d5c3f1896a32d7d1d12f69bf0d7622e91e21cc768c2d3e464736f6c63430008150033a2646970667358221220fea46182ecf9c69c3eb29c40798716da17de41386c718cc7207814eafe0d09c564736f6c63430008150033608060405234801561001057600080fd5b50600d80546001600160a01b03191633179055611538806100326000396000f3fe6080604052600436106101bb5760003560e01c806340c10f19116100ec57806395d89b411161008a578063a9059cbb11610064578063a9059cbb1461051a578063bd96102f1461053a578063dd62ed3e1461054f578063f5be348914610595576101c2565b806395d89b41146104d25780639dc29fac146104e7578063a0ce552d14610507576101c2565b806372c81963116100c657806372c819631461045d5780637eee288d1461047257806384955c8814610492578063949813b8146104b2576101c2565b806340c10f19146103d157806359355736146103f157806370a0823114610427576101c2565b806323b872dd11610159578063372500ab11610133578063372500ab146103745780633b19e84a146103895780633b80e355146103a75780633e4eb36c146103bc576101c2565b806323b872dd14610318578063282d3fdf14610338578063313ce56714610358576101c2565b806318160ddd1161019557806318160ddd146102ad578063187cf4d7146102cc57806319fac8fd146102e15780631eeffad014610303576101c2565b806306fdde0314610220578063095ea7b31461024b5780631195e07e1461027b576101c2565b366101c257005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b34801561022c57600080fd5b506102356105aa565b60405161024291906111c9565b60405180910390f35b34801561025757600080fd5b5061026b61026636600461122e565b61063c565b6040519015158152602001610242565b34801561028757600080fd5b506009546001600160a01b03165b6040516001600160a01b039091168152602001610242565b3480156102b957600080fd5b506003545b604051908152602001610242565b3480156102d857600080fd5b506102be610653565b3480156102ed57600080fd5b506103016102fc366004611258565b610662565b005b34801561030f57600080fd5b50600c546102be565b34801561032457600080fd5b5061026b610333366004611271565b610691565b34801561034457600080fd5b5061030161035336600461122e565b610786565b34801561036457600080fd5b5060405160128152602001610242565b34801561038057600080fd5b5061030161086a565b34801561039557600080fd5b50600a546001600160a01b0316610295565b3480156103b357600080fd5b506102be600981565b3480156103c857600080fd5b50600b546102be565b3480156103dd57600080fd5b506103016103ec36600461122e565b610916565b3480156103fd57600080fd5b506102be61040c3660046112ad565b6001600160a01b031660009081526001602052604090205490565b34801561043357600080fd5b506102be6104423660046112ad565b6001600160a01b031660009081526020819052604090205490565b34801561046957600080fd5b506102be600481565b34801561047e57600080fd5b5061030161048d36600461122e565b61097e565b34801561049e57600080fd5b506102be6104ad3660046112ad565b610a44565b3480156104be57600080fd5b506102be6104cd3660046112ad565b610a71565b3480156104de57600080fd5b50610235610ad5565b3480156104f357600080fd5b5061030161050236600461122e565b610ae4565b6102be610515366004611258565b610b44565b34801561052657600080fd5b5061026b61053536600461122e565b610d22565b34801561054657600080fd5b50610301610d6f565b34801561055b57600080fd5b506102be61056a3660046112c8565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b3480156105a157600080fd5b506102be610e76565b6060600780546105b9906112fb565b80601f01602080910402602001604051908101604052809291908181526020018280546105e5906112fb565b80156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b5050505050905090565b6000610649338484610e82565b5060015b92915050565b61065f6009600a61142f565b81565b600d546001600160a01b0316331461068c5760405162461bcd60e51b81526004016102179061143b565b600b55565b6001600160a01b0383166000908152600260209081526040808320338452909152812054828110156107165760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610217565b61072a85336107258685611483565b610e82565b6107348584610fa6565b61073e848461108c565b836001600160a01b0316856001600160a01b03166000805160206114e38339815191528560405161077191815260200190565b60405180910390a360019150505b9392505050565b600d546001600160a01b031633146107b05760405162461bcd60e51b81526004016102179061143b565b6001600160a01b038216600090815260016020908152604080832054918390529091205482916107df91611483565b10156108395760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b6064820152608401610217565b6001600160a01b03821660009081526001602052604081208054839290610861908490611496565b90915550505050565b6000610875336110d7565b33600081815260046020526040808220829055519293509183908381818185875af1925050503d80600081146108c7576040519150601f19603f3d011682016040523d82523d6000602084013e6108cc565b606091505b50509050806109125760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b6044820152606401610217565b5050565b600d546001600160a01b031633146109405760405162461bcd60e51b81526004016102179061143b565b61094a828261108c565b6040518181526001600160a01b038316906000906000805160206114e3833981519152906020015b60405180910390a35050565b600d546001600160a01b031633146109a85760405162461bcd60e51b81526004016102179061143b565b6001600160a01b038216600090815260016020526040902054811115610a1c5760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b6064820152608401610217565b6001600160a01b03821660009081526001602052604081208054839290610861908490611483565b6001600160a01b0381166000908152600160209081526040808320549183905282205461064d9190611483565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205490918391610aa6918491611166565b6001600160a01b038516600090815260046020526040902054909150610acd908290611496565b949350505050565b6060600880546105b9906112fb565b600d546001600160a01b03163314610b0e5760405162461bcd60e51b81526004016102179061143b565b610b188282610fa6565b6040518181526000906001600160a01b038416906000805160206114e383398151915290602001610972565b600d546000906001600160a01b03163314610b715760405162461bcd60e51b81526004016102179061143b565b346000610b7d826111a3565b9050610b898183611483565b600a546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610be0576040519150601f19603f3d011682016040523d82523d6000602084013e610be5565b606091505b5090915050801515600003610c0c5781600c6000828254610c069190611496565b90915550505b6000610c17866111a3565b90508515610caa57600d546009546001600160a01b039182169163f7fcc510911683610c43818b611483565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b505050505b600354600090610cbc6009600a61142f565b610cc690876114a9565b610cd091906114c0565b905080600654610ce09190611496565b6006556000610cf16009600a61142f565b600354610cfe90846114a9565b610d0891906114c0565b9050610d148186611496565b96505050505050505b919050565b6000610d2e3383610fa6565b610d38838361108c565b6040518281526001600160a01b0384169033906000805160206114e38339815191529060200160405180910390a350600192915050565b600a546001600160a01b03163314610dd45760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b6064820152608401610217565b600a54600c546040516000926001600160a01b031691908381818185875af1925050503d8060008114610e23576040519150601f19603f3d011682016040523d82523d6000602084013e610e28565b606091505b5050905080610e6e5760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b6044820152606401610217565b506000600c55565b61065f6004600a61142f565b6001600160a01b038316610ee45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610217565b6001600160a01b038216610f455760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610217565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610faf826110d7565b506001600160a01b03821660009081526020818152604080832054600190925290912054610fdd9082611483565b82111561102c5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e647300000000006044820152606401610217565b6110368282611483565b6001600160a01b038416600090815260208190526040902055808203611070576001600160a01b0383166000908152600560205260408120555b81600360008282546110829190611483565b9091555050505050565b611095826110d7565b506001600160a01b038216600090815260208190526040812080548392906110be908490611496565b9250508190555080600360008282546108619190611496565b6001600160a01b038116600090815260208181526040808320546006546005909352908320549091839161110c918491611166565b6001600160a01b038516600090815260046020526040902054909150611133908290611496565b6001600160a01b039094166000908152600460209081526040808320879055600654600590925290912055509192915050565b6000836000036111785750600061077f565b6111846009600a61142f565b8461118f8486611483565b61119991906114a9565b610acd91906114c0565b6000806111b26004600a61142f565b600b546111bf90856114a9565b61077f91906114c0565b600060208083528351808285015260005b818110156111f6578581018301518582016040015282016111da565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610d1d57600080fd5b6000806040838503121561124157600080fd5b61124a83611217565b946020939093013593505050565b60006020828403121561126a57600080fd5b5035919050565b60008060006060848603121561128657600080fd5b61128f84611217565b925061129d60208501611217565b9150604084013590509250925092565b6000602082840312156112bf57600080fd5b61077f82611217565b600080604083850312156112db57600080fd5b6112e483611217565b91506112f260208401611217565b90509250929050565b600181811c9082168061130f57607f821691505b60208210810361132f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561138657816000190482111561136c5761136c611335565b8085161561137957918102915b93841c9390800290611350565b509250929050565b60008261139d5750600161064d565b816113aa5750600061064d565b81600181146113c057600281146113ca576113e6565b600191505061064d565b60ff8411156113db576113db611335565b50506001821b61064d565b5060208310610133831016604e8410600b8410161715611409575081810a61064d565b611413838361134b565b806000190482111561142757611427611335565b029392505050565b600061077f838361138e565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b8181038181111561064d5761064d611335565b8082018082111561064d5761064d611335565b808202811582820484141761064d5761064d611335565b6000826114dd57634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220793cff6570aa2b8f874e8857627f6f1dd5654738349947241c11d6ffa4d8a96764736f6c63430008150033608060405234801561001057600080fd5b50604051610ebc380380610ebc83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610e29806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806364d61bbe1461005c578063c44a5b2114610087578063d0c66054146100a7578063f189d66c146100bd578063f774fac0146100d0575b600080fd5b61006f61006a3660046108ca565b6100f1565b60405161007e93929190610af6565b60405180910390f35b61009a610095366004610b20565b6101e5565b60405161007e9190610b6e565b6100af61022a565b60405190815260200161007e565b61009a6100cb366004610b88565b61023d565b6100e36100de366004610bdf565b610282565b60405161007e929190610c24565b6100f96105bf565b6000805481906001600160a01b0316331461012f5760405162461bcd60e51b815260040161012690610c46565b60405180910390fd5b61013b6004600a610d88565b87106101b75760008861012001518960c001518a60a0015161015d9190610d94565b6101679190610d94565b600060a08b018190526101008b018190526101208b0181905260c08b01526101e08a018051919250829161019c908390610d94565b9052506101a989866102ca565b8893509150600190506101da565b60006101c38989610303565b90506101d089888861057d565b8893509150600090505b955095509592505050565b6101ed6105bf565b6000546001600160a01b031633146102175760405162461bcd60e51b815260040161012690610c46565b61022183836102ca565b50815b92915050565b60006102386004600a610d88565b905090565b6102456105bf565b6000546001600160a01b0316331461026f5760405162461bcd60e51b815260040161012690610c46565b61027a84848461057d565b509192915050565b61028a6105bf565b600080546001600160a01b031633146102b55760405162461bcd60e51b815260040161012690610c46565b60006102c18585610303565b94959350505050565b600061020083015261024082018160058111156102e9576102e9610982565b908160058111156102fc576102fc610982565b9052505050565b60006103116004600a610d88565b821061036e5760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f7420736c617368203130302520776974686f7574206a61696c626f604482015265756e64696e6760d01b6064820152608401610126565b60008361012001518460c001518560a0015161038a9190610d94565b6103949190610d94565b905060006103a46004600a610d88565b6103ae8386610da7565b6103b89190610dbe565b9050600081905080866101200151106103ea578086610120018181516103de9190610de0565b90525060009050610405565b6101208601516103fa9082610de0565b600061012088015290505b801561048257808661010001511061044d5780866101000181815161042a9190610de0565b90525060a086018051829190610441908390610de0565b90525060009050610482565b61010086015161045d9082610de0565b90508561010001518660a0018181516104769190610de0565b90525060006101008701525b6000811180156104a5575060008660a001518760c001516104a39190610d94565b115b156105515760008660a001518760c001516104c09190610d94565b60c08801516104cf9084610da7565b6104d99190610dbe565b905060008760a001518860c001516104f19190610d94565b60a08901516105009085610da7565b61050a9190610dbe565b9050818860c00181815161051e9190610de0565b90525060a088018051829190610535908390610de0565b9052506105428183610d94565b61054c9084610de0565b925050505b61055b8183610de0565b915081866101e0018181516105709190610d94565b9052509095945050505050565b6105878243610d94565b61020084015261024083018160058111156105a4576105a4610982565b908160058111156105b7576105b7610982565b905250505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600581111561068057610680610982565b905290565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff811182821017156106bf576106bf610685565b60405290565b80356001600160a01b03811681146106dc57600080fd5b919050565b600082601f8301126106f257600080fd5b813567ffffffffffffffff8082111561070d5761070d610685565b604051601f8301601f19908116603f0116810190828211818310171561073557610735610685565b8160405283815286602085880101111561074e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600681106106dc57600080fd5b6000610260828403121561079057600080fd5b61079861069b565b90506107a3826106c5565b81526107b1602083016106c5565b60208201526107c2604083016106c5565b6040820152606082013567ffffffffffffffff808211156107e257600080fd5b6107ee858386016106e1565b60608401526080848101359084015260a0808501359084015260c0808501359084015260e08085013590840152610100808501359084015261012080850135908401526101408085013590840152610160808501359084015261018091506108578285016106c5565b918301919091526101a083810135908301526101c080840135908301526101e08084013590830152610200808401359083015261022090818401358181111561089f57600080fd5b6108ab868287016106e1565b838501525050506102406108c081840161076e565b9082015292915050565b600080600080600060a086880312156108e257600080fd5b853567ffffffffffffffff8111156108f957600080fd5b6109058882890161077d565b95505060208601359350604086013592506109226060870161076e565b91506109306080870161076e565b90509295509295909350565b6000815180845260005b8181101561096257602081850181015186830182015201610946565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b600681106109b657634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061026060208301516109e660208601826001600160a01b03169052565b506040830151610a0160408601826001600160a01b03169052565b506060830151816060860152610a198286018261093c565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151610a8f828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152610ad5838261093c565b9250505061024080840151610aec82870182610998565b5090949350505050565b606081526000610b0960608301866109ba565b602083019490945250901515604090910152919050565b60008060408385031215610b3357600080fd5b823567ffffffffffffffff811115610b4a57600080fd5b610b568582860161077d565b925050610b656020840161076e565b90509250929050565b602081526000610b8160208301846109ba565b9392505050565b600080600060608486031215610b9d57600080fd5b833567ffffffffffffffff811115610bb457600080fd5b610bc08682870161077d565b93505060208401359150610bd66040850161076e565b90509250925092565b60008060408385031215610bf257600080fd5b823567ffffffffffffffff811115610c0957600080fd5b610c158582860161077d565b95602094909401359450505050565b604081526000610c3760408301856109ba565b90508260208301529392505050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610cdf578160001904821115610cc557610cc5610c8e565b80851615610cd257918102915b93841c9390800290610ca9565b509250929050565b600082610cf657506001610224565b81610d0357506000610224565b8160018114610d195760028114610d2357610d3f565b6001915050610224565b60ff841115610d3457610d34610c8e565b50506001821b610224565b5060208310610133831016604e8410600b8410161715610d62575081810a610224565b610d6c8383610ca4565b8060001904821115610d8057610d80610c8e565b029392505050565b6000610b818383610ce7565b8082018082111561022457610224610c8e565b808202811582820484141761022457610224610c8e565b600082610ddb57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561022457610224610c8e56fea2646970667358221220b51097ab68900dec1131d424c1f814a398d2154c32aa29a1fa9ef122a1b0619064736f6c63430008150033608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b031663f5be34896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556040516100e39083906020016102b8565b60405160208183030381529060405260079081610100919061036e565b508160405160200161011291906102b8565b6040516020818303038152906040526008908161012f919061036e565b5050600d80546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220181e4d7042d93d798d5c3f1896a32d7d1d12f69bf0d7622e91e21cc768c2d3e464736f6c63430008150033",
}

// AutonityUpgradeTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityUpgradeTestMetaData.ABI instead.
var AutonityUpgradeTestABI = AutonityUpgradeTestMetaData.ABI

// Deprecated: Use AutonityUpgradeTestMetaData.Sigs instead.
// AutonityUpgradeTestFuncSigs maps the 4-byte function signature to its string representation.
var AutonityUpgradeTestFuncSigs = AutonityUpgradeTestMetaData.Sigs

// AutonityUpgradeTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityUpgradeTestMetaData.Bin instead.
var AutonityUpgradeTestBin = AutonityUpgradeTestMetaData.Bin

// DeployAutonityUpgradeTest deploys a new Ethereum contract, binding an instance of AutonityUpgradeTest to it.
func DeployAutonityUpgradeTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AutonityUpgradeTest, error) {
	parsed, err := AutonityUpgradeTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AutonityUpgradeTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AutonityUpgradeTest{AutonityUpgradeTestCaller: AutonityUpgradeTestCaller{contract: contract}, AutonityUpgradeTestTransactor: AutonityUpgradeTestTransactor{contract: contract}, AutonityUpgradeTestFilterer: AutonityUpgradeTestFilterer{contract: contract}}, nil
}

// AutonityUpgradeTest is an auto generated Go binding around an Ethereum contract.
type AutonityUpgradeTest struct {
	AutonityUpgradeTestCaller     // Read-only binding to the contract
	AutonityUpgradeTestTransactor // Write-only binding to the contract
	AutonityUpgradeTestFilterer   // Log filterer for contract events
}

// AutonityUpgradeTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type AutonityUpgradeTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityUpgradeTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AutonityUpgradeTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityUpgradeTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AutonityUpgradeTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AutonityUpgradeTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AutonityUpgradeTestSession struct {
	Contract     *AutonityUpgradeTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AutonityUpgradeTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AutonityUpgradeTestCallerSession struct {
	Contract *AutonityUpgradeTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// AutonityUpgradeTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AutonityUpgradeTestTransactorSession struct {
	Contract     *AutonityUpgradeTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// AutonityUpgradeTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type AutonityUpgradeTestRaw struct {
	Contract *AutonityUpgradeTest // Generic contract binding to access the raw methods on
}

// AutonityUpgradeTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AutonityUpgradeTestCallerRaw struct {
	Contract *AutonityUpgradeTestCaller // Generic read-only contract binding to access the raw methods on
}

// AutonityUpgradeTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AutonityUpgradeTestTransactorRaw struct {
	Contract *AutonityUpgradeTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAutonityUpgradeTest creates a new instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTest(address common.Address, backend bind.ContractBackend) (*AutonityUpgradeTest, error) {
	contract, err := bindAutonityUpgradeTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTest{AutonityUpgradeTestCaller: AutonityUpgradeTestCaller{contract: contract}, AutonityUpgradeTestTransactor: AutonityUpgradeTestTransactor{contract: contract}, AutonityUpgradeTestFilterer: AutonityUpgradeTestFilterer{contract: contract}}, nil
}

// NewAutonityUpgradeTestCaller creates a new read-only instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTestCaller(address common.Address, caller bind.ContractCaller) (*AutonityUpgradeTestCaller, error) {
	contract, err := bindAutonityUpgradeTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestCaller{contract: contract}, nil
}

// NewAutonityUpgradeTestTransactor creates a new write-only instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTestTransactor(address common.Address, transactor bind.ContractTransactor) (*AutonityUpgradeTestTransactor, error) {
	contract, err := bindAutonityUpgradeTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestTransactor{contract: contract}, nil
}

// NewAutonityUpgradeTestFilterer creates a new log filterer instance of AutonityUpgradeTest, bound to a specific deployed contract.
func NewAutonityUpgradeTestFilterer(address common.Address, filterer bind.ContractFilterer) (*AutonityUpgradeTestFilterer, error) {
	contract, err := bindAutonityUpgradeTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestFilterer{contract: contract}, nil
}

// bindAutonityUpgradeTest binds a generic wrapper to an already deployed contract.
func bindAutonityUpgradeTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AutonityUpgradeTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AutonityUpgradeTest *AutonityUpgradeTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AutonityUpgradeTest.Contract.AutonityUpgradeTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AutonityUpgradeTest *AutonityUpgradeTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.AutonityUpgradeTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AutonityUpgradeTest *AutonityUpgradeTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.AutonityUpgradeTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AutonityUpgradeTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.contract.Transact(opts, method, params...)
}

// STANDARDDECIMALS is a free data retrieval call binding the contract method 0xf3c70aad.
//
// Solidity: function STANDARD_DECIMALS() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) STANDARDDECIMALS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "STANDARD_DECIMALS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STANDARDDECIMALS is a free data retrieval call binding the contract method 0xf3c70aad.
//
// Solidity: function STANDARD_DECIMALS() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) STANDARDDECIMALS() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.STANDARDDECIMALS(&_AutonityUpgradeTest.CallOpts)
}

// STANDARDDECIMALS is a free data retrieval call binding the contract method 0xf3c70aad.
//
// Solidity: function STANDARD_DECIMALS() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) STANDARDDECIMALS() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.STANDARDDECIMALS(&_AutonityUpgradeTest.CallOpts)
}

// STANDARDSCALEFACTOR is a free data retrieval call binding the contract method 0xd144f00a.
//
// Solidity: function STANDARD_SCALE_FACTOR() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) STANDARDSCALEFACTOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "STANDARD_SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STANDARDSCALEFACTOR is a free data retrieval call binding the contract method 0xd144f00a.
//
// Solidity: function STANDARD_SCALE_FACTOR() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) STANDARDSCALEFACTOR() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.STANDARDSCALEFACTOR(&_AutonityUpgradeTest.CallOpts)
}

// STANDARDSCALEFACTOR is a free data retrieval call binding the contract method 0xd144f00a.
//
// Solidity: function STANDARD_SCALE_FACTOR() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) STANDARDSCALEFACTOR() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.STANDARDSCALEFACTOR(&_AutonityUpgradeTest.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.Allowance(&_AutonityUpgradeTest.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.Allowance(&_AutonityUpgradeTest.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) BalanceOf(opts *bind.CallOpts, _addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.BalanceOf(&_AutonityUpgradeTest.CallOpts, _addr)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) BalanceOf(_addr common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.BalanceOf(&_AutonityUpgradeTest.CallOpts, _addr)
}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) CirculatingSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "circulatingSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) CirculatingSupply() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.CirculatingSupply(&_AutonityUpgradeTest.CallOpts)
}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) CirculatingSupply() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.CirculatingSupply(&_AutonityUpgradeTest.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Config(opts *bind.CallOpts) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _AutonityUpgradeTest.Contract.Config(&_AutonityUpgradeTest.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Config() (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, error) {
	return _AutonityUpgradeTest.Contract.Config(&_AutonityUpgradeTest.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Decimals() (uint8, error) {
	return _AutonityUpgradeTest.Contract.Decimals(&_AutonityUpgradeTest.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Decimals() (uint8, error) {
	return _AutonityUpgradeTest.Contract.Decimals(&_AutonityUpgradeTest.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Deployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "deployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Deployer() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.Deployer(&_AutonityUpgradeTest.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Deployer() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.Deployer(&_AutonityUpgradeTest.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) EpochID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "epochID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) EpochID() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochID(&_AutonityUpgradeTest.CallOpts)
}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) EpochID() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochID(&_AutonityUpgradeTest.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) EpochTotalBondedStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) EpochTotalBondedStake() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochTotalBondedStake(&_AutonityUpgradeTest.CallOpts)
}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) EpochTotalBondedStake() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.EpochTotalBondedStake(&_AutonityUpgradeTest.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetBlockPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetBlockPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetBlockPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetBlockPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetBlockPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetCommittee(opts *bind.CallOpts) ([]AutonityCommitteeMember, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)

	return out0, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _AutonityUpgradeTest.Contract.GetCommittee(&_AutonityUpgradeTest.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetCommittee() ([]AutonityCommitteeMember, error) {
	return _AutonityUpgradeTest.Contract.GetCommittee(&_AutonityUpgradeTest.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetCommitteeEnodes(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetCommitteeEnodes() ([]string, error) {
	return _AutonityUpgradeTest.Contract.GetCommitteeEnodes(&_AutonityUpgradeTest.CallOpts)
}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetCommitteeEnodes() ([]string, error) {
	return _AutonityUpgradeTest.Contract.GetCommitteeEnodes(&_AutonityUpgradeTest.CallOpts)
}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetCurrentEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getCurrentEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetCurrentEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetCurrentEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetCurrentEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetCurrentEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetEpochByHeight(opts *bind.CallOpts, _height *big.Int) (AutonityEpochInfo, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getEpochByHeight", _height)

	if err != nil {
		return *new(AutonityEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)

	return out0, err

}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetEpochByHeight(_height *big.Int) (AutonityEpochInfo, error) {
	return _AutonityUpgradeTest.Contract.GetEpochByHeight(&_AutonityUpgradeTest.CallOpts, _height)
}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetEpochByHeight(_height *big.Int) (AutonityEpochInfo, error) {
	return _AutonityUpgradeTest.Contract.GetEpochByHeight(&_AutonityUpgradeTest.CallOpts, _height)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetEpochFromBlock(opts *bind.CallOpts, _block *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochFromBlock(&_AutonityUpgradeTest.CallOpts, _block)
}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetEpochFromBlock(_block *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochFromBlock(&_AutonityUpgradeTest.CallOpts, _block)
}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetEpochInfo(opts *bind.CallOpts) (AutonityEpochInfo, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getEpochInfo")

	if err != nil {
		return *new(AutonityEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)

	return out0, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetEpochInfo() (AutonityEpochInfo, error) {
	return _AutonityUpgradeTest.Contract.GetEpochInfo(&_AutonityUpgradeTest.CallOpts)
}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetEpochInfo() (AutonityEpochInfo, error) {
	return _AutonityUpgradeTest.Contract.GetEpochInfo(&_AutonityUpgradeTest.CallOpts)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetLastEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetLastEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetLastEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetLastEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetLastEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetMaxCommitteeSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetMaxCommitteeSize() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMaxCommitteeSize(&_AutonityUpgradeTest.CallOpts)
}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetMaxCommitteeSize() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMaxCommitteeSize(&_AutonityUpgradeTest.CallOpts)
}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetMaxScheduleDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getMaxScheduleDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetMaxScheduleDuration() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMaxScheduleDuration(&_AutonityUpgradeTest.CallOpts)
}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetMaxScheduleDuration() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMaxScheduleDuration(&_AutonityUpgradeTest.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetMinimumBaseFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetMinimumBaseFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMinimumBaseFee(&_AutonityUpgradeTest.CallOpts)
}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetMinimumBaseFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetMinimumBaseFee(&_AutonityUpgradeTest.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetNewContract() ([]byte, string, error) {
	return _AutonityUpgradeTest.Contract.GetNewContract(&_AutonityUpgradeTest.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetNewContract() ([]byte, string, error) {
	return _AutonityUpgradeTest.Contract.GetNewContract(&_AutonityUpgradeTest.CallOpts)
}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetNextEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetNextEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetNextEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetNextEpochBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetNextEpochBlock(&_AutonityUpgradeTest.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetOperator() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOperator(&_AutonityUpgradeTest.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetOperator() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOperator(&_AutonityUpgradeTest.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetOracle() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOracle(&_AutonityUpgradeTest.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetOracle() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetOracle(&_AutonityUpgradeTest.CallOpts)
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetSchedule(opts *bind.CallOpts, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)

	return out0, err

}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetSchedule(_vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	return _AutonityUpgradeTest.Contract.GetSchedule(&_AutonityUpgradeTest.CallOpts, _vault, _id)
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetSchedule(_vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	return _AutonityUpgradeTest.Contract.GetSchedule(&_AutonityUpgradeTest.CallOpts, _vault, _id)
}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetTotalSchedules(opts *bind.CallOpts, _vault common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetTotalSchedules(_vault common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetTotalSchedules(&_AutonityUpgradeTest.CallOpts, _vault)
}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetTotalSchedules(_vault common.Address) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetTotalSchedules(&_AutonityUpgradeTest.CallOpts, _vault)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetTreasuryAccount(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetTreasuryAccount() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryAccount(&_AutonityUpgradeTest.CallOpts)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetTreasuryAccount() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryAccount(&_AutonityUpgradeTest.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetTreasuryFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetTreasuryFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryFee(&_AutonityUpgradeTest.CallOpts)
}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetTreasuryFee() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetTreasuryFee(&_AutonityUpgradeTest.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetUnbondingPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetUnbondingPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetUnbondingPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingPeriod(&_AutonityUpgradeTest.CallOpts)
}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetUnbondingShare(opts *bind.CallOpts, _unbondingID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getUnbondingShare", _unbondingID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetUnbondingShare(_unbondingID *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingShare(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetUnbondingShare(_unbondingID *big.Int) (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetUnbondingShare(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetValidator(opts *bind.CallOpts, _addr common.Address) (AutonityValidator, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _AutonityUpgradeTest.Contract.GetValidator(&_AutonityUpgradeTest.CallOpts, _addr)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetValidator(_addr common.Address) (AutonityValidator, error) {
	return _AutonityUpgradeTest.Contract.GetValidator(&_AutonityUpgradeTest.CallOpts, _addr)
}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetValidatorState(opts *bind.CallOpts, _addr common.Address) (uint8, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getValidatorState", _addr)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetValidatorState(_addr common.Address) (uint8, error) {
	return _AutonityUpgradeTest.Contract.GetValidatorState(&_AutonityUpgradeTest.CallOpts, _addr)
}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetValidatorState(_addr common.Address) (uint8, error) {
	return _AutonityUpgradeTest.Contract.GetValidatorState(&_AutonityUpgradeTest.CallOpts, _addr)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetValidators() ([]common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetValidators(&_AutonityUpgradeTest.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetValidators() ([]common.Address, error) {
	return _AutonityUpgradeTest.Contract.GetValidators(&_AutonityUpgradeTest.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) GetVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) GetVersion() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetVersion(&_AutonityUpgradeTest.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) GetVersion() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.GetVersion(&_AutonityUpgradeTest.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) InflationReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "inflationReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) InflationReserve() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.InflationReserve(&_AutonityUpgradeTest.CallOpts)
}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) InflationReserve() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.InflationReserve(&_AutonityUpgradeTest.CallOpts)
}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) IsUnbondingReleased(opts *bind.CallOpts, _unbondingID *big.Int) (bool, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) IsUnbondingReleased(_unbondingID *big.Int) (bool, error) {
	return _AutonityUpgradeTest.Contract.IsUnbondingReleased(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) IsUnbondingReleased(_unbondingID *big.Int) (bool, error) {
	return _AutonityUpgradeTest.Contract.IsUnbondingReleased(&_AutonityUpgradeTest.CallOpts, _unbondingID)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) LastEpochTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) LastEpochTime() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastEpochTime(&_AutonityUpgradeTest.CallOpts)
}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) LastEpochTime() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastEpochTime(&_AutonityUpgradeTest.CallOpts)
}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) LastFinalizedBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) LastFinalizedBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastFinalizedBlock(&_AutonityUpgradeTest.CallOpts)
}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) LastFinalizedBlock() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.LastFinalizedBlock(&_AutonityUpgradeTest.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) LiquidLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) LiquidLogicContract() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.LiquidLogicContract(&_AutonityUpgradeTest.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) LiquidLogicContract() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.LiquidLogicContract(&_AutonityUpgradeTest.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Name() (string, error) {
	return _AutonityUpgradeTest.Contract.Name(&_AutonityUpgradeTest.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Name() (string, error) {
	return _AutonityUpgradeTest.Contract.Name(&_AutonityUpgradeTest.CallOpts)
}

// NewEpochPeriod is a free data retrieval call binding the contract method 0x241ed650.
//
// Solidity: function newEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) NewEpochPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "newEpochPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewEpochPeriod is a free data retrieval call binding the contract method 0x241ed650.
//
// Solidity: function newEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) NewEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.NewEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// NewEpochPeriod is a free data retrieval call binding the contract method 0x241ed650.
//
// Solidity: function newEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) NewEpochPeriod() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.NewEpochPeriod(&_AutonityUpgradeTest.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Slasher() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.Slasher(&_AutonityUpgradeTest.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Slasher() (common.Address, error) {
	return _AutonityUpgradeTest.Contract.Slasher(&_AutonityUpgradeTest.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Symbol() (string, error) {
	return _AutonityUpgradeTest.Contract.Symbol(&_AutonityUpgradeTest.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) Symbol() (string, error) {
	return _AutonityUpgradeTest.Contract.Symbol(&_AutonityUpgradeTest.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AutonityUpgradeTest.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) TotalSupply() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.TotalSupply(&_AutonityUpgradeTest.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestCallerSession) TotalSupply() (*big.Int, error) {
	return _AutonityUpgradeTest.Contract.TotalSupply(&_AutonityUpgradeTest.CallOpts)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetLiquidLogicContract(opts *bind.TransactOpts, _contract common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "SetLiquidLogicContract", _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetLiquidLogicContract(&_AutonityUpgradeTest.TransactOpts, _contract)
}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetLiquidLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetLiquidLogicContract(&_AutonityUpgradeTest.TransactOpts, _contract)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ActivateValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "activateValidator", _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ActivateValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ActivateValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ActivateValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Approve(&_AutonityUpgradeTest.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Approve(&_AutonityUpgradeTest.TransactOpts, spender, amount)
}

// Autobond is a paid mutator transaction binding the contract method 0xf7fcc510.
//
// Solidity: function autobond(address _validator, uint256 _selfBond, uint256 _delegated) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Autobond(opts *bind.TransactOpts, _validator common.Address, _selfBond *big.Int, _delegated *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "autobond", _validator, _selfBond, _delegated)
}

// Autobond is a paid mutator transaction binding the contract method 0xf7fcc510.
//
// Solidity: function autobond(address _validator, uint256 _selfBond, uint256 _delegated) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Autobond(_validator common.Address, _selfBond *big.Int, _delegated *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Autobond(&_AutonityUpgradeTest.TransactOpts, _validator, _selfBond, _delegated)
}

// Autobond is a paid mutator transaction binding the contract method 0xf7fcc510.
//
// Solidity: function autobond(address _validator, uint256 _selfBond, uint256 _delegated) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Autobond(_validator common.Address, _selfBond *big.Int, _delegated *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Autobond(&_AutonityUpgradeTest.TransactOpts, _validator, _selfBond, _delegated)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Bond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "bond", _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Bond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Bond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Burn(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "burn", _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Burn(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Burn(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Burn(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ChangeCommissionRate(opts *bind.TransactOpts, _validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "changeCommissionRate", _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ChangeCommissionRate(&_AutonityUpgradeTest.TransactOpts, _validator, _rate)
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ChangeCommissionRate(_validator common.Address, _rate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ChangeCommissionRate(&_AutonityUpgradeTest.TransactOpts, _validator, _rate)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.CompleteContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.CompleteContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ComputeCommittee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "computeCommittee")
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ComputeCommittee() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ComputeCommittee(&_AutonityUpgradeTest.TransactOpts)
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ComputeCommittee() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ComputeCommittee(&_AutonityUpgradeTest.TransactOpts)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) CreateSchedule(opts *bind.TransactOpts, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) CreateSchedule(_scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.CreateSchedule(&_AutonityUpgradeTest.TransactOpts, _scheduleVault, _amount, _startTime, _totalDuration)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) CreateSchedule(_scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.CreateSchedule(&_AutonityUpgradeTest.TransactOpts, _scheduleVault, _amount, _startTime, _totalDuration)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Finalize() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Finalize(&_AutonityUpgradeTest.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Finalize() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Finalize(&_AutonityUpgradeTest.TransactOpts)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) FinalizeInitialization(opts *bind.TransactOpts, delta *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "finalizeInitialization", delta)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) FinalizeInitialization(delta *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.FinalizeInitialization(&_AutonityUpgradeTest.TransactOpts, delta)
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) FinalizeInitialization(delta *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.FinalizeInitialization(&_AutonityUpgradeTest.TransactOpts, delta)
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Jail(opts *bind.TransactOpts, _nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "jail", _nodeAddress, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Jail(_nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Jail(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Jail(_nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Jail(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _jailtime, _newJailedState)
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Jailbound(opts *bind.TransactOpts, _nodeAddress common.Address, _newJailboundState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "jailbound", _nodeAddress, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Jailbound(_nodeAddress common.Address, _newJailboundState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Jailbound(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Jailbound(_nodeAddress common.Address, _newJailboundState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Jailbound(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _newJailboundState)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Mint(opts *bind.TransactOpts, _addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "mint", _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Mint(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Mint(_addr common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Mint(&_AutonityUpgradeTest.TransactOpts, _addr, _amount)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) PauseValidator(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "pauseValidator", _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.PauseValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) PauseValidator(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.PauseValidator(&_AutonityUpgradeTest.TransactOpts, _address)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) RegisterValidator(opts *bind.TransactOpts, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.RegisterValidator(&_AutonityUpgradeTest.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) RegisterValidator(_enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.RegisterValidator(&_AutonityUpgradeTest.TransactOpts, _enode, _oracleAddress, _consensusKey, _signatures)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ResetContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.ResetContractUpgrade(&_AutonityUpgradeTest.TransactOpts)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetAccountabilityContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setAccountabilityContract", _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAccountabilityContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAccountabilityContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetAcuContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setAcuContract", _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAcuContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetAcuContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetAcuContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetCommitteeSize(opts *bind.TransactOpts, _size *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setCommitteeSize", _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetCommitteeSize(&_AutonityUpgradeTest.TransactOpts, _size)
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetCommitteeSize(_size *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetCommitteeSize(&_AutonityUpgradeTest.TransactOpts, _size)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetEpochPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setEpochPeriod", _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetEpochPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetEpochPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetEpochPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetInflationControllerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setInflationControllerContract", _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetInflationControllerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetInflationControllerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetInflationControllerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetMaxScheduleDuration(opts *bind.TransactOpts, _newMaxDuration *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setMaxScheduleDuration", _newMaxDuration)
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetMaxScheduleDuration(_newMaxDuration *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxScheduleDuration(&_AutonityUpgradeTest.TransactOpts, _newMaxDuration)
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetMaxScheduleDuration(_newMaxDuration *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMaxScheduleDuration(&_AutonityUpgradeTest.TransactOpts, _newMaxDuration)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetMinimumBaseFee(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setMinimumBaseFee", _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMinimumBaseFee(&_AutonityUpgradeTest.TransactOpts, _price)
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetMinimumBaseFee(_price *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetMinimumBaseFee(&_AutonityUpgradeTest.TransactOpts, _price)
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetOmissionAccountabilityContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setOmissionAccountabilityContract", _address)
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetOmissionAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOmissionAccountabilityContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetOmissionAccountabilityContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOmissionAccountabilityContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetOperatorAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setOperatorAccount", _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOperatorAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetOperatorAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOperatorAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetOracleContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setOracleContract", _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOracleContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetOracleContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOracleContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetOracleRewardRate is a paid mutator transaction binding the contract method 0xed5676e9.
//
// Solidity: function setOracleRewardRate(uint256 _oracleRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetOracleRewardRate(opts *bind.TransactOpts, _oracleRewardRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setOracleRewardRate", _oracleRewardRate)
}

// SetOracleRewardRate is a paid mutator transaction binding the contract method 0xed5676e9.
//
// Solidity: function setOracleRewardRate(uint256 _oracleRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetOracleRewardRate(_oracleRewardRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOracleRewardRate(&_AutonityUpgradeTest.TransactOpts, _oracleRewardRate)
}

// SetOracleRewardRate is a paid mutator transaction binding the contract method 0xed5676e9.
//
// Solidity: function setOracleRewardRate(uint256 _oracleRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetOracleRewardRate(_oracleRewardRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetOracleRewardRate(&_AutonityUpgradeTest.TransactOpts, _oracleRewardRate)
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetProposerRewardRate(opts *bind.TransactOpts, _proposerRewardRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setProposerRewardRate", _proposerRewardRate)
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetProposerRewardRate(_proposerRewardRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetProposerRewardRate(&_AutonityUpgradeTest.TransactOpts, _proposerRewardRate)
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetProposerRewardRate(_proposerRewardRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetProposerRewardRate(&_AutonityUpgradeTest.TransactOpts, _proposerRewardRate)
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetSlasher(opts *bind.TransactOpts, _slasher common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setSlasher", _slasher)
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetSlasher(_slasher common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetSlasher(&_AutonityUpgradeTest.TransactOpts, _slasher)
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetSlasher(_slasher common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetSlasher(&_AutonityUpgradeTest.TransactOpts, _slasher)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetStabilizationContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setStabilizationContract", _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetStabilizationContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetStabilizationContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetStabilizationContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetSupplyControlContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setSupplyControlContract", _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetSupplyControlContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetSupplyControlContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetSupplyControlContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetTreasuryAccount(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setTreasuryAccount", _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetTreasuryAccount(_account common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryAccount(&_AutonityUpgradeTest.TransactOpts, _account)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetTreasuryFee(opts *bind.TransactOpts, _treasuryFee *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setTreasuryFee", _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryFee(&_AutonityUpgradeTest.TransactOpts, _treasuryFee)
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetTreasuryFee(_treasuryFee *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetTreasuryFee(&_AutonityUpgradeTest.TransactOpts, _treasuryFee)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetUnbondingPeriod(opts *bind.TransactOpts, _period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setUnbondingPeriod", _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUnbondingPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetUnbondingPeriod(_period *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUnbondingPeriod(&_AutonityUpgradeTest.TransactOpts, _period)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetUpgradeManagerContract(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setUpgradeManagerContract", _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUpgradeManagerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetUpgradeManagerContract(_address common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetUpgradeManagerContract(&_AutonityUpgradeTest.TransactOpts, _address)
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetWithheldRewardsPool(opts *bind.TransactOpts, _pool common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setWithheldRewardsPool", _pool)
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetWithheldRewardsPool(_pool common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetWithheldRewardsPool(&_AutonityUpgradeTest.TransactOpts, _pool)
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetWithheldRewardsPool(_pool common.Address) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetWithheldRewardsPool(&_AutonityUpgradeTest.TransactOpts, _pool)
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SetWithholdingThreshold(opts *bind.TransactOpts, _withholdingThreshold *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "setWithholdingThreshold", _withholdingThreshold)
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SetWithholdingThreshold(_withholdingThreshold *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetWithholdingThreshold(&_AutonityUpgradeTest.TransactOpts, _withholdingThreshold)
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SetWithholdingThreshold(_withholdingThreshold *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SetWithholdingThreshold(&_AutonityUpgradeTest.TransactOpts, _withholdingThreshold)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Slash(opts *bind.TransactOpts, _nodeAddress common.Address, _slashingRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "slash", _nodeAddress, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Slash(_nodeAddress common.Address, _slashingRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Slash(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Slash(_nodeAddress common.Address, _slashingRate *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Slash(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _slashingRate)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) SlashAndJail(opts *bind.TransactOpts, _nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "slashAndJail", _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) SlashAndJail(_nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SlashAndJail(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) SlashAndJail(_nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.SlashAndJail(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Transfer(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "transfer", _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Transfer(&_AutonityUpgradeTest.TransactOpts, _recipient, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Transfer(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Transfer(&_AutonityUpgradeTest.TransactOpts, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) TransferFrom(opts *bind.TransactOpts, _sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "transferFrom", _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.TransferFrom(&_AutonityUpgradeTest.TransactOpts, _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.TransferFrom(&_AutonityUpgradeTest.TransactOpts, _sender, _recipient, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Unbond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "unbond", _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Unbond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Unbond(&_AutonityUpgradeTest.TransactOpts, _validator, _amount)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) UpdateEnode(opts *bind.TransactOpts, _nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "updateEnode", _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpdateEnode(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _enode)
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) UpdateEnode(_nodeAddress common.Address, _enode string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpdateEnode(&_AutonityUpgradeTest.TransactOpts, _nodeAddress, _enode)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpgradeContract(&_AutonityUpgradeTest.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.UpgradeContract(&_AutonityUpgradeTest.TransactOpts, _bytecode, _abi)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Fallback(&_AutonityUpgradeTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Fallback(&_AutonityUpgradeTest.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AutonityUpgradeTest.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestSession) Receive() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Receive(&_AutonityUpgradeTest.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTestTransactorSession) Receive() (*types.Transaction, error) {
	return _AutonityUpgradeTest.Contract.Receive(&_AutonityUpgradeTest.TransactOpts)
}

// AutonityUpgradeTestActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestActivatedValidatorIterator struct {
	Event *AutonityUpgradeTestActivatedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestActivatedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestActivatedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestActivatedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestActivatedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestActivatedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestActivatedValidator represents a ActivatedValidator event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestActivatedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestActivatedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestActivatedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
}

// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestActivatedValidator)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
//
// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseActivatedValidator(log types.Log) (*AutonityUpgradeTestActivatedValidator, error) {
	event := new(AutonityUpgradeTestActivatedValidator)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestApprovalIterator struct {
	Event *AutonityUpgradeTestApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestApproval represents a Approval event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityUpgradeTestApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestApprovalIterator{contract: _AutonityUpgradeTest.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestApproval)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseApproval(log types.Log) (*AutonityUpgradeTestApproval, error) {
	event := new(AutonityUpgradeTestApproval)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBondingRejectedIterator struct {
	Event *AutonityUpgradeTestBondingRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestBondingRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestBondingRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestBondingRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestBondingRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestBondingRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestBondingRejected represents a BondingRejected event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBondingRejected struct {
	Validator common.Address
	Delegator common.Address
	Amount    *big.Int
	State     uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestBondingRejectedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestBondingRejectedIterator{contract: _AutonityUpgradeTest.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
}

// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestBondingRejected)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
//
// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseBondingRejected(log types.Log) (*AutonityUpgradeTestBondingRejected, error) {
	event := new(AutonityUpgradeTestBondingRejected)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBurnedStakeIterator struct {
	Event *AutonityUpgradeTestBurnedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestBurnedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestBurnedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestBurnedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestBurnedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestBurnedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestBurnedStake represents a BurnedStake event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestBurnedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestBurnedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestBurnedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
}

// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBurnedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BurnedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestBurnedStake)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
//
// Solidity: event BurnedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseBurnedStake(log types.Log) (*AutonityUpgradeTestBurnedStake, error) {
	event := new(AutonityUpgradeTestBurnedStake)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCallFailedIterator struct {
	Event *AutonityUpgradeTestCallFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestCallFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestCallFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestCallFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestCallFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestCallFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestCallFailed represents a CallFailed event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCallFailed struct {
	To              common.Address
	MethodSignature string
	ReturnData      []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterCallFailed(opts *bind.FilterOpts) (*AutonityUpgradeTestCallFailedIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestCallFailedIterator{contract: _AutonityUpgradeTest.contract, event: "CallFailed", logs: logs, sub: sub}, nil
}

// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCallFailed) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CallFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestCallFailed)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
//
// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseCallFailed(log types.Log) (*AutonityUpgradeTestCallFailed, error) {
	event := new(AutonityUpgradeTestCallFailed)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCommissionRateChangeIterator struct {
	Event *AutonityUpgradeTestCommissionRateChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestCommissionRateChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestCommissionRateChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestCommissionRateChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestCommissionRateChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestCommissionRateChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestCommissionRateChange represents a CommissionRateChange event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestCommissionRateChange struct {
	Validator common.Address
	Rate      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityUpgradeTestCommissionRateChangeIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestCommissionRateChangeIterator{contract: _AutonityUpgradeTest.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
}

// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCommissionRateChange, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestCommissionRateChange)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
//
// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseCommissionRateChange(log types.Log) (*AutonityUpgradeTestCommissionRateChange, error) {
	event := new(AutonityUpgradeTestCommissionRateChange)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestEpochPeriodUpdatedIterator struct {
	Event *AutonityUpgradeTestEpochPeriodUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestEpochPeriodUpdated struct {
	Period         *big.Int
	AppliedAtBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
//
// Solidity: event EpochPeriodUpdated(uint256 period, uint256 appliedAtBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestEpochPeriodUpdatedIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestEpochPeriodUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
}

// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
//
// Solidity: event EpochPeriodUpdated(uint256 period, uint256 appliedAtBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestEpochPeriodUpdated) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "EpochPeriodUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestEpochPeriodUpdated)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
//
// Solidity: event EpochPeriodUpdated(uint256 period, uint256 appliedAtBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseEpochPeriodUpdated(log types.Log) (*AutonityUpgradeTestEpochPeriodUpdated, error) {
	event := new(AutonityUpgradeTestEpochPeriodUpdated)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMinimumBaseFeeUpdatedIterator struct {
	Event *AutonityUpgradeTestMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMinimumBaseFeeUpdated struct {
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestMinimumBaseFeeUpdatedIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestMinimumBaseFeeUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMinimumBaseFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
//
// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityUpgradeTestMinimumBaseFeeUpdated, error) {
	event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMintedStakeIterator struct {
	Event *AutonityUpgradeTestMintedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestMintedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestMintedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestMintedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestMintedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestMintedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestMintedStake represents a MintedStake event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestMintedStake struct {
	Addr   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestMintedStakeIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestMintedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "MintedStake", logs: logs, sub: sub}, nil
}

// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMintedStake, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MintedStake", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestMintedStake)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
//
// Solidity: event MintedStake(address indexed addr, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseMintedStake(log types.Log) (*AutonityUpgradeTestMintedStake, error) {
	event := new(AutonityUpgradeTestMintedStake)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewBondingRequestIterator struct {
	Event *AutonityUpgradeTestNewBondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestNewBondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestNewBondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestNewBondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestNewBondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestNewBondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestNewBondingRequest represents a NewBondingRequest event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewBondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewBondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestNewBondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestNewBondingRequest)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
//
// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseNewBondingRequest(log types.Log) (*AutonityUpgradeTestNewBondingRequest, error) {
	event := new(AutonityUpgradeTestNewBondingRequest)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewEpochIterator struct {
	Event *AutonityUpgradeTestNewEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestNewEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestNewEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestNewEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestNewEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestNewEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestNewEpoch represents a NewEpoch event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewEpoch struct {
	Epoch *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityUpgradeTestNewEpochIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestNewEpochIterator{contract: _AutonityUpgradeTest.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
}

// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewEpoch) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestNewEpoch)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
//
// Solidity: event NewEpoch(uint256 epoch)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseNewEpoch(log types.Log) (*AutonityUpgradeTestNewEpoch, error) {
	event := new(AutonityUpgradeTestNewEpoch)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestNewScheduleIterator is returned from FilterNewSchedule and is used to iterate over the raw logs and unpacked data for NewSchedule events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewScheduleIterator struct {
	Event *AutonityUpgradeTestNewSchedule // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestNewScheduleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestNewSchedule)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestNewSchedule)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestNewScheduleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestNewScheduleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestNewSchedule represents a NewSchedule event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewSchedule struct {
	ScheduleVault common.Address
	Amount        *big.Int
	Start         *big.Int
	TotalDuration *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNewSchedule is a free log retrieval operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterNewSchedule(opts *bind.FilterOpts, scheduleVault []common.Address) (*AutonityUpgradeTestNewScheduleIterator, error) {

	var scheduleVaultRule []interface{}
	for _, scheduleVaultItem := range scheduleVault {
		scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewSchedule", scheduleVaultRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestNewScheduleIterator{contract: _AutonityUpgradeTest.contract, event: "NewSchedule", logs: logs, sub: sub}, nil
}

// WatchNewSchedule is a free log subscription operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchNewSchedule(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewSchedule, scheduleVault []common.Address) (event.Subscription, error) {

	var scheduleVaultRule []interface{}
	for _, scheduleVaultItem := range scheduleVault {
		scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewSchedule", scheduleVaultRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestNewSchedule)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewSchedule", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSchedule is a log parse operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseNewSchedule(log types.Log) (*AutonityUpgradeTestNewSchedule, error) {
	event := new(AutonityUpgradeTestNewSchedule)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewSchedule", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewUnbondingRequestIterator struct {
	Event *AutonityUpgradeTestNewUnbondingRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestNewUnbondingRequest represents a NewUnbondingRequest event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestNewUnbondingRequest struct {
	Validator  common.Address
	Delegator  common.Address
	SelfBonded bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewUnbondingRequestIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestNewUnbondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
}

// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestNewUnbondingRequest)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
//
// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseNewUnbondingRequest(log types.Log) (*AutonityUpgradeTestNewUnbondingRequest, error) {
	event := new(AutonityUpgradeTestNewUnbondingRequest)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestPausedValidatorIterator struct {
	Event *AutonityUpgradeTestPausedValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestPausedValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestPausedValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestPausedValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestPausedValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestPausedValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestPausedValidator represents a PausedValidator event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestPausedValidator struct {
	Treasury       common.Address
	Addr           common.Address
	EffectiveBlock *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestPausedValidatorIterator, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestPausedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
}

// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

	var treasuryRule []interface{}
	for _, treasuryItem := range treasury {
		treasuryRule = append(treasuryRule, treasuryItem)
	}
	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestPausedValidator)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
//
// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParsePausedValidator(log types.Log) (*AutonityUpgradeTestPausedValidator, error) {
	event := new(AutonityUpgradeTestPausedValidator)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRegisteredValidatorIterator struct {
	Event *AutonityUpgradeTestRegisteredValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestRegisteredValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestRegisteredValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestRegisteredValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestRegisteredValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestRegisteredValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestRegisteredValidator represents a RegisteredValidator event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRegisteredValidator struct {
	Treasury            common.Address
	Addr                common.Address
	OracleAddress       common.Address
	Enode               string
	LiquidStateContract common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityUpgradeTestRegisteredValidatorIterator, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestRegisteredValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
}

// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRegisteredValidator) (event.Subscription, error) {

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "RegisteredValidator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestRegisteredValidator)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
//
// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseRegisteredValidator(log types.Log) (*AutonityUpgradeTestRegisteredValidator, error) {
	event := new(AutonityUpgradeTestRegisteredValidator)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRewardedIterator struct {
	Event *AutonityUpgradeTestRewarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestRewardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestRewarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestRewarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestRewardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestRewardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestRewarded represents a Rewarded event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestRewarded struct {
	Addr      common.Address
	AtnAmount *big.Int
	NtnAmount *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestRewardedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestRewardedIterator{contract: _AutonityUpgradeTest.contract, event: "Rewarded", logs: logs, sub: sub}, nil
}

// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRewarded, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Rewarded", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestRewarded)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
//
// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseRewarded(log types.Log) (*AutonityUpgradeTestRewarded, error) {
	event := new(AutonityUpgradeTestRewarded)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AutonityUpgradeTestTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestTransferIterator struct {
	Event *AutonityUpgradeTestTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AutonityUpgradeTestTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AutonityUpgradeTestTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AutonityUpgradeTestTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AutonityUpgradeTestTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AutonityUpgradeTestTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AutonityUpgradeTestTransfer represents a Transfer event raised by the AutonityUpgradeTest contract.
type AutonityUpgradeTestTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityUpgradeTestTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AutonityUpgradeTestTransferIterator{contract: _AutonityUpgradeTest.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AutonityUpgradeTestTransfer)
				if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_AutonityUpgradeTest *AutonityUpgradeTestFilterer) ParseTransfer(log types.Log) (*AutonityUpgradeTestTransfer, error) {
	event := new(AutonityUpgradeTestTransfer)
	if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BeneficiaryHandlerMetaData contains all meta data concerning the BeneficiaryHandler contract.
var BeneficiaryHandlerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"fca78d11": "getUniqueContractID(address,uint256)",
		"635bf933": "totalContracts(address)",
	},
}

// BeneficiaryHandlerABI is the input ABI used to generate the binding from.
// Deprecated: Use BeneficiaryHandlerMetaData.ABI instead.
var BeneficiaryHandlerABI = BeneficiaryHandlerMetaData.ABI

// Deprecated: Use BeneficiaryHandlerMetaData.Sigs instead.
// BeneficiaryHandlerFuncSigs maps the 4-byte function signature to its string representation.
var BeneficiaryHandlerFuncSigs = BeneficiaryHandlerMetaData.Sigs

// BeneficiaryHandler is an auto generated Go binding around an Ethereum contract.
type BeneficiaryHandler struct {
	BeneficiaryHandlerCaller     // Read-only binding to the contract
	BeneficiaryHandlerTransactor // Write-only binding to the contract
	BeneficiaryHandlerFilterer   // Log filterer for contract events
}

// BeneficiaryHandlerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BeneficiaryHandlerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BeneficiaryHandlerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BeneficiaryHandlerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BeneficiaryHandlerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BeneficiaryHandlerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BeneficiaryHandlerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BeneficiaryHandlerSession struct {
	Contract     *BeneficiaryHandler // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BeneficiaryHandlerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BeneficiaryHandlerCallerSession struct {
	Contract *BeneficiaryHandlerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// BeneficiaryHandlerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BeneficiaryHandlerTransactorSession struct {
	Contract     *BeneficiaryHandlerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BeneficiaryHandlerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BeneficiaryHandlerRaw struct {
	Contract *BeneficiaryHandler // Generic contract binding to access the raw methods on
}

// BeneficiaryHandlerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BeneficiaryHandlerCallerRaw struct {
	Contract *BeneficiaryHandlerCaller // Generic read-only contract binding to access the raw methods on
}

// BeneficiaryHandlerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BeneficiaryHandlerTransactorRaw struct {
	Contract *BeneficiaryHandlerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBeneficiaryHandler creates a new instance of BeneficiaryHandler, bound to a specific deployed contract.
func NewBeneficiaryHandler(address common.Address, backend bind.ContractBackend) (*BeneficiaryHandler, error) {
	contract, err := bindBeneficiaryHandler(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BeneficiaryHandler{BeneficiaryHandlerCaller: BeneficiaryHandlerCaller{contract: contract}, BeneficiaryHandlerTransactor: BeneficiaryHandlerTransactor{contract: contract}, BeneficiaryHandlerFilterer: BeneficiaryHandlerFilterer{contract: contract}}, nil
}

// NewBeneficiaryHandlerCaller creates a new read-only instance of BeneficiaryHandler, bound to a specific deployed contract.
func NewBeneficiaryHandlerCaller(address common.Address, caller bind.ContractCaller) (*BeneficiaryHandlerCaller, error) {
	contract, err := bindBeneficiaryHandler(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BeneficiaryHandlerCaller{contract: contract}, nil
}

// NewBeneficiaryHandlerTransactor creates a new write-only instance of BeneficiaryHandler, bound to a specific deployed contract.
func NewBeneficiaryHandlerTransactor(address common.Address, transactor bind.ContractTransactor) (*BeneficiaryHandlerTransactor, error) {
	contract, err := bindBeneficiaryHandler(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BeneficiaryHandlerTransactor{contract: contract}, nil
}

// NewBeneficiaryHandlerFilterer creates a new log filterer instance of BeneficiaryHandler, bound to a specific deployed contract.
func NewBeneficiaryHandlerFilterer(address common.Address, filterer bind.ContractFilterer) (*BeneficiaryHandlerFilterer, error) {
	contract, err := bindBeneficiaryHandler(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BeneficiaryHandlerFilterer{contract: contract}, nil
}

// bindBeneficiaryHandler binds a generic wrapper to an already deployed contract.
func bindBeneficiaryHandler(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BeneficiaryHandlerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BeneficiaryHandler *BeneficiaryHandlerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BeneficiaryHandler.Contract.BeneficiaryHandlerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BeneficiaryHandler *BeneficiaryHandlerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BeneficiaryHandler.Contract.BeneficiaryHandlerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BeneficiaryHandler *BeneficiaryHandlerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BeneficiaryHandler.Contract.BeneficiaryHandlerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BeneficiaryHandler *BeneficiaryHandlerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BeneficiaryHandler.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BeneficiaryHandler *BeneficiaryHandlerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BeneficiaryHandler.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BeneficiaryHandler *BeneficiaryHandlerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BeneficiaryHandler.Contract.contract.Transact(opts, method, params...)
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandlerCaller) GetUniqueContractID(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BeneficiaryHandler.contract.Call(opts, &out, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandlerSession) GetUniqueContractID(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _BeneficiaryHandler.Contract.GetUniqueContractID(&_BeneficiaryHandler.CallOpts, _beneficiary, _id)
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandlerCallerSession) GetUniqueContractID(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _BeneficiaryHandler.Contract.GetUniqueContractID(&_BeneficiaryHandler.CallOpts, _beneficiary, _id)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandlerCaller) TotalContracts(opts *bind.CallOpts, _beneficiary common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BeneficiaryHandler.contract.Call(opts, &out, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandlerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _BeneficiaryHandler.Contract.TotalContracts(&_BeneficiaryHandler.CallOpts, _beneficiary)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandlerCallerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _BeneficiaryHandler.Contract.TotalContracts(&_BeneficiaryHandler.CallOpts, _beneficiary)
}

// BeneficiaryHandlerBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the BeneficiaryHandler contract.
type BeneficiaryHandlerBeneficiaryChangedIterator struct {
	Event *BeneficiaryHandlerBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BeneficiaryHandlerBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BeneficiaryHandlerBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BeneficiaryHandlerBeneficiaryChanged represents a BeneficiaryChanged event raised by the BeneficiaryHandler contract.
type BeneficiaryHandlerBeneficiaryChanged struct {
	NewBeneficiary common.Address
	OldBeneficiary common.Address
	ContractID     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_BeneficiaryHandler *BeneficiaryHandlerFilterer) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*BeneficiaryHandlerBeneficiaryChangedIterator, error) {

	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}
	var oldBeneficiaryRule []interface{}
	for _, oldBeneficiaryItem := range oldBeneficiary {
		oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
	}

	logs, sub, err := _BeneficiaryHandler.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return &BeneficiaryHandlerBeneficiaryChangedIterator{contract: _BeneficiaryHandler.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_BeneficiaryHandler *BeneficiaryHandlerFilterer) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *BeneficiaryHandlerBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}
	var oldBeneficiaryRule []interface{}
	for _, oldBeneficiaryItem := range oldBeneficiary {
		oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
	}

	logs, sub, err := _BeneficiaryHandler.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BeneficiaryHandlerBeneficiaryChanged)
				if err := _BeneficiaryHandler.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_BeneficiaryHandler *BeneficiaryHandlerFilterer) ParseBeneficiaryChanged(log types.Log) (*BeneficiaryHandlerBeneficiaryChanged, error) {
	event := new(BeneficiaryHandlerBeneficiaryChanged)
	if err := _BeneficiaryHandler.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BytesLibMetaData contains all meta data concerning the BytesLib contract.
var BytesLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220831cbf1d093207c822ca0bb8903ee29676712d9a6abe4b340d9c5562c8a851e464736f6c63430008150033",
}

// BytesLibABI is the input ABI used to generate the binding from.
// Deprecated: Use BytesLibMetaData.ABI instead.
var BytesLibABI = BytesLibMetaData.ABI

// BytesLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BytesLibMetaData.Bin instead.
var BytesLibBin = BytesLibMetaData.Bin

// DeployBytesLib deploys a new Ethereum contract, binding an instance of BytesLib to it.
func DeployBytesLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BytesLib, error) {
	parsed, err := BytesLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BytesLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BytesLib{BytesLibCaller: BytesLibCaller{contract: contract}, BytesLibTransactor: BytesLibTransactor{contract: contract}, BytesLibFilterer: BytesLibFilterer{contract: contract}}, nil
}

// BytesLib is an auto generated Go binding around an Ethereum contract.
type BytesLib struct {
	BytesLibCaller     // Read-only binding to the contract
	BytesLibTransactor // Write-only binding to the contract
	BytesLibFilterer   // Log filterer for contract events
}

// BytesLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type BytesLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BytesLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BytesLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BytesLibSession struct {
	Contract     *BytesLib         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BytesLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BytesLibCallerSession struct {
	Contract *BytesLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BytesLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BytesLibTransactorSession struct {
	Contract     *BytesLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BytesLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type BytesLibRaw struct {
	Contract *BytesLib // Generic contract binding to access the raw methods on
}

// BytesLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BytesLibCallerRaw struct {
	Contract *BytesLibCaller // Generic read-only contract binding to access the raw methods on
}

// BytesLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BytesLibTransactorRaw struct {
	Contract *BytesLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBytesLib creates a new instance of BytesLib, bound to a specific deployed contract.
func NewBytesLib(address common.Address, backend bind.ContractBackend) (*BytesLib, error) {
	contract, err := bindBytesLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BytesLib{BytesLibCaller: BytesLibCaller{contract: contract}, BytesLibTransactor: BytesLibTransactor{contract: contract}, BytesLibFilterer: BytesLibFilterer{contract: contract}}, nil
}

// NewBytesLibCaller creates a new read-only instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibCaller(address common.Address, caller bind.ContractCaller) (*BytesLibCaller, error) {
	contract, err := bindBytesLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BytesLibCaller{contract: contract}, nil
}

// NewBytesLibTransactor creates a new write-only instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibTransactor(address common.Address, transactor bind.ContractTransactor) (*BytesLibTransactor, error) {
	contract, err := bindBytesLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BytesLibTransactor{contract: contract}, nil
}

// NewBytesLibFilterer creates a new log filterer instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibFilterer(address common.Address, filterer bind.ContractFilterer) (*BytesLibFilterer, error) {
	contract, err := bindBytesLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BytesLibFilterer{contract: contract}, nil
}

// bindBytesLib binds a generic wrapper to an already deployed contract.
func bindBytesLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BytesLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BytesLib *BytesLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BytesLib.Contract.BytesLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BytesLib *BytesLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BytesLib.Contract.BytesLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BytesLib *BytesLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BytesLib.Contract.BytesLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BytesLib *BytesLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BytesLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BytesLib *BytesLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BytesLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BytesLib *BytesLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BytesLib.Contract.contract.Transact(opts, method, params...)
}

// ContractBaseMetaData contains all meta data concerning the ContractBase contract.
var ContractBaseMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"}]",
}

// ContractBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractBaseMetaData.ABI instead.
var ContractBaseABI = ContractBaseMetaData.ABI

// ContractBase is an auto generated Go binding around an Ethereum contract.
type ContractBase struct {
	ContractBaseCaller     // Read-only binding to the contract
	ContractBaseTransactor // Write-only binding to the contract
	ContractBaseFilterer   // Log filterer for contract events
}

// ContractBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractBaseSession struct {
	Contract     *ContractBase     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractBaseCallerSession struct {
	Contract *ContractBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ContractBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractBaseTransactorSession struct {
	Contract     *ContractBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ContractBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractBaseRaw struct {
	Contract *ContractBase // Generic contract binding to access the raw methods on
}

// ContractBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractBaseCallerRaw struct {
	Contract *ContractBaseCaller // Generic read-only contract binding to access the raw methods on
}

// ContractBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractBaseTransactorRaw struct {
	Contract *ContractBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractBase creates a new instance of ContractBase, bound to a specific deployed contract.
func NewContractBase(address common.Address, backend bind.ContractBackend) (*ContractBase, error) {
	contract, err := bindContractBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractBase{ContractBaseCaller: ContractBaseCaller{contract: contract}, ContractBaseTransactor: ContractBaseTransactor{contract: contract}, ContractBaseFilterer: ContractBaseFilterer{contract: contract}}, nil
}

// NewContractBaseCaller creates a new read-only instance of ContractBase, bound to a specific deployed contract.
func NewContractBaseCaller(address common.Address, caller bind.ContractCaller) (*ContractBaseCaller, error) {
	contract, err := bindContractBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBaseCaller{contract: contract}, nil
}

// NewContractBaseTransactor creates a new write-only instance of ContractBase, bound to a specific deployed contract.
func NewContractBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractBaseTransactor, error) {
	contract, err := bindContractBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBaseTransactor{contract: contract}, nil
}

// NewContractBaseFilterer creates a new log filterer instance of ContractBase, bound to a specific deployed contract.
func NewContractBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractBaseFilterer, error) {
	contract, err := bindContractBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractBaseFilterer{contract: contract}, nil
}

// bindContractBase binds a generic wrapper to an already deployed contract.
func bindContractBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBase *ContractBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBase.Contract.ContractBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBase *ContractBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBase.Contract.ContractBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBase *ContractBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBase.Contract.ContractBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBase *ContractBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBase *ContractBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBase *ContractBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBase.Contract.contract.Transact(opts, method, params...)
}

// ContractBaseFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the ContractBase contract.
type ContractBaseFundsReleasedIterator struct {
	Event *ContractBaseFundsReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBaseFundsReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBaseFundsReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBaseFundsReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBaseFundsReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBaseFundsReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBaseFundsReleased represents a FundsReleased event raised by the ContractBase contract.
type ContractBaseFundsReleased struct {
	To     common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_ContractBase *ContractBaseFilterer) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*ContractBaseFundsReleasedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _ContractBase.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &ContractBaseFundsReleasedIterator{contract: _ContractBase.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
}

// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_ContractBase *ContractBaseFilterer) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *ContractBaseFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _ContractBase.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBaseFundsReleased)
				if err := _ContractBase.contract.UnpackLog(event, "FundsReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_ContractBase *ContractBaseFilterer) ParseFundsReleased(log types.Log) (*ContractBaseFundsReleased, error) {
	event := new(ContractBaseFundsReleased)
	if err := _ContractBase.contract.UnpackLog(event, "FundsReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DelegateCallerMetaData contains all meta data concerning the DelegateCaller contract.
var DelegateCallerMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b53667027e6f060c2e72e397db2d1fa9f22d2ce03e4bdabd9068999655b4a52c64736f6c63430008150033",
}

// DelegateCallerABI is the input ABI used to generate the binding from.
// Deprecated: Use DelegateCallerMetaData.ABI instead.
var DelegateCallerABI = DelegateCallerMetaData.ABI

// DelegateCallerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DelegateCallerMetaData.Bin instead.
var DelegateCallerBin = DelegateCallerMetaData.Bin

// DeployDelegateCaller deploys a new Ethereum contract, binding an instance of DelegateCaller to it.
func DeployDelegateCaller(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DelegateCaller, error) {
	parsed, err := DelegateCallerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DelegateCallerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DelegateCaller{DelegateCallerCaller: DelegateCallerCaller{contract: contract}, DelegateCallerTransactor: DelegateCallerTransactor{contract: contract}, DelegateCallerFilterer: DelegateCallerFilterer{contract: contract}}, nil
}

// DelegateCaller is an auto generated Go binding around an Ethereum contract.
type DelegateCaller struct {
	DelegateCallerCaller     // Read-only binding to the contract
	DelegateCallerTransactor // Write-only binding to the contract
	DelegateCallerFilterer   // Log filterer for contract events
}

// DelegateCallerCaller is an auto generated read-only Go binding around an Ethereum contract.
type DelegateCallerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DelegateCallerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DelegateCallerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DelegateCallerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DelegateCallerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DelegateCallerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DelegateCallerSession struct {
	Contract     *DelegateCaller   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DelegateCallerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DelegateCallerCallerSession struct {
	Contract *DelegateCallerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// DelegateCallerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DelegateCallerTransactorSession struct {
	Contract     *DelegateCallerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// DelegateCallerRaw is an auto generated low-level Go binding around an Ethereum contract.
type DelegateCallerRaw struct {
	Contract *DelegateCaller // Generic contract binding to access the raw methods on
}

// DelegateCallerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DelegateCallerCallerRaw struct {
	Contract *DelegateCallerCaller // Generic read-only contract binding to access the raw methods on
}

// DelegateCallerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DelegateCallerTransactorRaw struct {
	Contract *DelegateCallerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDelegateCaller creates a new instance of DelegateCaller, bound to a specific deployed contract.
func NewDelegateCaller(address common.Address, backend bind.ContractBackend) (*DelegateCaller, error) {
	contract, err := bindDelegateCaller(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DelegateCaller{DelegateCallerCaller: DelegateCallerCaller{contract: contract}, DelegateCallerTransactor: DelegateCallerTransactor{contract: contract}, DelegateCallerFilterer: DelegateCallerFilterer{contract: contract}}, nil
}

// NewDelegateCallerCaller creates a new read-only instance of DelegateCaller, bound to a specific deployed contract.
func NewDelegateCallerCaller(address common.Address, caller bind.ContractCaller) (*DelegateCallerCaller, error) {
	contract, err := bindDelegateCaller(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DelegateCallerCaller{contract: contract}, nil
}

// NewDelegateCallerTransactor creates a new write-only instance of DelegateCaller, bound to a specific deployed contract.
func NewDelegateCallerTransactor(address common.Address, transactor bind.ContractTransactor) (*DelegateCallerTransactor, error) {
	contract, err := bindDelegateCaller(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DelegateCallerTransactor{contract: contract}, nil
}

// NewDelegateCallerFilterer creates a new log filterer instance of DelegateCaller, bound to a specific deployed contract.
func NewDelegateCallerFilterer(address common.Address, filterer bind.ContractFilterer) (*DelegateCallerFilterer, error) {
	contract, err := bindDelegateCaller(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DelegateCallerFilterer{contract: contract}, nil
}

// bindDelegateCaller binds a generic wrapper to an already deployed contract.
func bindDelegateCaller(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DelegateCallerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DelegateCaller *DelegateCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DelegateCaller.Contract.DelegateCallerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DelegateCaller *DelegateCallerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DelegateCaller.Contract.DelegateCallerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DelegateCaller *DelegateCallerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DelegateCaller.Contract.DelegateCallerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DelegateCaller *DelegateCallerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DelegateCaller.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DelegateCaller *DelegateCallerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DelegateCaller.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DelegateCaller *DelegateCallerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DelegateCaller.Contract.contract.Transact(opts, method, params...)
}

// EnumerableSetMetaData contains all meta data concerning the EnumerableSet contract.
var EnumerableSetMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045bd98d50cb82dce790390be6e7ff6cdbffc6a02d3e267b62720d30f3c61e55c64736f6c63430008150033",
}

// EnumerableSetABI is the input ABI used to generate the binding from.
// Deprecated: Use EnumerableSetMetaData.ABI instead.
var EnumerableSetABI = EnumerableSetMetaData.ABI

// EnumerableSetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EnumerableSetMetaData.Bin instead.
var EnumerableSetBin = EnumerableSetMetaData.Bin

// DeployEnumerableSet deploys a new Ethereum contract, binding an instance of EnumerableSet to it.
func DeployEnumerableSet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EnumerableSet, error) {
	parsed, err := EnumerableSetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EnumerableSetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EnumerableSet{EnumerableSetCaller: EnumerableSetCaller{contract: contract}, EnumerableSetTransactor: EnumerableSetTransactor{contract: contract}, EnumerableSetFilterer: EnumerableSetFilterer{contract: contract}}, nil
}

// EnumerableSet is an auto generated Go binding around an Ethereum contract.
type EnumerableSet struct {
	EnumerableSetCaller     // Read-only binding to the contract
	EnumerableSetTransactor // Write-only binding to the contract
	EnumerableSetFilterer   // Log filterer for contract events
}

// EnumerableSetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EnumerableSetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EnumerableSetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EnumerableSetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EnumerableSetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EnumerableSetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EnumerableSetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EnumerableSetSession struct {
	Contract     *EnumerableSet    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EnumerableSetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EnumerableSetCallerSession struct {
	Contract *EnumerableSetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// EnumerableSetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EnumerableSetTransactorSession struct {
	Contract     *EnumerableSetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// EnumerableSetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EnumerableSetRaw struct {
	Contract *EnumerableSet // Generic contract binding to access the raw methods on
}

// EnumerableSetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EnumerableSetCallerRaw struct {
	Contract *EnumerableSetCaller // Generic read-only contract binding to access the raw methods on
}

// EnumerableSetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EnumerableSetTransactorRaw struct {
	Contract *EnumerableSetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEnumerableSet creates a new instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSet(address common.Address, backend bind.ContractBackend) (*EnumerableSet, error) {
	contract, err := bindEnumerableSet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EnumerableSet{EnumerableSetCaller: EnumerableSetCaller{contract: contract}, EnumerableSetTransactor: EnumerableSetTransactor{contract: contract}, EnumerableSetFilterer: EnumerableSetFilterer{contract: contract}}, nil
}

// NewEnumerableSetCaller creates a new read-only instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSetCaller(address common.Address, caller bind.ContractCaller) (*EnumerableSetCaller, error) {
	contract, err := bindEnumerableSet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EnumerableSetCaller{contract: contract}, nil
}

// NewEnumerableSetTransactor creates a new write-only instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSetTransactor(address common.Address, transactor bind.ContractTransactor) (*EnumerableSetTransactor, error) {
	contract, err := bindEnumerableSet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EnumerableSetTransactor{contract: contract}, nil
}

// NewEnumerableSetFilterer creates a new log filterer instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSetFilterer(address common.Address, filterer bind.ContractFilterer) (*EnumerableSetFilterer, error) {
	contract, err := bindEnumerableSet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EnumerableSetFilterer{contract: contract}, nil
}

// bindEnumerableSet binds a generic wrapper to an already deployed contract.
func bindEnumerableSet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EnumerableSetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EnumerableSet *EnumerableSetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EnumerableSet.Contract.EnumerableSetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EnumerableSet *EnumerableSetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EnumerableSet.Contract.EnumerableSetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EnumerableSet *EnumerableSetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EnumerableSet.Contract.EnumerableSetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EnumerableSet *EnumerableSetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EnumerableSet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EnumerableSet *EnumerableSetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EnumerableSet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EnumerableSet *EnumerableSetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EnumerableSet.Contract.contract.Transact(opts, method, params...)
}

// HelpersMetaData contains all meta data concerning the Helpers contract.
var HelpersMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f08ec662b3647da9f8d9adbbfb5ae571333af0be6a27cf20a23d7dccab133b1b64736f6c63430008150033",
}

// HelpersABI is the input ABI used to generate the binding from.
// Deprecated: Use HelpersMetaData.ABI instead.
var HelpersABI = HelpersMetaData.ABI

// HelpersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HelpersMetaData.Bin instead.
var HelpersBin = HelpersMetaData.Bin

// DeployHelpers deploys a new Ethereum contract, binding an instance of Helpers to it.
func DeployHelpers(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Helpers, error) {
	parsed, err := HelpersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HelpersBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// Helpers is an auto generated Go binding around an Ethereum contract.
type Helpers struct {
	HelpersCaller     // Read-only binding to the contract
	HelpersTransactor // Write-only binding to the contract
	HelpersFilterer   // Log filterer for contract events
}

// HelpersCaller is an auto generated read-only Go binding around an Ethereum contract.
type HelpersCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HelpersTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HelpersFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HelpersSession struct {
	Contract     *Helpers          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HelpersCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HelpersCallerSession struct {
	Contract *HelpersCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// HelpersTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HelpersTransactorSession struct {
	Contract     *HelpersTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// HelpersRaw is an auto generated low-level Go binding around an Ethereum contract.
type HelpersRaw struct {
	Contract *Helpers // Generic contract binding to access the raw methods on
}

// HelpersCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HelpersCallerRaw struct {
	Contract *HelpersCaller // Generic read-only contract binding to access the raw methods on
}

// HelpersTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HelpersTransactorRaw struct {
	Contract *HelpersTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHelpers creates a new instance of Helpers, bound to a specific deployed contract.
func NewHelpers(address common.Address, backend bind.ContractBackend) (*Helpers, error) {
	contract, err := bindHelpers(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// NewHelpersCaller creates a new read-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersCaller(address common.Address, caller bind.ContractCaller) (*HelpersCaller, error) {
	contract, err := bindHelpers(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersCaller{contract: contract}, nil
}

// NewHelpersTransactor creates a new write-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersTransactor(address common.Address, transactor bind.ContractTransactor) (*HelpersTransactor, error) {
	contract, err := bindHelpers(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersTransactor{contract: contract}, nil
}

// NewHelpersFilterer creates a new log filterer instance of Helpers, bound to a specific deployed contract.
func NewHelpersFilterer(address common.Address, filterer bind.ContractFilterer) (*HelpersFilterer, error) {
	contract, err := bindHelpers(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HelpersFilterer{contract: contract}, nil
}

// bindHelpers binds a generic wrapper to an already deployed contract.
func bindHelpers(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HelpersABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.HelpersCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transact(opts, method, params...)
}

// IACUMetaData contains all meta data concerning the IACU contract.
var IACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"a2e62045": "update()",
	},
}

// IACUABI is the input ABI used to generate the binding from.
// Deprecated: Use IACUMetaData.ABI instead.
var IACUABI = IACUMetaData.ABI

// Deprecated: Use IACUMetaData.Sigs instead.
// IACUFuncSigs maps the 4-byte function signature to its string representation.
var IACUFuncSigs = IACUMetaData.Sigs

// IACU is an auto generated Go binding around an Ethereum contract.
type IACU struct {
	IACUCaller     // Read-only binding to the contract
	IACUTransactor // Write-only binding to the contract
	IACUFilterer   // Log filterer for contract events
}

// IACUCaller is an auto generated read-only Go binding around an Ethereum contract.
type IACUCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IACUTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IACUTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IACUFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IACUFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IACUSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IACUSession struct {
	Contract     *IACU             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IACUCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IACUCallerSession struct {
	Contract *IACUCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IACUTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IACUTransactorSession struct {
	Contract     *IACUTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IACURaw is an auto generated low-level Go binding around an Ethereum contract.
type IACURaw struct {
	Contract *IACU // Generic contract binding to access the raw methods on
}

// IACUCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IACUCallerRaw struct {
	Contract *IACUCaller // Generic read-only contract binding to access the raw methods on
}

// IACUTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IACUTransactorRaw struct {
	Contract *IACUTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIACU creates a new instance of IACU, bound to a specific deployed contract.
func NewIACU(address common.Address, backend bind.ContractBackend) (*IACU, error) {
	contract, err := bindIACU(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IACU{IACUCaller: IACUCaller{contract: contract}, IACUTransactor: IACUTransactor{contract: contract}, IACUFilterer: IACUFilterer{contract: contract}}, nil
}

// NewIACUCaller creates a new read-only instance of IACU, bound to a specific deployed contract.
func NewIACUCaller(address common.Address, caller bind.ContractCaller) (*IACUCaller, error) {
	contract, err := bindIACU(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IACUCaller{contract: contract}, nil
}

// NewIACUTransactor creates a new write-only instance of IACU, bound to a specific deployed contract.
func NewIACUTransactor(address common.Address, transactor bind.ContractTransactor) (*IACUTransactor, error) {
	contract, err := bindIACU(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IACUTransactor{contract: contract}, nil
}

// NewIACUFilterer creates a new log filterer instance of IACU, bound to a specific deployed contract.
func NewIACUFilterer(address common.Address, filterer bind.ContractFilterer) (*IACUFilterer, error) {
	contract, err := bindIACU(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IACUFilterer{contract: contract}, nil
}

// bindIACU binds a generic wrapper to an already deployed contract.
func bindIACU(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IACUABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IACU *IACURaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IACU.Contract.IACUCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IACU *IACURaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IACU.Contract.IACUTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IACU *IACURaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IACU.Contract.IACUTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IACU *IACUCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IACU.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IACU *IACUTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IACU.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IACU *IACUTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IACU.Contract.contract.Transact(opts, method, params...)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACUTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _IACU.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACUSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOperator(&_IACU.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACUTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOperator(&_IACU.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACUTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _IACU.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACUSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOracle(&_IACU.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACUTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IACU.Contract.SetOracle(&_IACU.TransactOpts, oracle)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACUTransactor) Update(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IACU.contract.Transact(opts, "update")
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACUSession) Update() (*types.Transaction, error) {
	return _IACU.Contract.Update(&_IACU.TransactOpts)
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACUTransactorSession) Update() (*types.Transaction, error) {
	return _IACU.Contract.Update(&_IACU.TransactOpts)
}

// IAccountabilityMetaData contains all meta data concerning the IAccountability contract.
var IAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_committee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a8031a1d": "distributeRewards(address,uint256)",
		"6c9789b0": "finalize(bool)",
		"e08b14ed": "setCommittee(address[])",
	},
}

// IAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAccountabilityMetaData.ABI instead.
var IAccountabilityABI = IAccountabilityMetaData.ABI

// Deprecated: Use IAccountabilityMetaData.Sigs instead.
// IAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var IAccountabilityFuncSigs = IAccountabilityMetaData.Sigs

// IAccountability is an auto generated Go binding around an Ethereum contract.
type IAccountability struct {
	IAccountabilityCaller     // Read-only binding to the contract
	IAccountabilityTransactor // Write-only binding to the contract
	IAccountabilityFilterer   // Log filterer for contract events
}

// IAccountabilityCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAccountabilityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccountabilityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAccountabilityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccountabilityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAccountabilityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccountabilitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAccountabilitySession struct {
	Contract     *IAccountability  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAccountabilityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAccountabilityCallerSession struct {
	Contract *IAccountabilityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IAccountabilityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAccountabilityTransactorSession struct {
	Contract     *IAccountabilityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IAccountabilityRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAccountabilityRaw struct {
	Contract *IAccountability // Generic contract binding to access the raw methods on
}

// IAccountabilityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAccountabilityCallerRaw struct {
	Contract *IAccountabilityCaller // Generic read-only contract binding to access the raw methods on
}

// IAccountabilityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAccountabilityTransactorRaw struct {
	Contract *IAccountabilityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAccountability creates a new instance of IAccountability, bound to a specific deployed contract.
func NewIAccountability(address common.Address, backend bind.ContractBackend) (*IAccountability, error) {
	contract, err := bindIAccountability(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAccountability{IAccountabilityCaller: IAccountabilityCaller{contract: contract}, IAccountabilityTransactor: IAccountabilityTransactor{contract: contract}, IAccountabilityFilterer: IAccountabilityFilterer{contract: contract}}, nil
}

// NewIAccountabilityCaller creates a new read-only instance of IAccountability, bound to a specific deployed contract.
func NewIAccountabilityCaller(address common.Address, caller bind.ContractCaller) (*IAccountabilityCaller, error) {
	contract, err := bindIAccountability(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityCaller{contract: contract}, nil
}

// NewIAccountabilityTransactor creates a new write-only instance of IAccountability, bound to a specific deployed contract.
func NewIAccountabilityTransactor(address common.Address, transactor bind.ContractTransactor) (*IAccountabilityTransactor, error) {
	contract, err := bindIAccountability(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityTransactor{contract: contract}, nil
}

// NewIAccountabilityFilterer creates a new log filterer instance of IAccountability, bound to a specific deployed contract.
func NewIAccountabilityFilterer(address common.Address, filterer bind.ContractFilterer) (*IAccountabilityFilterer, error) {
	contract, err := bindIAccountability(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityFilterer{contract: contract}, nil
}

// bindIAccountability binds a generic wrapper to an already deployed contract.
func bindIAccountability(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IAccountabilityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccountability *IAccountabilityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccountability.Contract.IAccountabilityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccountability *IAccountabilityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccountability.Contract.IAccountabilityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccountability *IAccountabilityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccountability.Contract.IAccountabilityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccountability *IAccountabilityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccountability.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccountability *IAccountabilityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccountability.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccountability *IAccountabilityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccountability.Contract.contract.Transact(opts, method, params...)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountabilityTransactor) DistributeRewards(opts *bind.TransactOpts, _validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _IAccountability.contract.Transact(opts, "distributeRewards", _validator, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountabilitySession) DistributeRewards(_validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _IAccountability.Contract.DistributeRewards(&_IAccountability.TransactOpts, _validator, _ntnReward)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountabilityTransactorSession) DistributeRewards(_validator common.Address, _ntnReward *big.Int) (*types.Transaction, error) {
	return _IAccountability.Contract.DistributeRewards(&_IAccountability.TransactOpts, _validator, _ntnReward)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountabilityTransactor) Finalize(opts *bind.TransactOpts, _epochEnd bool) (*types.Transaction, error) {
	return _IAccountability.contract.Transact(opts, "finalize", _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountabilitySession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _IAccountability.Contract.Finalize(&_IAccountability.TransactOpts, _epochEnd)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountabilityTransactorSession) Finalize(_epochEnd bool) (*types.Transaction, error) {
	return _IAccountability.Contract.Finalize(&_IAccountability.TransactOpts, _epochEnd)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _committee) returns()
func (_IAccountability *IAccountabilityTransactor) SetCommittee(opts *bind.TransactOpts, _committee []common.Address) (*types.Transaction, error) {
	return _IAccountability.contract.Transact(opts, "setCommittee", _committee)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _committee) returns()
func (_IAccountability *IAccountabilitySession) SetCommittee(_committee []common.Address) (*types.Transaction, error) {
	return _IAccountability.Contract.SetCommittee(&_IAccountability.TransactOpts, _committee)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _committee) returns()
func (_IAccountability *IAccountabilityTransactorSession) SetCommittee(_committee []common.Address) (*types.Transaction, error) {
	return _IAccountability.Contract.SetCommittee(&_IAccountability.TransactOpts, _committee)
}

// IAccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the IAccountability contract.
type IAccountabilityInnocenceProvenIterator struct {
	Event *IAccountabilityInnocenceProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilityInnocenceProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilityInnocenceProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilityInnocenceProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilityInnocenceProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilityInnocenceProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilityInnocenceProven represents a InnocenceProven event raised by the IAccountability contract.
type IAccountabilityInnocenceProven struct {
	Offender common.Address
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityInnocenceProvenIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityInnocenceProvenIterator{contract: _IAccountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
}

// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *IAccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilityInnocenceProven)
				if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
//
// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) ParseInnocenceProven(log types.Log) (*IAccountabilityInnocenceProven, error) {
	event := new(IAccountabilityInnocenceProven)
	if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the IAccountability contract.
type IAccountabilityNewAccusationIterator struct {
	Event *IAccountabilityNewAccusation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilityNewAccusationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilityNewAccusation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilityNewAccusation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilityNewAccusationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilityNewAccusationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilityNewAccusation represents a NewAccusation event raised by the IAccountability contract.
type IAccountabilityNewAccusation struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewAccusationIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityNewAccusationIterator{contract: _IAccountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
}

// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilityNewAccusation)
				if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
//
// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
func (_IAccountability *IAccountabilityFilterer) ParseNewAccusation(log types.Log) (*IAccountabilityNewAccusation, error) {
	event := new(IAccountabilityNewAccusation)
	if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the IAccountability contract.
type IAccountabilityNewFaultProofIterator struct {
	Event *IAccountabilityNewFaultProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilityNewFaultProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilityNewFaultProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilityNewFaultProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilityNewFaultProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilityNewFaultProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilityNewFaultProof represents a NewFaultProof event raised by the IAccountability contract.
type IAccountabilityNewFaultProof struct {
	Offender common.Address
	Severity *big.Int
	Id       *big.Int
	Epoch    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_IAccountability *IAccountabilityFilterer) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewFaultProofIterator, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return &IAccountabilityNewFaultProofIterator{contract: _IAccountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
}

// WatchNewFaultProof is a free log subscription operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_IAccountability *IAccountabilityFilterer) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

	var _offenderRule []interface{}
	for _, _offenderItem := range _offender {
		_offenderRule = append(_offenderRule, _offenderItem)
	}

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilityNewFaultProof)
				if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewFaultProof is a log parse operation binding the contract event 0x5fd9605880705541b88eb5df56222ffa3c3e6884010fcf26d4c2c372917d98d7.
//
// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id, uint256 _epoch)
func (_IAccountability *IAccountabilityFilterer) ParseNewFaultProof(log types.Log) (*IAccountabilityNewFaultProof, error) {
	event := new(IAccountabilityNewFaultProof)
	if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the IAccountability contract.
type IAccountabilitySlashingEventIterator struct {
	Event *IAccountabilitySlashingEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccountabilitySlashingEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccountabilitySlashingEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccountabilitySlashingEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccountabilitySlashingEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccountabilitySlashingEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccountabilitySlashingEvent represents a SlashingEvent event raised by the IAccountability contract.
type IAccountabilitySlashingEvent struct {
	Validator    common.Address
	Amount       *big.Int
	ReleaseBlock *big.Int
	IsJailbound  bool
	EventId      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_IAccountability *IAccountabilityFilterer) FilterSlashingEvent(opts *bind.FilterOpts) (*IAccountabilitySlashingEventIterator, error) {

	logs, sub, err := _IAccountability.contract.FilterLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return &IAccountabilitySlashingEventIterator{contract: _IAccountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
}

// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_IAccountability *IAccountabilityFilterer) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *IAccountabilitySlashingEvent) (event.Subscription, error) {

	logs, sub, err := _IAccountability.contract.WatchLogs(opts, "SlashingEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccountabilitySlashingEvent)
				if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
//
// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
func (_IAccountability *IAccountabilityFilterer) ParseSlashingEvent(log types.Log) (*IAccountabilitySlashingEvent, error) {
	event := new(IAccountabilitySlashingEvent)
	if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAutonityMetaData contains all meta data concerning the IAutonity contract.
var IAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
	},
}

// IAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAutonityMetaData.ABI instead.
var IAutonityABI = IAutonityMetaData.ABI

// Deprecated: Use IAutonityMetaData.Sigs instead.
// IAutonityFuncSigs maps the 4-byte function signature to its string representation.
var IAutonityFuncSigs = IAutonityMetaData.Sigs

// IAutonity is an auto generated Go binding around an Ethereum contract.
type IAutonity struct {
	IAutonityCaller     // Read-only binding to the contract
	IAutonityTransactor // Write-only binding to the contract
	IAutonityFilterer   // Log filterer for contract events
}

// IAutonityCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAutonityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAutonityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAutonityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAutonityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAutonityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAutonitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAutonitySession struct {
	Contract     *IAutonity        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAutonityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAutonityCallerSession struct {
	Contract *IAutonityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IAutonityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAutonityTransactorSession struct {
	Contract     *IAutonityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IAutonityRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAutonityRaw struct {
	Contract *IAutonity // Generic contract binding to access the raw methods on
}

// IAutonityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAutonityCallerRaw struct {
	Contract *IAutonityCaller // Generic read-only contract binding to access the raw methods on
}

// IAutonityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAutonityTransactorRaw struct {
	Contract *IAutonityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAutonity creates a new instance of IAutonity, bound to a specific deployed contract.
func NewIAutonity(address common.Address, backend bind.ContractBackend) (*IAutonity, error) {
	contract, err := bindIAutonity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAutonity{IAutonityCaller: IAutonityCaller{contract: contract}, IAutonityTransactor: IAutonityTransactor{contract: contract}, IAutonityFilterer: IAutonityFilterer{contract: contract}}, nil
}

// NewIAutonityCaller creates a new read-only instance of IAutonity, bound to a specific deployed contract.
func NewIAutonityCaller(address common.Address, caller bind.ContractCaller) (*IAutonityCaller, error) {
	contract, err := bindIAutonity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAutonityCaller{contract: contract}, nil
}

// NewIAutonityTransactor creates a new write-only instance of IAutonity, bound to a specific deployed contract.
func NewIAutonityTransactor(address common.Address, transactor bind.ContractTransactor) (*IAutonityTransactor, error) {
	contract, err := bindIAutonity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAutonityTransactor{contract: contract}, nil
}

// NewIAutonityFilterer creates a new log filterer instance of IAutonity, bound to a specific deployed contract.
func NewIAutonityFilterer(address common.Address, filterer bind.ContractFilterer) (*IAutonityFilterer, error) {
	contract, err := bindIAutonity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAutonityFilterer{contract: contract}, nil
}

// bindIAutonity binds a generic wrapper to an already deployed contract.
func bindIAutonity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IAutonityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAutonity *IAutonityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAutonity.Contract.IAutonityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAutonity *IAutonityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAutonity.Contract.IAutonityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAutonity *IAutonityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAutonity.Contract.IAutonityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAutonity *IAutonityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAutonity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAutonity *IAutonityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAutonity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAutonity *IAutonityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAutonity.Contract.contract.Transact(opts, method, params...)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonityCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IAutonity.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonitySession) GetOperator() (common.Address, error) {
	return _IAutonity.Contract.GetOperator(&_IAutonity.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonityCallerSession) GetOperator() (common.Address, error) {
	return _IAutonity.Contract.GetOperator(&_IAutonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonityCaller) GetOracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IAutonity.contract.Call(opts, &out, "getOracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonitySession) GetOracle() (common.Address, error) {
	return _IAutonity.Contract.GetOracle(&_IAutonity.CallOpts)
}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonityCallerSession) GetOracle() (common.Address, error) {
	return _IAutonity.Contract.GetOracle(&_IAutonity.CallOpts)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// Deprecated: Use IERC20MetaData.Sigs instead.
// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = IERC20MetaData.Sigs

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IInflationControllerMetaData contains all meta data concerning the IInflationController contract.
var IInflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
	},
}

// IInflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use IInflationControllerMetaData.ABI instead.
var IInflationControllerABI = IInflationControllerMetaData.ABI

// Deprecated: Use IInflationControllerMetaData.Sigs instead.
// IInflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var IInflationControllerFuncSigs = IInflationControllerMetaData.Sigs

// IInflationController is an auto generated Go binding around an Ethereum contract.
type IInflationController struct {
	IInflationControllerCaller     // Read-only binding to the contract
	IInflationControllerTransactor // Write-only binding to the contract
	IInflationControllerFilterer   // Log filterer for contract events
}

// IInflationControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IInflationControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInflationControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IInflationControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInflationControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IInflationControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IInflationControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IInflationControllerSession struct {
	Contract     *IInflationController // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IInflationControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IInflationControllerCallerSession struct {
	Contract *IInflationControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IInflationControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IInflationControllerTransactorSession struct {
	Contract     *IInflationControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IInflationControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IInflationControllerRaw struct {
	Contract *IInflationController // Generic contract binding to access the raw methods on
}

// IInflationControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IInflationControllerCallerRaw struct {
	Contract *IInflationControllerCaller // Generic read-only contract binding to access the raw methods on
}

// IInflationControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IInflationControllerTransactorRaw struct {
	Contract *IInflationControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIInflationController creates a new instance of IInflationController, bound to a specific deployed contract.
func NewIInflationController(address common.Address, backend bind.ContractBackend) (*IInflationController, error) {
	contract, err := bindIInflationController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IInflationController{IInflationControllerCaller: IInflationControllerCaller{contract: contract}, IInflationControllerTransactor: IInflationControllerTransactor{contract: contract}, IInflationControllerFilterer: IInflationControllerFilterer{contract: contract}}, nil
}

// NewIInflationControllerCaller creates a new read-only instance of IInflationController, bound to a specific deployed contract.
func NewIInflationControllerCaller(address common.Address, caller bind.ContractCaller) (*IInflationControllerCaller, error) {
	contract, err := bindIInflationController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IInflationControllerCaller{contract: contract}, nil
}

// NewIInflationControllerTransactor creates a new write-only instance of IInflationController, bound to a specific deployed contract.
func NewIInflationControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*IInflationControllerTransactor, error) {
	contract, err := bindIInflationController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IInflationControllerTransactor{contract: contract}, nil
}

// NewIInflationControllerFilterer creates a new log filterer instance of IInflationController, bound to a specific deployed contract.
func NewIInflationControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*IInflationControllerFilterer, error) {
	contract, err := bindIInflationController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IInflationControllerFilterer{contract: contract}, nil
}

// bindIInflationController binds a generic wrapper to an already deployed contract.
func bindIInflationController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IInflationControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IInflationController *IInflationControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IInflationController.Contract.IInflationControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IInflationController *IInflationControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IInflationController.Contract.IInflationControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IInflationController *IInflationControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IInflationController.Contract.IInflationControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IInflationController *IInflationControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IInflationController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IInflationController *IInflationControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IInflationController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IInflationController *IInflationControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IInflationController.Contract.contract.Transact(opts, method, params...)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationControllerCaller) CalculateSupplyDelta(opts *bind.CallOpts, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IInflationController.contract.Call(opts, &out, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationControllerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _IInflationController.Contract.CalculateSupplyDelta(&_IInflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationControllerCallerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _IInflationController.Contract.CalculateSupplyDelta(&_IInflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// ILiquidMetaData contains all meta data concerning the ILiquid contract.
var ILiquidMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
}

// ILiquidABI is the input ABI used to generate the binding from.
// Deprecated: Use ILiquidMetaData.ABI instead.
var ILiquidABI = ILiquidMetaData.ABI

// Deprecated: Use ILiquidMetaData.Sigs instead.
// ILiquidFuncSigs maps the 4-byte function signature to its string representation.
var ILiquidFuncSigs = ILiquidMetaData.Sigs

// ILiquid is an auto generated Go binding around an Ethereum contract.
type ILiquid struct {
	ILiquidCaller     // Read-only binding to the contract
	ILiquidTransactor // Write-only binding to the contract
	ILiquidFilterer   // Log filterer for contract events
}

// ILiquidCaller is an auto generated read-only Go binding around an Ethereum contract.
type ILiquidCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILiquidTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ILiquidTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILiquidFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ILiquidFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ILiquidSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ILiquidSession struct {
	Contract     *ILiquid          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ILiquidCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ILiquidCallerSession struct {
	Contract *ILiquidCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ILiquidTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ILiquidTransactorSession struct {
	Contract     *ILiquidTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ILiquidRaw is an auto generated low-level Go binding around an Ethereum contract.
type ILiquidRaw struct {
	Contract *ILiquid // Generic contract binding to access the raw methods on
}

// ILiquidCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ILiquidCallerRaw struct {
	Contract *ILiquidCaller // Generic read-only contract binding to access the raw methods on
}

// ILiquidTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ILiquidTransactorRaw struct {
	Contract *ILiquidTransactor // Generic write-only contract binding to access the raw methods on
}

// NewILiquid creates a new instance of ILiquid, bound to a specific deployed contract.
func NewILiquid(address common.Address, backend bind.ContractBackend) (*ILiquid, error) {
	contract, err := bindILiquid(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ILiquid{ILiquidCaller: ILiquidCaller{contract: contract}, ILiquidTransactor: ILiquidTransactor{contract: contract}, ILiquidFilterer: ILiquidFilterer{contract: contract}}, nil
}

// NewILiquidCaller creates a new read-only instance of ILiquid, bound to a specific deployed contract.
func NewILiquidCaller(address common.Address, caller bind.ContractCaller) (*ILiquidCaller, error) {
	contract, err := bindILiquid(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ILiquidCaller{contract: contract}, nil
}

// NewILiquidTransactor creates a new write-only instance of ILiquid, bound to a specific deployed contract.
func NewILiquidTransactor(address common.Address, transactor bind.ContractTransactor) (*ILiquidTransactor, error) {
	contract, err := bindILiquid(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ILiquidTransactor{contract: contract}, nil
}

// NewILiquidFilterer creates a new log filterer instance of ILiquid, bound to a specific deployed contract.
func NewILiquidFilterer(address common.Address, filterer bind.ContractFilterer) (*ILiquidFilterer, error) {
	contract, err := bindILiquid(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ILiquidFilterer{contract: contract}, nil
}

// bindILiquid binds a generic wrapper to an already deployed contract.
func bindILiquid(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ILiquidABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILiquid *ILiquidRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILiquid.Contract.ILiquidCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILiquid *ILiquidRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILiquid.Contract.ILiquidTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILiquid *ILiquidRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILiquid.Contract.ILiquidTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ILiquid *ILiquidCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ILiquid.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ILiquid *ILiquidTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILiquid.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ILiquid *ILiquidTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ILiquid.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ILiquid *ILiquidCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ILiquid *ILiquidSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ILiquid.Contract.Allowance(&_ILiquid.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ILiquid *ILiquidCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ILiquid.Contract.Allowance(&_ILiquid.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ILiquid *ILiquidCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ILiquid *ILiquidSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ILiquid.Contract.BalanceOf(&_ILiquid.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ILiquid *ILiquidCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ILiquid.Contract.BalanceOf(&_ILiquid.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_ILiquid *ILiquidCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_ILiquid *ILiquidSession) Decimals() (uint8, error) {
	return _ILiquid.Contract.Decimals(&_ILiquid.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_ILiquid *ILiquidCallerSession) Decimals() (uint8, error) {
	return _ILiquid.Contract.Decimals(&_ILiquid.CallOpts)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_ILiquid *ILiquidCaller) GetCommissionRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_ILiquid *ILiquidSession) GetCommissionRate() (*big.Int, error) {
	return _ILiquid.Contract.GetCommissionRate(&_ILiquid.CallOpts)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_ILiquid *ILiquidCallerSession) GetCommissionRate() (*big.Int, error) {
	return _ILiquid.Contract.GetCommissionRate(&_ILiquid.CallOpts)
}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_ILiquid *ILiquidCaller) GetTreasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "getTreasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_ILiquid *ILiquidSession) GetTreasury() (common.Address, error) {
	return _ILiquid.Contract.GetTreasury(&_ILiquid.CallOpts)
}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_ILiquid *ILiquidCallerSession) GetTreasury() (common.Address, error) {
	return _ILiquid.Contract.GetTreasury(&_ILiquid.CallOpts)
}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_ILiquid *ILiquidCaller) GetTreasuryUnclaimedATN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_ILiquid *ILiquidSession) GetTreasuryUnclaimedATN() (*big.Int, error) {
	return _ILiquid.Contract.GetTreasuryUnclaimedATN(&_ILiquid.CallOpts)
}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_ILiquid *ILiquidCallerSession) GetTreasuryUnclaimedATN() (*big.Int, error) {
	return _ILiquid.Contract.GetTreasuryUnclaimedATN(&_ILiquid.CallOpts)
}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_ILiquid *ILiquidCaller) GetValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "getValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_ILiquid *ILiquidSession) GetValidator() (common.Address, error) {
	return _ILiquid.Contract.GetValidator(&_ILiquid.CallOpts)
}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_ILiquid *ILiquidCallerSession) GetValidator() (common.Address, error) {
	return _ILiquid.Contract.GetValidator(&_ILiquid.CallOpts)
}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquidCaller) LockedBalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquidSession) LockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _ILiquid.Contract.LockedBalanceOf(&_ILiquid.CallOpts, _delegator)
}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquidCallerSession) LockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _ILiquid.Contract.LockedBalanceOf(&_ILiquid.CallOpts, _delegator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ILiquid *ILiquidCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ILiquid *ILiquidSession) Name() (string, error) {
	return _ILiquid.Contract.Name(&_ILiquid.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ILiquid *ILiquidCallerSession) Name() (string, error) {
	return _ILiquid.Contract.Name(&_ILiquid.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ILiquid *ILiquidCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ILiquid *ILiquidSession) Symbol() (string, error) {
	return _ILiquid.Contract.Symbol(&_ILiquid.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ILiquid *ILiquidCallerSession) Symbol() (string, error) {
	return _ILiquid.Contract.Symbol(&_ILiquid.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ILiquid *ILiquidCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ILiquid *ILiquidSession) TotalSupply() (*big.Int, error) {
	return _ILiquid.Contract.TotalSupply(&_ILiquid.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ILiquid *ILiquidCallerSession) TotalSupply() (*big.Int, error) {
	return _ILiquid.Contract.TotalSupply(&_ILiquid.CallOpts)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256)
func (_ILiquid *ILiquidCaller) UnclaimedRewards(opts *bind.CallOpts, _account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "unclaimedRewards", _account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256)
func (_ILiquid *ILiquidSession) UnclaimedRewards(_account common.Address) (*big.Int, error) {
	return _ILiquid.Contract.UnclaimedRewards(&_ILiquid.CallOpts, _account)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256)
func (_ILiquid *ILiquidCallerSession) UnclaimedRewards(_account common.Address) (*big.Int, error) {
	return _ILiquid.Contract.UnclaimedRewards(&_ILiquid.CallOpts, _account)
}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquidCaller) UnlockedBalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ILiquid.contract.Call(opts, &out, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquidSession) UnlockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _ILiquid.Contract.UnlockedBalanceOf(&_ILiquid.CallOpts, _delegator)
}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquidCallerSession) UnlockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _ILiquid.Contract.UnlockedBalanceOf(&_ILiquid.CallOpts, _delegator)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquid *ILiquidTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquid *ILiquidSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Approve(&_ILiquid.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquid *ILiquidTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Approve(&_ILiquid.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactor) Burn(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "burn", _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidSession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Burn(&_ILiquid.TransactOpts, _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactorSession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Burn(&_ILiquid.TransactOpts, _account, _amount)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_ILiquid *ILiquidTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "claimRewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_ILiquid *ILiquidSession) ClaimRewards() (*types.Transaction, error) {
	return _ILiquid.Contract.ClaimRewards(&_ILiquid.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_ILiquid *ILiquidTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _ILiquid.Contract.ClaimRewards(&_ILiquid.TransactOpts)
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_ILiquid *ILiquidTransactor) ClaimTreasuryATN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "claimTreasuryATN")
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_ILiquid *ILiquidSession) ClaimTreasuryATN() (*types.Transaction, error) {
	return _ILiquid.Contract.ClaimTreasuryATN(&_ILiquid.TransactOpts)
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_ILiquid *ILiquidTransactorSession) ClaimTreasuryATN() (*types.Transaction, error) {
	return _ILiquid.Contract.ClaimTreasuryATN(&_ILiquid.TransactOpts)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactor) Lock(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "lock", _account, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidSession) Lock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Lock(&_ILiquid.TransactOpts, _account, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactorSession) Lock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Lock(&_ILiquid.TransactOpts, _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactor) Mint(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "mint", _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidSession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Mint(&_ILiquid.TransactOpts, _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactorSession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Mint(&_ILiquid.TransactOpts, _account, _amount)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256)
func (_ILiquid *ILiquidTransactor) Redistribute(opts *bind.TransactOpts, _ntnReward *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "redistribute", _ntnReward)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256)
func (_ILiquid *ILiquidSession) Redistribute(_ntnReward *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Redistribute(&_ILiquid.TransactOpts, _ntnReward)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256)
func (_ILiquid *ILiquidTransactorSession) Redistribute(_ntnReward *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Redistribute(&_ILiquid.TransactOpts, _ntnReward)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquid *ILiquidTransactor) SetCommissionRate(opts *bind.TransactOpts, _rate *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "setCommissionRate", _rate)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquid *ILiquidSession) SetCommissionRate(_rate *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.SetCommissionRate(&_ILiquid.TransactOpts, _rate)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquid *ILiquidTransactorSession) SetCommissionRate(_rate *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.SetCommissionRate(&_ILiquid.TransactOpts, _rate)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquidTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquidSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Transfer(&_ILiquid.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquidTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Transfer(&_ILiquid.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquidTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquidSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.TransferFrom(&_ILiquid.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquidTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.TransferFrom(&_ILiquid.TransactOpts, sender, recipient, amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactor) Unlock(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.contract.Transact(opts, "unlock", _account, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidSession) Unlock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Unlock(&_ILiquid.TransactOpts, _account, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquidTransactorSession) Unlock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ILiquid.Contract.Unlock(&_ILiquid.TransactOpts, _account, _amount)
}

// ILiquidApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ILiquid contract.
type ILiquidApprovalIterator struct {
	Event *ILiquidApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILiquidApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILiquidApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILiquidApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILiquidApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILiquidApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILiquidApproval represents a Approval event raised by the ILiquid contract.
type ILiquidApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ILiquid *ILiquidFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ILiquidApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ILiquid.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ILiquidApprovalIterator{contract: _ILiquid.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ILiquid *ILiquidFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ILiquidApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ILiquid.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILiquidApproval)
				if err := _ILiquid.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ILiquid *ILiquidFilterer) ParseApproval(log types.Log) (*ILiquidApproval, error) {
	event := new(ILiquidApproval)
	if err := _ILiquid.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ILiquidTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ILiquid contract.
type ILiquidTransferIterator struct {
	Event *ILiquidTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ILiquidTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ILiquidTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ILiquidTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ILiquidTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ILiquidTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ILiquidTransfer represents a Transfer event raised by the ILiquid contract.
type ILiquidTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ILiquid *ILiquidFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ILiquidTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ILiquid.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ILiquidTransferIterator{contract: _ILiquid.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ILiquid *ILiquidFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ILiquidTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ILiquid.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ILiquidTransfer)
				if err := _ILiquid.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ILiquid *ILiquidFilterer) ParseTransfer(log types.Log) (*ILiquidTransfer, error) {
	event := new(ILiquidTransfer)
	if err := _ILiquid.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOmissionAccountabilityMetaData contains all meta data concerning the IOmissionAccountability contract.
var IOmissionAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeProposerRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnded\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getInactivityScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLookbackWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"_committee\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_treasuries\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochBlock\",\"type\":\"uint256\"}],\"name\":\"setEpochBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"eeb92233": "distributeProposerRewards(uint256)",
		"6c9789b0": "finalize(bool)",
		"c549176e": "getDelta()",
		"9a11e0e6": "getInactivityScore(address)",
		"5ca1809c": "getLookbackWindow()",
		"7f5e2f11": "getScaleFactor()",
		"53b1821b": "getTotalEffort()",
		"e3deef9c": "setCommittee((address,uint256,bytes)[],address[])",
		"c024cc2c": "setEpochBlock(uint256)",
		"b3ab15fb": "setOperator(address)",
	},
}

// IOmissionAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use IOmissionAccountabilityMetaData.ABI instead.
var IOmissionAccountabilityABI = IOmissionAccountabilityMetaData.ABI

// Deprecated: Use IOmissionAccountabilityMetaData.Sigs instead.
// IOmissionAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var IOmissionAccountabilityFuncSigs = IOmissionAccountabilityMetaData.Sigs

// IOmissionAccountability is an auto generated Go binding around an Ethereum contract.
type IOmissionAccountability struct {
	IOmissionAccountabilityCaller     // Read-only binding to the contract
	IOmissionAccountabilityTransactor // Write-only binding to the contract
	IOmissionAccountabilityFilterer   // Log filterer for contract events
}

// IOmissionAccountabilityCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOmissionAccountabilityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOmissionAccountabilityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOmissionAccountabilityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOmissionAccountabilityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOmissionAccountabilityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOmissionAccountabilitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOmissionAccountabilitySession struct {
	Contract     *IOmissionAccountability // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IOmissionAccountabilityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOmissionAccountabilityCallerSession struct {
	Contract *IOmissionAccountabilityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// IOmissionAccountabilityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOmissionAccountabilityTransactorSession struct {
	Contract     *IOmissionAccountabilityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// IOmissionAccountabilityRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOmissionAccountabilityRaw struct {
	Contract *IOmissionAccountability // Generic contract binding to access the raw methods on
}

// IOmissionAccountabilityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOmissionAccountabilityCallerRaw struct {
	Contract *IOmissionAccountabilityCaller // Generic read-only contract binding to access the raw methods on
}

// IOmissionAccountabilityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOmissionAccountabilityTransactorRaw struct {
	Contract *IOmissionAccountabilityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOmissionAccountability creates a new instance of IOmissionAccountability, bound to a specific deployed contract.
func NewIOmissionAccountability(address common.Address, backend bind.ContractBackend) (*IOmissionAccountability, error) {
	contract, err := bindIOmissionAccountability(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOmissionAccountability{IOmissionAccountabilityCaller: IOmissionAccountabilityCaller{contract: contract}, IOmissionAccountabilityTransactor: IOmissionAccountabilityTransactor{contract: contract}, IOmissionAccountabilityFilterer: IOmissionAccountabilityFilterer{contract: contract}}, nil
}

// NewIOmissionAccountabilityCaller creates a new read-only instance of IOmissionAccountability, bound to a specific deployed contract.
func NewIOmissionAccountabilityCaller(address common.Address, caller bind.ContractCaller) (*IOmissionAccountabilityCaller, error) {
	contract, err := bindIOmissionAccountability(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOmissionAccountabilityCaller{contract: contract}, nil
}

// NewIOmissionAccountabilityTransactor creates a new write-only instance of IOmissionAccountability, bound to a specific deployed contract.
func NewIOmissionAccountabilityTransactor(address common.Address, transactor bind.ContractTransactor) (*IOmissionAccountabilityTransactor, error) {
	contract, err := bindIOmissionAccountability(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOmissionAccountabilityTransactor{contract: contract}, nil
}

// NewIOmissionAccountabilityFilterer creates a new log filterer instance of IOmissionAccountability, bound to a specific deployed contract.
func NewIOmissionAccountabilityFilterer(address common.Address, filterer bind.ContractFilterer) (*IOmissionAccountabilityFilterer, error) {
	contract, err := bindIOmissionAccountability(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOmissionAccountabilityFilterer{contract: contract}, nil
}

// bindIOmissionAccountability binds a generic wrapper to an already deployed contract.
func bindIOmissionAccountability(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IOmissionAccountabilityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOmissionAccountability *IOmissionAccountabilityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOmissionAccountability.Contract.IOmissionAccountabilityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOmissionAccountability *IOmissionAccountabilityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.IOmissionAccountabilityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOmissionAccountability *IOmissionAccountabilityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.IOmissionAccountabilityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOmissionAccountability *IOmissionAccountabilityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOmissionAccountability.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOmissionAccountability *IOmissionAccountabilityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOmissionAccountability *IOmissionAccountabilityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.contract.Transact(opts, method, params...)
}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCaller) GetDelta(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOmissionAccountability.contract.Call(opts, &out, "getDelta")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilitySession) GetDelta() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetDelta(&_IOmissionAccountability.CallOpts)
}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCallerSession) GetDelta() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetDelta(&_IOmissionAccountability.CallOpts)
}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCaller) GetInactivityScore(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IOmissionAccountability.contract.Call(opts, &out, "getInactivityScore", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilitySession) GetInactivityScore(_validator common.Address) (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetInactivityScore(&_IOmissionAccountability.CallOpts, _validator)
}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCallerSession) GetInactivityScore(_validator common.Address) (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetInactivityScore(&_IOmissionAccountability.CallOpts, _validator)
}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCaller) GetLookbackWindow(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOmissionAccountability.contract.Call(opts, &out, "getLookbackWindow")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilitySession) GetLookbackWindow() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetLookbackWindow(&_IOmissionAccountability.CallOpts)
}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCallerSession) GetLookbackWindow() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetLookbackWindow(&_IOmissionAccountability.CallOpts)
}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCaller) GetScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOmissionAccountability.contract.Call(opts, &out, "getScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilitySession) GetScaleFactor() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetScaleFactor(&_IOmissionAccountability.CallOpts)
}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCallerSession) GetScaleFactor() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetScaleFactor(&_IOmissionAccountability.CallOpts)
}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCaller) GetTotalEffort(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOmissionAccountability.contract.Call(opts, &out, "getTotalEffort")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilitySession) GetTotalEffort() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetTotalEffort(&_IOmissionAccountability.CallOpts)
}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityCallerSession) GetTotalEffort() (*big.Int, error) {
	return _IOmissionAccountability.Contract.GetTotalEffort(&_IOmissionAccountability.CallOpts)
}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactor) DistributeProposerRewards(opts *bind.TransactOpts, _ntnReward *big.Int) (*types.Transaction, error) {
	return _IOmissionAccountability.contract.Transact(opts, "distributeProposerRewards", _ntnReward)
}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_IOmissionAccountability *IOmissionAccountabilitySession) DistributeProposerRewards(_ntnReward *big.Int) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.DistributeProposerRewards(&_IOmissionAccountability.TransactOpts, _ntnReward)
}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactorSession) DistributeProposerRewards(_ntnReward *big.Int) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.DistributeProposerRewards(&_IOmissionAccountability.TransactOpts, _ntnReward)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityTransactor) Finalize(opts *bind.TransactOpts, _epochEnded bool) (*types.Transaction, error) {
	return _IOmissionAccountability.contract.Transact(opts, "finalize", _epochEnded)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilitySession) Finalize(_epochEnded bool) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.Finalize(&_IOmissionAccountability.TransactOpts, _epochEnded)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_IOmissionAccountability *IOmissionAccountabilityTransactorSession) Finalize(_epochEnded bool) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.Finalize(&_IOmissionAccountability.TransactOpts, _epochEnded)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactor) SetCommittee(opts *bind.TransactOpts, _committee []AutonityCommitteeMember, _treasuries []common.Address) (*types.Transaction, error) {
	return _IOmissionAccountability.contract.Transact(opts, "setCommittee", _committee, _treasuries)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_IOmissionAccountability *IOmissionAccountabilitySession) SetCommittee(_committee []AutonityCommitteeMember, _treasuries []common.Address) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.SetCommittee(&_IOmissionAccountability.TransactOpts, _committee, _treasuries)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactorSession) SetCommittee(_committee []AutonityCommitteeMember, _treasuries []common.Address) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.SetCommittee(&_IOmissionAccountability.TransactOpts, _committee, _treasuries)
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactor) SetEpochBlock(opts *bind.TransactOpts, _epochBlock *big.Int) (*types.Transaction, error) {
	return _IOmissionAccountability.contract.Transact(opts, "setEpochBlock", _epochBlock)
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_IOmissionAccountability *IOmissionAccountabilitySession) SetEpochBlock(_epochBlock *big.Int) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.SetEpochBlock(&_IOmissionAccountability.TransactOpts, _epochBlock)
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactorSession) SetEpochBlock(_epochBlock *big.Int) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.SetEpochBlock(&_IOmissionAccountability.TransactOpts, _epochBlock)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactor) SetOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _IOmissionAccountability.contract.Transact(opts, "setOperator", _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOmissionAccountability *IOmissionAccountabilitySession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.SetOperator(&_IOmissionAccountability.TransactOpts, _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOmissionAccountability *IOmissionAccountabilityTransactorSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _IOmissionAccountability.Contract.SetOperator(&_IOmissionAccountability.TransactOpts, _operator)
}

// IOracleMetaData contains all meta data concerning the IOracle contract.
var IOracleMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_median\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"_reported\",\"type\":\"uint120\"}],\"name\":\"Penalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_treasury\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint120\",\"name\":\"price\",\"type\":\"uint120\"},{\"internalType\":\"uint8\",\"name\":\"confidence\",\"type\":\"uint8\"}],\"internalType\":\"structIOracle.Report[]\",\"name\":\"_reports\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_extra\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"59974e38": "distributeRewards(uint256)",
		"4bb278f3": "finalize()",
		"f0141d84": "getDecimals()",
		"077945d3": "getNewVoters()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"33f98c77": "latestRoundData(string)",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"da78110e": "setVoters(address[],address[],address[])",
		"b6a702b3": "updateVoters()",
		"56833ebe": "vote(uint256,(uint120,uint8)[],uint256,uint8)",
	},
}

// IOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use IOracleMetaData.ABI instead.
var IOracleABI = IOracleMetaData.ABI

// Deprecated: Use IOracleMetaData.Sigs instead.
// IOracleFuncSigs maps the 4-byte function signature to its string representation.
var IOracleFuncSigs = IOracleMetaData.Sigs

// IOracle is an auto generated Go binding around an Ethereum contract.
type IOracle struct {
	IOracleCaller     // Read-only binding to the contract
	IOracleTransactor // Write-only binding to the contract
	IOracleFilterer   // Log filterer for contract events
}

// IOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOracleSession struct {
	Contract     *IOracle          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOracleCallerSession struct {
	Contract *IOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOracleTransactorSession struct {
	Contract     *IOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOracleRaw struct {
	Contract *IOracle // Generic contract binding to access the raw methods on
}

// IOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOracleCallerRaw struct {
	Contract *IOracleCaller // Generic read-only contract binding to access the raw methods on
}

// IOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOracleTransactorRaw struct {
	Contract *IOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOracle creates a new instance of IOracle, bound to a specific deployed contract.
func NewIOracle(address common.Address, backend bind.ContractBackend) (*IOracle, error) {
	contract, err := bindIOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOracle{IOracleCaller: IOracleCaller{contract: contract}, IOracleTransactor: IOracleTransactor{contract: contract}, IOracleFilterer: IOracleFilterer{contract: contract}}, nil
}

// NewIOracleCaller creates a new read-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleCaller(address common.Address, caller bind.ContractCaller) (*IOracleCaller, error) {
	contract, err := bindIOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleCaller{contract: contract}, nil
}

// NewIOracleTransactor creates a new write-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*IOracleTransactor, error) {
	contract, err := bindIOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleTransactor{contract: contract}, nil
}

// NewIOracleFilterer creates a new log filterer instance of IOracle, bound to a specific deployed contract.
func NewIOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*IOracleFilterer, error) {
	contract, err := bindIOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOracleFilterer{contract: contract}, nil
}

// bindIOracle binds a generic wrapper to an already deployed contract.
func bindIOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.IOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transact(opts, method, params...)
}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() view returns(uint8)
func (_IOracle *IOracleCaller) GetDecimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getDecimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() view returns(uint8)
func (_IOracle *IOracleSession) GetDecimals() (uint8, error) {
	return _IOracle.Contract.GetDecimals(&_IOracle.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() view returns(uint8)
func (_IOracle *IOracleCallerSession) GetDecimals() (uint8, error) {
	return _IOracle.Contract.GetDecimals(&_IOracle.CallOpts)
}

// GetNewVoters is a free data retrieval call binding the contract method 0x077945d3.
//
// Solidity: function getNewVoters() view returns(address[])
func (_IOracle *IOracleCaller) GetNewVoters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getNewVoters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetNewVoters is a free data retrieval call binding the contract method 0x077945d3.
//
// Solidity: function getNewVoters() view returns(address[])
func (_IOracle *IOracleSession) GetNewVoters() ([]common.Address, error) {
	return _IOracle.Contract.GetNewVoters(&_IOracle.CallOpts)
}

// GetNewVoters is a free data retrieval call binding the contract method 0x077945d3.
//
// Solidity: function getNewVoters() view returns(address[])
func (_IOracle *IOracleCallerSession) GetNewVoters() ([]common.Address, error) {
	return _IOracle.Contract.GetNewVoters(&_IOracle.CallOpts)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracleCaller) GetRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracleSession) GetRound() (*big.Int, error) {
	return _IOracle.Contract.GetRound(&_IOracle.CallOpts)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracleCallerSession) GetRound() (*big.Int, error) {
	return _IOracle.Contract.GetRound(&_IOracle.CallOpts)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_IOracle *IOracleCaller) GetRoundData(opts *bind.CallOpts, _round *big.Int, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_IOracle *IOracleSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.GetRoundData(&_IOracle.CallOpts, _round, _symbol)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_IOracle *IOracleCallerSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.GetRoundData(&_IOracle.CallOpts, _round, _symbol)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracleCaller) GetSymbols(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getSymbols")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracleSession) GetSymbols() ([]string, error) {
	return _IOracle.Contract.GetSymbols(&_IOracle.CallOpts)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracleCallerSession) GetSymbols() ([]string, error) {
	return _IOracle.Contract.GetSymbols(&_IOracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracleCaller) GetVotePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracleSession) GetVotePeriod() (*big.Int, error) {
	return _IOracle.Contract.GetVotePeriod(&_IOracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracleCallerSession) GetVotePeriod() (*big.Int, error) {
	return _IOracle.Contract.GetVotePeriod(&_IOracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracleCaller) GetVoters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getVoters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracleSession) GetVoters() ([]common.Address, error) {
	return _IOracle.Contract.GetVoters(&_IOracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracleCallerSession) GetVoters() ([]common.Address, error) {
	return _IOracle.Contract.GetVoters(&_IOracle.CallOpts)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_IOracle *IOracleCaller) LatestRoundData(opts *bind.CallOpts, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_IOracle *IOracleSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.LatestRoundData(&_IOracle.CallOpts, _symbol)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_IOracle *IOracleCallerSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _IOracle.Contract.LatestRoundData(&_IOracle.CallOpts, _symbol)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0x59974e38.
//
// Solidity: function distributeRewards(uint256 _ntnRewards) payable returns()
func (_IOracle *IOracleTransactor) DistributeRewards(opts *bind.TransactOpts, _ntnRewards *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "distributeRewards", _ntnRewards)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0x59974e38.
//
// Solidity: function distributeRewards(uint256 _ntnRewards) payable returns()
func (_IOracle *IOracleSession) DistributeRewards(_ntnRewards *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.DistributeRewards(&_IOracle.TransactOpts, _ntnRewards)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0x59974e38.
//
// Solidity: function distributeRewards(uint256 _ntnRewards) payable returns()
func (_IOracle *IOracleTransactorSession) DistributeRewards(_ntnRewards *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.DistributeRewards(&_IOracle.TransactOpts, _ntnRewards)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracleTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracleSession) Finalize() (*types.Transaction, error) {
	return _IOracle.Contract.Finalize(&_IOracle.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracleTransactorSession) Finalize() (*types.Transaction, error) {
	return _IOracle.Contract.Finalize(&_IOracle.TransactOpts)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracleTransactor) SetOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "setOperator", _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracleSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetOperator(&_IOracle.TransactOpts, _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracleTransactorSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetOperator(&_IOracle.TransactOpts, _operator)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracleTransactor) SetSymbols(opts *bind.TransactOpts, _symbols []string) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "setSymbols", _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracleSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _IOracle.Contract.SetSymbols(&_IOracle.TransactOpts, _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracleTransactorSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _IOracle.Contract.SetSymbols(&_IOracle.TransactOpts, _symbols)
}

// SetVoters is a paid mutator transaction binding the contract method 0xda78110e.
//
// Solidity: function setVoters(address[] _newVoters, address[] _treasury, address[] _validator) returns()
func (_IOracle *IOracleTransactor) SetVoters(opts *bind.TransactOpts, _newVoters []common.Address, _treasury []common.Address, _validator []common.Address) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "setVoters", _newVoters, _treasury, _validator)
}

// SetVoters is a paid mutator transaction binding the contract method 0xda78110e.
//
// Solidity: function setVoters(address[] _newVoters, address[] _treasury, address[] _validator) returns()
func (_IOracle *IOracleSession) SetVoters(_newVoters []common.Address, _treasury []common.Address, _validator []common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetVoters(&_IOracle.TransactOpts, _newVoters, _treasury, _validator)
}

// SetVoters is a paid mutator transaction binding the contract method 0xda78110e.
//
// Solidity: function setVoters(address[] _newVoters, address[] _treasury, address[] _validator) returns()
func (_IOracle *IOracleTransactorSession) SetVoters(_newVoters []common.Address, _treasury []common.Address, _validator []common.Address) (*types.Transaction, error) {
	return _IOracle.Contract.SetVoters(&_IOracle.TransactOpts, _newVoters, _treasury, _validator)
}

// UpdateVoters is a paid mutator transaction binding the contract method 0xb6a702b3.
//
// Solidity: function updateVoters() returns()
func (_IOracle *IOracleTransactor) UpdateVoters(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "updateVoters")
}

// UpdateVoters is a paid mutator transaction binding the contract method 0xb6a702b3.
//
// Solidity: function updateVoters() returns()
func (_IOracle *IOracleSession) UpdateVoters() (*types.Transaction, error) {
	return _IOracle.Contract.UpdateVoters(&_IOracle.TransactOpts)
}

// UpdateVoters is a paid mutator transaction binding the contract method 0xb6a702b3.
//
// Solidity: function updateVoters() returns()
func (_IOracle *IOracleTransactorSession) UpdateVoters() (*types.Transaction, error) {
	return _IOracle.Contract.UpdateVoters(&_IOracle.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0x56833ebe.
//
// Solidity: function vote(uint256 _commit, (uint120,uint8)[] _reports, uint256 _salt, uint8 _extra) returns()
func (_IOracle *IOracleTransactor) Vote(opts *bind.TransactOpts, _commit *big.Int, _reports []IOracleReport, _salt *big.Int, _extra uint8) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "vote", _commit, _reports, _salt, _extra)
}

// Vote is a paid mutator transaction binding the contract method 0x56833ebe.
//
// Solidity: function vote(uint256 _commit, (uint120,uint8)[] _reports, uint256 _salt, uint8 _extra) returns()
func (_IOracle *IOracleSession) Vote(_commit *big.Int, _reports []IOracleReport, _salt *big.Int, _extra uint8) (*types.Transaction, error) {
	return _IOracle.Contract.Vote(&_IOracle.TransactOpts, _commit, _reports, _salt, _extra)
}

// Vote is a paid mutator transaction binding the contract method 0x56833ebe.
//
// Solidity: function vote(uint256 _commit, (uint120,uint8)[] _reports, uint256 _salt, uint8 _extra) returns()
func (_IOracle *IOracleTransactorSession) Vote(_commit *big.Int, _reports []IOracleReport, _salt *big.Int, _extra uint8) (*types.Transaction, error) {
	return _IOracle.Contract.Vote(&_IOracle.TransactOpts, _commit, _reports, _salt, _extra)
}

// IOracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the IOracle contract.
type IOracleNewRoundIterator struct {
	Event *IOracleNewRound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOracleNewRoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOracleNewRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOracleNewRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOracleNewRoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOracleNewRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOracleNewRound represents a NewRound event raised by the IOracle contract.
type IOracleNewRound struct {
	Round      *big.Int
	Height     *big.Int
	Timestamp  *big.Int
	VotePeriod *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_IOracle *IOracleFilterer) FilterNewRound(opts *bind.FilterOpts) (*IOracleNewRoundIterator, error) {

	logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return &IOracleNewRoundIterator{contract: _IOracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
}

// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_IOracle *IOracleFilterer) WatchNewRound(opts *bind.WatchOpts, sink chan<- *IOracleNewRound) (event.Subscription, error) {

	logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOracleNewRound)
				if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_IOracle *IOracleFilterer) ParseNewRound(log types.Log) (*IOracleNewRound, error) {
	event := new(IOracleNewRound)
	if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the IOracle contract.
type IOracleNewSymbolsIterator struct {
	Event *IOracleNewSymbols // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOracleNewSymbolsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOracleNewSymbols)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOracleNewSymbols)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOracleNewSymbolsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOracleNewSymbolsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOracleNewSymbols represents a NewSymbols event raised by the IOracle contract.
type IOracleNewSymbols struct {
	Symbols []string
	Round   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_IOracle *IOracleFilterer) FilterNewSymbols(opts *bind.FilterOpts) (*IOracleNewSymbolsIterator, error) {

	logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return &IOracleNewSymbolsIterator{contract: _IOracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
}

// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_IOracle *IOracleFilterer) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *IOracleNewSymbols) (event.Subscription, error) {

	logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOracleNewSymbols)
				if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_IOracle *IOracleFilterer) ParseNewSymbols(log types.Log) (*IOracleNewSymbols, error) {
	event := new(IOracleNewSymbols)
	if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOraclePenalizedIterator is returned from FilterPenalized and is used to iterate over the raw logs and unpacked data for Penalized events raised by the IOracle contract.
type IOraclePenalizedIterator struct {
	Event *IOraclePenalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOraclePenalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOraclePenalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOraclePenalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOraclePenalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOraclePenalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOraclePenalized represents a Penalized event raised by the IOracle contract.
type IOraclePenalized struct {
	Participant common.Address
	Symbol      string
	Median      *big.Int
	Reported    *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPenalized is a free log retrieval operation binding the contract event 0x16708dc0bfc15303a11b0371f15f29a2155e1742e8760c317223012b5aec49c2.
//
// Solidity: event Penalized(address indexed _participant, string _symbol, int256 _median, uint120 _reported)
func (_IOracle *IOracleFilterer) FilterPenalized(opts *bind.FilterOpts, _participant []common.Address) (*IOraclePenalizedIterator, error) {

	var _participantRule []interface{}
	for _, _participantItem := range _participant {
		_participantRule = append(_participantRule, _participantItem)
	}

	logs, sub, err := _IOracle.contract.FilterLogs(opts, "Penalized", _participantRule)
	if err != nil {
		return nil, err
	}
	return &IOraclePenalizedIterator{contract: _IOracle.contract, event: "Penalized", logs: logs, sub: sub}, nil
}

// WatchPenalized is a free log subscription operation binding the contract event 0x16708dc0bfc15303a11b0371f15f29a2155e1742e8760c317223012b5aec49c2.
//
// Solidity: event Penalized(address indexed _participant, string _symbol, int256 _median, uint120 _reported)
func (_IOracle *IOracleFilterer) WatchPenalized(opts *bind.WatchOpts, sink chan<- *IOraclePenalized, _participant []common.Address) (event.Subscription, error) {

	var _participantRule []interface{}
	for _, _participantItem := range _participant {
		_participantRule = append(_participantRule, _participantItem)
	}

	logs, sub, err := _IOracle.contract.WatchLogs(opts, "Penalized", _participantRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOraclePenalized)
				if err := _IOracle.contract.UnpackLog(event, "Penalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePenalized is a log parse operation binding the contract event 0x16708dc0bfc15303a11b0371f15f29a2155e1742e8760c317223012b5aec49c2.
//
// Solidity: event Penalized(address indexed _participant, string _symbol, int256 _median, uint120 _reported)
func (_IOracle *IOracleFilterer) ParsePenalized(log types.Log) (*IOraclePenalized, error) {
	event := new(IOraclePenalized)
	if err := _IOracle.contract.UnpackLog(event, "Penalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the IOracle contract.
type IOracleVotedIterator struct {
	Event *IOracleVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOracleVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOracleVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOracleVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOracleVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOracleVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOracleVoted represents a Voted event raised by the IOracle contract.
type IOracleVoted struct {
	Voter common.Address
	Votes []*big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_IOracle *IOracleFilterer) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*IOracleVotedIterator, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _IOracle.contract.FilterLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return &IOracleVotedIterator{contract: _IOracle.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_IOracle *IOracleFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *IOracleVoted, _voter []common.Address) (event.Subscription, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _IOracle.contract.WatchLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOracleVoted)
				if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_IOracle *IOracleFilterer) ParseVoted(log types.Log) (*IOracleVoted, error) {
	event := new(IOracleVoted)
	if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ISlasherMetaData contains all meta data concerning the ISlasher contract.
var ISlasherMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"f189d66c": "jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint8)",
		"c44a5b21": "jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint8)",
		"f774fac0": "slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256)",
		"64d61bbe": "slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint256,uint8,uint8)",
	},
}

// ISlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use ISlasherMetaData.ABI instead.
var ISlasherABI = ISlasherMetaData.ABI

// Deprecated: Use ISlasherMetaData.Sigs instead.
// ISlasherFuncSigs maps the 4-byte function signature to its string representation.
var ISlasherFuncSigs = ISlasherMetaData.Sigs

// ISlasher is an auto generated Go binding around an Ethereum contract.
type ISlasher struct {
	ISlasherCaller     // Read-only binding to the contract
	ISlasherTransactor // Write-only binding to the contract
	ISlasherFilterer   // Log filterer for contract events
}

// ISlasherCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISlasherCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISlasherTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISlasherTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISlasherFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISlasherFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISlasherSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISlasherSession struct {
	Contract     *ISlasher         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISlasherCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISlasherCallerSession struct {
	Contract *ISlasherCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ISlasherTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISlasherTransactorSession struct {
	Contract     *ISlasherTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ISlasherRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISlasherRaw struct {
	Contract *ISlasher // Generic contract binding to access the raw methods on
}

// ISlasherCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISlasherCallerRaw struct {
	Contract *ISlasherCaller // Generic read-only contract binding to access the raw methods on
}

// ISlasherTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISlasherTransactorRaw struct {
	Contract *ISlasherTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISlasher creates a new instance of ISlasher, bound to a specific deployed contract.
func NewISlasher(address common.Address, backend bind.ContractBackend) (*ISlasher, error) {
	contract, err := bindISlasher(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISlasher{ISlasherCaller: ISlasherCaller{contract: contract}, ISlasherTransactor: ISlasherTransactor{contract: contract}, ISlasherFilterer: ISlasherFilterer{contract: contract}}, nil
}

// NewISlasherCaller creates a new read-only instance of ISlasher, bound to a specific deployed contract.
func NewISlasherCaller(address common.Address, caller bind.ContractCaller) (*ISlasherCaller, error) {
	contract, err := bindISlasher(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISlasherCaller{contract: contract}, nil
}

// NewISlasherTransactor creates a new write-only instance of ISlasher, bound to a specific deployed contract.
func NewISlasherTransactor(address common.Address, transactor bind.ContractTransactor) (*ISlasherTransactor, error) {
	contract, err := bindISlasher(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISlasherTransactor{contract: contract}, nil
}

// NewISlasherFilterer creates a new log filterer instance of ISlasher, bound to a specific deployed contract.
func NewISlasherFilterer(address common.Address, filterer bind.ContractFilterer) (*ISlasherFilterer, error) {
	contract, err := bindISlasher(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISlasherFilterer{contract: contract}, nil
}

// bindISlasher binds a generic wrapper to an already deployed contract.
func bindISlasher(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ISlasherABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISlasher *ISlasherRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISlasher.Contract.ISlasherCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISlasher *ISlasherRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISlasher.Contract.ISlasherTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISlasher *ISlasherRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISlasher.Contract.ISlasherTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISlasher *ISlasherCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISlasher.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISlasher *ISlasherTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISlasher.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISlasher *ISlasherTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISlasher.Contract.contract.Transact(opts, method, params...)
}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasherTransactor) Jail(opts *bind.TransactOpts, _val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _ISlasher.contract.Transact(opts, "jail", _val, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasherSession) Jail(_val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _ISlasher.Contract.Jail(&_ISlasher.TransactOpts, _val, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasherTransactorSession) Jail(_val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _ISlasher.Contract.Jail(&_ISlasher.TransactOpts, _val, _jailtime, _newJailedState)
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasherTransactor) Jailbound(opts *bind.TransactOpts, _val AutonityValidator, _newJailboundState uint8) (*types.Transaction, error) {
	return _ISlasher.contract.Transact(opts, "jailbound", _val, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasherSession) Jailbound(_val AutonityValidator, _newJailboundState uint8) (*types.Transaction, error) {
	return _ISlasher.Contract.Jailbound(&_ISlasher.TransactOpts, _val, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasherTransactorSession) Jailbound(_val AutonityValidator, _newJailboundState uint8) (*types.Transaction, error) {
	return _ISlasher.Contract.Jailbound(&_ISlasher.TransactOpts, _val, _newJailboundState)
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_ISlasher *ISlasherTransactor) Slash(opts *bind.TransactOpts, _val AutonityValidator, _slashingRate *big.Int) (*types.Transaction, error) {
	return _ISlasher.contract.Transact(opts, "slash", _val, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_ISlasher *ISlasherSession) Slash(_val AutonityValidator, _slashingRate *big.Int) (*types.Transaction, error) {
	return _ISlasher.Contract.Slash(&_ISlasher.TransactOpts, _val, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_ISlasher *ISlasherTransactorSession) Slash(_val AutonityValidator, _slashingRate *big.Int) (*types.Transaction, error) {
	return _ISlasher.Contract.Slash(&_ISlasher.TransactOpts, _val, _slashingRate)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_ISlasher *ISlasherTransactor) SlashAndJail(opts *bind.TransactOpts, _val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _ISlasher.contract.Transact(opts, "slashAndJail", _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_ISlasher *ISlasherSession) SlashAndJail(_val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _ISlasher.Contract.SlashAndJail(&_ISlasher.TransactOpts, _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_ISlasher *ISlasherTransactorSession) SlashAndJail(_val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _ISlasher.Contract.SlashAndJail(&_ISlasher.TransactOpts, _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// IStabilizationMetaData contains all meta data concerning the IStabilization contract.
var IStabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
	},
}

// IStabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use IStabilizationMetaData.ABI instead.
var IStabilizationABI = IStabilizationMetaData.ABI

// Deprecated: Use IStabilizationMetaData.Sigs instead.
// IStabilizationFuncSigs maps the 4-byte function signature to its string representation.
var IStabilizationFuncSigs = IStabilizationMetaData.Sigs

// IStabilization is an auto generated Go binding around an Ethereum contract.
type IStabilization struct {
	IStabilizationCaller     // Read-only binding to the contract
	IStabilizationTransactor // Write-only binding to the contract
	IStabilizationFilterer   // Log filterer for contract events
}

// IStabilizationCaller is an auto generated read-only Go binding around an Ethereum contract.
type IStabilizationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStabilizationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IStabilizationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStabilizationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IStabilizationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStabilizationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IStabilizationSession struct {
	Contract     *IStabilization   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IStabilizationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IStabilizationCallerSession struct {
	Contract *IStabilizationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IStabilizationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IStabilizationTransactorSession struct {
	Contract     *IStabilizationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IStabilizationRaw is an auto generated low-level Go binding around an Ethereum contract.
type IStabilizationRaw struct {
	Contract *IStabilization // Generic contract binding to access the raw methods on
}

// IStabilizationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IStabilizationCallerRaw struct {
	Contract *IStabilizationCaller // Generic read-only contract binding to access the raw methods on
}

// IStabilizationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IStabilizationTransactorRaw struct {
	Contract *IStabilizationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIStabilization creates a new instance of IStabilization, bound to a specific deployed contract.
func NewIStabilization(address common.Address, backend bind.ContractBackend) (*IStabilization, error) {
	contract, err := bindIStabilization(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IStabilization{IStabilizationCaller: IStabilizationCaller{contract: contract}, IStabilizationTransactor: IStabilizationTransactor{contract: contract}, IStabilizationFilterer: IStabilizationFilterer{contract: contract}}, nil
}

// NewIStabilizationCaller creates a new read-only instance of IStabilization, bound to a specific deployed contract.
func NewIStabilizationCaller(address common.Address, caller bind.ContractCaller) (*IStabilizationCaller, error) {
	contract, err := bindIStabilization(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IStabilizationCaller{contract: contract}, nil
}

// NewIStabilizationTransactor creates a new write-only instance of IStabilization, bound to a specific deployed contract.
func NewIStabilizationTransactor(address common.Address, transactor bind.ContractTransactor) (*IStabilizationTransactor, error) {
	contract, err := bindIStabilization(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IStabilizationTransactor{contract: contract}, nil
}

// NewIStabilizationFilterer creates a new log filterer instance of IStabilization, bound to a specific deployed contract.
func NewIStabilizationFilterer(address common.Address, filterer bind.ContractFilterer) (*IStabilizationFilterer, error) {
	contract, err := bindIStabilization(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IStabilizationFilterer{contract: contract}, nil
}

// bindIStabilization binds a generic wrapper to an already deployed contract.
func bindIStabilization(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IStabilizationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStabilization *IStabilizationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStabilization.Contract.IStabilizationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStabilization *IStabilizationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStabilization.Contract.IStabilizationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStabilization *IStabilizationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStabilization.Contract.IStabilizationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStabilization *IStabilizationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStabilization.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStabilization *IStabilizationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStabilization.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStabilization *IStabilizationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStabilization.Contract.contract.Transact(opts, method, params...)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilizationTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _IStabilization.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilizationSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOperator(&_IStabilization.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilizationTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOperator(&_IStabilization.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilizationTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _IStabilization.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilizationSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOracle(&_IStabilization.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilizationTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _IStabilization.Contract.SetOracle(&_IStabilization.TransactOpts, oracle)
}

// IStakeableVestingMetaData contains all meta data concerning the IStakeableVesting contract.
var IStakeableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
}

// IStakeableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakeableVestingMetaData.ABI instead.
var IStakeableVestingABI = IStakeableVestingMetaData.ABI

// Deprecated: Use IStakeableVestingMetaData.Sigs instead.
// IStakeableVestingFuncSigs maps the 4-byte function signature to its string representation.
var IStakeableVestingFuncSigs = IStakeableVestingMetaData.Sigs

// IStakeableVesting is an auto generated Go binding around an Ethereum contract.
type IStakeableVesting struct {
	IStakeableVestingCaller     // Read-only binding to the contract
	IStakeableVestingTransactor // Write-only binding to the contract
	IStakeableVestingFilterer   // Log filterer for contract events
}

// IStakeableVestingCaller is an auto generated read-only Go binding around an Ethereum contract.
type IStakeableVestingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeableVestingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IStakeableVestingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeableVestingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IStakeableVestingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeableVestingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IStakeableVestingSession struct {
	Contract     *IStakeableVesting // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IStakeableVestingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IStakeableVestingCallerSession struct {
	Contract *IStakeableVestingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IStakeableVestingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IStakeableVestingTransactorSession struct {
	Contract     *IStakeableVestingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IStakeableVestingRaw is an auto generated low-level Go binding around an Ethereum contract.
type IStakeableVestingRaw struct {
	Contract *IStakeableVesting // Generic contract binding to access the raw methods on
}

// IStakeableVestingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IStakeableVestingCallerRaw struct {
	Contract *IStakeableVestingCaller // Generic read-only contract binding to access the raw methods on
}

// IStakeableVestingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IStakeableVestingTransactorRaw struct {
	Contract *IStakeableVestingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIStakeableVesting creates a new instance of IStakeableVesting, bound to a specific deployed contract.
func NewIStakeableVesting(address common.Address, backend bind.ContractBackend) (*IStakeableVesting, error) {
	contract, err := bindIStakeableVesting(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IStakeableVesting{IStakeableVestingCaller: IStakeableVestingCaller{contract: contract}, IStakeableVestingTransactor: IStakeableVestingTransactor{contract: contract}, IStakeableVestingFilterer: IStakeableVestingFilterer{contract: contract}}, nil
}

// NewIStakeableVestingCaller creates a new read-only instance of IStakeableVesting, bound to a specific deployed contract.
func NewIStakeableVestingCaller(address common.Address, caller bind.ContractCaller) (*IStakeableVestingCaller, error) {
	contract, err := bindIStakeableVesting(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IStakeableVestingCaller{contract: contract}, nil
}

// NewIStakeableVestingTransactor creates a new write-only instance of IStakeableVesting, bound to a specific deployed contract.
func NewIStakeableVestingTransactor(address common.Address, transactor bind.ContractTransactor) (*IStakeableVestingTransactor, error) {
	contract, err := bindIStakeableVesting(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IStakeableVestingTransactor{contract: contract}, nil
}

// NewIStakeableVestingFilterer creates a new log filterer instance of IStakeableVesting, bound to a specific deployed contract.
func NewIStakeableVestingFilterer(address common.Address, filterer bind.ContractFilterer) (*IStakeableVestingFilterer, error) {
	contract, err := bindIStakeableVesting(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IStakeableVestingFilterer{contract: contract}, nil
}

// bindIStakeableVesting binds a generic wrapper to an already deployed contract.
func bindIStakeableVesting(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IStakeableVestingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakeableVesting *IStakeableVestingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakeableVesting.Contract.IStakeableVestingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakeableVesting *IStakeableVestingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.IStakeableVestingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakeableVesting *IStakeableVestingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.IStakeableVestingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakeableVesting *IStakeableVestingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakeableVesting.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakeableVesting *IStakeableVestingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakeableVesting *IStakeableVestingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.contract.Transact(opts, method, params...)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) ContractTotalValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) ContractTotalValue() (*big.Int, error) {
	return _IStakeableVesting.Contract.ContractTotalValue(&_IStakeableVesting.CallOpts)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) ContractTotalValue() (*big.Int, error) {
	return _IStakeableVesting.Contract.ContractTotalValue(&_IStakeableVesting.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_IStakeableVesting *IStakeableVestingCaller) GetBeneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "getBeneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_IStakeableVesting *IStakeableVestingSession) GetBeneficiary() (common.Address, error) {
	return _IStakeableVesting.Contract.GetBeneficiary(&_IStakeableVesting.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_IStakeableVesting *IStakeableVestingCallerSession) GetBeneficiary() (common.Address, error) {
	return _IStakeableVesting.Contract.GetBeneficiary(&_IStakeableVesting.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVestingCaller) GetContract(opts *bind.CallOpts) (ContractBaseContract, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "getContract")

	if err != nil {
		return *new(ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVestingSession) GetContract() (ContractBaseContract, error) {
	return _IStakeableVesting.Contract.GetContract(&_IStakeableVesting.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVestingCallerSession) GetContract() (ContractBaseContract, error) {
	return _IStakeableVesting.Contract.GetContract(&_IStakeableVesting.CallOpts)
}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_IStakeableVesting *IStakeableVestingCaller) GetLinkedValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_IStakeableVesting *IStakeableVestingSession) GetLinkedValidators() ([]common.Address, error) {
	return _IStakeableVesting.Contract.GetLinkedValidators(&_IStakeableVesting.CallOpts)
}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_IStakeableVesting *IStakeableVestingCallerSession) GetLinkedValidators() ([]common.Address, error) {
	return _IStakeableVesting.Contract.GetLinkedValidators(&_IStakeableVesting.CallOpts)
}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_IStakeableVesting *IStakeableVestingCaller) GetManagerContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_IStakeableVesting *IStakeableVestingSession) GetManagerContractAddress() (common.Address, error) {
	return _IStakeableVesting.Contract.GetManagerContractAddress(&_IStakeableVesting.CallOpts)
}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_IStakeableVesting *IStakeableVestingCallerSession) GetManagerContractAddress() (common.Address, error) {
	return _IStakeableVesting.Contract.GetManagerContractAddress(&_IStakeableVesting.CallOpts)
}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) LiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) LiquidBalance(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.LiquidBalance(&_IStakeableVesting.CallOpts, _validator)
}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) LiquidBalance(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.LiquidBalance(&_IStakeableVesting.CallOpts, _validator)
}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) LockedLiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) LockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.LockedLiquidBalance(&_IStakeableVesting.CallOpts, _validator)
}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) LockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.LockedLiquidBalance(&_IStakeableVesting.CallOpts, _validator)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) UnclaimedRewards(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "unclaimedRewards", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) UnclaimedRewards(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.UnclaimedRewards(&_IStakeableVesting.CallOpts, _validator)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) UnclaimedRewards(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.UnclaimedRewards(&_IStakeableVesting.CallOpts, _validator)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) UnclaimedRewards0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "unclaimedRewards0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) UnclaimedRewards0() (*big.Int, error) {
	return _IStakeableVesting.Contract.UnclaimedRewards0(&_IStakeableVesting.CallOpts)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) UnclaimedRewards0() (*big.Int, error) {
	return _IStakeableVesting.Contract.UnclaimedRewards0(&_IStakeableVesting.CallOpts)
}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) UnlockedLiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) UnlockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.UnlockedLiquidBalance(&_IStakeableVesting.CallOpts, _validator)
}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) UnlockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _IStakeableVesting.Contract.UnlockedLiquidBalance(&_IStakeableVesting.CallOpts, _validator)
}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) VestedFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "vestedFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) VestedFunds() (*big.Int, error) {
	return _IStakeableVesting.Contract.VestedFunds(&_IStakeableVesting.CallOpts)
}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) VestedFunds() (*big.Int, error) {
	return _IStakeableVesting.Contract.VestedFunds(&_IStakeableVesting.CallOpts)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCaller) WithdrawableVestedFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStakeableVesting.contract.Call(opts, &out, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) WithdrawableVestedFunds() (*big.Int, error) {
	return _IStakeableVesting.Contract.WithdrawableVestedFunds(&_IStakeableVesting.CallOpts)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVestingCallerSession) WithdrawableVestedFunds() (*big.Int, error) {
	return _IStakeableVesting.Contract.WithdrawableVestedFunds(&_IStakeableVesting.CallOpts)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVestingTransactor) Bond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "bond", _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.Bond(&_IStakeableVesting.TransactOpts, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVestingTransactorSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.Bond(&_IStakeableVesting.TransactOpts, _validator, _amount)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ChangeContractBeneficiary(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "changeContractBeneficiary", _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_IStakeableVesting *IStakeableVestingSession) ChangeContractBeneficiary(_recipient common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ChangeContractBeneficiary(&_IStakeableVesting.TransactOpts, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ChangeContractBeneficiary(_recipient common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ChangeContractBeneficiary(&_IStakeableVesting.TransactOpts, _recipient)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "claimRewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_IStakeableVesting *IStakeableVestingSession) ClaimRewards() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ClaimRewards(&_IStakeableVesting.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ClaimRewards(&_IStakeableVesting.TransactOpts)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ClaimRewards0(opts *bind.TransactOpts, _validator common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "claimRewards0", _validator)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_IStakeableVesting *IStakeableVestingSession) ClaimRewards0(_validator common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ClaimRewards0(&_IStakeableVesting.TransactOpts, _validator)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ClaimRewards0(_validator common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ClaimRewards0(&_IStakeableVesting.TransactOpts, _validator)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_IStakeableVesting *IStakeableVestingTransactor) CreateContract(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_IStakeableVesting *IStakeableVestingSession) CreateContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.CreateContract(&_IStakeableVesting.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) CreateContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.CreateContract(&_IStakeableVesting.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ReleaseAllLNTN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "releaseAllLNTN")
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_IStakeableVesting *IStakeableVestingSession) ReleaseAllLNTN() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseAllLNTN(&_IStakeableVesting.TransactOpts)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ReleaseAllLNTN() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseAllLNTN(&_IStakeableVesting.TransactOpts)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ReleaseAllNTN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "releaseAllNTN")
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_IStakeableVesting *IStakeableVestingSession) ReleaseAllNTN() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseAllNTN(&_IStakeableVesting.TransactOpts)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ReleaseAllNTN() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseAllNTN(&_IStakeableVesting.TransactOpts)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ReleaseFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "releaseFunds")
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_IStakeableVesting *IStakeableVestingSession) ReleaseFunds() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseFunds(&_IStakeableVesting.TransactOpts)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ReleaseFunds() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseFunds(&_IStakeableVesting.TransactOpts)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ReleaseLNTN(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "releaseLNTN", _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVestingSession) ReleaseLNTN(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseLNTN(&_IStakeableVesting.TransactOpts, _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ReleaseLNTN(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseLNTN(&_IStakeableVesting.TransactOpts, _validator, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVestingTransactor) ReleaseNTN(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "releaseNTN", _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVestingSession) ReleaseNTN(_amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseNTN(&_IStakeableVesting.TransactOpts, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) ReleaseNTN(_amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.ReleaseNTN(&_IStakeableVesting.TransactOpts, _amount)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_IStakeableVesting *IStakeableVestingTransactor) SetManagerContract(opts *bind.TransactOpts, _managerContract common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "setManagerContract", _managerContract)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_IStakeableVesting *IStakeableVestingSession) SetManagerContract(_managerContract common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.SetManagerContract(&_IStakeableVesting.TransactOpts, _managerContract)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) SetManagerContract(_managerContract common.Address) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.SetManagerContract(&_IStakeableVesting.TransactOpts, _managerContract)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVestingTransactor) Unbond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "unbond", _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVestingSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.Unbond(&_IStakeableVesting.TransactOpts, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVestingTransactorSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IStakeableVesting.Contract.Unbond(&_IStakeableVesting.TransactOpts, _validator, _amount)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_IStakeableVesting *IStakeableVestingTransactor) UpdateFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "updateFunds")
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_IStakeableVesting *IStakeableVestingSession) UpdateFunds() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.UpdateFunds(&_IStakeableVesting.TransactOpts)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_IStakeableVesting *IStakeableVestingTransactorSession) UpdateFunds() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.UpdateFunds(&_IStakeableVesting.TransactOpts)
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVestingTransactor) UpdateFundsAndGetContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVesting.contract.Transact(opts, "updateFundsAndGetContract")
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVestingSession) UpdateFundsAndGetContract() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.UpdateFundsAndGetContract(&_IStakeableVesting.TransactOpts)
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVestingTransactorSession) UpdateFundsAndGetContract() (*types.Transaction, error) {
	return _IStakeableVesting.Contract.UpdateFundsAndGetContract(&_IStakeableVesting.TransactOpts)
}

// IStakeableVestingManagerMetaData contains all meta data concerning the IStakeableVestingManager contract.
var IStakeableVestingManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"stakeableVestingLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a04ab5f8": "stakeableVestingLogicContract()",
	},
}

// IStakeableVestingManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakeableVestingManagerMetaData.ABI instead.
var IStakeableVestingManagerABI = IStakeableVestingManagerMetaData.ABI

// Deprecated: Use IStakeableVestingManagerMetaData.Sigs instead.
// IStakeableVestingManagerFuncSigs maps the 4-byte function signature to its string representation.
var IStakeableVestingManagerFuncSigs = IStakeableVestingManagerMetaData.Sigs

// IStakeableVestingManager is an auto generated Go binding around an Ethereum contract.
type IStakeableVestingManager struct {
	IStakeableVestingManagerCaller     // Read-only binding to the contract
	IStakeableVestingManagerTransactor // Write-only binding to the contract
	IStakeableVestingManagerFilterer   // Log filterer for contract events
}

// IStakeableVestingManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IStakeableVestingManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeableVestingManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IStakeableVestingManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeableVestingManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IStakeableVestingManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakeableVestingManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IStakeableVestingManagerSession struct {
	Contract     *IStakeableVestingManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IStakeableVestingManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IStakeableVestingManagerCallerSession struct {
	Contract *IStakeableVestingManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// IStakeableVestingManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IStakeableVestingManagerTransactorSession struct {
	Contract     *IStakeableVestingManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// IStakeableVestingManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IStakeableVestingManagerRaw struct {
	Contract *IStakeableVestingManager // Generic contract binding to access the raw methods on
}

// IStakeableVestingManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IStakeableVestingManagerCallerRaw struct {
	Contract *IStakeableVestingManagerCaller // Generic read-only contract binding to access the raw methods on
}

// IStakeableVestingManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IStakeableVestingManagerTransactorRaw struct {
	Contract *IStakeableVestingManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIStakeableVestingManager creates a new instance of IStakeableVestingManager, bound to a specific deployed contract.
func NewIStakeableVestingManager(address common.Address, backend bind.ContractBackend) (*IStakeableVestingManager, error) {
	contract, err := bindIStakeableVestingManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IStakeableVestingManager{IStakeableVestingManagerCaller: IStakeableVestingManagerCaller{contract: contract}, IStakeableVestingManagerTransactor: IStakeableVestingManagerTransactor{contract: contract}, IStakeableVestingManagerFilterer: IStakeableVestingManagerFilterer{contract: contract}}, nil
}

// NewIStakeableVestingManagerCaller creates a new read-only instance of IStakeableVestingManager, bound to a specific deployed contract.
func NewIStakeableVestingManagerCaller(address common.Address, caller bind.ContractCaller) (*IStakeableVestingManagerCaller, error) {
	contract, err := bindIStakeableVestingManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IStakeableVestingManagerCaller{contract: contract}, nil
}

// NewIStakeableVestingManagerTransactor creates a new write-only instance of IStakeableVestingManager, bound to a specific deployed contract.
func NewIStakeableVestingManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*IStakeableVestingManagerTransactor, error) {
	contract, err := bindIStakeableVestingManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IStakeableVestingManagerTransactor{contract: contract}, nil
}

// NewIStakeableVestingManagerFilterer creates a new log filterer instance of IStakeableVestingManager, bound to a specific deployed contract.
func NewIStakeableVestingManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*IStakeableVestingManagerFilterer, error) {
	contract, err := bindIStakeableVestingManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IStakeableVestingManagerFilterer{contract: contract}, nil
}

// bindIStakeableVestingManager binds a generic wrapper to an already deployed contract.
func bindIStakeableVestingManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IStakeableVestingManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakeableVestingManager *IStakeableVestingManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakeableVestingManager.Contract.IStakeableVestingManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakeableVestingManager *IStakeableVestingManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVestingManager.Contract.IStakeableVestingManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakeableVestingManager *IStakeableVestingManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakeableVestingManager.Contract.IStakeableVestingManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakeableVestingManager *IStakeableVestingManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakeableVestingManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakeableVestingManager *IStakeableVestingManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakeableVestingManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakeableVestingManager *IStakeableVestingManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakeableVestingManager.Contract.contract.Transact(opts, method, params...)
}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_IStakeableVestingManager *IStakeableVestingManagerCaller) StakeableVestingLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IStakeableVestingManager.contract.Call(opts, &out, "stakeableVestingLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_IStakeableVestingManager *IStakeableVestingManagerSession) StakeableVestingLogicContract() (common.Address, error) {
	return _IStakeableVestingManager.Contract.StakeableVestingLogicContract(&_IStakeableVestingManager.CallOpts)
}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_IStakeableVestingManager *IStakeableVestingManagerCallerSession) StakeableVestingLogicContract() (common.Address, error) {
	return _IStakeableVestingManager.Contract.StakeableVestingLogicContract(&_IStakeableVestingManager.CallOpts)
}

// ISupplyControlMetaData contains all meta data concerning the ISupplyControl contract.
var ISupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
}

// ISupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use ISupplyControlMetaData.ABI instead.
var ISupplyControlABI = ISupplyControlMetaData.ABI

// Deprecated: Use ISupplyControlMetaData.Sigs instead.
// ISupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var ISupplyControlFuncSigs = ISupplyControlMetaData.Sigs

// ISupplyControl is an auto generated Go binding around an Ethereum contract.
type ISupplyControl struct {
	ISupplyControlCaller     // Read-only binding to the contract
	ISupplyControlTransactor // Write-only binding to the contract
	ISupplyControlFilterer   // Log filterer for contract events
}

// ISupplyControlCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISupplyControlCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISupplyControlTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISupplyControlTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISupplyControlFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISupplyControlFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISupplyControlSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISupplyControlSession struct {
	Contract     *ISupplyControl   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISupplyControlCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISupplyControlCallerSession struct {
	Contract *ISupplyControlCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// ISupplyControlTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISupplyControlTransactorSession struct {
	Contract     *ISupplyControlTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ISupplyControlRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISupplyControlRaw struct {
	Contract *ISupplyControl // Generic contract binding to access the raw methods on
}

// ISupplyControlCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISupplyControlCallerRaw struct {
	Contract *ISupplyControlCaller // Generic read-only contract binding to access the raw methods on
}

// ISupplyControlTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISupplyControlTransactorRaw struct {
	Contract *ISupplyControlTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISupplyControl creates a new instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControl(address common.Address, backend bind.ContractBackend) (*ISupplyControl, error) {
	contract, err := bindISupplyControl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISupplyControl{ISupplyControlCaller: ISupplyControlCaller{contract: contract}, ISupplyControlTransactor: ISupplyControlTransactor{contract: contract}, ISupplyControlFilterer: ISupplyControlFilterer{contract: contract}}, nil
}

// NewISupplyControlCaller creates a new read-only instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControlCaller(address common.Address, caller bind.ContractCaller) (*ISupplyControlCaller, error) {
	contract, err := bindISupplyControl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISupplyControlCaller{contract: contract}, nil
}

// NewISupplyControlTransactor creates a new write-only instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControlTransactor(address common.Address, transactor bind.ContractTransactor) (*ISupplyControlTransactor, error) {
	contract, err := bindISupplyControl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISupplyControlTransactor{contract: contract}, nil
}

// NewISupplyControlFilterer creates a new log filterer instance of ISupplyControl, bound to a specific deployed contract.
func NewISupplyControlFilterer(address common.Address, filterer bind.ContractFilterer) (*ISupplyControlFilterer, error) {
	contract, err := bindISupplyControl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISupplyControlFilterer{contract: contract}, nil
}

// bindISupplyControl binds a generic wrapper to an already deployed contract.
func bindISupplyControl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ISupplyControlABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISupplyControl *ISupplyControlRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISupplyControl.Contract.ISupplyControlCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISupplyControl *ISupplyControlRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISupplyControl.Contract.ISupplyControlTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISupplyControl *ISupplyControlRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISupplyControl.Contract.ISupplyControlTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISupplyControl *ISupplyControlCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISupplyControl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISupplyControl *ISupplyControlTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISupplyControl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISupplyControl *ISupplyControlTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISupplyControl.Contract.contract.Transact(opts, method, params...)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCaller) AvailableSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISupplyControl.contract.Call(opts, &out, "availableSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlSession) AvailableSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.AvailableSupply(&_ISupplyControl.CallOpts)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCallerSession) AvailableSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.AvailableSupply(&_ISupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControlCaller) Stabilizer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ISupplyControl.contract.Call(opts, &out, "stabilizer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControlSession) Stabilizer() (common.Address, error) {
	return _ISupplyControl.Contract.Stabilizer(&_ISupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControlCallerSession) Stabilizer() (common.Address, error) {
	return _ISupplyControl.Contract.Stabilizer(&_ISupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISupplyControl.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlSession) TotalSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.TotalSupply(&_ISupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControlCallerSession) TotalSupply() (*big.Int, error) {
	return _ISupplyControl.Contract.TotalSupply(&_ISupplyControl.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControlTransactor) Burn(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "burn")
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControlSession) Burn() (*types.Transaction, error) {
	return _ISupplyControl.Contract.Burn(&_ISupplyControl.TransactOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControlTransactorSession) Burn() (*types.Transaction, error) {
	return _ISupplyControl.Contract.Burn(&_ISupplyControl.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControlTransactor) Mint(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "mint", recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControlSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ISupplyControl.Contract.Mint(&_ISupplyControl.TransactOpts, recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControlTransactorSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ISupplyControl.Contract.Mint(&_ISupplyControl.TransactOpts, recipient, amount)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControlTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControlSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetOperator(&_ISupplyControl.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControlTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetOperator(&_ISupplyControl.TransactOpts, operator)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControlTransactor) SetStabilizer(opts *bind.TransactOpts, stabilizer_ common.Address) (*types.Transaction, error) {
	return _ISupplyControl.contract.Transact(opts, "setStabilizer", stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControlSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetStabilizer(&_ISupplyControl.TransactOpts, stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControlTransactorSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _ISupplyControl.Contract.SetStabilizer(&_ISupplyControl.TransactOpts, stabilizer_)
}

// ISupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the ISupplyControl contract.
type ISupplyControlBurnIterator struct {
	Event *ISupplyControlBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ISupplyControlBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ISupplyControlBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ISupplyControlBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ISupplyControlBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ISupplyControlBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ISupplyControlBurn represents a Burn event raised by the ISupplyControl contract.
type ISupplyControlBurn struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) FilterBurn(opts *bind.FilterOpts) (*ISupplyControlBurnIterator, error) {

	logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return &ISupplyControlBurnIterator{contract: _ISupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *ISupplyControlBurn) (event.Subscription, error) {

	logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ISupplyControlBurn)
				if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) ParseBurn(log types.Log) (*ISupplyControlBurn, error) {
	event := new(ISupplyControlBurn)
	if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ISupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the ISupplyControl contract.
type ISupplyControlMintIterator struct {
	Event *ISupplyControlMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ISupplyControlMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ISupplyControlMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ISupplyControlMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ISupplyControlMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ISupplyControlMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ISupplyControlMint represents a Mint event raised by the ISupplyControl contract.
type ISupplyControlMint struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) FilterMint(opts *bind.FilterOpts) (*ISupplyControlMintIterator, error) {

	logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &ISupplyControlMintIterator{contract: _ISupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *ISupplyControlMint) (event.Subscription, error) {

	logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ISupplyControlMint)
				if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_ISupplyControl *ISupplyControlFilterer) ParseMint(log types.Log) (*ISupplyControlMint, error) {
	event := new(ISupplyControlMint)
	if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InflationControllerMetaData contains all meta data concerning the InflationController contract.
var InflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"internalType\":\"structInflationController.Params\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Div_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Div_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Mul_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Mul_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
		"cff0ab96": "params()",
	},
	Bin: "0x608060405234801561001057600080fd5b506040516110c43803806110c483398101604081905261002f9161005c565b805160005560208101516001556040810151600255606081015160035560800151600455426005556100d9565b600060a0828403121561006e57600080fd5b60405160a081016001600160401b038111828210171561009e57634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b610fdc806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806392eff3cd1461003b578063cff0ab9614610061575b600080fd5b61004e610049366004610e97565b6100a3565b6040519081526020015b60405180910390f35b60005460015460025460035460045461007b949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610058565b6000806100bc600554856100b79190610edf565b610150565b905060006100d1600554856100b79190610edf565b60035490915081136100f1576100e88783836101da565b92505050610148565b60035482121561013857600061010d88846000600301546101da565b9050600061012188600060030154856102da565b905061012d8183610ef2565b945050505050610148565b6101438683836102da565b925050505b949350505050565b6000610168670de0b6b3a7640000600160ff1b610f1b565b821215610190576040516399474eeb60e01b8152600481018390526024015b60405180910390fd5b6101a9670de0b6b3a76400006001600160ff1b03610f1b565b8213156101cc57604051639d58109160e01b815260048101839052602401610187565b50670de0b6b3a76400000290565b6000806101f46000600201546101f06000610150565b1490565b156102305760005460015461022991906102249061021c9061021690846102fe565b8861030d565b6003546103d8565b610485565b90506102a2565b600061024461021c6000600201548761030d565b9050600061027c6102666102578461049a565b6102616001610150565b6102fe565b61027761025760006002015461049a565b6103d8565b60005460015491925061029d916102249061029790836102fe565b8461030d565b925050505b60006102c36102b9836102b489610150565b61030d565b6102b486886102fe565b90506102ce816104ef565b925050505b9392505050565b60006101486102f66102ee6102b987610150565b60045461030d565b6104ef565b90565b60006102d36102fb8385610f57565b60008282600160ff1b8214806103265750600160ff1b81145b156103445760405163a6070c2560e01b815260040160405180910390fd5b60008060008412610355578361035a565b836000035b91506000831261036a578261036f565b826000035b9050600061037d8383610503565b90506001600160ff1b038111156103b15760405163120b5b4360e01b81526004810189905260248101889052604401610187565b600019858518136103cb816103c7578260000390565b8290565b9998505050505050505050565b60008282600160ff1b8214806103f15750600160ff1b81145b1561040f576040516309fe2b4560e41b815260040160405180910390fd5b600080600084126104205783610425565b836000035b915060008312610435578261043a565b826000035b9050600061045183670de0b6b3a7640000846105b9565b90506001600160ff1b038111156103b15760405163d49c26b360e01b81526004810189905260248101889052604401610187565b60006102d36102fb8385610f7e565b92915050565b600081680736ea4425c11ac6308113156104ca5760405163ca7ec0c560e01b815260048101849052602401610187565b6714057b7ef767814f81026101486104ea670de0b6b3a7640000835b0590565b61068d565b6000610494670de0b6b3a764000083610f1b565b60008080600019848609848602925082811083820303915050806000036105375750670de0b6b3a764000090049050610494565b670de0b6b3a7640000811061056957604051635173648d60e01b81526004810186905260248101859052604401610187565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b60008080600019858709858702925082811083820303915050806000036105f3578382816105e9576105e9610f05565b04925050506102d3565b83811061062457604051630c740aef60e31b8152600481018790526024810186905260448101859052606401610187565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081818112156106ea5768033dd1780914b97114198112156106b35750600092915050565b6106e36106c66102fb6104ea8460000390565b6ec097ce7bc90715b34b9f1000000000816104e6576104e6610f05565b9150610731565b680a688906bd8affffff81131561071657604051626c1a0560e31b815260048101849052602401610187565b670de0b6b3a7640000604082901b056101486102fb82610737565b50919050565b600160bf1b67ff000000000000008216156108445767800000000000000082161561076b5768016a09e667f3bcc9090260401c5b67400000000000000082161561078a576801306fe0a31b7152df0260401c5b6720000000000000008216156107a9576801172b83c7d517adce0260401c5b6710000000000000008216156107c85768010b5586cf9890f62a0260401c5b6708000000000000008216156107e7576801059b0d31585743ae0260401c5b67040000000000000082161561080657680102c9a3e778060ee70260401c5b6702000000000000008216156108255768010163da9fb33356d80260401c5b67010000000000000082161561084457680100b1afa5abcbed610260401c5b66ff0000000000008216156109435766800000000000008216156108715768010058c86da1c09ea20260401c5b664000000000000082161561088f576801002c605e2e8cec500260401c5b66200000000000008216156108ad57680100162f3904051fa10260401c5b66100000000000008216156108cb576801000b175effdc76ba0260401c5b66080000000000008216156108e957680100058ba01fb9f96d0260401c5b66040000000000008216156109075768010002c5cc37da94920260401c5b6602000000000000821615610925576801000162e525ee05470260401c5b66010000000000008216156109435768010000b17255775c040260401c5b65ff0000000000821615610a39576580000000000082161561096e576801000058b91b5bc9ae0260401c5b6540000000000082161561098b57680100002c5c89d5ec6d0260401c5b652000000000008216156109a85768010000162e43f4f8310260401c5b651000000000008216156109c557680100000b1721bcfc9a0260401c5b650800000000008216156109e25768010000058b90cf1e6e0260401c5b650400000000008216156109ff576801000002c5c863b73f0260401c5b65020000000000821615610a1c57680100000162e430e5a20260401c5b65010000000000821615610a39576801000000b1721835510260401c5b64ff00000000821615610b2657648000000000821615610a6257680100000058b90c0b490260401c5b644000000000821615610a7e5768010000002c5c8601cc0260401c5b642000000000821615610a9a576801000000162e42fff00260401c5b641000000000821615610ab65768010000000b17217fbb0260401c5b640800000000821615610ad2576801000000058b90bfce0260401c5b640400000000821615610aee57680100000002c5c85fe30260401c5b640200000000821615610b0a5768010000000162e42ff10260401c5b640100000000821615610b2657680100000000b17217f80260401c5b63ff000000821615610c0a576380000000821615610b4d5768010000000058b90bfc0260401c5b6340000000821615610b68576801000000002c5c85fe0260401c5b6320000000821615610b8357680100000000162e42ff0260401c5b6310000000821615610b9e576801000000000b17217f0260401c5b6308000000821615610bb957680100000000058b90c00260401c5b6304000000821615610bd45768010000000002c5c8600260401c5b6302000000821615610bef576801000000000162e4300260401c5b6301000000821615610c0a5768010000000000b172180260401c5b62ff0000821615610ce55762800000821615610c2f576801000000000058b90c0260401c5b62400000821615610c4957680100000000002c5c860260401c5b62200000821615610c635768010000000000162e430260401c5b62100000821615610c7d57680100000000000b17210260401c5b62080000821615610c975768010000000000058b910260401c5b62040000821615610cb1576801000000000002c5c80260401c5b62020000821615610ccb57680100000000000162e40260401c5b62010000821615610ce5576801000000000000b1720260401c5b61ff00821615610db757618000821615610d0857680100000000000058b90260401c5b614000821615610d215768010000000000002c5d0260401c5b612000821615610d3a576801000000000000162e0260401c5b611000821615610d535768010000000000000b170260401c5b610800821615610d6c576801000000000000058c0260401c5b610400821615610d8557680100000000000002c60260401c5b610200821615610d9e57680100000000000001630260401c5b610100821615610db757680100000000000000b10260401c5b60ff821615610e80576080821615610dd857680100000000000000590260401c5b6040821615610df0576801000000000000002c0260401c5b6020821615610e0857680100000000000000160260401c5b6010821615610e20576801000000000000000b0260401c5b6008821615610e3857680100000000000000060260401c5b6004821615610e5057680100000000000000030260401c5b6002821615610e6857680100000000000000010260401c5b6001821615610e8057680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b60008060008060808587031215610ead57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561049457610494610ec9565b8082018082111561049457610494610ec9565b634e487b7160e01b600052601260045260246000fd5b600082610f3857634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610f5257610f52610ec9565b500590565b8181036000831280158383131683831282161715610f7757610f77610ec9565b5092915050565b8082018281126000831280158216821582161715610f9e57610f9e610ec9565b50509291505056fea2646970667358221220504f3314895e62f29ab0c4b64de9dfae65546185267645a44e47d1b435d782dc64736f6c63430008150033",
}

// InflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use InflationControllerMetaData.ABI instead.
var InflationControllerABI = InflationControllerMetaData.ABI

// Deprecated: Use InflationControllerMetaData.Sigs instead.
// InflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var InflationControllerFuncSigs = InflationControllerMetaData.Sigs

// InflationControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InflationControllerMetaData.Bin instead.
var InflationControllerBin = InflationControllerMetaData.Bin

// DeployInflationController deploys a new Ethereum contract, binding an instance of InflationController to it.
func DeployInflationController(auth *bind.TransactOpts, backend bind.ContractBackend, _params InflationControllerParams) (common.Address, *types.Transaction, *InflationController, error) {
	parsed, err := InflationControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(InflationControllerBin), backend, _params)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InflationController{InflationControllerCaller: InflationControllerCaller{contract: contract}, InflationControllerTransactor: InflationControllerTransactor{contract: contract}, InflationControllerFilterer: InflationControllerFilterer{contract: contract}}, nil
}

// InflationController is an auto generated Go binding around an Ethereum contract.
type InflationController struct {
	InflationControllerCaller     // Read-only binding to the contract
	InflationControllerTransactor // Write-only binding to the contract
	InflationControllerFilterer   // Log filterer for contract events
}

// InflationControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type InflationControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InflationControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InflationControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InflationControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InflationControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InflationControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InflationControllerSession struct {
	Contract     *InflationController // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// InflationControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InflationControllerCallerSession struct {
	Contract *InflationControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// InflationControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InflationControllerTransactorSession struct {
	Contract     *InflationControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// InflationControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type InflationControllerRaw struct {
	Contract *InflationController // Generic contract binding to access the raw methods on
}

// InflationControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InflationControllerCallerRaw struct {
	Contract *InflationControllerCaller // Generic read-only contract binding to access the raw methods on
}

// InflationControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InflationControllerTransactorRaw struct {
	Contract *InflationControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInflationController creates a new instance of InflationController, bound to a specific deployed contract.
func NewInflationController(address common.Address, backend bind.ContractBackend) (*InflationController, error) {
	contract, err := bindInflationController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InflationController{InflationControllerCaller: InflationControllerCaller{contract: contract}, InflationControllerTransactor: InflationControllerTransactor{contract: contract}, InflationControllerFilterer: InflationControllerFilterer{contract: contract}}, nil
}

// NewInflationControllerCaller creates a new read-only instance of InflationController, bound to a specific deployed contract.
func NewInflationControllerCaller(address common.Address, caller bind.ContractCaller) (*InflationControllerCaller, error) {
	contract, err := bindInflationController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InflationControllerCaller{contract: contract}, nil
}

// NewInflationControllerTransactor creates a new write-only instance of InflationController, bound to a specific deployed contract.
func NewInflationControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*InflationControllerTransactor, error) {
	contract, err := bindInflationController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InflationControllerTransactor{contract: contract}, nil
}

// NewInflationControllerFilterer creates a new log filterer instance of InflationController, bound to a specific deployed contract.
func NewInflationControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*InflationControllerFilterer, error) {
	contract, err := bindInflationController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InflationControllerFilterer{contract: contract}, nil
}

// bindInflationController binds a generic wrapper to an already deployed contract.
func bindInflationController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InflationControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InflationController *InflationControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InflationController.Contract.InflationControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InflationController *InflationControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InflationController.Contract.InflationControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InflationController *InflationControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InflationController.Contract.InflationControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InflationController *InflationControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InflationController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InflationController *InflationControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InflationController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InflationController *InflationControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InflationController.Contract.contract.Transact(opts, method, params...)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationControllerCaller) CalculateSupplyDelta(opts *bind.CallOpts, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _InflationController.contract.Call(opts, &out, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationControllerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _InflationController.Contract.CalculateSupplyDelta(&_InflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationControllerCallerSession) CalculateSupplyDelta(_currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, error) {
	return _InflationController.Contract.CalculateSupplyDelta(&_InflationController.CallOpts, _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationControllerCaller) Params(opts *bind.CallOpts) (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, error) {
	var out []interface{}
	err := _InflationController.contract.Call(opts, &out, "params")

	outstruct := new(struct {
		InflationRateInitial      *big.Int
		InflationRateTransition   *big.Int
		InflationCurveConvexity   *big.Int
		InflationTransitionPeriod *big.Int
		InflationReserveDecayRate *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.InflationRateInitial = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.InflationRateTransition = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.InflationCurveConvexity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.InflationTransitionPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.InflationReserveDecayRate = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationControllerSession) Params() (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, error) {
	return _InflationController.Contract.Params(&_InflationController.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationControllerCallerSession) Params() (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, error) {
	return _InflationController.Contract.Params(&_InflationController.CallOpts)
}

// LiquidLogicMetaData contains all meta data concerning the LiquidLogic contract.
var LiquidLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"72c81963": "COMMISSION_RATE_DECIMALS()",
		"f5be3489": "COMMISSION_RATE_SCALE_FACTOR()",
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"3b80e355": "FEE_FACTOR_UNIT_RECIP_DECIMALS()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
	Bin: "0x608060405234801561001057600080fd5b50600d80546001600160a01b03191633179055611538806100326000396000f3fe6080604052600436106101bb5760003560e01c806340c10f19116100ec57806395d89b411161008a578063a9059cbb11610064578063a9059cbb1461051a578063bd96102f1461053a578063dd62ed3e1461054f578063f5be348914610595576101c2565b806395d89b41146104d25780639dc29fac146104e7578063a0ce552d14610507576101c2565b806372c81963116100c657806372c819631461045d5780637eee288d1461047257806384955c8814610492578063949813b8146104b2576101c2565b806340c10f19146103d157806359355736146103f157806370a0823114610427576101c2565b806323b872dd11610159578063372500ab11610133578063372500ab146103745780633b19e84a146103895780633b80e355146103a75780633e4eb36c146103bc576101c2565b806323b872dd14610318578063282d3fdf14610338578063313ce56714610358576101c2565b806318160ddd1161019557806318160ddd146102ad578063187cf4d7146102cc57806319fac8fd146102e15780631eeffad014610303576101c2565b806306fdde0314610220578063095ea7b31461024b5780631195e07e1461027b576101c2565b366101c257005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b34801561022c57600080fd5b506102356105aa565b60405161024291906111c9565b60405180910390f35b34801561025757600080fd5b5061026b61026636600461122e565b61063c565b6040519015158152602001610242565b34801561028757600080fd5b506009546001600160a01b03165b6040516001600160a01b039091168152602001610242565b3480156102b957600080fd5b506003545b604051908152602001610242565b3480156102d857600080fd5b506102be610653565b3480156102ed57600080fd5b506103016102fc366004611258565b610662565b005b34801561030f57600080fd5b50600c546102be565b34801561032457600080fd5b5061026b610333366004611271565b610691565b34801561034457600080fd5b5061030161035336600461122e565b610786565b34801561036457600080fd5b5060405160128152602001610242565b34801561038057600080fd5b5061030161086a565b34801561039557600080fd5b50600a546001600160a01b0316610295565b3480156103b357600080fd5b506102be600981565b3480156103c857600080fd5b50600b546102be565b3480156103dd57600080fd5b506103016103ec36600461122e565b610916565b3480156103fd57600080fd5b506102be61040c3660046112ad565b6001600160a01b031660009081526001602052604090205490565b34801561043357600080fd5b506102be6104423660046112ad565b6001600160a01b031660009081526020819052604090205490565b34801561046957600080fd5b506102be600481565b34801561047e57600080fd5b5061030161048d36600461122e565b61097e565b34801561049e57600080fd5b506102be6104ad3660046112ad565b610a44565b3480156104be57600080fd5b506102be6104cd3660046112ad565b610a71565b3480156104de57600080fd5b50610235610ad5565b3480156104f357600080fd5b5061030161050236600461122e565b610ae4565b6102be610515366004611258565b610b44565b34801561052657600080fd5b5061026b61053536600461122e565b610d22565b34801561054657600080fd5b50610301610d6f565b34801561055b57600080fd5b506102be61056a3660046112c8565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b3480156105a157600080fd5b506102be610e76565b6060600780546105b9906112fb565b80601f01602080910402602001604051908101604052809291908181526020018280546105e5906112fb565b80156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b5050505050905090565b6000610649338484610e82565b5060015b92915050565b61065f6009600a61142f565b81565b600d546001600160a01b0316331461068c5760405162461bcd60e51b81526004016102179061143b565b600b55565b6001600160a01b0383166000908152600260209081526040808320338452909152812054828110156107165760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610217565b61072a85336107258685611483565b610e82565b6107348584610fa6565b61073e848461108c565b836001600160a01b0316856001600160a01b03166000805160206114e38339815191528560405161077191815260200190565b60405180910390a360019150505b9392505050565b600d546001600160a01b031633146107b05760405162461bcd60e51b81526004016102179061143b565b6001600160a01b038216600090815260016020908152604080832054918390529091205482916107df91611483565b10156108395760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b6064820152608401610217565b6001600160a01b03821660009081526001602052604081208054839290610861908490611496565b90915550505050565b6000610875336110d7565b33600081815260046020526040808220829055519293509183908381818185875af1925050503d80600081146108c7576040519150601f19603f3d011682016040523d82523d6000602084013e6108cc565b606091505b50509050806109125760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b6044820152606401610217565b5050565b600d546001600160a01b031633146109405760405162461bcd60e51b81526004016102179061143b565b61094a828261108c565b6040518181526001600160a01b038316906000906000805160206114e3833981519152906020015b60405180910390a35050565b600d546001600160a01b031633146109a85760405162461bcd60e51b81526004016102179061143b565b6001600160a01b038216600090815260016020526040902054811115610a1c5760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b6064820152608401610217565b6001600160a01b03821660009081526001602052604081208054839290610861908490611483565b6001600160a01b0381166000908152600160209081526040808320549183905282205461064d9190611483565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205490918391610aa6918491611166565b6001600160a01b038516600090815260046020526040902054909150610acd908290611496565b949350505050565b6060600880546105b9906112fb565b600d546001600160a01b03163314610b0e5760405162461bcd60e51b81526004016102179061143b565b610b188282610fa6565b6040518181526000906001600160a01b038416906000805160206114e383398151915290602001610972565b600d546000906001600160a01b03163314610b715760405162461bcd60e51b81526004016102179061143b565b346000610b7d826111a3565b9050610b898183611483565b600a546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610be0576040519150601f19603f3d011682016040523d82523d6000602084013e610be5565b606091505b5090915050801515600003610c0c5781600c6000828254610c069190611496565b90915550505b6000610c17866111a3565b90508515610caa57600d546009546001600160a01b039182169163f7fcc510911683610c43818b611483565b6040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b505050505b600354600090610cbc6009600a61142f565b610cc690876114a9565b610cd091906114c0565b905080600654610ce09190611496565b6006556000610cf16009600a61142f565b600354610cfe90846114a9565b610d0891906114c0565b9050610d148186611496565b96505050505050505b919050565b6000610d2e3383610fa6565b610d38838361108c565b6040518281526001600160a01b0384169033906000805160206114e38339815191529060200160405180910390a350600192915050565b600a546001600160a01b03163314610dd45760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b6064820152608401610217565b600a54600c546040516000926001600160a01b031691908381818185875af1925050503d8060008114610e23576040519150601f19603f3d011682016040523d82523d6000602084013e610e28565b606091505b5050905080610e6e5760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b6044820152606401610217565b506000600c55565b61065f6004600a61142f565b6001600160a01b038316610ee45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610217565b6001600160a01b038216610f455760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610217565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610faf826110d7565b506001600160a01b03821660009081526020818152604080832054600190925290912054610fdd9082611483565b82111561102c5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e647300000000006044820152606401610217565b6110368282611483565b6001600160a01b038416600090815260208190526040902055808203611070576001600160a01b0383166000908152600560205260408120555b81600360008282546110829190611483565b9091555050505050565b611095826110d7565b506001600160a01b038216600090815260208190526040812080548392906110be908490611496565b9250508190555080600360008282546108619190611496565b6001600160a01b038116600090815260208181526040808320546006546005909352908320549091839161110c918491611166565b6001600160a01b038516600090815260046020526040902054909150611133908290611496565b6001600160a01b039094166000908152600460209081526040808320879055600654600590925290912055509192915050565b6000836000036111785750600061077f565b6111846009600a61142f565b8461118f8486611483565b61119991906114a9565b610acd91906114c0565b6000806111b26004600a61142f565b600b546111bf90856114a9565b61077f91906114c0565b600060208083528351808285015260005b818110156111f6578581018301518582016040015282016111da565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610d1d57600080fd5b6000806040838503121561124157600080fd5b61124a83611217565b946020939093013593505050565b60006020828403121561126a57600080fd5b5035919050565b60008060006060848603121561128657600080fd5b61128f84611217565b925061129d60208501611217565b9150604084013590509250925092565b6000602082840312156112bf57600080fd5b61077f82611217565b600080604083850312156112db57600080fd5b6112e483611217565b91506112f260208401611217565b90509250929050565b600181811c9082168061130f57607f821691505b60208210810361132f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561138657816000190482111561136c5761136c611335565b8085161561137957918102915b93841c9390800290611350565b509250929050565b60008261139d5750600161064d565b816113aa5750600061064d565b81600181146113c057600281146113ca576113e6565b600191505061064d565b60ff8411156113db576113db611335565b50506001821b61064d565b5060208310610133831016604e8410600b8410161715611409575081810a61064d565b611413838361134b565b806000190482111561142757611427611335565b029392505050565b600061077f838361138e565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b8181038181111561064d5761064d611335565b8082018082111561064d5761064d611335565b808202811582820484141761064d5761064d611335565b6000826114dd57634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220793cff6570aa2b8f874e8857627f6f1dd5654738349947241c11d6ffa4d8a96764736f6c63430008150033",
}

// LiquidLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidLogicMetaData.ABI instead.
var LiquidLogicABI = LiquidLogicMetaData.ABI

// Deprecated: Use LiquidLogicMetaData.Sigs instead.
// LiquidLogicFuncSigs maps the 4-byte function signature to its string representation.
var LiquidLogicFuncSigs = LiquidLogicMetaData.Sigs

// LiquidLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidLogicMetaData.Bin instead.
var LiquidLogicBin = LiquidLogicMetaData.Bin

// DeployLiquidLogic deploys a new Ethereum contract, binding an instance of LiquidLogic to it.
func DeployLiquidLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LiquidLogic, error) {
	parsed, err := LiquidLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidLogic{LiquidLogicCaller: LiquidLogicCaller{contract: contract}, LiquidLogicTransactor: LiquidLogicTransactor{contract: contract}, LiquidLogicFilterer: LiquidLogicFilterer{contract: contract}}, nil
}

// LiquidLogic is an auto generated Go binding around an Ethereum contract.
type LiquidLogic struct {
	LiquidLogicCaller     // Read-only binding to the contract
	LiquidLogicTransactor // Write-only binding to the contract
	LiquidLogicFilterer   // Log filterer for contract events
}

// LiquidLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidLogicSession struct {
	Contract     *LiquidLogic      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidLogicCallerSession struct {
	Contract *LiquidLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LiquidLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidLogicTransactorSession struct {
	Contract     *LiquidLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LiquidLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidLogicRaw struct {
	Contract *LiquidLogic // Generic contract binding to access the raw methods on
}

// LiquidLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidLogicCallerRaw struct {
	Contract *LiquidLogicCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidLogicTransactorRaw struct {
	Contract *LiquidLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidLogic creates a new instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogic(address common.Address, backend bind.ContractBackend) (*LiquidLogic, error) {
	contract, err := bindLiquidLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidLogic{LiquidLogicCaller: LiquidLogicCaller{contract: contract}, LiquidLogicTransactor: LiquidLogicTransactor{contract: contract}, LiquidLogicFilterer: LiquidLogicFilterer{contract: contract}}, nil
}

// NewLiquidLogicCaller creates a new read-only instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogicCaller(address common.Address, caller bind.ContractCaller) (*LiquidLogicCaller, error) {
	contract, err := bindLiquidLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicCaller{contract: contract}, nil
}

// NewLiquidLogicTransactor creates a new write-only instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidLogicTransactor, error) {
	contract, err := bindLiquidLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicTransactor{contract: contract}, nil
}

// NewLiquidLogicFilterer creates a new log filterer instance of LiquidLogic, bound to a specific deployed contract.
func NewLiquidLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidLogicFilterer, error) {
	contract, err := bindLiquidLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicFilterer{contract: contract}, nil
}

// bindLiquidLogic binds a generic wrapper to an already deployed contract.
func bindLiquidLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidLogic *LiquidLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidLogic.Contract.LiquidLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidLogic *LiquidLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.Contract.LiquidLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidLogic *LiquidLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidLogic.Contract.LiquidLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidLogic *LiquidLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidLogic *LiquidLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidLogic *LiquidLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidLogic.Contract.contract.Transact(opts, method, params...)
}

// COMMISSIONRATEDECIMALS is a free data retrieval call binding the contract method 0x72c81963.
//
// Solidity: function COMMISSION_RATE_DECIMALS() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) COMMISSIONRATEDECIMALS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "COMMISSION_RATE_DECIMALS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATEDECIMALS is a free data retrieval call binding the contract method 0x72c81963.
//
// Solidity: function COMMISSION_RATE_DECIMALS() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) COMMISSIONRATEDECIMALS() (*big.Int, error) {
	return _LiquidLogic.Contract.COMMISSIONRATEDECIMALS(&_LiquidLogic.CallOpts)
}

// COMMISSIONRATEDECIMALS is a free data retrieval call binding the contract method 0x72c81963.
//
// Solidity: function COMMISSION_RATE_DECIMALS() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) COMMISSIONRATEDECIMALS() (*big.Int, error) {
	return _LiquidLogic.Contract.COMMISSIONRATEDECIMALS(&_LiquidLogic.CallOpts)
}

// COMMISSIONRATESCALEFACTOR is a free data retrieval call binding the contract method 0xf5be3489.
//
// Solidity: function COMMISSION_RATE_SCALE_FACTOR() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) COMMISSIONRATESCALEFACTOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "COMMISSION_RATE_SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONRATESCALEFACTOR is a free data retrieval call binding the contract method 0xf5be3489.
//
// Solidity: function COMMISSION_RATE_SCALE_FACTOR() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) COMMISSIONRATESCALEFACTOR() (*big.Int, error) {
	return _LiquidLogic.Contract.COMMISSIONRATESCALEFACTOR(&_LiquidLogic.CallOpts)
}

// COMMISSIONRATESCALEFACTOR is a free data retrieval call binding the contract method 0xf5be3489.
//
// Solidity: function COMMISSION_RATE_SCALE_FACTOR() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) COMMISSIONRATESCALEFACTOR() (*big.Int, error) {
	return _LiquidLogic.Contract.COMMISSIONRATESCALEFACTOR(&_LiquidLogic.CallOpts)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) FEEFACTORUNITRECIP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _LiquidLogic.Contract.FEEFACTORUNITRECIP(&_LiquidLogic.CallOpts)
}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) FEEFACTORUNITRECIP() (*big.Int, error) {
	return _LiquidLogic.Contract.FEEFACTORUNITRECIP(&_LiquidLogic.CallOpts)
}

// FEEFACTORUNITRECIPDECIMALS is a free data retrieval call binding the contract method 0x3b80e355.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP_DECIMALS() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) FEEFACTORUNITRECIPDECIMALS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "FEE_FACTOR_UNIT_RECIP_DECIMALS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FEEFACTORUNITRECIPDECIMALS is a free data retrieval call binding the contract method 0x3b80e355.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP_DECIMALS() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) FEEFACTORUNITRECIPDECIMALS() (*big.Int, error) {
	return _LiquidLogic.Contract.FEEFACTORUNITRECIPDECIMALS(&_LiquidLogic.CallOpts)
}

// FEEFACTORUNITRECIPDECIMALS is a free data retrieval call binding the contract method 0x3b80e355.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP_DECIMALS() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) FEEFACTORUNITRECIPDECIMALS() (*big.Int, error) {
	return _LiquidLogic.Contract.FEEFACTORUNITRECIPDECIMALS(&_LiquidLogic.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) Allowance(opts *bind.CallOpts, _owner common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "allowance", _owner, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.Allowance(&_LiquidLogic.CallOpts, _owner, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.Allowance(&_LiquidLogic.CallOpts, _owner, _spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) BalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "balanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) BalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.BalanceOf(&_LiquidLogic.CallOpts, _delegator)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) BalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.BalanceOf(&_LiquidLogic.CallOpts, _delegator)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidLogic *LiquidLogicCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidLogic *LiquidLogicSession) Decimals() (uint8, error) {
	return _LiquidLogic.Contract.Decimals(&_LiquidLogic.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidLogic *LiquidLogicCallerSession) Decimals() (uint8, error) {
	return _LiquidLogic.Contract.Decimals(&_LiquidLogic.CallOpts)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) GetCommissionRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) GetCommissionRate() (*big.Int, error) {
	return _LiquidLogic.Contract.GetCommissionRate(&_LiquidLogic.CallOpts)
}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) GetCommissionRate() (*big.Int, error) {
	return _LiquidLogic.Contract.GetCommissionRate(&_LiquidLogic.CallOpts)
}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_LiquidLogic *LiquidLogicCaller) GetTreasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "getTreasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_LiquidLogic *LiquidLogicSession) GetTreasury() (common.Address, error) {
	return _LiquidLogic.Contract.GetTreasury(&_LiquidLogic.CallOpts)
}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_LiquidLogic *LiquidLogicCallerSession) GetTreasury() (common.Address, error) {
	return _LiquidLogic.Contract.GetTreasury(&_LiquidLogic.CallOpts)
}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) GetTreasuryUnclaimedATN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) GetTreasuryUnclaimedATN() (*big.Int, error) {
	return _LiquidLogic.Contract.GetTreasuryUnclaimedATN(&_LiquidLogic.CallOpts)
}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) GetTreasuryUnclaimedATN() (*big.Int, error) {
	return _LiquidLogic.Contract.GetTreasuryUnclaimedATN(&_LiquidLogic.CallOpts)
}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_LiquidLogic *LiquidLogicCaller) GetValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "getValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_LiquidLogic *LiquidLogicSession) GetValidator() (common.Address, error) {
	return _LiquidLogic.Contract.GetValidator(&_LiquidLogic.CallOpts)
}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_LiquidLogic *LiquidLogicCallerSession) GetValidator() (common.Address, error) {
	return _LiquidLogic.Contract.GetValidator(&_LiquidLogic.CallOpts)
}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) LockedBalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) LockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.LockedBalanceOf(&_LiquidLogic.CallOpts, _delegator)
}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) LockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.LockedBalanceOf(&_LiquidLogic.CallOpts, _delegator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogicCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogicSession) Name() (string, error) {
	return _LiquidLogic.Contract.Name(&_LiquidLogic.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogicCallerSession) Name() (string, error) {
	return _LiquidLogic.Contract.Name(&_LiquidLogic.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogicCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogicSession) Symbol() (string, error) {
	return _LiquidLogic.Contract.Symbol(&_LiquidLogic.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogicCallerSession) Symbol() (string, error) {
	return _LiquidLogic.Contract.Symbol(&_LiquidLogic.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) TotalSupply() (*big.Int, error) {
	return _LiquidLogic.Contract.TotalSupply(&_LiquidLogic.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) TotalSupply() (*big.Int, error) {
	return _LiquidLogic.Contract.TotalSupply(&_LiquidLogic.CallOpts)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) UnclaimedRewards(opts *bind.CallOpts, _account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "unclaimedRewards", _account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) UnclaimedRewards(_account common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.UnclaimedRewards(&_LiquidLogic.CallOpts, _account)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) UnclaimedRewards(_account common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.UnclaimedRewards(&_LiquidLogic.CallOpts, _account)
}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicCaller) UnlockedBalanceOf(opts *bind.CallOpts, _delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidLogic.contract.Call(opts, &out, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicSession) UnlockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.UnlockedBalanceOf(&_LiquidLogic.CallOpts, _delegator)
}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogicCallerSession) UnlockedBalanceOf(_delegator common.Address) (*big.Int, error) {
	return _LiquidLogic.Contract.UnlockedBalanceOf(&_LiquidLogic.CallOpts, _delegator)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "approve", _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Approve(&_LiquidLogic.TransactOpts, _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactorSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Approve(&_LiquidLogic.TransactOpts, _spender, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Burn(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "burn", _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Burn(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Burn(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Burn(&_LiquidLogic.TransactOpts, _account, _amount)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogicTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "claimRewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogicSession) ClaimRewards() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimRewards(&_LiquidLogic.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogicTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimRewards(&_LiquidLogic.TransactOpts)
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogicTransactor) ClaimTreasuryATN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "claimTreasuryATN")
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogicSession) ClaimTreasuryATN() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimTreasuryATN(&_LiquidLogic.TransactOpts)
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogicTransactorSession) ClaimTreasuryATN() (*types.Transaction, error) {
	return _LiquidLogic.Contract.ClaimTreasuryATN(&_LiquidLogic.TransactOpts)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Lock(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "lock", _account, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Lock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Lock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Lock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Lock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Mint(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "mint", _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Mint(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Mint(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Mint(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256)
func (_LiquidLogic *LiquidLogicTransactor) Redistribute(opts *bind.TransactOpts, _ntnReward *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "redistribute", _ntnReward)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256)
func (_LiquidLogic *LiquidLogicSession) Redistribute(_ntnReward *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Redistribute(&_LiquidLogic.TransactOpts, _ntnReward)
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256)
func (_LiquidLogic *LiquidLogicTransactorSession) Redistribute(_ntnReward *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Redistribute(&_LiquidLogic.TransactOpts, _ntnReward)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogicTransactor) SetCommissionRate(opts *bind.TransactOpts, _rate *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "setCommissionRate", _rate)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogicSession) SetCommissionRate(_rate *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.SetCommissionRate(&_LiquidLogic.TransactOpts, _rate)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) SetCommissionRate(_rate *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.SetCommissionRate(&_LiquidLogic.TransactOpts, _rate)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogicTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogicSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Transfer(&_LiquidLogic.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogicTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Transfer(&_LiquidLogic.TransactOpts, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactor) TransferFrom(opts *bind.TransactOpts, _sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "transferFrom", _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.TransferFrom(&_LiquidLogic.TransactOpts, _sender, _recipient, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogicTransactorSession) TransferFrom(_sender common.Address, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.TransferFrom(&_LiquidLogic.TransactOpts, _sender, _recipient, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactor) Unlock(opts *bind.TransactOpts, _account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.contract.Transact(opts, "unlock", _account, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicSession) Unlock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Unlock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Unlock(_account common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Unlock(&_LiquidLogic.TransactOpts, _account, _amount)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogicTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LiquidLogic.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogicSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Fallback(&_LiquidLogic.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidLogic.Contract.Fallback(&_LiquidLogic.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogicTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidLogic.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogicSession) Receive() (*types.Transaction, error) {
	return _LiquidLogic.Contract.Receive(&_LiquidLogic.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogicTransactorSession) Receive() (*types.Transaction, error) {
	return _LiquidLogic.Contract.Receive(&_LiquidLogic.TransactOpts)
}

// LiquidLogicApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LiquidLogic contract.
type LiquidLogicApprovalIterator struct {
	Event *LiquidLogicApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidLogicApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidLogicApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidLogicApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidLogicApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidLogicApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidLogicApproval represents a Approval event raised by the LiquidLogic contract.
type LiquidLogicApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LiquidLogicApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicApprovalIterator{contract: _LiquidLogic.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LiquidLogicApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidLogicApproval)
				if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) ParseApproval(log types.Log) (*LiquidLogicApproval, error) {
	event := new(LiquidLogicApproval)
	if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidLogicTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LiquidLogic contract.
type LiquidLogicTransferIterator struct {
	Event *LiquidLogicTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidLogicTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidLogicTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidLogicTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidLogicTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidLogicTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidLogicTransfer represents a Transfer event raised by the LiquidLogic contract.
type LiquidLogicTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidLogicTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LiquidLogicTransferIterator{contract: _LiquidLogic.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LiquidLogicTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidLogicTransfer)
				if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_LiquidLogic *LiquidLogicFilterer) ParseTransfer(log types.Log) (*LiquidLogicTransfer, error) {
	event := new(LiquidLogicTransfer)
	if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStateMetaData contains all meta data concerning the LiquidState contract.
var LiquidStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b031663f5be34896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556040516100e39083906020016102b8565b60405160208183030381529060405260079081610100919061036e565b508160405160200161011291906102b8565b6040516020818303038152906040526008908161012f919061036e565b5050600d80546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220181e4d7042d93d798d5c3f1896a32d7d1d12f69bf0d7622e91e21cc768c2d3e464736f6c63430008150033",
}

// LiquidStateABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateMetaData.ABI instead.
var LiquidStateABI = LiquidStateMetaData.ABI

// LiquidStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateMetaData.Bin instead.
var LiquidStateBin = LiquidStateMetaData.Bin

// DeployLiquidState deploys a new Ethereum contract, binding an instance of LiquidState to it.
func DeployLiquidState(auth *bind.TransactOpts, backend bind.ContractBackend, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, *types.Transaction, *LiquidState, error) {
	parsed, err := LiquidStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidStateBin), backend, _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidState{LiquidStateCaller: LiquidStateCaller{contract: contract}, LiquidStateTransactor: LiquidStateTransactor{contract: contract}, LiquidStateFilterer: LiquidStateFilterer{contract: contract}}, nil
}

// LiquidState is an auto generated Go binding around an Ethereum contract.
type LiquidState struct {
	LiquidStateCaller     // Read-only binding to the contract
	LiquidStateTransactor // Write-only binding to the contract
	LiquidStateFilterer   // Log filterer for contract events
}

// LiquidStateCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidStateCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidStateTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidStateFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidStateSession struct {
	Contract     *LiquidState      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidStateCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidStateCallerSession struct {
	Contract *LiquidStateCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LiquidStateTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidStateTransactorSession struct {
	Contract     *LiquidStateTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LiquidStateRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidStateRaw struct {
	Contract *LiquidState // Generic contract binding to access the raw methods on
}

// LiquidStateCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidStateCallerRaw struct {
	Contract *LiquidStateCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidStateTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidStateTransactorRaw struct {
	Contract *LiquidStateTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidState creates a new instance of LiquidState, bound to a specific deployed contract.
func NewLiquidState(address common.Address, backend bind.ContractBackend) (*LiquidState, error) {
	contract, err := bindLiquidState(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidState{LiquidStateCaller: LiquidStateCaller{contract: contract}, LiquidStateTransactor: LiquidStateTransactor{contract: contract}, LiquidStateFilterer: LiquidStateFilterer{contract: contract}}, nil
}

// NewLiquidStateCaller creates a new read-only instance of LiquidState, bound to a specific deployed contract.
func NewLiquidStateCaller(address common.Address, caller bind.ContractCaller) (*LiquidStateCaller, error) {
	contract, err := bindLiquidState(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStateCaller{contract: contract}, nil
}

// NewLiquidStateTransactor creates a new write-only instance of LiquidState, bound to a specific deployed contract.
func NewLiquidStateTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidStateTransactor, error) {
	contract, err := bindLiquidState(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStateTransactor{contract: contract}, nil
}

// NewLiquidStateFilterer creates a new log filterer instance of LiquidState, bound to a specific deployed contract.
func NewLiquidStateFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidStateFilterer, error) {
	contract, err := bindLiquidState(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidStateFilterer{contract: contract}, nil
}

// bindLiquidState binds a generic wrapper to an already deployed contract.
func bindLiquidState(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidStateABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidState *LiquidStateRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidState.Contract.LiquidStateCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidState *LiquidStateRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.Contract.LiquidStateTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidState *LiquidStateRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidState.Contract.LiquidStateTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidState *LiquidStateCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidState.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidState *LiquidStateTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidState *LiquidStateTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidState.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidStateTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LiquidState.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidStateSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidState.Contract.Fallback(&_LiquidState.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidStateTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidState.Contract.Fallback(&_LiquidState.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidState *LiquidStateTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidState.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidState *LiquidStateSession) Receive() (*types.Transaction, error) {
	return _LiquidState.Contract.Receive(&_LiquidState.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidState *LiquidStateTransactorSession) Receive() (*types.Transaction, error) {
	return _LiquidState.Contract.Receive(&_LiquidState.TransactOpts)
}

// LiquidStateTestMetaData contains all meta data concerning the LiquidStateTest contract.
var LiquidStateTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"96f18a32": "liquidLogicContract()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161063738038061063783398101604081905261002f916101b9565b8484848484806001600160a01b031663f5be34896040518163ffffffff1660e01b8152600401602060405180830381865afa158015610072573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009691906102a9565b8311156100a257600080fd5b600980546001600160a01b038088166001600160a01b031992831617909255600a805492871692909116919091179055600b8390556040516100e89083906020016102c2565b604051602081830303815290604052600790816101059190610378565b508160405160200161011791906102c2565b604051602081830303815290604052600890816101349190610378565b5050600d80546001600160a01b0319163317905550610437975050505050505050565b6001600160a01b038116811461016c57600080fd5b50565b805161017a81610157565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101b0578181015183820152602001610198565b50506000910152565b600080600080600060a086880312156101d157600080fd5b85516101dc81610157565b60208701519095506101ed81610157565b6040870151606088015191955093506001600160401b038082111561021157600080fd5b818801915088601f83011261022557600080fd5b8151818111156102375761023761017f565b604051601f8201601f19908116603f0116810190838211818310171561025f5761025f61017f565b816040528281528b602084870101111561027857600080fd5b610289836020830160208801610195565b809650505050505061029d6080870161016f565b90509295509295909350565b6000602082840312156102bb57600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102e2816005850160208701610195565b9190910160050192915050565b600181811c9082168061030357607f821691505b60208210810361032357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561037357600081815260208120601f850160051c810160208610156103505750805b601f850160051c820191505b8181101561036f5782815560010161035c565b5050505b505050565b81516001600160401b038111156103915761039161017f565b6103a58161039f84546102ef565b84610329565b602080601f8311600181146103da57600084156103c25750858301515b600019600386901b1c1916600185901b17855561036f565b600085815260208120601f198616915b82811015610409578886015182559484019460019091019084016103ea565b50858210156104275787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101f1806104466000396000f3fe6080604052600436106100225760003560e01c806396f18a321461004d57610042565b366100425761004061003261007e565b6001600160a01b0316610159565b005b61004061003261007e565b34801561005957600080fd5b5061006261017c565b6040516001600160a01b03909116815260200160405180910390f35b600080600d60009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f8919061018b565b90506001600160a01b0381166101545760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610176573d6000fd5b503d6000f35b600061018661007e565b905090565b60006020828403121561019d57600080fd5b81516001600160a01b03811681146101b457600080fd5b939250505056fea2646970667358221220a591a5eb8ff3565fbd47720e448cd9717b9883145a62f2b02dda961799373aa864736f6c63430008150033",
}

// LiquidStateTestABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateTestMetaData.ABI instead.
var LiquidStateTestABI = LiquidStateTestMetaData.ABI

// Deprecated: Use LiquidStateTestMetaData.Sigs instead.
// LiquidStateTestFuncSigs maps the 4-byte function signature to its string representation.
var LiquidStateTestFuncSigs = LiquidStateTestMetaData.Sigs

// LiquidStateTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateTestMetaData.Bin instead.
var LiquidStateTestBin = LiquidStateTestMetaData.Bin

// DeployLiquidStateTest deploys a new Ethereum contract, binding an instance of LiquidStateTest to it.
func DeployLiquidStateTest(auth *bind.TransactOpts, backend bind.ContractBackend, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, *types.Transaction, *LiquidStateTest, error) {
	parsed, err := LiquidStateTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidStateTestBin), backend, _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidStateTest{LiquidStateTestCaller: LiquidStateTestCaller{contract: contract}, LiquidStateTestTransactor: LiquidStateTestTransactor{contract: contract}, LiquidStateTestFilterer: LiquidStateTestFilterer{contract: contract}}, nil
}

// LiquidStateTest is an auto generated Go binding around an Ethereum contract.
type LiquidStateTest struct {
	LiquidStateTestCaller     // Read-only binding to the contract
	LiquidStateTestTransactor // Write-only binding to the contract
	LiquidStateTestFilterer   // Log filterer for contract events
}

// LiquidStateTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidStateTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidStateTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidStateTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStateTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidStateTestSession struct {
	Contract     *LiquidStateTest  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidStateTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidStateTestCallerSession struct {
	Contract *LiquidStateTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// LiquidStateTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidStateTestTransactorSession struct {
	Contract     *LiquidStateTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// LiquidStateTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidStateTestRaw struct {
	Contract *LiquidStateTest // Generic contract binding to access the raw methods on
}

// LiquidStateTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidStateTestCallerRaw struct {
	Contract *LiquidStateTestCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidStateTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidStateTestTransactorRaw struct {
	Contract *LiquidStateTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidStateTest creates a new instance of LiquidStateTest, bound to a specific deployed contract.
func NewLiquidStateTest(address common.Address, backend bind.ContractBackend) (*LiquidStateTest, error) {
	contract, err := bindLiquidStateTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidStateTest{LiquidStateTestCaller: LiquidStateTestCaller{contract: contract}, LiquidStateTestTransactor: LiquidStateTestTransactor{contract: contract}, LiquidStateTestFilterer: LiquidStateTestFilterer{contract: contract}}, nil
}

// NewLiquidStateTestCaller creates a new read-only instance of LiquidStateTest, bound to a specific deployed contract.
func NewLiquidStateTestCaller(address common.Address, caller bind.ContractCaller) (*LiquidStateTestCaller, error) {
	contract, err := bindLiquidStateTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStateTestCaller{contract: contract}, nil
}

// NewLiquidStateTestTransactor creates a new write-only instance of LiquidStateTest, bound to a specific deployed contract.
func NewLiquidStateTestTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidStateTestTransactor, error) {
	contract, err := bindLiquidStateTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStateTestTransactor{contract: contract}, nil
}

// NewLiquidStateTestFilterer creates a new log filterer instance of LiquidStateTest, bound to a specific deployed contract.
func NewLiquidStateTestFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidStateTestFilterer, error) {
	contract, err := bindLiquidStateTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidStateTestFilterer{contract: contract}, nil
}

// bindLiquidStateTest binds a generic wrapper to an already deployed contract.
func bindLiquidStateTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidStateTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStateTest *LiquidStateTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStateTest.Contract.LiquidStateTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStateTest *LiquidStateTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStateTest.Contract.LiquidStateTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStateTest *LiquidStateTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStateTest.Contract.LiquidStateTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStateTest *LiquidStateTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStateTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStateTest *LiquidStateTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStateTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStateTest *LiquidStateTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStateTest.Contract.contract.Transact(opts, method, params...)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidStateTest *LiquidStateTestCaller) LiquidLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidStateTest.contract.Call(opts, &out, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidStateTest *LiquidStateTestSession) LiquidLogicContract() (common.Address, error) {
	return _LiquidStateTest.Contract.LiquidLogicContract(&_LiquidStateTest.CallOpts)
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidStateTest *LiquidStateTestCallerSession) LiquidLogicContract() (common.Address, error) {
	return _LiquidStateTest.Contract.LiquidLogicContract(&_LiquidStateTest.CallOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidStateTest *LiquidStateTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LiquidStateTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidStateTest *LiquidStateTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidStateTest.Contract.Fallback(&_LiquidStateTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LiquidStateTest *LiquidStateTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LiquidStateTest.Contract.Fallback(&_LiquidStateTest.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidStateTest *LiquidStateTestTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStateTest.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidStateTest *LiquidStateTestSession) Receive() (*types.Transaction, error) {
	return _LiquidStateTest.Contract.Receive(&_LiquidStateTest.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_LiquidStateTest *LiquidStateTestTransactorSession) Receive() (*types.Transaction, error) {
	return _LiquidStateTest.Contract.Receive(&_LiquidStateTest.TransactOpts)
}

// LiquidStorageMetaData contains all meta data concerning the LiquidStorage contract.
var LiquidStorageMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ae5f8a0b77d3dfe145b57deb3c47e16ab612e9d4791c6ebfcca814df55447bf464736f6c63430008150033",
}

// LiquidStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStorageMetaData.ABI instead.
var LiquidStorageABI = LiquidStorageMetaData.ABI

// LiquidStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStorageMetaData.Bin instead.
var LiquidStorageBin = LiquidStorageMetaData.Bin

// DeployLiquidStorage deploys a new Ethereum contract, binding an instance of LiquidStorage to it.
func DeployLiquidStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LiquidStorage, error) {
	parsed, err := LiquidStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidStorage{LiquidStorageCaller: LiquidStorageCaller{contract: contract}, LiquidStorageTransactor: LiquidStorageTransactor{contract: contract}, LiquidStorageFilterer: LiquidStorageFilterer{contract: contract}}, nil
}

// LiquidStorage is an auto generated Go binding around an Ethereum contract.
type LiquidStorage struct {
	LiquidStorageCaller     // Read-only binding to the contract
	LiquidStorageTransactor // Write-only binding to the contract
	LiquidStorageFilterer   // Log filterer for contract events
}

// LiquidStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidStorageSession struct {
	Contract     *LiquidStorage    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidStorageCallerSession struct {
	Contract *LiquidStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// LiquidStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidStorageTransactorSession struct {
	Contract     *LiquidStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// LiquidStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidStorageRaw struct {
	Contract *LiquidStorage // Generic contract binding to access the raw methods on
}

// LiquidStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidStorageCallerRaw struct {
	Contract *LiquidStorageCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidStorageTransactorRaw struct {
	Contract *LiquidStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidStorage creates a new instance of LiquidStorage, bound to a specific deployed contract.
func NewLiquidStorage(address common.Address, backend bind.ContractBackend) (*LiquidStorage, error) {
	contract, err := bindLiquidStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidStorage{LiquidStorageCaller: LiquidStorageCaller{contract: contract}, LiquidStorageTransactor: LiquidStorageTransactor{contract: contract}, LiquidStorageFilterer: LiquidStorageFilterer{contract: contract}}, nil
}

// NewLiquidStorageCaller creates a new read-only instance of LiquidStorage, bound to a specific deployed contract.
func NewLiquidStorageCaller(address common.Address, caller bind.ContractCaller) (*LiquidStorageCaller, error) {
	contract, err := bindLiquidStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStorageCaller{contract: contract}, nil
}

// NewLiquidStorageTransactor creates a new write-only instance of LiquidStorage, bound to a specific deployed contract.
func NewLiquidStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidStorageTransactor, error) {
	contract, err := bindLiquidStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStorageTransactor{contract: contract}, nil
}

// NewLiquidStorageFilterer creates a new log filterer instance of LiquidStorage, bound to a specific deployed contract.
func NewLiquidStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidStorageFilterer, error) {
	contract, err := bindLiquidStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidStorageFilterer{contract: contract}, nil
}

// bindLiquidStorage binds a generic wrapper to an already deployed contract.
func bindLiquidStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStorage *LiquidStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStorage.Contract.LiquidStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStorage *LiquidStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStorage.Contract.LiquidStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStorage *LiquidStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStorage.Contract.LiquidStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStorage *LiquidStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStorage *LiquidStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStorage *LiquidStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStorage.Contract.contract.Transact(opts, method, params...)
}

// NonStakeableVestingMetaData contains all meta data concerning the NonStakeableVesting contract.
var NonStakeableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getExpiredFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getScheduleTracker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unsubscribedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredFromContract\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"structNonStakeableVesting.ScheduleTracker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"releaseAllFundsForTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"releaseExpiredFundsForTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"a803c8f4": "getExpiredFunds(address,uint256)",
		"80e53d93": "getScheduleTracker(uint256)",
		"fca78d11": "getUniqueContractID(address,uint256)",
		"bc47a074": "newContract(address,uint256,uint256,uint256)",
		"5558c922": "releaseAllFundsForTreasury(uint256)",
		"3577a8f8": "releaseAllNTN(uint256)",
		"c3aeff1f": "releaseExpiredFundsForTreasury(uint256)",
		"81170628": "releaseNTN(uint256,uint256)",
		"635bf933": "totalContracts(address)",
		"25078446": "vestedFunds(address,uint256)",
		"def25f38": "withdrawableVestedFunds(address,uint256)",
	},
	Bin: "0x608060405234801561001057600080fd5b50604051611ab6380380611ab683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611a23806100936000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a803c8f41161008c578063bc47a07411610066578063bc47a0741461021a578063c3aeff1f1461022d578063def25f3814610240578063fca78d111461025357600080fd5b8063a803c8f4146101d4578063a9f45b62146101e7578063aad55726146101fa57600080fd5b80635558c922116100c85780635558c9221461014e578063635bf9331461016157806380e53d931461018a57806381170628146101c157600080fd5b8063213fe2b7146100ef57806325078446146101185780633577a8f814610139575b600080fd5b6101026100fd366004611692565b610266565b60405161010f91906116af565b60405180910390f35b61012b610126366004611734565b6103a7565b60405190815260200161010f565b61014c610147366004611760565b6103c4565b005b61014c61015c366004611760565b610409565b61012b61016f366004611692565b6001600160a01b031660009081526001602052604090205490565b61019d610198366004611760565b610631565b6040805182518152602080840151908201529181015115159082015260600161010f565b61014c6101cf366004611779565b610695565b61012b6101e2366004611734565b61072b565b61014c6101f536600461179b565b61075c565b61020d610208366004611734565b610838565b60405161010f91906117dd565b61014c610228366004611822565b6108be565b61014c61023b366004611760565b610ccc565b61012b61024e366004611734565b610e64565b61012b610261366004611734565b610e78565b6001600160a01b038116600090815260016020526040812080546060929067ffffffffffffffff81111561029c5761029c61185d565b6040519080825280602002602001820160405280156102d557816020015b6102c26115e2565b8152602001906001900390816102ba5790505b50905060005b825481101561039f5760048382815481106102f8576102f8611873565b90600052602060002001548154811061031357610313611873565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152825183908390811061038157610381611873565b602002602001018190525080806103979061189f565b9150506102db565b509392505050565b60006103bb6103b68484610e78565b610eff565b90505b92915050565b60006103d03383610e78565b9050610404600482815481106103e8576103e8611873565b90600052602060002090600602016103ff83610ffc565b6110c3565b505050565b60008054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e91906118b8565b6001600160a01b0316336001600160a01b0316146104e35760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207472656173757279206163636f756e74000060448201526064015b60405180910390fd5b60008054604051633932626d60e11b8152306004820152602481018490526001600160a01b0390911690637264c4da9060440160a060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055791906118d5565b90508060600151816040015161056d9190611953565b816080015110156105d05760405162461bcd60e51b815260206004820152602760248201527f7363686564756c6520746f74616c206475726174696f6e206e6f7420657870696044820152661c9959081e595d60ca1b60648201526084016104da565b6000828152600360205260409020600281015460ff16610605576106058183600001518155600201805460ff19166001179055565b610622338260010154836000015461061d9190611953565b611151565b60008082556001909101555050565b610657604051806060016040528060008152602001600081526020016000151581525090565b506000908152600360209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b60006106a13384610e78565b90506106ac81610ffc565b8211156106fb5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f75676820756e6c6f636b65642066756e64730000000000000060448201526064016104da565b6107256004828154811061071157610711611873565b9060005260206000209060060201836110c3565b50505050565b600060056107398484610e78565b8154811061074957610749611873565b9060005260206000200154905092915050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906118b8565b6001600160a01b03161461081f5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016104da565b600061082b8484610e78565b905061072584828461120e565b6108406115e2565b600461084c8484610e78565b8154811061085c5761085c611873565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906118b8565b6001600160a01b0316146109815760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016104da565b60008054604051633932626d60e11b8152306004820152602481018590526001600160a01b0390911690637264c4da9060440160a060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f591906118d5565b600084815260036020526040902060028101549192509060ff16610a2e57610a2e8183600001518155600201805460ff19166001179055565b8054851115610aa55760405162461bcd60e51b815260206004820152603860248201527f6e6f7420656e6f7567682066756e647320746f206372656174652061206e657760448201527f20636f6e747261637420756e646572207363686564756c65000000000000000060648201526084016104da565b6000610ab08761139f565b6004549091508114610afa5760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b60448201526064016104da565b6000610b0f84602001518560000151896113e6565b90506000610b3389610b21848b611966565b87604001518989606001516000611405565b6004805460018082018355600092835283517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6006938402908101919091556020808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8301556040808701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d84015560608701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015560808701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f84015560a08701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a0909301805460ff1916931515939093179092556005805493840190557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0909201879055878452919052812089905585549192508991869190610ca1908490611966565b9250508190555081846001016000828254610cbc9190611953565b9091555050505050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4191906118b8565b6001600160a01b0316336001600160a01b031614610da15760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207472656173757279206163636f756e74000060448201526064016104da565b6000818152600360205260409020600281015460ff16610e4b5760008054604051633932626d60e11b8152306004820152602481018590526001600160a01b0390911690637264c4da9060440160a060405180830381865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f91906118d5565b519050610e4982828155600201805460ff19166001179055565b505b610e59338260010154611151565b600060019091015550565b60006103bb610e738484610e78565b610ffc565b6001600160a01b0382166000908152600160205260408120548210610ed55760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b60448201526064016104da565b6001600160a01b038316600090815260016020526040902080548390811061074957610749611873565b6000805482825260066020526040808320549051633932626d60e11b8152306004820152602481019190915282916001600160a01b031690637264c4da9060440160a060405180830381865afa158015610f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8191906118d5565b905060058381548110610f9657610f96611873565b906000526020600020015460048481548110610fb457610fb4611873565b906000526020600020906006020160010154610fe183602001518460000151610fdc88611541565b6113e6565b610feb9190611966565b610ff59190611966565b9392505050565b6000806004838154811061101257611012611873565b9060005260206000209060060201905060008054906101000a90046001600160a01b03166001600160a01b03166389c614b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611979565b816003015482600201546110ab9190611953565b11156110ba5750600092915050565b610ff583610eff565b81546000908211156110f15782546110db9083611966565b90506110ec833385600001546115a3565b611102565b8115611102576111028333846115a3565b6000546001600160a01b0316337feed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb61113a8486611966565b60405190815260200160405180910390a392915050565b6000805460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190611992565b9050806104045760405162461bcd60e51b8152602060048201526013602482015272139513881b9bdd081d1c985b9cd9995c9c9959606a1b60448201526064016104da565b6001600160a01b03831660009081526001602081905260408220805490929161123691611966565b67ffffffffffffffff81111561124e5761124e61185d565b604051908082528060200260200182016040528015611277578160200160208202803683370190505b5090506000805b8354811015611305578584828154811061129a5761129a611873565b906000526020600020015403156112f3578381815481106112bd576112bd611873565b90600052602060002001548383806112d49061189f565b9450815181106112e6576112e6611873565b6020026020010181815250505b806112fd8161189f565b91505061127e565b506001600160a01b0386166000908152600160209081526040909120835161132f9285019061161a565b506001600160a01b03808516600081815260016020818152604080842080549384018155845292200188905551918816917f893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf7389061138f9089815260200190565b60405180910390a3505050505050565b600280546001600160a01b0383166000908152600160208181526040832080549283018155835282200182905582549092836113da8361189f565b90915550909392505050565b6000826113f383866119b4565b6113fd91906119cb565b949350505050565b61140d6115e2565b6001600160a01b03871661146e5760405162461bcd60e51b815260206004820152602260248201527f62656e65666963696172792063616e6e6f74206265207a65726f206164647265604482015261737360f01b60648201526084016104da565b600086116114be5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f7369746976650000000000000060448201526064016104da565b83831161150d5760405162461bcd60e51b815260206004820152601e60248201527f656e64206d7573742062652067726561746572207468616e20636c696666000060448201526064016104da565b506040805160c0810182529586526000602087015285019390935260608401919091526080830152151560a0820152919050565b6000806004838154811061155757611557611873565b906000526020600020906006020190506005838154811061157a5761157a611873565b9060005260206000200154816001015482600001546115999190611953565b610ff59190611953565b808360000160008282546115b79190611966565b92505081905550808360010160008282546115d29190611953565b9091555061040490508282611151565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b828054828255906000526020600020908101928215611655579160200282015b8281111561165557825182559160200191906001019061163a565b50611661929150611665565b5090565b5b808211156116615760008155600101611666565b6001600160a01b038116811461168f57600080fd5b50565b6000602082840312156116a457600080fd5b8135610ff58161167a565b6020808252825182820181905260009190848201906040850190845b8181101561172857611715838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c092909201916001016116cb565b50909695505050505050565b6000806040838503121561174757600080fd5b82356117528161167a565b946020939093013593505050565b60006020828403121561177257600080fd5b5035919050565b6000806040838503121561178c57600080fd5b50508035926020909101359150565b6000806000606084860312156117b057600080fd5b83356117bb8161167a565b92506020840135915060408401356117d28161167a565b809150509250925092565b60c081016103be8284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b6000806000806080858703121561183857600080fd5b84356118438161167a565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016118b1576118b1611889565b5060010190565b6000602082840312156118ca57600080fd5b8151610ff58161167a565b600060a082840312156118e757600080fd5b60405160a0810181811067ffffffffffffffff8211171561191857634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b808201808211156103be576103be611889565b818103818111156103be576103be611889565b60006020828403121561198b57600080fd5b5051919050565b6000602082840312156119a457600080fd5b81518015158114610ff557600080fd5b80820281158282048414176103be576103be611889565b6000826119e857634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212209f9ecef5fac61644b6a29d2a9e71a396e1b629901ac7dec40919871c62c1f8d864736f6c63430008150033",
}

// NonStakeableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use NonStakeableVestingMetaData.ABI instead.
var NonStakeableVestingABI = NonStakeableVestingMetaData.ABI

// Deprecated: Use NonStakeableVestingMetaData.Sigs instead.
// NonStakeableVestingFuncSigs maps the 4-byte function signature to its string representation.
var NonStakeableVestingFuncSigs = NonStakeableVestingMetaData.Sigs

// NonStakeableVestingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NonStakeableVestingMetaData.Bin instead.
var NonStakeableVestingBin = NonStakeableVestingMetaData.Bin

// DeployNonStakeableVesting deploys a new Ethereum contract, binding an instance of NonStakeableVesting to it.
func DeployNonStakeableVesting(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *NonStakeableVesting, error) {
	parsed, err := NonStakeableVestingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NonStakeableVestingBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NonStakeableVesting{NonStakeableVestingCaller: NonStakeableVestingCaller{contract: contract}, NonStakeableVestingTransactor: NonStakeableVestingTransactor{contract: contract}, NonStakeableVestingFilterer: NonStakeableVestingFilterer{contract: contract}}, nil
}

// NonStakeableVesting is an auto generated Go binding around an Ethereum contract.
type NonStakeableVesting struct {
	NonStakeableVestingCaller     // Read-only binding to the contract
	NonStakeableVestingTransactor // Write-only binding to the contract
	NonStakeableVestingFilterer   // Log filterer for contract events
}

// NonStakeableVestingCaller is an auto generated read-only Go binding around an Ethereum contract.
type NonStakeableVestingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NonStakeableVestingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NonStakeableVestingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NonStakeableVestingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NonStakeableVestingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NonStakeableVestingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NonStakeableVestingSession struct {
	Contract     *NonStakeableVesting // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NonStakeableVestingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NonStakeableVestingCallerSession struct {
	Contract *NonStakeableVestingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// NonStakeableVestingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NonStakeableVestingTransactorSession struct {
	Contract     *NonStakeableVestingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// NonStakeableVestingRaw is an auto generated low-level Go binding around an Ethereum contract.
type NonStakeableVestingRaw struct {
	Contract *NonStakeableVesting // Generic contract binding to access the raw methods on
}

// NonStakeableVestingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NonStakeableVestingCallerRaw struct {
	Contract *NonStakeableVestingCaller // Generic read-only contract binding to access the raw methods on
}

// NonStakeableVestingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NonStakeableVestingTransactorRaw struct {
	Contract *NonStakeableVestingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNonStakeableVesting creates a new instance of NonStakeableVesting, bound to a specific deployed contract.
func NewNonStakeableVesting(address common.Address, backend bind.ContractBackend) (*NonStakeableVesting, error) {
	contract, err := bindNonStakeableVesting(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NonStakeableVesting{NonStakeableVestingCaller: NonStakeableVestingCaller{contract: contract}, NonStakeableVestingTransactor: NonStakeableVestingTransactor{contract: contract}, NonStakeableVestingFilterer: NonStakeableVestingFilterer{contract: contract}}, nil
}

// NewNonStakeableVestingCaller creates a new read-only instance of NonStakeableVesting, bound to a specific deployed contract.
func NewNonStakeableVestingCaller(address common.Address, caller bind.ContractCaller) (*NonStakeableVestingCaller, error) {
	contract, err := bindNonStakeableVesting(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NonStakeableVestingCaller{contract: contract}, nil
}

// NewNonStakeableVestingTransactor creates a new write-only instance of NonStakeableVesting, bound to a specific deployed contract.
func NewNonStakeableVestingTransactor(address common.Address, transactor bind.ContractTransactor) (*NonStakeableVestingTransactor, error) {
	contract, err := bindNonStakeableVesting(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NonStakeableVestingTransactor{contract: contract}, nil
}

// NewNonStakeableVestingFilterer creates a new log filterer instance of NonStakeableVesting, bound to a specific deployed contract.
func NewNonStakeableVestingFilterer(address common.Address, filterer bind.ContractFilterer) (*NonStakeableVestingFilterer, error) {
	contract, err := bindNonStakeableVesting(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NonStakeableVestingFilterer{contract: contract}, nil
}

// bindNonStakeableVesting binds a generic wrapper to an already deployed contract.
func bindNonStakeableVesting(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NonStakeableVestingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NonStakeableVesting *NonStakeableVestingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NonStakeableVesting.Contract.NonStakeableVestingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NonStakeableVesting *NonStakeableVestingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.NonStakeableVestingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NonStakeableVesting *NonStakeableVestingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.NonStakeableVestingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NonStakeableVesting *NonStakeableVestingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NonStakeableVesting.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NonStakeableVesting *NonStakeableVestingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NonStakeableVesting *NonStakeableVestingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.contract.Transact(opts, method, params...)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVestingCaller) GetContract(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVestingSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _NonStakeableVesting.Contract.GetContract(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVestingCallerSession) GetContract(_beneficiary common.Address, _id *big.Int) (ContractBaseContract, error) {
	return _NonStakeableVesting.Contract.GetContract(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakeableVesting *NonStakeableVestingCaller) GetContracts(opts *bind.CallOpts, _beneficiary common.Address) ([]ContractBaseContract, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)

	return out0, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakeableVesting *NonStakeableVestingSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _NonStakeableVesting.Contract.GetContracts(&_NonStakeableVesting.CallOpts, _beneficiary)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakeableVesting *NonStakeableVestingCallerSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _NonStakeableVesting.Contract.GetContracts(&_NonStakeableVesting.CallOpts, _beneficiary)
}

// GetExpiredFunds is a free data retrieval call binding the contract method 0xa803c8f4.
//
// Solidity: function getExpiredFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCaller) GetExpiredFunds(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "getExpiredFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetExpiredFunds is a free data retrieval call binding the contract method 0xa803c8f4.
//
// Solidity: function getExpiredFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingSession) GetExpiredFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.GetExpiredFunds(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// GetExpiredFunds is a free data retrieval call binding the contract method 0xa803c8f4.
//
// Solidity: function getExpiredFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCallerSession) GetExpiredFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.GetExpiredFunds(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// GetScheduleTracker is a free data retrieval call binding the contract method 0x80e53d93.
//
// Solidity: function getScheduleTracker(uint256 _id) view returns((uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVestingCaller) GetScheduleTracker(opts *bind.CallOpts, _id *big.Int) (NonStakeableVestingScheduleTracker, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "getScheduleTracker", _id)

	if err != nil {
		return *new(NonStakeableVestingScheduleTracker), err
	}

	out0 := *abi.ConvertType(out[0], new(NonStakeableVestingScheduleTracker)).(*NonStakeableVestingScheduleTracker)

	return out0, err

}

// GetScheduleTracker is a free data retrieval call binding the contract method 0x80e53d93.
//
// Solidity: function getScheduleTracker(uint256 _id) view returns((uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVestingSession) GetScheduleTracker(_id *big.Int) (NonStakeableVestingScheduleTracker, error) {
	return _NonStakeableVesting.Contract.GetScheduleTracker(&_NonStakeableVesting.CallOpts, _id)
}

// GetScheduleTracker is a free data retrieval call binding the contract method 0x80e53d93.
//
// Solidity: function getScheduleTracker(uint256 _id) view returns((uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVestingCallerSession) GetScheduleTracker(_id *big.Int) (NonStakeableVestingScheduleTracker, error) {
	return _NonStakeableVesting.Contract.GetScheduleTracker(&_NonStakeableVesting.CallOpts, _id)
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCaller) GetUniqueContractID(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingSession) GetUniqueContractID(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.GetUniqueContractID(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCallerSession) GetUniqueContractID(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.GetUniqueContractID(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCaller) TotalContracts(opts *bind.CallOpts, _beneficiary common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _NonStakeableVesting.Contract.TotalContracts(&_NonStakeableVesting.CallOpts, _beneficiary)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCallerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _NonStakeableVesting.Contract.TotalContracts(&_NonStakeableVesting.CallOpts, _beneficiary)
}

// VestedFunds is a free data retrieval call binding the contract method 0x25078446.
//
// Solidity: function vestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCaller) VestedFunds(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "vestedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x25078446.
//
// Solidity: function vestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingSession) VestedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.VestedFunds(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// VestedFunds is a free data retrieval call binding the contract method 0x25078446.
//
// Solidity: function vestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCallerSession) VestedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.VestedFunds(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0xdef25f38.
//
// Solidity: function withdrawableVestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCaller) WithdrawableVestedFunds(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NonStakeableVesting.contract.Call(opts, &out, "withdrawableVestedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0xdef25f38.
//
// Solidity: function withdrawableVestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingSession) WithdrawableVestedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.WithdrawableVestedFunds(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0xdef25f38.
//
// Solidity: function withdrawableVestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVestingCallerSession) WithdrawableVestedFunds(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _NonStakeableVesting.Contract.WithdrawableVestedFunds(&_NonStakeableVesting.CallOpts, _beneficiary, _id)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactor) ChangeContractBeneficiary(opts *bind.TransactOpts, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NonStakeableVesting.contract.Transact(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakeableVesting *NonStakeableVestingSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ChangeContractBeneficiary(&_NonStakeableVesting.TransactOpts, _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactorSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ChangeContractBeneficiary(&_NonStakeableVesting.TransactOpts, _beneficiary, _id, _recipient)
}

// NewContract is a paid mutator transaction binding the contract method 0xbc47a074.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID, uint256 _cliffDuration) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactor) NewContract(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int, _cliffDuration *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.contract.Transact(opts, "newContract", _beneficiary, _amount, _scheduleID, _cliffDuration)
}

// NewContract is a paid mutator transaction binding the contract method 0xbc47a074.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID, uint256 _cliffDuration) returns()
func (_NonStakeableVesting *NonStakeableVestingSession) NewContract(_beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int, _cliffDuration *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.NewContract(&_NonStakeableVesting.TransactOpts, _beneficiary, _amount, _scheduleID, _cliffDuration)
}

// NewContract is a paid mutator transaction binding the contract method 0xbc47a074.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID, uint256 _cliffDuration) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactorSession) NewContract(_beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int, _cliffDuration *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.NewContract(&_NonStakeableVesting.TransactOpts, _beneficiary, _amount, _scheduleID, _cliffDuration)
}

// ReleaseAllFundsForTreasury is a paid mutator transaction binding the contract method 0x5558c922.
//
// Solidity: function releaseAllFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactor) ReleaseAllFundsForTreasury(opts *bind.TransactOpts, _scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.contract.Transact(opts, "releaseAllFundsForTreasury", _scheduleID)
}

// ReleaseAllFundsForTreasury is a paid mutator transaction binding the contract method 0x5558c922.
//
// Solidity: function releaseAllFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVestingSession) ReleaseAllFundsForTreasury(_scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseAllFundsForTreasury(&_NonStakeableVesting.TransactOpts, _scheduleID)
}

// ReleaseAllFundsForTreasury is a paid mutator transaction binding the contract method 0x5558c922.
//
// Solidity: function releaseAllFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactorSession) ReleaseAllFundsForTreasury(_scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseAllFundsForTreasury(&_NonStakeableVesting.TransactOpts, _scheduleID)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactor) ReleaseAllNTN(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.contract.Transact(opts, "releaseAllNTN", _id)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_NonStakeableVesting *NonStakeableVestingSession) ReleaseAllNTN(_id *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseAllNTN(&_NonStakeableVesting.TransactOpts, _id)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactorSession) ReleaseAllNTN(_id *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseAllNTN(&_NonStakeableVesting.TransactOpts, _id)
}

// ReleaseExpiredFundsForTreasury is a paid mutator transaction binding the contract method 0xc3aeff1f.
//
// Solidity: function releaseExpiredFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactor) ReleaseExpiredFundsForTreasury(opts *bind.TransactOpts, _scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.contract.Transact(opts, "releaseExpiredFundsForTreasury", _scheduleID)
}

// ReleaseExpiredFundsForTreasury is a paid mutator transaction binding the contract method 0xc3aeff1f.
//
// Solidity: function releaseExpiredFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVestingSession) ReleaseExpiredFundsForTreasury(_scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseExpiredFundsForTreasury(&_NonStakeableVesting.TransactOpts, _scheduleID)
}

// ReleaseExpiredFundsForTreasury is a paid mutator transaction binding the contract method 0xc3aeff1f.
//
// Solidity: function releaseExpiredFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactorSession) ReleaseExpiredFundsForTreasury(_scheduleID *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseExpiredFundsForTreasury(&_NonStakeableVesting.TransactOpts, _scheduleID)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactor) ReleaseNTN(opts *bind.TransactOpts, _id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.contract.Transact(opts, "releaseNTN", _id, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_NonStakeableVesting *NonStakeableVestingSession) ReleaseNTN(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseNTN(&_NonStakeableVesting.TransactOpts, _id, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_NonStakeableVesting *NonStakeableVestingTransactorSession) ReleaseNTN(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _NonStakeableVesting.Contract.ReleaseNTN(&_NonStakeableVesting.TransactOpts, _id, _amount)
}

// NonStakeableVestingBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the NonStakeableVesting contract.
type NonStakeableVestingBeneficiaryChangedIterator struct {
	Event *NonStakeableVestingBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NonStakeableVestingBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NonStakeableVestingBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NonStakeableVestingBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NonStakeableVestingBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NonStakeableVestingBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NonStakeableVestingBeneficiaryChanged represents a BeneficiaryChanged event raised by the NonStakeableVesting contract.
type NonStakeableVestingBeneficiaryChanged struct {
	NewBeneficiary common.Address
	OldBeneficiary common.Address
	ContractID     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_NonStakeableVesting *NonStakeableVestingFilterer) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*NonStakeableVestingBeneficiaryChangedIterator, error) {

	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}
	var oldBeneficiaryRule []interface{}
	for _, oldBeneficiaryItem := range oldBeneficiary {
		oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
	}

	logs, sub, err := _NonStakeableVesting.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return &NonStakeableVestingBeneficiaryChangedIterator{contract: _NonStakeableVesting.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_NonStakeableVesting *NonStakeableVestingFilterer) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *NonStakeableVestingBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}
	var oldBeneficiaryRule []interface{}
	for _, oldBeneficiaryItem := range oldBeneficiary {
		oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
	}

	logs, sub, err := _NonStakeableVesting.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NonStakeableVestingBeneficiaryChanged)
				if err := _NonStakeableVesting.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_NonStakeableVesting *NonStakeableVestingFilterer) ParseBeneficiaryChanged(log types.Log) (*NonStakeableVestingBeneficiaryChanged, error) {
	event := new(NonStakeableVestingBeneficiaryChanged)
	if err := _NonStakeableVesting.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NonStakeableVestingFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the NonStakeableVesting contract.
type NonStakeableVestingFundsReleasedIterator struct {
	Event *NonStakeableVestingFundsReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NonStakeableVestingFundsReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NonStakeableVestingFundsReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NonStakeableVestingFundsReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NonStakeableVestingFundsReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NonStakeableVestingFundsReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NonStakeableVestingFundsReleased represents a FundsReleased event raised by the NonStakeableVesting contract.
type NonStakeableVestingFundsReleased struct {
	To     common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_NonStakeableVesting *NonStakeableVestingFilterer) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*NonStakeableVestingFundsReleasedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _NonStakeableVesting.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &NonStakeableVestingFundsReleasedIterator{contract: _NonStakeableVesting.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
}

// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_NonStakeableVesting *NonStakeableVestingFilterer) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *NonStakeableVestingFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _NonStakeableVesting.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NonStakeableVestingFundsReleased)
				if err := _NonStakeableVesting.contract.UnpackLog(event, "FundsReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_NonStakeableVesting *NonStakeableVestingFilterer) ParseFundsReleased(log types.Log) (*NonStakeableVestingFundsReleased, error) {
	event := new(NonStakeableVestingFundsReleased)
	if err := _NonStakeableVesting.contract.UnpackLog(event, "FundsReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmissionAccountabilityMetaData contains all meta data concerning the OmissionAccountability contract.
var OmissionAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_treasuries\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inactivityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lookbackWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastPerformanceWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialJailingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialProbationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSlashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structOmissionAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"}],\"name\":\"InactivityJailingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"}],\"name\":\"InactivitySlashingEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inactivityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lookbackWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastPerformanceWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialJailingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialProbationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSlashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeProposerRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochCollusionDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"faultyProposers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faultyProposersInWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnded\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAbsenteesLastHeight\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getInactivityScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLookbackWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inactiveValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inactivityCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inactivityScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActive\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"probationPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposerEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"repeatedOffences\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"_committee\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_treasuries\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochBlock\",\"type\":\"uint256\"}],\"name\":\"setEpochBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inactivityThreshold\",\"type\":\"uint256\"}],\"name\":\"setInactivityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialJailingPeriod\",\"type\":\"uint256\"}],\"name\":\"setInitialJailingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialProbationPeriod\",\"type\":\"uint256\"}],\"name\":\"setInitialProbationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSlashingRate\",\"type\":\"uint256\"}],\"name\":\"setInitialSlashingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lookbackWindow\",\"type\":\"uint256\"}],\"name\":\"setLookbackWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pastPerformanceWeight\",\"type\":\"uint256\"}],\"name\":\"setPastPerformanceWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"ce4b5bbe": "SCALE_FACTOR()",
		"79502c55": "config()",
		"eeb92233": "distributeProposerRewards(uint256)",
		"5d30b907": "epochCollusionDegree(uint256)",
		"f95bbd7f": "faultyProposers(uint256)",
		"e8711a97": "faultyProposersInWindow()",
		"6c9789b0": "finalize(bool)",
		"2b938932": "getAbsenteesLastHeight()",
		"c549176e": "getDelta()",
		"9a11e0e6": "getInactivityScore(address)",
		"5ca1809c": "getLookbackWindow()",
		"7f5e2f11": "getScaleFactor()",
		"53b1821b": "getTotalEffort()",
		"b8d5712a": "inactiveValidators(uint256,address)",
		"5426b5ea": "inactivityCounter(address)",
		"278112dc": "inactivityScores(address)",
		"c2ec28d6": "lastActive(address)",
		"70432e8b": "probationPeriods(address)",
		"d2aaca57": "proposerEffort(address)",
		"eb231a1a": "repeatedOffences(address)",
		"e3deef9c": "setCommittee((address,uint256,bytes)[],address[])",
		"025ff0a5": "setDelta(uint256)",
		"c024cc2c": "setEpochBlock(uint256)",
		"d7eaef49": "setInactivityThreshold(uint256)",
		"482893c7": "setInitialJailingPeriod(uint256)",
		"7e716823": "setInitialProbationPeriod(uint256)",
		"48fa7127": "setInitialSlashingRate(uint256)",
		"8bbde7e5": "setLookbackWindow(uint256)",
		"b3ab15fb": "setOperator(address)",
		"f85cffe2": "setPastPerformanceWeight(uint256)",
		"1ede5a1a": "totalEffort()",
	},
	Bin: "0x60806040523480156200001157600080fd5b50604051620033ed380380620033ed833981016040819052620000349162000618565b80516127101015620000a55760405162461bcd60e51b815260206004820152602f60248201527f696e6163746976697479207468726573686f6c642063616e6e6f74206578636560448201526e32b21039b1b0b632903330b1ba37b960891b60648201526084015b60405180910390fd5b61271081604001511115620001185760405162461bcd60e51b815260206004820152603260248201527f7061737420706572666f726d616e6365207765696768742063616e6e6f7420656044820152713c31b2b2b21039b1b0b632903330b1ba37b960711b60648201526084016200009c565b620001266004600a6200081a565b8160a001511115620001a15760405162461bcd60e51b815260206004820152603e60248201527f696e697469616c20736c617368696e6720726174652063616e6e6f742065786360448201527f65656420736c617368696e672072617465207363616c6520666163746f72000060648201526084016200009c565b601980546001600160a01b0319166001600160a01b0386169081179091556040805163a9fd1a8f60e01b815290516000929163a9fd1a8f91600480830192869291908290030181865afa158015620001fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200022791908101906200082f565b90508160c00151816080015114620002ce5760405162461bcd60e51b815260206004820152605360248201527f6d69736d61746368206265747765656e2064656c74612073746f72656420696e60448201527f204175746f6e69747920636f6e747261637420616e6420746865206f6e65206960648201527f6e204f6d697373696f6e20636f6e747261637400000000000000000000000000608482015260a4016200009c565b600580546001600160a01b0319166001600160a01b0386161790558151601255602082015160135560408201516014556060820151601555608082015160165560a082015160175560c082015160185560005b815151811015620004095760008260000151828151811062000347576200034762000a22565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b03909216919091178155918101519282019290925560408201516002820190620003ab908262000ac7565b505050600019600a6000808481548110620003ca57620003ca62000a22565b600091825260208083206003909202909101546001600160a01b0316835282019290925260400190205580620004008162000b93565b91505062000321565b5082516200041f90600190602086019062000438565b505060135460035550506018546004555062000baf9050565b82805482825590600052602060002090810192821562000490579160200282015b828111156200049057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000459565b506200049e929150620004a2565b5090565b5b808211156200049e5760008155600101620004a3565b6001600160a01b0381168114620004cf57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156200050d576200050d620004d2565b60405290565b604051606081016001600160401b03811182821017156200050d576200050d620004d2565b604051601f8201601f191681016001600160401b0381118282101715620005635762000563620004d2565b604052919050565b60006001600160401b03821115620005875762000587620004d2565b5060051b60200190565b600060e08284031215620005a457600080fd5b60405160e081016001600160401b0381118282101715620005c957620005c9620004d2565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201525092915050565b60008060008061014085870312156200063057600080fd5b84516200063d81620004b9565b809450506020808601516200065281620004b9565b60408701519094506001600160401b038111156200066f57600080fd5b8601601f810188136200068157600080fd5b80516200069862000692826200056b565b62000538565b81815260059190911b8201830190838101908a831115620006b857600080fd5b928401925b82841015620006e3578351620006d381620004b9565b82529284019290840190620006bd565b8096505050505050620006fa866060870162000591565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200075c57816000190482111562000740576200074062000705565b808516156200074e57918102915b93841c939080029062000720565b509250929050565b600082620007755750600162000814565b81620007845750600062000814565b81600181146200079d5760028114620007a857620007c8565b600191505062000814565b60ff841115620007bc57620007bc62000705565b50506001821b62000814565b5060208310610133831016604e8410600b8410161715620007ed575081810a62000814565b620007f983836200071b565b806000190482111562000810576200081062000705565b0290505b92915050565b600062000828838362000764565b9392505050565b6000602082840312156200084257600080fd5b81516001600160401b03808211156200085a57600080fd5b9083019060a082860312156200086f57600080fd5b62000879620004e8565b8251828111156200088957600080fd5b8301601f810187136200089b57600080fd5b8051620008ac62000692826200056b565b8082825260208201915060208360051b850101925089831115620008cf57600080fd5b602084015b83811015620009e657805187811115620008ed57600080fd5b8501601f196060828e03820112156200090557600080fd5b6200090f62000513565b60208301516200091f81620004b9565b81526040830151602082015260608301518a8111156200093e57600080fd5b8084019350508d603f8401126200095457600080fd5b60208301518a8111156200096c576200096c620004d2565b6200097f602084601f8401160162000538565b92508083528e60408286010111156200099757600080fd5b60005b81811015620009bd5760408186010151602082860101526020810190506200099a565b5060006020828501015250816040820152808652505050602083019250602081019050620008d4565b50808552505050506020830151602082015260408301516040820152606083015160608201526080830151608082015280935050505092915050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168062000a4d57607f821691505b60208210810362000a6e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ac257600081815260208120601f850160051c8101602086101562000a9d5750805b601f850160051c820191505b8181101562000abe5782815560010162000aa9565b5050505b505050565b81516001600160401b0381111562000ae35762000ae3620004d2565b62000afb8162000af4845462000a38565b8462000a74565b602080601f83116001811462000b33576000841562000b1a5750858301515b600019600386901b1c1916600185901b17855562000abe565b600085815260208120601f198616915b8281101562000b645788860151825594840194600190910190840162000b43565b508582101562000b835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820162000ba85762000ba862000705565b5060010190565b61282e8062000bbf6000396000f3fe6080604052600436106101d85760003560e01c80638bbde7e511610102578063d2aaca5711610095578063eb231a1a11610064578063eb231a1a146105d0578063eeb92233146105fd578063f85cffe214610610578063f95bbd7f1461063057600080fd5b8063d2aaca571461054d578063d7eaef491461057a578063e3deef9c1461059a578063e8711a97146105ba57600080fd5b8063c024cc2c116100d1578063c024cc2c146104d5578063c2ec28d6146104f5578063c549176e14610522578063ce4b5bbe1461053757600080fd5b80638bbde7e5146104145780639a11e0e614610434578063b3ab15fb1461046a578063b8d5712a1461048a57600080fd5b80635426b5ea1161017a57806370432e8b1161014957806370432e8b1461034e57806379502c551461037b5780637e716823146103df5780637f5e2f11146103ff57600080fd5b80635426b5ea146102cc5780635ca1809c146102f95780635d30b9071461030e5780636c9789b01461032e57600080fd5b80632b938932116101b65780632b93893214610255578063482893c71461027757806348fa71271461029757806353b1821b146102b757600080fd5b8063025ff0a5146101dd5780631ede5a1a146101ff578063278112dc14610228575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611e9c565b610660565b005b34801561020b57600080fd5b50610215600c5481565b6040519081526020015b60405180910390f35b34801561023457600080fd5b50610215610243366004611eca565b600e6020526000908152604090205481565b34801561026157600080fd5b5061026a610792565b60405161021f9190611eee565b34801561028357600080fd5b506101fd610292366004611e9c565b6107f4565b3480156102a357600080fd5b506101fd6102b2366004611e9c565b610823565b3480156102c357600080fd5b50600c54610215565b3480156102d857600080fd5b506102156102e7366004611eca565b600b6020526000908152604090205481565b34801561030557600080fd5b50600354610215565b34801561031a57600080fd5b50610215610329366004611e9c565b6108be565b34801561033a57600080fd5b50610215610349366004611f49565b6108df565b34801561035a57600080fd5b50610215610369366004611eca565b600f6020526000908152604090205481565b34801561038757600080fd5b506012546013546014546015546016546017546018546103aa9695949392919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161021f565b3480156103eb57600080fd5b506101fd6103fa366004611e9c565b610b8e565b34801561040b57600080fd5b50612710610215565b34801561042057600080fd5b506101fd61042f366004611e9c565b610bbd565b34801561044057600080fd5b5061021561044f366004611eca565b6001600160a01b03166000908152600e602052604090205490565b34801561047657600080fd5b506101fd610485366004611eca565b610ce6565b34801561049657600080fd5b506104c56104a5366004611f66565b600860209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161021f565b3480156104e157600080fd5b506101fd6104f0366004611e9c565b610d32565b34801561050157600080fd5b50610215610510366004611eca565b600a6020526000908152604090205481565b34801561052e57600080fd5b50600454610215565b34801561054357600080fd5b5061021561271081565b34801561055957600080fd5b50610215610568366004611eca565b600d6020526000908152604090205481565b34801561058657600080fd5b506101fd610595366004611e9c565b610d61565b3480156105a657600080fd5b506101fd6105b536600461209e565b610e6c565b3480156105c657600080fd5b5061021560075481565b3480156105dc57600080fd5b506102156105eb366004611eca565b60106020526000908152604090205481565b6101fd61060b366004611e9c565b610f94565b34801561061c57600080fd5b506101fd61062b366004611e9c565b611277565b34801561063c57600080fd5b506104c561064b366004611e9c565b60066020526000908152604090205460ff1681565b6005546001600160a01b031633146106935760405162461bcd60e51b815260040161068a90612215565b60405180910390fd5b60028110156106e45760405162461bcd60e51b815260206004820152601c60248201527f64656c7461206e6565647320746f206265206174206c65617374203200000000604482015260640161068a565b60195460408051636fd8d26960e11b815290516000926001600160a01b03169163dfb1a4d29160048083019260209291908290030181865afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190612245565b90506001600354836107649190612274565b61076e9190612287565b811161078c5760405162461bcd60e51b815260040161068a9061229a565b50600455565b606060098054806020026020016040519081016040528092919081815260200182805480156107ea57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107cc575b5050505050905090565b6005546001600160a01b0316331461081e5760405162461bcd60e51b815260040161068a90612215565b601555565b6005546001600160a01b0316331461084d5760405162461bcd60e51b815260040161068a90612215565b6108596004600a6123db565b8111156108b95760405162461bcd60e51b815260206004820152602860248201527f63616e6e6f742065786365656420736c617368696e672072617465207363616c60448201526732903330b1ba37b960c11b606482015260840161068a565b601755565b601181815481106108ce57600080fd5b600091825260209091200154905081565b6019546000906001600160a01b0316331461090c5760405162461bcd60e51b815260040161068a906123e7565b60185460025460009161091e91612274565b43111590506000808060006109398560126006015486611372565b92509250925084156109555750506018549350610b8992505050565b6018546000906109659043612287565b905060075460126001015460025461097d9190612274565b6109879190612274565b81106109fa575b60006007541180156109db57506007546013546006916000916109b19085612287565b6109bb9190612287565b6109c6906001612274565b815260208101919091526040016000205460ff165b156109fa57600780549060006109f083612433565b919050555061098e565b8315610a51576000818152600660209081526040808320805460ff19166001179055418352600b9091528120805491610a328361244a565b909155505060078054906000610a478361244a565b9190505550610aad565b6000818152600660209081526040808320805460ff19169055418352600d90915281208054859290610a84908490612274565b9250508190555082600c6000828254610a9d9190612274565b90915550610aad9050828261143e565b8715610b7d576000610abd6116d5565b9050610ac8816118db565b60005b600054811015610b29576000600b6000808481548110610aed57610aed612463565b600091825260208083206003909202909101546001600160a01b0316835282019290925260400190205580610b218161244a565b915050610acb565b5060006007819055610b3d90600990611d71565b601180546001810182556000919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6801556003546013556004546018555b50506018549450505050505b919050565b6005546001600160a01b03163314610bb85760405162461bcd60e51b815260040161068a90612215565b601655565b6005546001600160a01b03163314610be75760405162461bcd60e51b815260040161068a90612215565b6001811015610c385760405162461bcd60e51b815260206004820152601a60248201527f6c6f6f6b6261636b57696e646f772063616e6e6f742062652030000000000000604482015260640161068a565b60195460408051636fd8d26960e11b815290516000926001600160a01b03169163dfb1a4d29160048083019260209291908290030181865afa158015610c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca69190612245565b9050600182600454610cb89190612274565b610cc29190612287565b8111610ce05760405162461bcd60e51b815260040161068a9061229a565b50600355565b6019546001600160a01b03163314610d105760405162461bcd60e51b815260040161068a906123e7565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6019546001600160a01b03163314610d5c5760405162461bcd60e51b815260040161068a906123e7565b600255565b6005546001600160a01b03163314610d8b5760405162461bcd60e51b815260040161068a90612215565b612710811115610ddd5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420657863656564207363616c6520666163746f72000000000000604482015260640161068a565b601454811015610e675760405162461bcd60e51b815260206004820152604960248201527f696e61637469766974795468726573686f6c64206e6565647320746f2062652060448201527f67726561746572206f7220657175616c20746f2070617374506572666f726d616064820152681b98d955d95a59da1d60ba1b608482015260a40161068a565b601255565b6019546001600160a01b03163314610e965760405162461bcd60e51b815260040161068a906123e7565b610ea1600080611d92565b60005b8251811015610f7b576000838281518110610ec157610ec1612463565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b03909216919091178155918101519282019290925560408201516002820190610f239082612501565b505050600019600a6000808481548110610f3f57610f3f612463565b600091825260208083206003909202909101546001600160a01b0316835282019290925260400190205580610f738161244a565b915050610ea4565b508051610f8f906001906020840190611db3565b505050565b6019546001600160a01b03163314610fbe5760405162461bcd60e51b815260040161068a906123e7565b4760005b60005481101561126d576000808281548110610fe057610fe0612463565b600091825260208083206003909202909101546001600160a01b0316808352600d9091526040909120549091501561125a57600c546001600160a01b0382166000908152600d602052604081205490919061103c9086906125c1565b61104691906125d8565b600c546001600160a01b0384166000908152600d6020526040812054929350916110719088906125c1565b61107b91906125d8565b905081156111ca5760006001858154811061109857611098612463565b60009182526020822001546040516001600160a01b03909116916108fc918691818181858888f193505050503d80600081146110f0576040519150601f19603f3d011682016040523d82523d6000602084013e6110f5565b606091505b50509050806111c857601960009054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117591906125fa565b6001600160a01b03168360405160006040518083038185875af1925050503d80600081146111bf576040519150601f19603f3d011682016040523d82523d6000602084013e6111c4565b606091505b5050505b505b801561123e57601954604051630f7fcc5160e41b81526001600160a01b03858116600483015260248201849052600060448301529091169063f7fcc51090606401600060405180830381600087803b15801561122557600080fd5b505af1158015611239573d6000803e3d6000fd5b505050505b50506001600160a01b0381166000908152600d60205260408120555b50806112658161244a565b915050610fc2565b50506000600c5550565b6005546001600160a01b031633146112a15760405162461bcd60e51b815260040161068a90612215565b6127108111156112f35760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420657863656564207363616c6520666163746f72000000000000604482015260640161068a565b60125481111561136d576040805162461bcd60e51b81526020600482015260248101919091527f70617374506572666f726d616e63655765696768742063616e6e6f742062652060448201527f67726561746572207468616e20696e61637469766974795468726573686f6c64606482015260840161068a565b601455565b60405183151560f890811b602083015260218201849052604182018390526000918291606091839060610160405160208183030381529060405290506000806000835160208501865af46113c557600080fd5b503d60008167ffffffffffffffff8111156113e2576113e2611f96565b6040519080825280601f01601f19166020018201604052801561140c576020820181803683370190505b509050816000602083013e8080602001905181019061142b9190612617565b9650965096505050505093509350939050565b60005b6009548110156114d25761147c836009838154811061146257611462612463565b6000918252602090912001546001600160a01b0316611d0a565b6114c057600019600a60006009848154811061149a5761149a612463565b60009182526020808320909101546001600160a01b031683528201929092526040019020555b806114ca8161244a565b915050611441565b5081516114e6906009906020850190611db3565b5060005b8251811015610f8f57600082815260086020526040812084516001929086908590811061151957611519612463565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600a600084838151811061156e5761156e612463565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600019036115ed576115aa6001836126d1565b600a60008584815181106115c0576115c0612463565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b6007546013546002546116009190612274565b61160a9190612274565b82106116c3576007546013546116209190612274565b61162a9083612287565b600a600085848151811061164057611640612463565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054116116c357600b600084838151811061168457611684612463565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008154809291906116bd9061244a565b91905055505b806116cd8161244a565b9150506114ea565b600080601960009054906101000a90046001600160a01b03166001600160a01b0316630aac2da16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561172b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174f9190612245565b6018546013549192506000918291906117689085612287565b611773906001612274565b61177d9190612287565b60145490915060009061179290612710612287565b905060005b6000548110156118d15760008082815481106117b5576117b5612463565b600091825260208083206003909202909101546001600160a01b0316808352600b909152604090912054909150841015611805576001600160a01b0381166000908152600b602052604090208490555b6000611813856127106125c1565b6014546001600160a01b0384166000908152600e6020526040902054879161183a916125c1565b61184491906125c1565b6001600160a01b0384166000908152600b6020526040902054869061186c90612710906125c1565b61187691906125c1565b6118809190612274565b61188a91906125d8565b6012549091508111156118a557856118a18161244a565b9650505b6001600160a01b039091166000908152600e6020526040902055806118c98161244a565b915050611797565b5091949350505050565b60005b600054811015611d065760008082815481106118fc576118fc612463565b6000918252602082206003919091020154601954604051632dbeb61b60e11b81526001600160a01b03928316600482018190529450911690635b7d6c3690602401602060405180830381865afa15801561195a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197e91906126f8565b9050600281600581111561199457611994612719565b14806119b1575060038160058111156119af576119af612719565b145b156119bd575050611cf4565b6012546001600160a01b0383166000908152600e602052604090205411611a63576001600160a01b0382166000908152600f602052604090205415611a5e576001600160a01b0382166000908152600f60205260408120805491611a2083612433565b90915550506001600160a01b0382166000908152600f60205260408120549003611a5e576001600160a01b0382166000908152601060205260408120555b611cf1565b6001600160a01b0382166000908152601060205260408120805491611a878361244a565b90915550506001600160a01b038216600090815260106020526040812054611aaf90806125c1565b9050600081601260030154611ac491906125c1565b9050600082601260040154611ad991906125c1565b6001600160a01b0386166000908152600f602052604090205490915015611c015760008784601260050154611b0e91906125c1565b611b1891906125c1565b601954604051630915a09160e11b8152919250600091829182916001600160a01b039091169063122b412290611b5b908c9088908b906004906005908201612751565b6060604051808303816000875af1158015611b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9e9190612793565b604080516001600160a01b038e16815260208101859052908101839052811515606082015292955090935091507f3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f9060800160405180910390a150505050611cc0565b60195460405163154d76d760e01b81526000916001600160a01b03169063154d76d790611c36908990879060049081016127cc565b6020604051808303816000875af1158015611c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c799190612245565b604080516001600160a01b0389168152602081018390529192507fb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64910160405180910390a1505b6001600160a01b0385166000908152600f602052604081208054839290611ce8908490612274565b90915550505050505b50505b80611cfe8161244a565b9150506118de565b5050565b6000805b8351811015611d6557826001600160a01b0316848281518110611d3357611d33612463565b60200260200101516001600160a01b031603611d53576001915050611d6b565b80611d5d8161244a565b915050611d0e565b50600090505b92915050565b5080546000825590600052602060002090810190611d8f9190611e18565b50565b5080546000825560030290600052602060002090810190611d8f9190611e2d565b828054828255906000526020600020908101928215611e08579160200282015b82811115611e0857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611dd3565b50611e14929150611e18565b5090565b5b80821115611e145760008155600101611e19565b80821115611e145780546001600160a01b0319168155600060018201819055611e596002830182611e62565b50600301611e2d565b508054611e6e90612479565b6000825580601f10611e7e575050565b601f016020900490600052602060002090810190611d8f9190611e18565b600060208284031215611eae57600080fd5b5035919050565b6001600160a01b0381168114611d8f57600080fd5b600060208284031215611edc57600080fd5b8135611ee781611eb5565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611f2f5783516001600160a01b031683529284019291840191600101611f0a565b50909695505050505050565b8015158114611d8f57600080fd5b600060208284031215611f5b57600080fd5b8135611ee781611f3b565b60008060408385031215611f7957600080fd5b823591506020830135611f8b81611eb5565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611fcf57611fcf611f96565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611ffe57611ffe611f96565b604052919050565b600067ffffffffffffffff82111561202057612020611f96565b5060051b60200190565b600082601f83011261203b57600080fd5b8135602061205061204b83612006565b611fd5565b82815260059290921b8401810191818101908684111561206f57600080fd5b8286015b8481101561209357803561208681611eb5565b8352918301918301612073565b509695505050505050565b600080604083850312156120b157600080fd5b823567ffffffffffffffff808211156120c957600080fd5b818501915085601f8301126120dd57600080fd5b813560206120ed61204b83612006565b82815260059290921b8401810191818101908984111561210c57600080fd5b8286015b848110156121e75780358681111561212757600080fd5b8701601f196060828e038201121561213e57600080fd5b612146611fac565b8683013561215381611eb5565b815260408301358782015260608301358981111561217057600080fd5b8084019350508d603f84011261218557600080fd5b868301358981111561219957612199611f96565b6121a98884601f84011601611fd5565b92508083528e60408286010111156121c057600080fd5b80604085018985013760009083018801526040810191909152845250918301918301612110565b50965050860135925050808211156121fe57600080fd5b5061220b8582860161202a565b9150509250929050565b6020808252601690820152753932b9ba3934b1ba32b2103a379037b832b930ba37b960511b604082015260600190565b60006020828403121561225757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611d6b57611d6b61225e565b81810381811115611d6b57611d6b61225e565b6020808252603c908201527f65706f636820706572696f64206e6565647320746f206265206772656174657260408201527f207468616e2064656c74612b6c6f6f6b6261636b57696e646f772d3100000000606082015260800190565b600181815b808511156123325781600019048211156123185761231861225e565b8085161561232557918102915b93841c93908002906122fc565b509250929050565b60008261234957506001611d6b565b8161235657506000611d6b565b816001811461236c576002811461237657612392565b6001915050611d6b565b60ff8411156123875761238761225e565b50506001821b611d6b565b5060208310610133831016604e8410600b84101617156123b5575081810a611d6b565b6123bf83836122f7565b80600019048211156123d3576123d361225e565b029392505050565b6000611ee7838361233a565b6020808252602c908201527f66756e6374696f6e207265737472696374656420746f20746865204175746f6e60408201526b1a5d1e4810dbdb9d1c9858dd60a21b606082015260800190565b6000816124425761244261225e565b506000190190565b60006001820161245c5761245c61225e565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061248d57607f821691505b6020821081036124ad57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610f8f57600081815260208120601f850160051c810160208610156124da5750805b601f850160051c820191505b818110156124f9578281556001016124e6565b505050505050565b815167ffffffffffffffff81111561251b5761251b611f96565b61252f816125298454612479565b846124b3565b602080601f831160018114612564576000841561254c5750858301515b600019600386901b1c1916600185901b1785556124f9565b600085815260208120601f198616915b8281101561259357888601518255948401946001909101908401612574565b50858210156125b15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417611d6b57611d6b61225e565b6000826125f557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561260c57600080fd5b8151611ee781611eb5565b60008060006060848603121561262c57600080fd5b835161263781611f3b565b809350506020808501519250604085015167ffffffffffffffff81111561265d57600080fd5b8501601f8101871361266e57600080fd5b805161267c61204b82612006565b81815260059190911b8201830190838101908983111561269b57600080fd5b928401925b828410156126c25783516126b381611eb5565b825292840192908401906126a0565b80955050505050509250925092565b81810360008312801583831316838312821617156126f1576126f161225e565b5092915050565b60006020828403121561270a57600080fd5b815160068110611ee757600080fd5b634e487b7160e01b600052602160045260246000fd5b6006811061274d57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0386168152602081018590526040810184905260a0810161277c606083018561272f565b612789608083018461272f565b9695505050505050565b6000806000606084860312156127a857600080fd5b835192506020840151915060408401516127c181611f3b565b809150509250925092565b6001600160a01b038416815260208101839052606081016127f0604083018461272f565b94935050505056fea2646970667358221220c32629ceeae4df032e0c4ee7b09bc7f199e1b3288313b0180daff36593e92a0764736f6c63430008150033",
}

// OmissionAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use OmissionAccountabilityMetaData.ABI instead.
var OmissionAccountabilityABI = OmissionAccountabilityMetaData.ABI

// Deprecated: Use OmissionAccountabilityMetaData.Sigs instead.
// OmissionAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var OmissionAccountabilityFuncSigs = OmissionAccountabilityMetaData.Sigs

// OmissionAccountabilityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OmissionAccountabilityMetaData.Bin instead.
var OmissionAccountabilityBin = OmissionAccountabilityMetaData.Bin

// DeployOmissionAccountability deploys a new Ethereum contract, binding an instance of OmissionAccountability to it.
func DeployOmissionAccountability(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _operator common.Address, _treasuries []common.Address, _config OmissionAccountabilityConfig) (common.Address, *types.Transaction, *OmissionAccountability, error) {
	parsed, err := OmissionAccountabilityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OmissionAccountabilityBin), backend, _autonity, _operator, _treasuries, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OmissionAccountability{OmissionAccountabilityCaller: OmissionAccountabilityCaller{contract: contract}, OmissionAccountabilityTransactor: OmissionAccountabilityTransactor{contract: contract}, OmissionAccountabilityFilterer: OmissionAccountabilityFilterer{contract: contract}}, nil
}

// OmissionAccountability is an auto generated Go binding around an Ethereum contract.
type OmissionAccountability struct {
	OmissionAccountabilityCaller     // Read-only binding to the contract
	OmissionAccountabilityTransactor // Write-only binding to the contract
	OmissionAccountabilityFilterer   // Log filterer for contract events
}

// OmissionAccountabilityCaller is an auto generated read-only Go binding around an Ethereum contract.
type OmissionAccountabilityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmissionAccountabilityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OmissionAccountabilityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmissionAccountabilityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OmissionAccountabilityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OmissionAccountabilitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OmissionAccountabilitySession struct {
	Contract     *OmissionAccountability // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// OmissionAccountabilityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OmissionAccountabilityCallerSession struct {
	Contract *OmissionAccountabilityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// OmissionAccountabilityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OmissionAccountabilityTransactorSession struct {
	Contract     *OmissionAccountabilityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// OmissionAccountabilityRaw is an auto generated low-level Go binding around an Ethereum contract.
type OmissionAccountabilityRaw struct {
	Contract *OmissionAccountability // Generic contract binding to access the raw methods on
}

// OmissionAccountabilityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OmissionAccountabilityCallerRaw struct {
	Contract *OmissionAccountabilityCaller // Generic read-only contract binding to access the raw methods on
}

// OmissionAccountabilityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OmissionAccountabilityTransactorRaw struct {
	Contract *OmissionAccountabilityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOmissionAccountability creates a new instance of OmissionAccountability, bound to a specific deployed contract.
func NewOmissionAccountability(address common.Address, backend bind.ContractBackend) (*OmissionAccountability, error) {
	contract, err := bindOmissionAccountability(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OmissionAccountability{OmissionAccountabilityCaller: OmissionAccountabilityCaller{contract: contract}, OmissionAccountabilityTransactor: OmissionAccountabilityTransactor{contract: contract}, OmissionAccountabilityFilterer: OmissionAccountabilityFilterer{contract: contract}}, nil
}

// NewOmissionAccountabilityCaller creates a new read-only instance of OmissionAccountability, bound to a specific deployed contract.
func NewOmissionAccountabilityCaller(address common.Address, caller bind.ContractCaller) (*OmissionAccountabilityCaller, error) {
	contract, err := bindOmissionAccountability(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OmissionAccountabilityCaller{contract: contract}, nil
}

// NewOmissionAccountabilityTransactor creates a new write-only instance of OmissionAccountability, bound to a specific deployed contract.
func NewOmissionAccountabilityTransactor(address common.Address, transactor bind.ContractTransactor) (*OmissionAccountabilityTransactor, error) {
	contract, err := bindOmissionAccountability(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OmissionAccountabilityTransactor{contract: contract}, nil
}

// NewOmissionAccountabilityFilterer creates a new log filterer instance of OmissionAccountability, bound to a specific deployed contract.
func NewOmissionAccountabilityFilterer(address common.Address, filterer bind.ContractFilterer) (*OmissionAccountabilityFilterer, error) {
	contract, err := bindOmissionAccountability(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OmissionAccountabilityFilterer{contract: contract}, nil
}

// bindOmissionAccountability binds a generic wrapper to an already deployed contract.
func bindOmissionAccountability(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OmissionAccountabilityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmissionAccountability *OmissionAccountabilityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmissionAccountability.Contract.OmissionAccountabilityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmissionAccountability *OmissionAccountabilityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.OmissionAccountabilityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmissionAccountability *OmissionAccountabilityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.OmissionAccountabilityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OmissionAccountability *OmissionAccountabilityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OmissionAccountability.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OmissionAccountability *OmissionAccountabilityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OmissionAccountability *OmissionAccountabilityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.contract.Transact(opts, method, params...)
}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) SCALEFACTOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) SCALEFACTOR() (*big.Int, error) {
	return _OmissionAccountability.Contract.SCALEFACTOR(&_OmissionAccountability.CallOpts)
}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) SCALEFACTOR() (*big.Int, error) {
	return _OmissionAccountability.Contract.SCALEFACTOR(&_OmissionAccountability.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 inactivityThreshold, uint256 lookbackWindow, uint256 pastPerformanceWeight, uint256 initialJailingPeriod, uint256 initialProbationPeriod, uint256 initialSlashingRate, uint256 delta)
func (_OmissionAccountability *OmissionAccountabilityCaller) Config(opts *bind.CallOpts) (struct {
	InactivityThreshold    *big.Int
	LookbackWindow         *big.Int
	PastPerformanceWeight  *big.Int
	InitialJailingPeriod   *big.Int
	InitialProbationPeriod *big.Int
	InitialSlashingRate    *big.Int
	Delta                  *big.Int
}, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		InactivityThreshold    *big.Int
		LookbackWindow         *big.Int
		PastPerformanceWeight  *big.Int
		InitialJailingPeriod   *big.Int
		InitialProbationPeriod *big.Int
		InitialSlashingRate    *big.Int
		Delta                  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.InactivityThreshold = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LookbackWindow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.PastPerformanceWeight = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.InitialJailingPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.InitialProbationPeriod = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.InitialSlashingRate = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Delta = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 inactivityThreshold, uint256 lookbackWindow, uint256 pastPerformanceWeight, uint256 initialJailingPeriod, uint256 initialProbationPeriod, uint256 initialSlashingRate, uint256 delta)
func (_OmissionAccountability *OmissionAccountabilitySession) Config() (struct {
	InactivityThreshold    *big.Int
	LookbackWindow         *big.Int
	PastPerformanceWeight  *big.Int
	InitialJailingPeriod   *big.Int
	InitialProbationPeriod *big.Int
	InitialSlashingRate    *big.Int
	Delta                  *big.Int
}, error) {
	return _OmissionAccountability.Contract.Config(&_OmissionAccountability.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 inactivityThreshold, uint256 lookbackWindow, uint256 pastPerformanceWeight, uint256 initialJailingPeriod, uint256 initialProbationPeriod, uint256 initialSlashingRate, uint256 delta)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) Config() (struct {
	InactivityThreshold    *big.Int
	LookbackWindow         *big.Int
	PastPerformanceWeight  *big.Int
	InitialJailingPeriod   *big.Int
	InitialProbationPeriod *big.Int
	InitialSlashingRate    *big.Int
	Delta                  *big.Int
}, error) {
	return _OmissionAccountability.Contract.Config(&_OmissionAccountability.CallOpts)
}

// EpochCollusionDegree is a free data retrieval call binding the contract method 0x5d30b907.
//
// Solidity: function epochCollusionDegree(uint256 ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) EpochCollusionDegree(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "epochCollusionDegree", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochCollusionDegree is a free data retrieval call binding the contract method 0x5d30b907.
//
// Solidity: function epochCollusionDegree(uint256 ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) EpochCollusionDegree(arg0 *big.Int) (*big.Int, error) {
	return _OmissionAccountability.Contract.EpochCollusionDegree(&_OmissionAccountability.CallOpts, arg0)
}

// EpochCollusionDegree is a free data retrieval call binding the contract method 0x5d30b907.
//
// Solidity: function epochCollusionDegree(uint256 ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) EpochCollusionDegree(arg0 *big.Int) (*big.Int, error) {
	return _OmissionAccountability.Contract.EpochCollusionDegree(&_OmissionAccountability.CallOpts, arg0)
}

// FaultyProposers is a free data retrieval call binding the contract method 0xf95bbd7f.
//
// Solidity: function faultyProposers(uint256 ) view returns(bool)
func (_OmissionAccountability *OmissionAccountabilityCaller) FaultyProposers(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "faultyProposers", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// FaultyProposers is a free data retrieval call binding the contract method 0xf95bbd7f.
//
// Solidity: function faultyProposers(uint256 ) view returns(bool)
func (_OmissionAccountability *OmissionAccountabilitySession) FaultyProposers(arg0 *big.Int) (bool, error) {
	return _OmissionAccountability.Contract.FaultyProposers(&_OmissionAccountability.CallOpts, arg0)
}

// FaultyProposers is a free data retrieval call binding the contract method 0xf95bbd7f.
//
// Solidity: function faultyProposers(uint256 ) view returns(bool)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) FaultyProposers(arg0 *big.Int) (bool, error) {
	return _OmissionAccountability.Contract.FaultyProposers(&_OmissionAccountability.CallOpts, arg0)
}

// FaultyProposersInWindow is a free data retrieval call binding the contract method 0xe8711a97.
//
// Solidity: function faultyProposersInWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) FaultyProposersInWindow(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "faultyProposersInWindow")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FaultyProposersInWindow is a free data retrieval call binding the contract method 0xe8711a97.
//
// Solidity: function faultyProposersInWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) FaultyProposersInWindow() (*big.Int, error) {
	return _OmissionAccountability.Contract.FaultyProposersInWindow(&_OmissionAccountability.CallOpts)
}

// FaultyProposersInWindow is a free data retrieval call binding the contract method 0xe8711a97.
//
// Solidity: function faultyProposersInWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) FaultyProposersInWindow() (*big.Int, error) {
	return _OmissionAccountability.Contract.FaultyProposersInWindow(&_OmissionAccountability.CallOpts)
}

// GetAbsenteesLastHeight is a free data retrieval call binding the contract method 0x2b938932.
//
// Solidity: function getAbsenteesLastHeight() view returns(address[])
func (_OmissionAccountability *OmissionAccountabilityCaller) GetAbsenteesLastHeight(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "getAbsenteesLastHeight")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAbsenteesLastHeight is a free data retrieval call binding the contract method 0x2b938932.
//
// Solidity: function getAbsenteesLastHeight() view returns(address[])
func (_OmissionAccountability *OmissionAccountabilitySession) GetAbsenteesLastHeight() ([]common.Address, error) {
	return _OmissionAccountability.Contract.GetAbsenteesLastHeight(&_OmissionAccountability.CallOpts)
}

// GetAbsenteesLastHeight is a free data retrieval call binding the contract method 0x2b938932.
//
// Solidity: function getAbsenteesLastHeight() view returns(address[])
func (_OmissionAccountability *OmissionAccountabilityCallerSession) GetAbsenteesLastHeight() ([]common.Address, error) {
	return _OmissionAccountability.Contract.GetAbsenteesLastHeight(&_OmissionAccountability.CallOpts)
}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) GetDelta(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "getDelta")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) GetDelta() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetDelta(&_OmissionAccountability.CallOpts)
}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) GetDelta() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetDelta(&_OmissionAccountability.CallOpts)
}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) GetInactivityScore(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "getInactivityScore", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) GetInactivityScore(_validator common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.GetInactivityScore(&_OmissionAccountability.CallOpts, _validator)
}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) GetInactivityScore(_validator common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.GetInactivityScore(&_OmissionAccountability.CallOpts, _validator)
}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) GetLookbackWindow(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "getLookbackWindow")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) GetLookbackWindow() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetLookbackWindow(&_OmissionAccountability.CallOpts)
}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) GetLookbackWindow() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetLookbackWindow(&_OmissionAccountability.CallOpts)
}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) GetScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "getScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) GetScaleFactor() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetScaleFactor(&_OmissionAccountability.CallOpts)
}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) GetScaleFactor() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetScaleFactor(&_OmissionAccountability.CallOpts)
}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) GetTotalEffort(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "getTotalEffort")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) GetTotalEffort() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetTotalEffort(&_OmissionAccountability.CallOpts)
}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) GetTotalEffort() (*big.Int, error) {
	return _OmissionAccountability.Contract.GetTotalEffort(&_OmissionAccountability.CallOpts)
}

// InactiveValidators is a free data retrieval call binding the contract method 0xb8d5712a.
//
// Solidity: function inactiveValidators(uint256 , address ) view returns(bool)
func (_OmissionAccountability *OmissionAccountabilityCaller) InactiveValidators(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "inactiveValidators", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InactiveValidators is a free data retrieval call binding the contract method 0xb8d5712a.
//
// Solidity: function inactiveValidators(uint256 , address ) view returns(bool)
func (_OmissionAccountability *OmissionAccountabilitySession) InactiveValidators(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _OmissionAccountability.Contract.InactiveValidators(&_OmissionAccountability.CallOpts, arg0, arg1)
}

// InactiveValidators is a free data retrieval call binding the contract method 0xb8d5712a.
//
// Solidity: function inactiveValidators(uint256 , address ) view returns(bool)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) InactiveValidators(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _OmissionAccountability.Contract.InactiveValidators(&_OmissionAccountability.CallOpts, arg0, arg1)
}

// InactivityCounter is a free data retrieval call binding the contract method 0x5426b5ea.
//
// Solidity: function inactivityCounter(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) InactivityCounter(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "inactivityCounter", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InactivityCounter is a free data retrieval call binding the contract method 0x5426b5ea.
//
// Solidity: function inactivityCounter(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) InactivityCounter(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.InactivityCounter(&_OmissionAccountability.CallOpts, arg0)
}

// InactivityCounter is a free data retrieval call binding the contract method 0x5426b5ea.
//
// Solidity: function inactivityCounter(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) InactivityCounter(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.InactivityCounter(&_OmissionAccountability.CallOpts, arg0)
}

// InactivityScores is a free data retrieval call binding the contract method 0x278112dc.
//
// Solidity: function inactivityScores(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) InactivityScores(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "inactivityScores", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InactivityScores is a free data retrieval call binding the contract method 0x278112dc.
//
// Solidity: function inactivityScores(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) InactivityScores(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.InactivityScores(&_OmissionAccountability.CallOpts, arg0)
}

// InactivityScores is a free data retrieval call binding the contract method 0x278112dc.
//
// Solidity: function inactivityScores(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) InactivityScores(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.InactivityScores(&_OmissionAccountability.CallOpts, arg0)
}

// LastActive is a free data retrieval call binding the contract method 0xc2ec28d6.
//
// Solidity: function lastActive(address ) view returns(int256)
func (_OmissionAccountability *OmissionAccountabilityCaller) LastActive(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "lastActive", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastActive is a free data retrieval call binding the contract method 0xc2ec28d6.
//
// Solidity: function lastActive(address ) view returns(int256)
func (_OmissionAccountability *OmissionAccountabilitySession) LastActive(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.LastActive(&_OmissionAccountability.CallOpts, arg0)
}

// LastActive is a free data retrieval call binding the contract method 0xc2ec28d6.
//
// Solidity: function lastActive(address ) view returns(int256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) LastActive(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.LastActive(&_OmissionAccountability.CallOpts, arg0)
}

// ProbationPeriods is a free data retrieval call binding the contract method 0x70432e8b.
//
// Solidity: function probationPeriods(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) ProbationPeriods(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "probationPeriods", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProbationPeriods is a free data retrieval call binding the contract method 0x70432e8b.
//
// Solidity: function probationPeriods(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) ProbationPeriods(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.ProbationPeriods(&_OmissionAccountability.CallOpts, arg0)
}

// ProbationPeriods is a free data retrieval call binding the contract method 0x70432e8b.
//
// Solidity: function probationPeriods(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) ProbationPeriods(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.ProbationPeriods(&_OmissionAccountability.CallOpts, arg0)
}

// ProposerEffort is a free data retrieval call binding the contract method 0xd2aaca57.
//
// Solidity: function proposerEffort(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) ProposerEffort(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "proposerEffort", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProposerEffort is a free data retrieval call binding the contract method 0xd2aaca57.
//
// Solidity: function proposerEffort(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) ProposerEffort(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.ProposerEffort(&_OmissionAccountability.CallOpts, arg0)
}

// ProposerEffort is a free data retrieval call binding the contract method 0xd2aaca57.
//
// Solidity: function proposerEffort(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) ProposerEffort(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.ProposerEffort(&_OmissionAccountability.CallOpts, arg0)
}

// RepeatedOffences is a free data retrieval call binding the contract method 0xeb231a1a.
//
// Solidity: function repeatedOffences(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) RepeatedOffences(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "repeatedOffences", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RepeatedOffences is a free data retrieval call binding the contract method 0xeb231a1a.
//
// Solidity: function repeatedOffences(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) RepeatedOffences(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.RepeatedOffences(&_OmissionAccountability.CallOpts, arg0)
}

// RepeatedOffences is a free data retrieval call binding the contract method 0xeb231a1a.
//
// Solidity: function repeatedOffences(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) RepeatedOffences(arg0 common.Address) (*big.Int, error) {
	return _OmissionAccountability.Contract.RepeatedOffences(&_OmissionAccountability.CallOpts, arg0)
}

// TotalEffort is a free data retrieval call binding the contract method 0x1ede5a1a.
//
// Solidity: function totalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCaller) TotalEffort(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OmissionAccountability.contract.Call(opts, &out, "totalEffort")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEffort is a free data retrieval call binding the contract method 0x1ede5a1a.
//
// Solidity: function totalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) TotalEffort() (*big.Int, error) {
	return _OmissionAccountability.Contract.TotalEffort(&_OmissionAccountability.CallOpts)
}

// TotalEffort is a free data retrieval call binding the contract method 0x1ede5a1a.
//
// Solidity: function totalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityCallerSession) TotalEffort() (*big.Int, error) {
	return _OmissionAccountability.Contract.TotalEffort(&_OmissionAccountability.CallOpts)
}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) DistributeProposerRewards(opts *bind.TransactOpts, _ntnReward *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "distributeProposerRewards", _ntnReward)
}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_OmissionAccountability *OmissionAccountabilitySession) DistributeProposerRewards(_ntnReward *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.DistributeProposerRewards(&_OmissionAccountability.TransactOpts, _ntnReward)
}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) DistributeProposerRewards(_ntnReward *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.DistributeProposerRewards(&_OmissionAccountability.TransactOpts, _ntnReward)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityTransactor) Finalize(opts *bind.TransactOpts, _epochEnded bool) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "finalize", _epochEnded)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_OmissionAccountability *OmissionAccountabilitySession) Finalize(_epochEnded bool) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.Finalize(&_OmissionAccountability.TransactOpts, _epochEnded)
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) Finalize(_epochEnded bool) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.Finalize(&_OmissionAccountability.TransactOpts, _epochEnded)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetCommittee(opts *bind.TransactOpts, _committee []AutonityCommitteeMember, _treasuries []common.Address) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setCommittee", _committee, _treasuries)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetCommittee(_committee []AutonityCommitteeMember, _treasuries []common.Address) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetCommittee(&_OmissionAccountability.TransactOpts, _committee, _treasuries)
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetCommittee(_committee []AutonityCommitteeMember, _treasuries []common.Address) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetCommittee(&_OmissionAccountability.TransactOpts, _committee, _treasuries)
}

// SetDelta is a paid mutator transaction binding the contract method 0x025ff0a5.
//
// Solidity: function setDelta(uint256 _delta) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetDelta(opts *bind.TransactOpts, _delta *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setDelta", _delta)
}

// SetDelta is a paid mutator transaction binding the contract method 0x025ff0a5.
//
// Solidity: function setDelta(uint256 _delta) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetDelta(_delta *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetDelta(&_OmissionAccountability.TransactOpts, _delta)
}

// SetDelta is a paid mutator transaction binding the contract method 0x025ff0a5.
//
// Solidity: function setDelta(uint256 _delta) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetDelta(_delta *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetDelta(&_OmissionAccountability.TransactOpts, _delta)
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetEpochBlock(opts *bind.TransactOpts, _epochBlock *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setEpochBlock", _epochBlock)
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetEpochBlock(_epochBlock *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetEpochBlock(&_OmissionAccountability.TransactOpts, _epochBlock)
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetEpochBlock(_epochBlock *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetEpochBlock(&_OmissionAccountability.TransactOpts, _epochBlock)
}

// SetInactivityThreshold is a paid mutator transaction binding the contract method 0xd7eaef49.
//
// Solidity: function setInactivityThreshold(uint256 _inactivityThreshold) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetInactivityThreshold(opts *bind.TransactOpts, _inactivityThreshold *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setInactivityThreshold", _inactivityThreshold)
}

// SetInactivityThreshold is a paid mutator transaction binding the contract method 0xd7eaef49.
//
// Solidity: function setInactivityThreshold(uint256 _inactivityThreshold) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetInactivityThreshold(_inactivityThreshold *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInactivityThreshold(&_OmissionAccountability.TransactOpts, _inactivityThreshold)
}

// SetInactivityThreshold is a paid mutator transaction binding the contract method 0xd7eaef49.
//
// Solidity: function setInactivityThreshold(uint256 _inactivityThreshold) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetInactivityThreshold(_inactivityThreshold *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInactivityThreshold(&_OmissionAccountability.TransactOpts, _inactivityThreshold)
}

// SetInitialJailingPeriod is a paid mutator transaction binding the contract method 0x482893c7.
//
// Solidity: function setInitialJailingPeriod(uint256 _initialJailingPeriod) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetInitialJailingPeriod(opts *bind.TransactOpts, _initialJailingPeriod *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setInitialJailingPeriod", _initialJailingPeriod)
}

// SetInitialJailingPeriod is a paid mutator transaction binding the contract method 0x482893c7.
//
// Solidity: function setInitialJailingPeriod(uint256 _initialJailingPeriod) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetInitialJailingPeriod(_initialJailingPeriod *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInitialJailingPeriod(&_OmissionAccountability.TransactOpts, _initialJailingPeriod)
}

// SetInitialJailingPeriod is a paid mutator transaction binding the contract method 0x482893c7.
//
// Solidity: function setInitialJailingPeriod(uint256 _initialJailingPeriod) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetInitialJailingPeriod(_initialJailingPeriod *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInitialJailingPeriod(&_OmissionAccountability.TransactOpts, _initialJailingPeriod)
}

// SetInitialProbationPeriod is a paid mutator transaction binding the contract method 0x7e716823.
//
// Solidity: function setInitialProbationPeriod(uint256 _initialProbationPeriod) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetInitialProbationPeriod(opts *bind.TransactOpts, _initialProbationPeriod *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setInitialProbationPeriod", _initialProbationPeriod)
}

// SetInitialProbationPeriod is a paid mutator transaction binding the contract method 0x7e716823.
//
// Solidity: function setInitialProbationPeriod(uint256 _initialProbationPeriod) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetInitialProbationPeriod(_initialProbationPeriod *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInitialProbationPeriod(&_OmissionAccountability.TransactOpts, _initialProbationPeriod)
}

// SetInitialProbationPeriod is a paid mutator transaction binding the contract method 0x7e716823.
//
// Solidity: function setInitialProbationPeriod(uint256 _initialProbationPeriod) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetInitialProbationPeriod(_initialProbationPeriod *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInitialProbationPeriod(&_OmissionAccountability.TransactOpts, _initialProbationPeriod)
}

// SetInitialSlashingRate is a paid mutator transaction binding the contract method 0x48fa7127.
//
// Solidity: function setInitialSlashingRate(uint256 _initialSlashingRate) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetInitialSlashingRate(opts *bind.TransactOpts, _initialSlashingRate *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setInitialSlashingRate", _initialSlashingRate)
}

// SetInitialSlashingRate is a paid mutator transaction binding the contract method 0x48fa7127.
//
// Solidity: function setInitialSlashingRate(uint256 _initialSlashingRate) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetInitialSlashingRate(_initialSlashingRate *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInitialSlashingRate(&_OmissionAccountability.TransactOpts, _initialSlashingRate)
}

// SetInitialSlashingRate is a paid mutator transaction binding the contract method 0x48fa7127.
//
// Solidity: function setInitialSlashingRate(uint256 _initialSlashingRate) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetInitialSlashingRate(_initialSlashingRate *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetInitialSlashingRate(&_OmissionAccountability.TransactOpts, _initialSlashingRate)
}

// SetLookbackWindow is a paid mutator transaction binding the contract method 0x8bbde7e5.
//
// Solidity: function setLookbackWindow(uint256 _lookbackWindow) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetLookbackWindow(opts *bind.TransactOpts, _lookbackWindow *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setLookbackWindow", _lookbackWindow)
}

// SetLookbackWindow is a paid mutator transaction binding the contract method 0x8bbde7e5.
//
// Solidity: function setLookbackWindow(uint256 _lookbackWindow) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetLookbackWindow(_lookbackWindow *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetLookbackWindow(&_OmissionAccountability.TransactOpts, _lookbackWindow)
}

// SetLookbackWindow is a paid mutator transaction binding the contract method 0x8bbde7e5.
//
// Solidity: function setLookbackWindow(uint256 _lookbackWindow) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetLookbackWindow(_lookbackWindow *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetLookbackWindow(&_OmissionAccountability.TransactOpts, _lookbackWindow)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setOperator", _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetOperator(&_OmissionAccountability.TransactOpts, _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetOperator(&_OmissionAccountability.TransactOpts, _operator)
}

// SetPastPerformanceWeight is a paid mutator transaction binding the contract method 0xf85cffe2.
//
// Solidity: function setPastPerformanceWeight(uint256 _pastPerformanceWeight) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactor) SetPastPerformanceWeight(opts *bind.TransactOpts, _pastPerformanceWeight *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.contract.Transact(opts, "setPastPerformanceWeight", _pastPerformanceWeight)
}

// SetPastPerformanceWeight is a paid mutator transaction binding the contract method 0xf85cffe2.
//
// Solidity: function setPastPerformanceWeight(uint256 _pastPerformanceWeight) returns()
func (_OmissionAccountability *OmissionAccountabilitySession) SetPastPerformanceWeight(_pastPerformanceWeight *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetPastPerformanceWeight(&_OmissionAccountability.TransactOpts, _pastPerformanceWeight)
}

// SetPastPerformanceWeight is a paid mutator transaction binding the contract method 0xf85cffe2.
//
// Solidity: function setPastPerformanceWeight(uint256 _pastPerformanceWeight) returns()
func (_OmissionAccountability *OmissionAccountabilityTransactorSession) SetPastPerformanceWeight(_pastPerformanceWeight *big.Int) (*types.Transaction, error) {
	return _OmissionAccountability.Contract.SetPastPerformanceWeight(&_OmissionAccountability.TransactOpts, _pastPerformanceWeight)
}

// OmissionAccountabilityInactivityJailingEventIterator is returned from FilterInactivityJailingEvent and is used to iterate over the raw logs and unpacked data for InactivityJailingEvent events raised by the OmissionAccountability contract.
type OmissionAccountabilityInactivityJailingEventIterator struct {
	Event *OmissionAccountabilityInactivityJailingEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmissionAccountabilityInactivityJailingEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmissionAccountabilityInactivityJailingEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmissionAccountabilityInactivityJailingEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmissionAccountabilityInactivityJailingEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmissionAccountabilityInactivityJailingEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmissionAccountabilityInactivityJailingEvent represents a InactivityJailingEvent event raised by the OmissionAccountability contract.
type OmissionAccountabilityInactivityJailingEvent struct {
	Validator    common.Address
	ReleaseBlock *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterInactivityJailingEvent is a free log retrieval operation binding the contract event 0xb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64.
//
// Solidity: event InactivityJailingEvent(address validator, uint256 releaseBlock)
func (_OmissionAccountability *OmissionAccountabilityFilterer) FilterInactivityJailingEvent(opts *bind.FilterOpts) (*OmissionAccountabilityInactivityJailingEventIterator, error) {

	logs, sub, err := _OmissionAccountability.contract.FilterLogs(opts, "InactivityJailingEvent")
	if err != nil {
		return nil, err
	}
	return &OmissionAccountabilityInactivityJailingEventIterator{contract: _OmissionAccountability.contract, event: "InactivityJailingEvent", logs: logs, sub: sub}, nil
}

// WatchInactivityJailingEvent is a free log subscription operation binding the contract event 0xb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64.
//
// Solidity: event InactivityJailingEvent(address validator, uint256 releaseBlock)
func (_OmissionAccountability *OmissionAccountabilityFilterer) WatchInactivityJailingEvent(opts *bind.WatchOpts, sink chan<- *OmissionAccountabilityInactivityJailingEvent) (event.Subscription, error) {

	logs, sub, err := _OmissionAccountability.contract.WatchLogs(opts, "InactivityJailingEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmissionAccountabilityInactivityJailingEvent)
				if err := _OmissionAccountability.contract.UnpackLog(event, "InactivityJailingEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInactivityJailingEvent is a log parse operation binding the contract event 0xb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64.
//
// Solidity: event InactivityJailingEvent(address validator, uint256 releaseBlock)
func (_OmissionAccountability *OmissionAccountabilityFilterer) ParseInactivityJailingEvent(log types.Log) (*OmissionAccountabilityInactivityJailingEvent, error) {
	event := new(OmissionAccountabilityInactivityJailingEvent)
	if err := _OmissionAccountability.contract.UnpackLog(event, "InactivityJailingEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OmissionAccountabilityInactivitySlashingEventIterator is returned from FilterInactivitySlashingEvent and is used to iterate over the raw logs and unpacked data for InactivitySlashingEvent events raised by the OmissionAccountability contract.
type OmissionAccountabilityInactivitySlashingEventIterator struct {
	Event *OmissionAccountabilityInactivitySlashingEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OmissionAccountabilityInactivitySlashingEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OmissionAccountabilityInactivitySlashingEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OmissionAccountabilityInactivitySlashingEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OmissionAccountabilityInactivitySlashingEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OmissionAccountabilityInactivitySlashingEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OmissionAccountabilityInactivitySlashingEvent represents a InactivitySlashingEvent event raised by the OmissionAccountability contract.
type OmissionAccountabilityInactivitySlashingEvent struct {
	Validator    common.Address
	Amount       *big.Int
	ReleaseBlock *big.Int
	IsJailbound  bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterInactivitySlashingEvent is a free log retrieval operation binding the contract event 0x3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f.
//
// Solidity: event InactivitySlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound)
func (_OmissionAccountability *OmissionAccountabilityFilterer) FilterInactivitySlashingEvent(opts *bind.FilterOpts) (*OmissionAccountabilityInactivitySlashingEventIterator, error) {

	logs, sub, err := _OmissionAccountability.contract.FilterLogs(opts, "InactivitySlashingEvent")
	if err != nil {
		return nil, err
	}
	return &OmissionAccountabilityInactivitySlashingEventIterator{contract: _OmissionAccountability.contract, event: "InactivitySlashingEvent", logs: logs, sub: sub}, nil
}

// WatchInactivitySlashingEvent is a free log subscription operation binding the contract event 0x3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f.
//
// Solidity: event InactivitySlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound)
func (_OmissionAccountability *OmissionAccountabilityFilterer) WatchInactivitySlashingEvent(opts *bind.WatchOpts, sink chan<- *OmissionAccountabilityInactivitySlashingEvent) (event.Subscription, error) {

	logs, sub, err := _OmissionAccountability.contract.WatchLogs(opts, "InactivitySlashingEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OmissionAccountabilityInactivitySlashingEvent)
				if err := _OmissionAccountability.contract.UnpackLog(event, "InactivitySlashingEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInactivitySlashingEvent is a log parse operation binding the contract event 0x3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f.
//
// Solidity: event InactivitySlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound)
func (_OmissionAccountability *OmissionAccountabilityFilterer) ParseInactivitySlashingEvent(log types.Log) (*OmissionAccountabilityInactivitySlashingEvent, error) {
	event := new(OmissionAccountabilityInactivitySlashingEvent)
	if err := _OmissionAccountability.contract.UnpackLog(event, "InactivitySlashingEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OracleMetaData contains all meta data concerning the Oracle contract.
var OracleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_nodeAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_treasuries\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"contractAutonity\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"outlierDetectionThreshold\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"outlierSlashingThreshold\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRate\",\"type\":\"uint256\"}],\"internalType\":\"structOracle.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_median\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"_reported\",\"type\":\"uint120\"}],\"name\":\"Penalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contractAutonity\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"outlierDetectionThreshold\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"outlierSlashingThreshold\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntn\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getRewardPeriodPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"price\",\"type\":\"uint120\"},{\"internalType\":\"uint8\",\"name\":\"confidence\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_outlierSlashingThreshold\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_outlierDetectionThreshold\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_baseSlashingRate\",\"type\":\"uint256\"}],\"name\":\"setSlashingConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"setVotePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_treasury\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolUpdatedRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint120\",\"name\":\"price\",\"type\":\"uint120\"},{\"internalType\":\"uint8\",\"name\":\"confidence\",\"type\":\"uint8\"}],\"internalType\":\"structIOracle.Report[]\",\"name\":\"_reports\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_extra\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voterInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVoter\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reportAvailable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voterTreasuries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voterValidators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"79502c55": "config()",
		"59974e38": "distributeRewards(uint256)",
		"4bb278f3": "finalize()",
		"f0141d84": "getDecimals()",
		"077945d3": "getNewVoters()",
		"33d16293": "getRewardPeriodPerformance(address)",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"e6a02a28": "lastRoundBlock()",
		"33f98c77": "latestRoundData(string)",
		"4c56ea56": "reports(string,address)",
		"b3ab15fb": "setOperator(address)",
		"29dc4c49": "setSlashingConfig(int256,int256,uint256)",
		"8d4f75d2": "setSymbols(string[])",
		"67b11630": "setVotePeriod(uint256)",
		"da78110e": "setVoters(address[],address[],address[])",
		"08f21ff5": "symbolUpdatedRound()",
		"b6a702b3": "updateVoters()",
		"56833ebe": "vote(uint256,(uint120,uint8)[],uint256,uint8)",
		"cdf58d35": "voterInfo(address)",
		"2d8f3218": "voterTreasuries(address)",
		"127857a1": "voterValidators(address)",
	},
	Bin: "",
}

// OracleABI is the input ABI used to generate the binding from.
// Deprecated: Use OracleMetaData.ABI instead.
var OracleABI = OracleMetaData.ABI

// Deprecated: Use OracleMetaData.Sigs instead.
// OracleFuncSigs maps the 4-byte function signature to its string representation.
var OracleFuncSigs = OracleMetaData.Sigs

// OracleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OracleMetaData.Bin instead.
var OracleBin = OracleMetaData.Bin

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _voters []common.Address, _nodeAddresses []common.Address, _treasuries []common.Address, _symbols []string, _config OracleConfig) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := OracleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OracleBin), backend, _voters, _nodeAddresses, _treasuries, _symbols, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address autonity, address operator, uint256 votePeriod, int256 outlierDetectionThreshold, int256 outlierSlashingThreshold, uint256 baseSlashingRate)
func (_Oracle *OracleCaller) Config(opts *bind.CallOpts) (struct {
	Autonity                  common.Address
	Operator                  common.Address
	VotePeriod                *big.Int
	OutlierDetectionThreshold *big.Int
	OutlierSlashingThreshold  *big.Int
	BaseSlashingRate          *big.Int
}, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		Autonity                  common.Address
		Operator                  common.Address
		VotePeriod                *big.Int
		OutlierDetectionThreshold *big.Int
		OutlierSlashingThreshold  *big.Int
		BaseSlashingRate          *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Autonity = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Operator = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.VotePeriod = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.OutlierDetectionThreshold = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.OutlierSlashingThreshold = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRate = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address autonity, address operator, uint256 votePeriod, int256 outlierDetectionThreshold, int256 outlierSlashingThreshold, uint256 baseSlashingRate)
func (_Oracle *OracleSession) Config() (struct {
	Autonity                  common.Address
	Operator                  common.Address
	VotePeriod                *big.Int
	OutlierDetectionThreshold *big.Int
	OutlierSlashingThreshold  *big.Int
	BaseSlashingRate          *big.Int
}, error) {
	return _Oracle.Contract.Config(&_Oracle.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address autonity, address operator, uint256 votePeriod, int256 outlierDetectionThreshold, int256 outlierSlashingThreshold, uint256 baseSlashingRate)
func (_Oracle *OracleCallerSession) Config() (struct {
	Autonity                  common.Address
	Operator                  common.Address
	VotePeriod                *big.Int
	OutlierDetectionThreshold *big.Int
	OutlierSlashingThreshold  *big.Int
	BaseSlashingRate          *big.Int
}, error) {
	return _Oracle.Contract.Config(&_Oracle.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() view returns(uint8)
func (_Oracle *OracleCaller) GetDecimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getDecimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() view returns(uint8)
func (_Oracle *OracleSession) GetDecimals() (uint8, error) {
	return _Oracle.Contract.GetDecimals(&_Oracle.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xf0141d84.
//
// Solidity: function getDecimals() view returns(uint8)
func (_Oracle *OracleCallerSession) GetDecimals() (uint8, error) {
	return _Oracle.Contract.GetDecimals(&_Oracle.CallOpts)
}

// GetNewVoters is a free data retrieval call binding the contract method 0x077945d3.
//
// Solidity: function getNewVoters() view returns(address[])
func (_Oracle *OracleCaller) GetNewVoters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getNewVoters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetNewVoters is a free data retrieval call binding the contract method 0x077945d3.
//
// Solidity: function getNewVoters() view returns(address[])
func (_Oracle *OracleSession) GetNewVoters() ([]common.Address, error) {
	return _Oracle.Contract.GetNewVoters(&_Oracle.CallOpts)
}

// GetNewVoters is a free data retrieval call binding the contract method 0x077945d3.
//
// Solidity: function getNewVoters() view returns(address[])
func (_Oracle *OracleCallerSession) GetNewVoters() ([]common.Address, error) {
	return _Oracle.Contract.GetNewVoters(&_Oracle.CallOpts)
}

// GetRewardPeriodPerformance is a free data retrieval call binding the contract method 0x33d16293.
//
// Solidity: function getRewardPeriodPerformance(address _voter) view returns(uint256)
func (_Oracle *OracleCaller) GetRewardPeriodPerformance(opts *bind.CallOpts, _voter common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getRewardPeriodPerformance", _voter)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRewardPeriodPerformance is a free data retrieval call binding the contract method 0x33d16293.
//
// Solidity: function getRewardPeriodPerformance(address _voter) view returns(uint256)
func (_Oracle *OracleSession) GetRewardPeriodPerformance(_voter common.Address) (*big.Int, error) {
	return _Oracle.Contract.GetRewardPeriodPerformance(&_Oracle.CallOpts, _voter)
}

// GetRewardPeriodPerformance is a free data retrieval call binding the contract method 0x33d16293.
//
// Solidity: function getRewardPeriodPerformance(address _voter) view returns(uint256)
func (_Oracle *OracleCallerSession) GetRewardPeriodPerformance(_voter common.Address) (*big.Int, error) {
	return _Oracle.Contract.GetRewardPeriodPerformance(&_Oracle.CallOpts, _voter)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *OracleCaller) GetRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *OracleSession) GetRound() (*big.Int, error) {
	return _Oracle.Contract.GetRound(&_Oracle.CallOpts)
}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *OracleCallerSession) GetRound() (*big.Int, error) {
	return _Oracle.Contract.GetRound(&_Oracle.CallOpts)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_Oracle *OracleCaller) GetRoundData(opts *bind.CallOpts, _round *big.Int, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_Oracle *OracleSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.GetRoundData(&_Oracle.CallOpts, _round, _symbol)
}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_Oracle *OracleCallerSession) GetRoundData(_round *big.Int, _symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.GetRoundData(&_Oracle.CallOpts, _round, _symbol)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *OracleCaller) GetSymbols(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getSymbols")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *OracleSession) GetSymbols() ([]string, error) {
	return _Oracle.Contract.GetSymbols(&_Oracle.CallOpts)
}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *OracleCallerSession) GetSymbols() ([]string, error) {
	return _Oracle.Contract.GetSymbols(&_Oracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *OracleCaller) GetVotePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *OracleSession) GetVotePeriod() (*big.Int, error) {
	return _Oracle.Contract.GetVotePeriod(&_Oracle.CallOpts)
}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *OracleCallerSession) GetVotePeriod() (*big.Int, error) {
	return _Oracle.Contract.GetVotePeriod(&_Oracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *OracleCaller) GetVoters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "getVoters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *OracleSession) GetVoters() ([]common.Address, error) {
	return _Oracle.Contract.GetVoters(&_Oracle.CallOpts)
}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *OracleCallerSession) GetVoters() ([]common.Address, error) {
	return _Oracle.Contract.GetVoters(&_Oracle.CallOpts)
}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *OracleCaller) LastRoundBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "lastRoundBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *OracleSession) LastRoundBlock() (*big.Int, error) {
	return _Oracle.Contract.LastRoundBlock(&_Oracle.CallOpts)
}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *OracleCallerSession) LastRoundBlock() (*big.Int, error) {
	return _Oracle.Contract.LastRoundBlock(&_Oracle.CallOpts)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_Oracle *OracleCaller) LatestRoundData(opts *bind.CallOpts, _symbol string) (IOracleRoundData, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)

	return out0, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_Oracle *OracleSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.LatestRoundData(&_Oracle.CallOpts, _symbol)
}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,uint256,uint256,bool) data)
func (_Oracle *OracleCallerSession) LatestRoundData(_symbol string) (IOracleRoundData, error) {
	return _Oracle.Contract.LatestRoundData(&_Oracle.CallOpts, _symbol)
}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(uint120 price, uint8 confidence)
func (_Oracle *OracleCaller) Reports(opts *bind.CallOpts, arg0 string, arg1 common.Address) (struct {
	Price      *big.Int
	Confidence uint8
}, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "reports", arg0, arg1)

	outstruct := new(struct {
		Price      *big.Int
		Confidence uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Price = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Confidence = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(uint120 price, uint8 confidence)
func (_Oracle *OracleSession) Reports(arg0 string, arg1 common.Address) (struct {
	Price      *big.Int
	Confidence uint8
}, error) {
	return _Oracle.Contract.Reports(&_Oracle.CallOpts, arg0, arg1)
}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(uint120 price, uint8 confidence)
func (_Oracle *OracleCallerSession) Reports(arg0 string, arg1 common.Address) (struct {
	Price      *big.Int
	Confidence uint8
}, error) {
	return _Oracle.Contract.Reports(&_Oracle.CallOpts, arg0, arg1)
}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *OracleCaller) SymbolUpdatedRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "symbolUpdatedRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *OracleSession) SymbolUpdatedRound() (*big.Int, error) {
	return _Oracle.Contract.SymbolUpdatedRound(&_Oracle.CallOpts)
}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *OracleCallerSession) SymbolUpdatedRound() (*big.Int, error) {
	return _Oracle.Contract.SymbolUpdatedRound(&_Oracle.CallOpts)
}

// VoterInfo is a free data retrieval call binding the contract method 0xcdf58d35.
//
// Solidity: function voterInfo(address ) view returns(uint256 round, uint256 commit, uint256 performance, bool isVoter, bool reportAvailable)
func (_Oracle *OracleCaller) VoterInfo(opts *bind.CallOpts, arg0 common.Address) (struct {
	Round           *big.Int
	Commit          *big.Int
	Performance     *big.Int
	IsVoter         bool
	ReportAvailable bool
}, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "voterInfo", arg0)

	outstruct := new(struct {
		Round           *big.Int
		Commit          *big.Int
		Performance     *big.Int
		IsVoter         bool
		ReportAvailable bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Round = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Commit = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Performance = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.IsVoter = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.ReportAvailable = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// VoterInfo is a free data retrieval call binding the contract method 0xcdf58d35.
//
// Solidity: function voterInfo(address ) view returns(uint256 round, uint256 commit, uint256 performance, bool isVoter, bool reportAvailable)
func (_Oracle *OracleSession) VoterInfo(arg0 common.Address) (struct {
	Round           *big.Int
	Commit          *big.Int
	Performance     *big.Int
	IsVoter         bool
	ReportAvailable bool
}, error) {
	return _Oracle.Contract.VoterInfo(&_Oracle.CallOpts, arg0)
}

// VoterInfo is a free data retrieval call binding the contract method 0xcdf58d35.
//
// Solidity: function voterInfo(address ) view returns(uint256 round, uint256 commit, uint256 performance, bool isVoter, bool reportAvailable)
func (_Oracle *OracleCallerSession) VoterInfo(arg0 common.Address) (struct {
	Round           *big.Int
	Commit          *big.Int
	Performance     *big.Int
	IsVoter         bool
	ReportAvailable bool
}, error) {
	return _Oracle.Contract.VoterInfo(&_Oracle.CallOpts, arg0)
}

// VoterTreasuries is a free data retrieval call binding the contract method 0x2d8f3218.
//
// Solidity: function voterTreasuries(address ) view returns(address)
func (_Oracle *OracleCaller) VoterTreasuries(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "voterTreasuries", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterTreasuries is a free data retrieval call binding the contract method 0x2d8f3218.
//
// Solidity: function voterTreasuries(address ) view returns(address)
func (_Oracle *OracleSession) VoterTreasuries(arg0 common.Address) (common.Address, error) {
	return _Oracle.Contract.VoterTreasuries(&_Oracle.CallOpts, arg0)
}

// VoterTreasuries is a free data retrieval call binding the contract method 0x2d8f3218.
//
// Solidity: function voterTreasuries(address ) view returns(address)
func (_Oracle *OracleCallerSession) VoterTreasuries(arg0 common.Address) (common.Address, error) {
	return _Oracle.Contract.VoterTreasuries(&_Oracle.CallOpts, arg0)
}

// VoterValidators is a free data retrieval call binding the contract method 0x127857a1.
//
// Solidity: function voterValidators(address ) view returns(address)
func (_Oracle *OracleCaller) VoterValidators(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Oracle.contract.Call(opts, &out, "voterValidators", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterValidators is a free data retrieval call binding the contract method 0x127857a1.
//
// Solidity: function voterValidators(address ) view returns(address)
func (_Oracle *OracleSession) VoterValidators(arg0 common.Address) (common.Address, error) {
	return _Oracle.Contract.VoterValidators(&_Oracle.CallOpts, arg0)
}

// VoterValidators is a free data retrieval call binding the contract method 0x127857a1.
//
// Solidity: function voterValidators(address ) view returns(address)
func (_Oracle *OracleCallerSession) VoterValidators(arg0 common.Address) (common.Address, error) {
	return _Oracle.Contract.VoterValidators(&_Oracle.CallOpts, arg0)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0x59974e38.
//
// Solidity: function distributeRewards(uint256 _ntn) payable returns()
func (_Oracle *OracleTransactor) DistributeRewards(opts *bind.TransactOpts, _ntn *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "distributeRewards", _ntn)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0x59974e38.
//
// Solidity: function distributeRewards(uint256 _ntn) payable returns()
func (_Oracle *OracleSession) DistributeRewards(_ntn *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.DistributeRewards(&_Oracle.TransactOpts, _ntn)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0x59974e38.
//
// Solidity: function distributeRewards(uint256 _ntn) payable returns()
func (_Oracle *OracleTransactorSession) DistributeRewards(_ntn *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.DistributeRewards(&_Oracle.TransactOpts, _ntn)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *OracleTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *OracleSession) Finalize() (*types.Transaction, error) {
	return _Oracle.Contract.Finalize(&_Oracle.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *OracleTransactorSession) Finalize() (*types.Transaction, error) {
	return _Oracle.Contract.Finalize(&_Oracle.TransactOpts)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *OracleTransactor) SetOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setOperator", _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *OracleSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetOperator(&_Oracle.TransactOpts, _operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *OracleTransactorSession) SetOperator(_operator common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetOperator(&_Oracle.TransactOpts, _operator)
}

// SetSlashingConfig is a paid mutator transaction binding the contract method 0x29dc4c49.
//
// Solidity: function setSlashingConfig(int256 _outlierSlashingThreshold, int256 _outlierDetectionThreshold, uint256 _baseSlashingRate) returns()
func (_Oracle *OracleTransactor) SetSlashingConfig(opts *bind.TransactOpts, _outlierSlashingThreshold *big.Int, _outlierDetectionThreshold *big.Int, _baseSlashingRate *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setSlashingConfig", _outlierSlashingThreshold, _outlierDetectionThreshold, _baseSlashingRate)
}

// SetSlashingConfig is a paid mutator transaction binding the contract method 0x29dc4c49.
//
// Solidity: function setSlashingConfig(int256 _outlierSlashingThreshold, int256 _outlierDetectionThreshold, uint256 _baseSlashingRate) returns()
func (_Oracle *OracleSession) SetSlashingConfig(_outlierSlashingThreshold *big.Int, _outlierDetectionThreshold *big.Int, _baseSlashingRate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetSlashingConfig(&_Oracle.TransactOpts, _outlierSlashingThreshold, _outlierDetectionThreshold, _baseSlashingRate)
}

// SetSlashingConfig is a paid mutator transaction binding the contract method 0x29dc4c49.
//
// Solidity: function setSlashingConfig(int256 _outlierSlashingThreshold, int256 _outlierDetectionThreshold, uint256 _baseSlashingRate) returns()
func (_Oracle *OracleTransactorSession) SetSlashingConfig(_outlierSlashingThreshold *big.Int, _outlierDetectionThreshold *big.Int, _baseSlashingRate *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetSlashingConfig(&_Oracle.TransactOpts, _outlierSlashingThreshold, _outlierDetectionThreshold, _baseSlashingRate)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *OracleTransactor) SetSymbols(opts *bind.TransactOpts, _symbols []string) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setSymbols", _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *OracleSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _Oracle.Contract.SetSymbols(&_Oracle.TransactOpts, _symbols)
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *OracleTransactorSession) SetSymbols(_symbols []string) (*types.Transaction, error) {
	return _Oracle.Contract.SetSymbols(&_Oracle.TransactOpts, _symbols)
}

// SetVotePeriod is a paid mutator transaction binding the contract method 0x67b11630.
//
// Solidity: function setVotePeriod(uint256 _votePeriod) returns()
func (_Oracle *OracleTransactor) SetVotePeriod(opts *bind.TransactOpts, _votePeriod *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setVotePeriod", _votePeriod)
}

// SetVotePeriod is a paid mutator transaction binding the contract method 0x67b11630.
//
// Solidity: function setVotePeriod(uint256 _votePeriod) returns()
func (_Oracle *OracleSession) SetVotePeriod(_votePeriod *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetVotePeriod(&_Oracle.TransactOpts, _votePeriod)
}

// SetVotePeriod is a paid mutator transaction binding the contract method 0x67b11630.
//
// Solidity: function setVotePeriod(uint256 _votePeriod) returns()
func (_Oracle *OracleTransactorSession) SetVotePeriod(_votePeriod *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetVotePeriod(&_Oracle.TransactOpts, _votePeriod)
}

// SetVoters is a paid mutator transaction binding the contract method 0xda78110e.
//
// Solidity: function setVoters(address[] _newVoters, address[] _treasury, address[] _validator) returns()
func (_Oracle *OracleTransactor) SetVoters(opts *bind.TransactOpts, _newVoters []common.Address, _treasury []common.Address, _validator []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setVoters", _newVoters, _treasury, _validator)
}

// SetVoters is a paid mutator transaction binding the contract method 0xda78110e.
//
// Solidity: function setVoters(address[] _newVoters, address[] _treasury, address[] _validator) returns()
func (_Oracle *OracleSession) SetVoters(_newVoters []common.Address, _treasury []common.Address, _validator []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetVoters(&_Oracle.TransactOpts, _newVoters, _treasury, _validator)
}

// SetVoters is a paid mutator transaction binding the contract method 0xda78110e.
//
// Solidity: function setVoters(address[] _newVoters, address[] _treasury, address[] _validator) returns()
func (_Oracle *OracleTransactorSession) SetVoters(_newVoters []common.Address, _treasury []common.Address, _validator []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.SetVoters(&_Oracle.TransactOpts, _newVoters, _treasury, _validator)
}

// UpdateVoters is a paid mutator transaction binding the contract method 0xb6a702b3.
//
// Solidity: function updateVoters() returns()
func (_Oracle *OracleTransactor) UpdateVoters(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateVoters")
}

// UpdateVoters is a paid mutator transaction binding the contract method 0xb6a702b3.
//
// Solidity: function updateVoters() returns()
func (_Oracle *OracleSession) UpdateVoters() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateVoters(&_Oracle.TransactOpts)
}

// UpdateVoters is a paid mutator transaction binding the contract method 0xb6a702b3.
//
// Solidity: function updateVoters() returns()
func (_Oracle *OracleTransactorSession) UpdateVoters() (*types.Transaction, error) {
	return _Oracle.Contract.UpdateVoters(&_Oracle.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0x56833ebe.
//
// Solidity: function vote(uint256 _commit, (uint120,uint8)[] _reports, uint256 _salt, uint8 _extra) returns()
func (_Oracle *OracleTransactor) Vote(opts *bind.TransactOpts, _commit *big.Int, _reports []IOracleReport, _salt *big.Int, _extra uint8) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "vote", _commit, _reports, _salt, _extra)
}

// Vote is a paid mutator transaction binding the contract method 0x56833ebe.
//
// Solidity: function vote(uint256 _commit, (uint120,uint8)[] _reports, uint256 _salt, uint8 _extra) returns()
func (_Oracle *OracleSession) Vote(_commit *big.Int, _reports []IOracleReport, _salt *big.Int, _extra uint8) (*types.Transaction, error) {
	return _Oracle.Contract.Vote(&_Oracle.TransactOpts, _commit, _reports, _salt, _extra)
}

// Vote is a paid mutator transaction binding the contract method 0x56833ebe.
//
// Solidity: function vote(uint256 _commit, (uint120,uint8)[] _reports, uint256 _salt, uint8 _extra) returns()
func (_Oracle *OracleTransactorSession) Vote(_commit *big.Int, _reports []IOracleReport, _salt *big.Int, _extra uint8) (*types.Transaction, error) {
	return _Oracle.Contract.Vote(&_Oracle.TransactOpts, _commit, _reports, _salt, _extra)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Oracle *OracleTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Oracle.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Oracle *OracleSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Fallback(&_Oracle.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Oracle *OracleTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Fallback(&_Oracle.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Oracle *OracleTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Oracle *OracleSession) Receive() (*types.Transaction, error) {
	return _Oracle.Contract.Receive(&_Oracle.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Oracle *OracleTransactorSession) Receive() (*types.Transaction, error) {
	return _Oracle.Contract.Receive(&_Oracle.TransactOpts)
}

// OracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the Oracle contract.
type OracleNewRoundIterator struct {
	Event *OracleNewRound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleNewRoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleNewRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleNewRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleNewRoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleNewRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleNewRound represents a NewRound event raised by the Oracle contract.
type OracleNewRound struct {
	Round      *big.Int
	Height     *big.Int
	Timestamp  *big.Int
	VotePeriod *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_Oracle *OracleFilterer) FilterNewRound(opts *bind.FilterOpts) (*OracleNewRoundIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return &OracleNewRoundIterator{contract: _Oracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
}

// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_Oracle *OracleFilterer) WatchNewRound(opts *bind.WatchOpts, sink chan<- *OracleNewRound) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewRound")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleNewRound)
				if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
//
// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
func (_Oracle *OracleFilterer) ParseNewRound(log types.Log) (*OracleNewRound, error) {
	event := new(OracleNewRound)
	if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the Oracle contract.
type OracleNewSymbolsIterator struct {
	Event *OracleNewSymbols // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleNewSymbolsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleNewSymbols)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleNewSymbols)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleNewSymbolsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleNewSymbolsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleNewSymbols represents a NewSymbols event raised by the Oracle contract.
type OracleNewSymbols struct {
	Symbols []string
	Round   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_Oracle *OracleFilterer) FilterNewSymbols(opts *bind.FilterOpts) (*OracleNewSymbolsIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return &OracleNewSymbolsIterator{contract: _Oracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
}

// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_Oracle *OracleFilterer) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *OracleNewSymbols) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewSymbols")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleNewSymbols)
				if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
//
// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
func (_Oracle *OracleFilterer) ParseNewSymbols(log types.Log) (*OracleNewSymbols, error) {
	event := new(OracleNewSymbols)
	if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OraclePenalizedIterator is returned from FilterPenalized and is used to iterate over the raw logs and unpacked data for Penalized events raised by the Oracle contract.
type OraclePenalizedIterator struct {
	Event *OraclePenalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OraclePenalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OraclePenalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OraclePenalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OraclePenalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OraclePenalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OraclePenalized represents a Penalized event raised by the Oracle contract.
type OraclePenalized struct {
	Participant common.Address
	Symbol      string
	Median      *big.Int
	Reported    *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPenalized is a free log retrieval operation binding the contract event 0x16708dc0bfc15303a11b0371f15f29a2155e1742e8760c317223012b5aec49c2.
//
// Solidity: event Penalized(address indexed _participant, string _symbol, int256 _median, uint120 _reported)
func (_Oracle *OracleFilterer) FilterPenalized(opts *bind.FilterOpts, _participant []common.Address) (*OraclePenalizedIterator, error) {

	var _participantRule []interface{}
	for _, _participantItem := range _participant {
		_participantRule = append(_participantRule, _participantItem)
	}

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Penalized", _participantRule)
	if err != nil {
		return nil, err
	}
	return &OraclePenalizedIterator{contract: _Oracle.contract, event: "Penalized", logs: logs, sub: sub}, nil
}

// WatchPenalized is a free log subscription operation binding the contract event 0x16708dc0bfc15303a11b0371f15f29a2155e1742e8760c317223012b5aec49c2.
//
// Solidity: event Penalized(address indexed _participant, string _symbol, int256 _median, uint120 _reported)
func (_Oracle *OracleFilterer) WatchPenalized(opts *bind.WatchOpts, sink chan<- *OraclePenalized, _participant []common.Address) (event.Subscription, error) {

	var _participantRule []interface{}
	for _, _participantItem := range _participant {
		_participantRule = append(_participantRule, _participantItem)
	}

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Penalized", _participantRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OraclePenalized)
				if err := _Oracle.contract.UnpackLog(event, "Penalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePenalized is a log parse operation binding the contract event 0x16708dc0bfc15303a11b0371f15f29a2155e1742e8760c317223012b5aec49c2.
//
// Solidity: event Penalized(address indexed _participant, string _symbol, int256 _median, uint120 _reported)
func (_Oracle *OracleFilterer) ParsePenalized(log types.Log) (*OraclePenalized, error) {
	event := new(OraclePenalized)
	if err := _Oracle.contract.UnpackLog(event, "Penalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Oracle contract.
type OracleVotedIterator struct {
	Event *OracleVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVoted represents a Voted event raised by the Oracle contract.
type OracleVoted struct {
	Voter common.Address
	Votes []*big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_Oracle *OracleFilterer) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*OracleVotedIterator, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return &OracleVotedIterator{contract: _Oracle.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_Oracle *OracleFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *OracleVoted, _voter []common.Address) (event.Subscription, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Voted", _voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVoted)
				if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
//
// Solidity: event Voted(address indexed _voter, int256[] _votes)
func (_Oracle *OracleFilterer) ParseVoted(log types.Log) (*OracleVoted, error) {
	event := new(OracleVoted)
	if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrecompiledMetaData contains all meta data concerning the Precompiled contract.
var PrecompiledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ACCUSATION_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACTIVITY_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPUTE_COMMITTEE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENODE_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INNOCENCE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISBEHAVIOUR_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POP_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4dc925d3": "ACCUSATION_CONTRACT()",
		"625fb940": "ACTIVITY_CONTRACT()",
		"2090a442": "COMPUTE_COMMITTEE_CONTRACT()",
		"c13974e1": "ENODE_VERIFIER_CONTRACT()",
		"8e153dc3": "INNOCENCE_CONTRACT()",
		"925c5492": "MISBEHAVIOUR_CONTRACT()",
		"50d93720": "POP_VERIFIER_CONTRACT()",
		"d0a6d1a6": "SUCCESS()",
		"a4ad5d91": "UPGRADER_CONTRACT()",
	},
	Bin: "0x61014b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80638e153dc3116100705780638e153dc3146100df578063925c5492146100e7578063a4ad5d91146100ef578063c13974e1146100f7578063d0a6d1a6146100ff57600080fd5b80632090a442146100a25780634dc925d3146100c757806350d93720146100cf578063625fb940146100d7575b600080fd5b6100aa60fa81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100aa60fc81565b6100aa60fb81565b6100aa60f881565b6100aa60fd81565b6100aa60fe81565b6100aa60f981565b6100aa60ff81565b610107600181565b6040519081526020016100be56fea2646970667358221220862c3c62ad5b0873c5f0ca1689f1cbbc18a22f4c1120c89ab32e92e710a0738064736f6c63430008150033",
}

// PrecompiledABI is the input ABI used to generate the binding from.
// Deprecated: Use PrecompiledMetaData.ABI instead.
var PrecompiledABI = PrecompiledMetaData.ABI

// Deprecated: Use PrecompiledMetaData.Sigs instead.
// PrecompiledFuncSigs maps the 4-byte function signature to its string representation.
var PrecompiledFuncSigs = PrecompiledMetaData.Sigs

// PrecompiledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrecompiledMetaData.Bin instead.
var PrecompiledBin = PrecompiledMetaData.Bin

// DeployPrecompiled deploys a new Ethereum contract, binding an instance of Precompiled to it.
func DeployPrecompiled(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompiled, error) {
	parsed, err := PrecompiledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrecompiledBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompiled{PrecompiledCaller: PrecompiledCaller{contract: contract}, PrecompiledTransactor: PrecompiledTransactor{contract: contract}, PrecompiledFilterer: PrecompiledFilterer{contract: contract}}, nil
}

// Precompiled is an auto generated Go binding around an Ethereum contract.
type Precompiled struct {
	PrecompiledCaller     // Read-only binding to the contract
	PrecompiledTransactor // Write-only binding to the contract
	PrecompiledFilterer   // Log filterer for contract events
}

// PrecompiledCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompiledCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompiledTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompiledFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompiledSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompiledSession struct {
	Contract     *Precompiled      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompiledCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompiledCallerSession struct {
	Contract *PrecompiledCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PrecompiledTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompiledTransactorSession struct {
	Contract     *PrecompiledTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PrecompiledRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompiledRaw struct {
	Contract *Precompiled // Generic contract binding to access the raw methods on
}

// PrecompiledCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompiledCallerRaw struct {
	Contract *PrecompiledCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompiledTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompiledTransactorRaw struct {
	Contract *PrecompiledTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompiled creates a new instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiled(address common.Address, backend bind.ContractBackend) (*Precompiled, error) {
	contract, err := bindPrecompiled(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompiled{PrecompiledCaller: PrecompiledCaller{contract: contract}, PrecompiledTransactor: PrecompiledTransactor{contract: contract}, PrecompiledFilterer: PrecompiledFilterer{contract: contract}}, nil
}

// NewPrecompiledCaller creates a new read-only instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledCaller(address common.Address, caller bind.ContractCaller) (*PrecompiledCaller, error) {
	contract, err := bindPrecompiled(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompiledCaller{contract: contract}, nil
}

// NewPrecompiledTransactor creates a new write-only instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompiledTransactor, error) {
	contract, err := bindPrecompiled(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompiledTransactor{contract: contract}, nil
}

// NewPrecompiledFilterer creates a new log filterer instance of Precompiled, bound to a specific deployed contract.
func NewPrecompiledFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompiledFilterer, error) {
	contract, err := bindPrecompiled(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompiledFilterer{contract: contract}, nil
}

// bindPrecompiled binds a generic wrapper to an already deployed contract.
func bindPrecompiled(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompiledABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiled *PrecompiledRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiled.Contract.PrecompiledCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiled *PrecompiledRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiled.Contract.PrecompiledTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiled *PrecompiledRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiled.Contract.PrecompiledTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompiled *PrecompiledCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Precompiled.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompiled *PrecompiledTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompiled.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompiled *PrecompiledTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompiled.Contract.contract.Transact(opts, method, params...)
}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) ACCUSATIONCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "ACCUSATION_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) ACCUSATIONCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ACCUSATIONCONTRACT(&_Precompiled.CallOpts)
}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) ACCUSATIONCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ACCUSATIONCONTRACT(&_Precompiled.CallOpts)
}

// ACTIVITYCONTRACT is a free data retrieval call binding the contract method 0x625fb940.
//
// Solidity: function ACTIVITY_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) ACTIVITYCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "ACTIVITY_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ACTIVITYCONTRACT is a free data retrieval call binding the contract method 0x625fb940.
//
// Solidity: function ACTIVITY_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) ACTIVITYCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ACTIVITYCONTRACT(&_Precompiled.CallOpts)
}

// ACTIVITYCONTRACT is a free data retrieval call binding the contract method 0x625fb940.
//
// Solidity: function ACTIVITY_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) ACTIVITYCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ACTIVITYCONTRACT(&_Precompiled.CallOpts)
}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) COMPUTECOMMITTEECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "COMPUTE_COMMITTEE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) COMPUTECOMMITTEECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.COMPUTECOMMITTEECONTRACT(&_Precompiled.CallOpts)
}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) COMPUTECOMMITTEECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.COMPUTECOMMITTEECONTRACT(&_Precompiled.CallOpts)
}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) ENODEVERIFIERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "ENODE_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) ENODEVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ENODEVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) ENODEVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.ENODEVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) INNOCENCECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "INNOCENCE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) INNOCENCECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.INNOCENCECONTRACT(&_Precompiled.CallOpts)
}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) INNOCENCECONTRACT() (common.Address, error) {
	return _Precompiled.Contract.INNOCENCECONTRACT(&_Precompiled.CallOpts)
}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) MISBEHAVIOURCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "MISBEHAVIOUR_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) MISBEHAVIOURCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.MISBEHAVIOURCONTRACT(&_Precompiled.CallOpts)
}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) MISBEHAVIOURCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.MISBEHAVIOURCONTRACT(&_Precompiled.CallOpts)
}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) POPVERIFIERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "POP_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) POPVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.POPVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) POPVERIFIERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.POPVERIFIERCONTRACT(&_Precompiled.CallOpts)
}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *PrecompiledCaller) SUCCESS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "SUCCESS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *PrecompiledSession) SUCCESS() (*big.Int, error) {
	return _Precompiled.Contract.SUCCESS(&_Precompiled.CallOpts)
}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *PrecompiledCallerSession) SUCCESS() (*big.Int, error) {
	return _Precompiled.Contract.SUCCESS(&_Precompiled.CallOpts)
}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCaller) UPGRADERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Precompiled.contract.Call(opts, &out, "UPGRADER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledSession) UPGRADERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.UPGRADERCONTRACT(&_Precompiled.CallOpts)
}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *PrecompiledCallerSession) UPGRADERCONTRACT() (common.Address, error) {
	return _Precompiled.Contract.UPGRADERCONTRACT(&_Precompiled.CallOpts)
}

// QueueLibMetaData contains all meta data concerning the QueueLib contract.
var QueueLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d3ef982de540b222dd99eac4e2872ec64e764ec626670b7c77fd0ae92f06cc2b64736f6c63430008150033",
}

// QueueLibABI is the input ABI used to generate the binding from.
// Deprecated: Use QueueLibMetaData.ABI instead.
var QueueLibABI = QueueLibMetaData.ABI

// QueueLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use QueueLibMetaData.Bin instead.
var QueueLibBin = QueueLibMetaData.Bin

// DeployQueueLib deploys a new Ethereum contract, binding an instance of QueueLib to it.
func DeployQueueLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *QueueLib, error) {
	parsed, err := QueueLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(QueueLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &QueueLib{QueueLibCaller: QueueLibCaller{contract: contract}, QueueLibTransactor: QueueLibTransactor{contract: contract}, QueueLibFilterer: QueueLibFilterer{contract: contract}}, nil
}

// QueueLib is an auto generated Go binding around an Ethereum contract.
type QueueLib struct {
	QueueLibCaller     // Read-only binding to the contract
	QueueLibTransactor // Write-only binding to the contract
	QueueLibFilterer   // Log filterer for contract events
}

// QueueLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type QueueLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type QueueLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type QueueLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type QueueLibSession struct {
	Contract     *QueueLib         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type QueueLibCallerSession struct {
	Contract *QueueLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// QueueLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type QueueLibTransactorSession struct {
	Contract     *QueueLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// QueueLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type QueueLibRaw struct {
	Contract *QueueLib // Generic contract binding to access the raw methods on
}

// QueueLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type QueueLibCallerRaw struct {
	Contract *QueueLibCaller // Generic read-only contract binding to access the raw methods on
}

// QueueLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type QueueLibTransactorRaw struct {
	Contract *QueueLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQueueLib creates a new instance of QueueLib, bound to a specific deployed contract.
func NewQueueLib(address common.Address, backend bind.ContractBackend) (*QueueLib, error) {
	contract, err := bindQueueLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &QueueLib{QueueLibCaller: QueueLibCaller{contract: contract}, QueueLibTransactor: QueueLibTransactor{contract: contract}, QueueLibFilterer: QueueLibFilterer{contract: contract}}, nil
}

// NewQueueLibCaller creates a new read-only instance of QueueLib, bound to a specific deployed contract.
func NewQueueLibCaller(address common.Address, caller bind.ContractCaller) (*QueueLibCaller, error) {
	contract, err := bindQueueLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibCaller{contract: contract}, nil
}

// NewQueueLibTransactor creates a new write-only instance of QueueLib, bound to a specific deployed contract.
func NewQueueLibTransactor(address common.Address, transactor bind.ContractTransactor) (*QueueLibTransactor, error) {
	contract, err := bindQueueLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibTransactor{contract: contract}, nil
}

// NewQueueLibFilterer creates a new log filterer instance of QueueLib, bound to a specific deployed contract.
func NewQueueLibFilterer(address common.Address, filterer bind.ContractFilterer) (*QueueLibFilterer, error) {
	contract, err := bindQueueLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QueueLibFilterer{contract: contract}, nil
}

// bindQueueLib binds a generic wrapper to an already deployed contract.
func bindQueueLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLib *QueueLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLib.Contract.QueueLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLib *QueueLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLib.Contract.QueueLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLib *QueueLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLib.Contract.QueueLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLib *QueueLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLib *QueueLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLib *QueueLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLib.Contract.contract.Transact(opts, method, params...)
}

// ReentrancyGuardMetaData contains all meta data concerning the ReentrancyGuard contract.
var ReentrancyGuardMetaData = &bind.MetaData{
	ABI: "[]",
}

// ReentrancyGuardABI is the input ABI used to generate the binding from.
// Deprecated: Use ReentrancyGuardMetaData.ABI instead.
var ReentrancyGuardABI = ReentrancyGuardMetaData.ABI

// ReentrancyGuard is an auto generated Go binding around an Ethereum contract.
type ReentrancyGuard struct {
	ReentrancyGuardCaller     // Read-only binding to the contract
	ReentrancyGuardTransactor // Write-only binding to the contract
	ReentrancyGuardFilterer   // Log filterer for contract events
}

// ReentrancyGuardCaller is an auto generated read-only Go binding around an Ethereum contract.
type ReentrancyGuardCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ReentrancyGuardTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReentrancyGuardFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReentrancyGuardSession struct {
	Contract     *ReentrancyGuard  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReentrancyGuardCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReentrancyGuardCallerSession struct {
	Contract *ReentrancyGuardCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ReentrancyGuardTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReentrancyGuardTransactorSession struct {
	Contract     *ReentrancyGuardTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ReentrancyGuardRaw is an auto generated low-level Go binding around an Ethereum contract.
type ReentrancyGuardRaw struct {
	Contract *ReentrancyGuard // Generic contract binding to access the raw methods on
}

// ReentrancyGuardCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReentrancyGuardCallerRaw struct {
	Contract *ReentrancyGuardCaller // Generic read-only contract binding to access the raw methods on
}

// ReentrancyGuardTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReentrancyGuardTransactorRaw struct {
	Contract *ReentrancyGuardTransactor // Generic write-only contract binding to access the raw methods on
}

// NewReentrancyGuard creates a new instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuard(address common.Address, backend bind.ContractBackend) (*ReentrancyGuard, error) {
	contract, err := bindReentrancyGuard(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuard{ReentrancyGuardCaller: ReentrancyGuardCaller{contract: contract}, ReentrancyGuardTransactor: ReentrancyGuardTransactor{contract: contract}, ReentrancyGuardFilterer: ReentrancyGuardFilterer{contract: contract}}, nil
}

// NewReentrancyGuardCaller creates a new read-only instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardCaller(address common.Address, caller bind.ContractCaller) (*ReentrancyGuardCaller, error) {
	contract, err := bindReentrancyGuard(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardCaller{contract: contract}, nil
}

// NewReentrancyGuardTransactor creates a new write-only instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardTransactor(address common.Address, transactor bind.ContractTransactor) (*ReentrancyGuardTransactor, error) {
	contract, err := bindReentrancyGuard(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardTransactor{contract: contract}, nil
}

// NewReentrancyGuardFilterer creates a new log filterer instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardFilterer(address common.Address, filterer bind.ContractFilterer) (*ReentrancyGuardFilterer, error) {
	contract, err := bindReentrancyGuard(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardFilterer{contract: contract}, nil
}

// bindReentrancyGuard binds a generic wrapper to an already deployed contract.
func bindReentrancyGuard(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ReentrancyGuardABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReentrancyGuard *ReentrancyGuardRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReentrancyGuard.Contract.ReentrancyGuardCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReentrancyGuard *ReentrancyGuardRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.ReentrancyGuardTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReentrancyGuard *ReentrancyGuardRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.ReentrancyGuardTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReentrancyGuard *ReentrancyGuardCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReentrancyGuard.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReentrancyGuard *ReentrancyGuardTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReentrancyGuard *ReentrancyGuardTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.contract.Transact(opts, method, params...)
}

// ScheduleControllerMetaData contains all meta data concerning the ScheduleController contract.
var ScheduleControllerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scheduleVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"NewSchedule\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
	},
}

// ScheduleControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ScheduleControllerMetaData.ABI instead.
var ScheduleControllerABI = ScheduleControllerMetaData.ABI

// Deprecated: Use ScheduleControllerMetaData.Sigs instead.
// ScheduleControllerFuncSigs maps the 4-byte function signature to its string representation.
var ScheduleControllerFuncSigs = ScheduleControllerMetaData.Sigs

// ScheduleController is an auto generated Go binding around an Ethereum contract.
type ScheduleController struct {
	ScheduleControllerCaller     // Read-only binding to the contract
	ScheduleControllerTransactor // Write-only binding to the contract
	ScheduleControllerFilterer   // Log filterer for contract events
}

// ScheduleControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScheduleControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScheduleControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScheduleControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScheduleControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScheduleControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScheduleControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScheduleControllerSession struct {
	Contract     *ScheduleController // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ScheduleControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScheduleControllerCallerSession struct {
	Contract *ScheduleControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ScheduleControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScheduleControllerTransactorSession struct {
	Contract     *ScheduleControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ScheduleControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScheduleControllerRaw struct {
	Contract *ScheduleController // Generic contract binding to access the raw methods on
}

// ScheduleControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScheduleControllerCallerRaw struct {
	Contract *ScheduleControllerCaller // Generic read-only contract binding to access the raw methods on
}

// ScheduleControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScheduleControllerTransactorRaw struct {
	Contract *ScheduleControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScheduleController creates a new instance of ScheduleController, bound to a specific deployed contract.
func NewScheduleController(address common.Address, backend bind.ContractBackend) (*ScheduleController, error) {
	contract, err := bindScheduleController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ScheduleController{ScheduleControllerCaller: ScheduleControllerCaller{contract: contract}, ScheduleControllerTransactor: ScheduleControllerTransactor{contract: contract}, ScheduleControllerFilterer: ScheduleControllerFilterer{contract: contract}}, nil
}

// NewScheduleControllerCaller creates a new read-only instance of ScheduleController, bound to a specific deployed contract.
func NewScheduleControllerCaller(address common.Address, caller bind.ContractCaller) (*ScheduleControllerCaller, error) {
	contract, err := bindScheduleController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScheduleControllerCaller{contract: contract}, nil
}

// NewScheduleControllerTransactor creates a new write-only instance of ScheduleController, bound to a specific deployed contract.
func NewScheduleControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*ScheduleControllerTransactor, error) {
	contract, err := bindScheduleController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScheduleControllerTransactor{contract: contract}, nil
}

// NewScheduleControllerFilterer creates a new log filterer instance of ScheduleController, bound to a specific deployed contract.
func NewScheduleControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*ScheduleControllerFilterer, error) {
	contract, err := bindScheduleController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScheduleControllerFilterer{contract: contract}, nil
}

// bindScheduleController binds a generic wrapper to an already deployed contract.
func bindScheduleController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ScheduleControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScheduleController *ScheduleControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScheduleController.Contract.ScheduleControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScheduleController *ScheduleControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScheduleController.Contract.ScheduleControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScheduleController *ScheduleControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScheduleController.Contract.ScheduleControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScheduleController *ScheduleControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScheduleController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScheduleController *ScheduleControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScheduleController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScheduleController *ScheduleControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScheduleController.Contract.contract.Transact(opts, method, params...)
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_ScheduleController *ScheduleControllerCaller) GetSchedule(opts *bind.CallOpts, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	var out []interface{}
	err := _ScheduleController.contract.Call(opts, &out, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)

	return out0, err

}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_ScheduleController *ScheduleControllerSession) GetSchedule(_vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	return _ScheduleController.Contract.GetSchedule(&_ScheduleController.CallOpts, _vault, _id)
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_ScheduleController *ScheduleControllerCallerSession) GetSchedule(_vault common.Address, _id *big.Int) (ScheduleControllerSchedule, error) {
	return _ScheduleController.Contract.GetSchedule(&_ScheduleController.CallOpts, _vault, _id)
}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_ScheduleController *ScheduleControllerCaller) GetTotalSchedules(opts *bind.CallOpts, _vault common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ScheduleController.contract.Call(opts, &out, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_ScheduleController *ScheduleControllerSession) GetTotalSchedules(_vault common.Address) (*big.Int, error) {
	return _ScheduleController.Contract.GetTotalSchedules(&_ScheduleController.CallOpts, _vault)
}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_ScheduleController *ScheduleControllerCallerSession) GetTotalSchedules(_vault common.Address) (*big.Int, error) {
	return _ScheduleController.Contract.GetTotalSchedules(&_ScheduleController.CallOpts, _vault)
}

// ScheduleControllerNewScheduleIterator is returned from FilterNewSchedule and is used to iterate over the raw logs and unpacked data for NewSchedule events raised by the ScheduleController contract.
type ScheduleControllerNewScheduleIterator struct {
	Event *ScheduleControllerNewSchedule // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScheduleControllerNewScheduleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScheduleControllerNewSchedule)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScheduleControllerNewSchedule)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScheduleControllerNewScheduleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScheduleControllerNewScheduleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScheduleControllerNewSchedule represents a NewSchedule event raised by the ScheduleController contract.
type ScheduleControllerNewSchedule struct {
	ScheduleVault common.Address
	Amount        *big.Int
	Start         *big.Int
	TotalDuration *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNewSchedule is a free log retrieval operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_ScheduleController *ScheduleControllerFilterer) FilterNewSchedule(opts *bind.FilterOpts, scheduleVault []common.Address) (*ScheduleControllerNewScheduleIterator, error) {

	var scheduleVaultRule []interface{}
	for _, scheduleVaultItem := range scheduleVault {
		scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
	}

	logs, sub, err := _ScheduleController.contract.FilterLogs(opts, "NewSchedule", scheduleVaultRule)
	if err != nil {
		return nil, err
	}
	return &ScheduleControllerNewScheduleIterator{contract: _ScheduleController.contract, event: "NewSchedule", logs: logs, sub: sub}, nil
}

// WatchNewSchedule is a free log subscription operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_ScheduleController *ScheduleControllerFilterer) WatchNewSchedule(opts *bind.WatchOpts, sink chan<- *ScheduleControllerNewSchedule, scheduleVault []common.Address) (event.Subscription, error) {

	var scheduleVaultRule []interface{}
	for _, scheduleVaultItem := range scheduleVault {
		scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
	}

	logs, sub, err := _ScheduleController.contract.WatchLogs(opts, "NewSchedule", scheduleVaultRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScheduleControllerNewSchedule)
				if err := _ScheduleController.contract.UnpackLog(event, "NewSchedule", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSchedule is a log parse operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
//
// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
func (_ScheduleController *ScheduleControllerFilterer) ParseNewSchedule(log types.Log) (*ScheduleControllerNewSchedule, error) {
	event := new(ScheduleControllerNewSchedule)
	if err := _ScheduleController.contract.UnpackLog(event, "NewSchedule", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlasherMetaData contains all meta data concerning the Slasher contract.
var SlasherMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getSlashingScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"d0c66054": "getSlashingScaleFactor()",
		"f189d66c": "jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint8)",
		"c44a5b21": "jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint8)",
		"f774fac0": "slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256)",
		"64d61bbe": "slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint256,uint8,uint8)",
	},
	Bin: "0x608060405234801561001057600080fd5b50604051610ebc380380610ebc83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610e29806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806364d61bbe1461005c578063c44a5b2114610087578063d0c66054146100a7578063f189d66c146100bd578063f774fac0146100d0575b600080fd5b61006f61006a3660046108ca565b6100f1565b60405161007e93929190610af6565b60405180910390f35b61009a610095366004610b20565b6101e5565b60405161007e9190610b6e565b6100af61022a565b60405190815260200161007e565b61009a6100cb366004610b88565b61023d565b6100e36100de366004610bdf565b610282565b60405161007e929190610c24565b6100f96105bf565b6000805481906001600160a01b0316331461012f5760405162461bcd60e51b815260040161012690610c46565b60405180910390fd5b61013b6004600a610d88565b87106101b75760008861012001518960c001518a60a0015161015d9190610d94565b6101679190610d94565b600060a08b018190526101008b018190526101208b0181905260c08b01526101e08a018051919250829161019c908390610d94565b9052506101a989866102ca565b8893509150600190506101da565b60006101c38989610303565b90506101d089888861057d565b8893509150600090505b955095509592505050565b6101ed6105bf565b6000546001600160a01b031633146102175760405162461bcd60e51b815260040161012690610c46565b61022183836102ca565b50815b92915050565b60006102386004600a610d88565b905090565b6102456105bf565b6000546001600160a01b0316331461026f5760405162461bcd60e51b815260040161012690610c46565b61027a84848461057d565b509192915050565b61028a6105bf565b600080546001600160a01b031633146102b55760405162461bcd60e51b815260040161012690610c46565b60006102c18585610303565b94959350505050565b600061020083015261024082018160058111156102e9576102e9610982565b908160058111156102fc576102fc610982565b9052505050565b60006103116004600a610d88565b821061036e5760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f7420736c617368203130302520776974686f7574206a61696c626f604482015265756e64696e6760d01b6064820152608401610126565b60008361012001518460c001518560a0015161038a9190610d94565b6103949190610d94565b905060006103a46004600a610d88565b6103ae8386610da7565b6103b89190610dbe565b9050600081905080866101200151106103ea578086610120018181516103de9190610de0565b90525060009050610405565b6101208601516103fa9082610de0565b600061012088015290505b801561048257808661010001511061044d5780866101000181815161042a9190610de0565b90525060a086018051829190610441908390610de0565b90525060009050610482565b61010086015161045d9082610de0565b90508561010001518660a0018181516104769190610de0565b90525060006101008701525b6000811180156104a5575060008660a001518760c001516104a39190610d94565b115b156105515760008660a001518760c001516104c09190610d94565b60c08801516104cf9084610da7565b6104d99190610dbe565b905060008760a001518860c001516104f19190610d94565b60a08901516105009085610da7565b61050a9190610dbe565b9050818860c00181815161051e9190610de0565b90525060a088018051829190610535908390610de0565b9052506105428183610d94565b61054c9084610de0565b925050505b61055b8183610de0565b915081866101e0018181516105709190610d94565b9052509095945050505050565b6105878243610d94565b61020084015261024083018160058111156105a4576105a4610982565b908160058111156105b7576105b7610982565b905250505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600581111561068057610680610982565b905290565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff811182821017156106bf576106bf610685565b60405290565b80356001600160a01b03811681146106dc57600080fd5b919050565b600082601f8301126106f257600080fd5b813567ffffffffffffffff8082111561070d5761070d610685565b604051601f8301601f19908116603f0116810190828211818310171561073557610735610685565b8160405283815286602085880101111561074e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600681106106dc57600080fd5b6000610260828403121561079057600080fd5b61079861069b565b90506107a3826106c5565b81526107b1602083016106c5565b60208201526107c2604083016106c5565b6040820152606082013567ffffffffffffffff808211156107e257600080fd5b6107ee858386016106e1565b60608401526080848101359084015260a0808501359084015260c0808501359084015260e08085013590840152610100808501359084015261012080850135908401526101408085013590840152610160808501359084015261018091506108578285016106c5565b918301919091526101a083810135908301526101c080840135908301526101e08084013590830152610200808401359083015261022090818401358181111561089f57600080fd5b6108ab868287016106e1565b838501525050506102406108c081840161076e565b9082015292915050565b600080600080600060a086880312156108e257600080fd5b853567ffffffffffffffff8111156108f957600080fd5b6109058882890161077d565b95505060208601359350604086013592506109226060870161076e565b91506109306080870161076e565b90509295509295909350565b6000815180845260005b8181101561096257602081850181015186830182015201610946565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b600681106109b657634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061026060208301516109e660208601826001600160a01b03169052565b506040830151610a0160408601826001600160a01b03169052565b506060830151816060860152610a198286018261093c565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151610a8f828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152610ad5838261093c565b9250505061024080840151610aec82870182610998565b5090949350505050565b606081526000610b0960608301866109ba565b602083019490945250901515604090910152919050565b60008060408385031215610b3357600080fd5b823567ffffffffffffffff811115610b4a57600080fd5b610b568582860161077d565b925050610b656020840161076e565b90509250929050565b602081526000610b8160208301846109ba565b9392505050565b600080600060608486031215610b9d57600080fd5b833567ffffffffffffffff811115610bb457600080fd5b610bc08682870161077d565b93505060208401359150610bd66040850161076e565b90509250925092565b60008060408385031215610bf257600080fd5b823567ffffffffffffffff811115610c0957600080fd5b610c158582860161077d565b95602094909401359450505050565b604081526000610c3760408301856109ba565b90508260208301529392505050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610cdf578160001904821115610cc557610cc5610c8e565b80851615610cd257918102915b93841c9390800290610ca9565b509250929050565b600082610cf657506001610224565b81610d0357506000610224565b8160018114610d195760028114610d2357610d3f565b6001915050610224565b60ff841115610d3457610d34610c8e565b50506001821b610224565b5060208310610133831016604e8410600b8410161715610d62575081810a610224565b610d6c8383610ca4565b8060001904821115610d8057610d80610c8e565b029392505050565b6000610b818383610ce7565b8082018082111561022457610224610c8e565b808202811582820484141761022457610224610c8e565b600082610ddb57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561022457610224610c8e56fea2646970667358221220b51097ab68900dec1131d424c1f814a398d2154c32aa29a1fa9ef122a1b0619064736f6c63430008150033",
}

// SlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use SlasherMetaData.ABI instead.
var SlasherABI = SlasherMetaData.ABI

// Deprecated: Use SlasherMetaData.Sigs instead.
// SlasherFuncSigs maps the 4-byte function signature to its string representation.
var SlasherFuncSigs = SlasherMetaData.Sigs

// SlasherBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlasherMetaData.Bin instead.
var SlasherBin = SlasherMetaData.Bin

// DeploySlasher deploys a new Ethereum contract, binding an instance of Slasher to it.
func DeploySlasher(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *Slasher, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SlasherBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// Slasher is an auto generated Go binding around an Ethereum contract.
type Slasher struct {
	SlasherCaller     // Read-only binding to the contract
	SlasherTransactor // Write-only binding to the contract
	SlasherFilterer   // Log filterer for contract events
}

// SlasherCaller is an auto generated read-only Go binding around an Ethereum contract.
type SlasherCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SlasherTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SlasherFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlasherSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SlasherSession struct {
	Contract     *Slasher          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SlasherCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SlasherCallerSession struct {
	Contract *SlasherCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SlasherTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SlasherTransactorSession struct {
	Contract     *SlasherTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SlasherRaw is an auto generated low-level Go binding around an Ethereum contract.
type SlasherRaw struct {
	Contract *Slasher // Generic contract binding to access the raw methods on
}

// SlasherCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SlasherCallerRaw struct {
	Contract *SlasherCaller // Generic read-only contract binding to access the raw methods on
}

// SlasherTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SlasherTransactorRaw struct {
	Contract *SlasherTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSlasher creates a new instance of Slasher, bound to a specific deployed contract.
func NewSlasher(address common.Address, backend bind.ContractBackend) (*Slasher, error) {
	contract, err := bindSlasher(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Slasher{SlasherCaller: SlasherCaller{contract: contract}, SlasherTransactor: SlasherTransactor{contract: contract}, SlasherFilterer: SlasherFilterer{contract: contract}}, nil
}

// NewSlasherCaller creates a new read-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherCaller(address common.Address, caller bind.ContractCaller) (*SlasherCaller, error) {
	contract, err := bindSlasher(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherCaller{contract: contract}, nil
}

// NewSlasherTransactor creates a new write-only instance of Slasher, bound to a specific deployed contract.
func NewSlasherTransactor(address common.Address, transactor bind.ContractTransactor) (*SlasherTransactor, error) {
	contract, err := bindSlasher(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SlasherTransactor{contract: contract}, nil
}

// NewSlasherFilterer creates a new log filterer instance of Slasher, bound to a specific deployed contract.
func NewSlasherFilterer(address common.Address, filterer bind.ContractFilterer) (*SlasherFilterer, error) {
	contract, err := bindSlasher(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SlasherFilterer{contract: contract}, nil
}

// bindSlasher binds a generic wrapper to an already deployed contract.
func bindSlasher(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SlasherABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.SlasherCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.SlasherTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Slasher *SlasherCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Slasher.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Slasher *SlasherTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Slasher *SlasherTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Slasher.Contract.contract.Transact(opts, method, params...)
}

// GetSlashingScaleFactor is a free data retrieval call binding the contract method 0xd0c66054.
//
// Solidity: function getSlashingScaleFactor() view returns(uint256)
func (_Slasher *SlasherCaller) GetSlashingScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Slasher.contract.Call(opts, &out, "getSlashingScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSlashingScaleFactor is a free data retrieval call binding the contract method 0xd0c66054.
//
// Solidity: function getSlashingScaleFactor() view returns(uint256)
func (_Slasher *SlasherSession) GetSlashingScaleFactor() (*big.Int, error) {
	return _Slasher.Contract.GetSlashingScaleFactor(&_Slasher.CallOpts)
}

// GetSlashingScaleFactor is a free data retrieval call binding the contract method 0xd0c66054.
//
// Solidity: function getSlashingScaleFactor() view returns(uint256)
func (_Slasher *SlasherCallerSession) GetSlashingScaleFactor() (*big.Int, error) {
	return _Slasher.Contract.GetSlashingScaleFactor(&_Slasher.CallOpts)
}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *SlasherTransactor) Jail(opts *bind.TransactOpts, _val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "jail", _val, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *SlasherSession) Jail(_val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _Slasher.Contract.Jail(&_Slasher.TransactOpts, _val, _jailtime, _newJailedState)
}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *SlasherTransactorSession) Jail(_val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (*types.Transaction, error) {
	return _Slasher.Contract.Jail(&_Slasher.TransactOpts, _val, _jailtime, _newJailedState)
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *SlasherTransactor) Jailbound(opts *bind.TransactOpts, _val AutonityValidator, _newJailboundState uint8) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "jailbound", _val, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *SlasherSession) Jailbound(_val AutonityValidator, _newJailboundState uint8) (*types.Transaction, error) {
	return _Slasher.Contract.Jailbound(&_Slasher.TransactOpts, _val, _newJailboundState)
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *SlasherTransactorSession) Jailbound(_val AutonityValidator, _newJailboundState uint8) (*types.Transaction, error) {
	return _Slasher.Contract.Jailbound(&_Slasher.TransactOpts, _val, _newJailboundState)
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_Slasher *SlasherTransactor) Slash(opts *bind.TransactOpts, _val AutonityValidator, _slashingRate *big.Int) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "slash", _val, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_Slasher *SlasherSession) Slash(_val AutonityValidator, _slashingRate *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Slash(&_Slasher.TransactOpts, _val, _slashingRate)
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_Slasher *SlasherTransactorSession) Slash(_val AutonityValidator, _slashingRate *big.Int) (*types.Transaction, error) {
	return _Slasher.Contract.Slash(&_Slasher.TransactOpts, _val, _slashingRate)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_Slasher *SlasherTransactor) SlashAndJail(opts *bind.TransactOpts, _val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _Slasher.contract.Transact(opts, "slashAndJail", _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_Slasher *SlasherSession) SlashAndJail(_val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _Slasher.Contract.SlashAndJail(&_Slasher.TransactOpts, _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_Slasher *SlasherTransactorSession) SlashAndJail(_val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (*types.Transaction, error) {
	return _Slasher.Contract.SlashAndJail(&_Slasher.TransactOpts, _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
}

// StabilizationMetaData contains all meta data concerning the Stabilization contract.
var StabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"internalType\":\"structStabilization.Config\",\"name\":\"config_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDue\",\"type\":\"uint256\"}],\"name\":\"interestDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"minimumCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCDPRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atnSupplyOperator\",\"type\":\"address\"}],\"name\":\"setAtnSupplyOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinDebtRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"}],\"name\":\"setSupplyControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"underCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"eced5526": "SCALE()",
		"ce4b5bbe": "SCALE_FACTOR()",
		"5dcc9391": "SECONDS_IN_YEAR()",
		"68cd03f6": "accounts()",
		"c5ebeaec": "borrow(uint256)",
		"83baa174": "borrowLimit(uint256,uint256,uint256,uint256)",
		"840c7e24": "cdps(address)",
		"5891de72": "collateralPrice()",
		"79502c55": "config()",
		"54a9f42c": "debtAmount(address)",
		"50bf06bf": "debtAmount(address,uint256)",
		"b6b55f25": "deposit(uint256)",
		"15184245": "interestDue(uint256,uint256,uint256,uint256)",
		"042e02cf": "isLiquidatable(address)",
		"2f865568": "liquidate(address)",
		"08796696": "minimumCollateral(uint256,uint256,uint256)",
		"2c01c1b9": "removeCDPRestrictions()",
		"402d8883": "repay()",
		"3c1cb964": "setAtnSupplyOperator(address)",
		"946ce8cd": "setLiquidationRatio(uint256)",
		"7b44646a": "setMinCollateralizationRatio(uint256)",
		"53afe81d": "setMinDebtRequirement(uint256)",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"52e5a050": "setSupplyControl(address)",
		"fbbe6991": "underCollateralized(uint256,uint256,uint256,uint256)",
		"2e1a7d4d": "withdraw(uint256)",
	},
	Bin: "0x60806040523480156200001157600080fd5b506040516200278738038062002787833981016040819052620000349162000144565b8560400151806000036200005b57604051630309cb8760e51b815260040160405180910390fd5b866020015187604001518082106200008657604051630309cb8760e51b815260040160405180910390fd5b5050865160208801516001556040880151600255606088015160035560809097015160045550600780546001600160a01b03199081166001600160a01b039788161790915560088054821695871695909517909455600a8054851693861693909317909255600b80546009805490951693861693909317909355600160a01b93166001600160a81b031990911617919091179055600d556000805562000232565b80516001600160a01b03811681146200013f57600080fd5b919050565b6000806000806000808688036101408112156200016057600080fd5b60a08112156200016f57600080fd5b5060405160a081016001600160401b0381118282101715620001a157634e487b7160e01b600052604160045260246000fd5b8060405250875181526020880151602082015260408801516040820152606088015160608201526080880151608082015280965050620001e460a0880162000127565b9450620001f460c0880162000127565b93506200020460e0880162000127565b925062000215610100880162000127565b915062000226610120880162000127565b90509295509295509295565b61254580620002426000396000f3fe60806040526004361061019c5760003560e01c80635dcc9391116100ec578063946ce8cd1161008a578063c5ebeaec11610064578063c5ebeaec146104d6578063ce4b5bbe146104f6578063eced55261461050b578063fbbe69911461052057600080fd5b8063946ce8cd14610476578063b3ab15fb14610496578063b6b55f25146104b657600080fd5b80637adbf973116100c65780637adbf973146103b45780637b44646a146103d457806383baa174146103f4578063840c7e241461041457600080fd5b80635dcc93911461032b57806368cd03f61461034357806379502c551461036557600080fd5b80633c1cb9641161015957806352e5a0501161013357806352e5a050146102b657806353afe81d146102d657806354a9f42c146102f65780635891de721461031657600080fd5b80633c1cb9641461026e578063402d88831461028e57806350bf06bf1461029657600080fd5b8063042e02cf146101a157806308796696146101d657806315184245146102045780632c01c1b9146102245780632e1a7d4d1461023b5780632f8655681461025b575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612181565b610540565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101f66101f136600461219c565b610588565b6040519081526020016101cd565b34801561021057600080fd5b506101f661021f3660046121c8565b6105f2565b34801561023057600080fd5b50610239610682565b005b34801561024757600080fd5b506102396102563660046121fa565b6106c1565b610239610269366004612181565b6108d0565b34801561027a57600080fd5b50610239610289366004612181565b610b3c565b610239610b88565b3480156102a257600080fd5b506101f66102b1366004612213565b610da1565b3480156102c257600080fd5b506102396102d1366004612181565b610e0d565b3480156102e257600080fd5b506102396102f13660046121fa565b610e59565b34801561030257600080fd5b506101f6610311366004612181565b610e88565b34801561032257600080fd5b506101f6610eff565b34801561033757600080fd5b506101f66301e1338081565b34801561034f57600080fd5b50610358610fe0565b6040516101cd919061223d565b34801561037157600080fd5b5060005460015460025460035460045461038c949392919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101cd565b3480156103c057600080fd5b506102396103cf366004612181565b611042565b3480156103e057600080fd5b506102396103ef3660046121fa565b61108e565b34801561040057600080fd5b506101f661040f3660046121c8565b611106565b34801561042057600080fd5b5061045661042f366004612181565b60056020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016101cd565b34801561048257600080fd5b506102396104913660046121fa565b61115c565b3480156104a257600080fd5b506102396104b1366004612181565b6111b2565b3480156104c257600080fd5b506102396104d13660046121fa565b6111fe565b3480156104e257600080fd5b506102396104f13660046121fa565b61143e565b34801561050257600080fd5b506101f661164b565b34801561051757600080fd5b506101f6601281565b34801561052c57600080fd5b506101c161053b3660046121c8565b61165a565b6001600160a01b03811660009081526005602052604081208161056382426116b1565b5090506105808260010154610576610eff565b600154849061165a565b949350505050565b600082806000036105ab5760405162bfc92160e01b815260040160405180910390fd5b8315806105b6575082155b156105d457604051630309cb8760e51b815260040160405180910390fd5b836105df84876122a0565b6105e991906122cd565b95945050505050565b60008183111561061557604051630309cb8760e51b815260040160405180910390fd5b848460006106376301e1338061063161062e89896122ef565b90565b90611727565b9050600061064d6106488484611746565b611755565b9050600061067461066d61066661062e6012600a6123e6565b84906117a8565b8690611746565b9a9950505050505050505050565b6008546001600160a01b031633146106ac576040516282b42960e81b815260040160405180910390fd5b600b805460ff60a01b19169055600d54600055565b80806000036106e35760405163162908e360e11b815260040160405180910390fd5b600b54600160a01b900460ff1680156107075750600c546001600160a01b03163314155b15610724576040516282b42960e81b815260040160405180910390fd5b33600090815260056020526040902060018101548311156107585760405163162908e360e11b815260040160405180910390fd5b600061076482426116b1565b5090506000610771610eff565b90506107888360010154828460006001015461165a565b156107a657604051636229415360e01b815260040160405180910390fd5b6107ba836002015482600060020154610588565b8584600101546107ca91906122ef565b10156107e957604051633a23d82560e01b815260040160405180910390fd5b848360010160008282546107fd91906122ef565b909155505060095460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190612402565b610894576040516312171d8360e31b815260040160405180910390fd5b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050505050565b600b54600160a01b900460ff16156108fa576040516282b42960e81b815260040160405180910390fd5b3460000361091b57604051637c946ed760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600560205260408120600281015490910361095857604051638aa5baf360e01b815260040160405180910390fd5b60008061096583426116b1565b915091506109838360010154610979610eff565b600154859061165a565b6109a057604051636ef5bcdd60e11b815260040160405180910390fd5b60006109ac83346122ef565b905060018401805442865560009182905560028601829055600386019190915560095460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612402565b610a5e576040516312171d8360e31b815260040160405180910390fd5b600b546001600160a01b03166344df8e70610a7985876122ef565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b50505050506000821115610af557604051339083156108fc029084906000818181858888f19350505050158015610af3573d6000803e3d6000fd5b505b6040513381526001600160a01b038716907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4906020015b60405180910390a2505050505050565b6008546001600160a01b03163314610b66576040516282b42960e81b815260040160405180910390fd5b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600b54600160a01b900460ff168015610bac5750600c546001600160a01b03163314155b15610bc9576040516282b42960e81b815260040160405180910390fd5b34600003610bea57604051637c946ed760e01b815260040160405180910390fd5b3360009081526005602052604081206002810154909103610c1e57604051638aa5baf360e01b815260040160405180910390fd5b600080610c2b83426116b1565b915091508134108015610c485750600354610c4634846122ef565b105b15610c665760405163e6bd447960e01b815260040160405180910390fd5b80836003016000828254610c7a919061241d565b909155505042835560008080610c9086346117b7565b92509250925081866002016000828254610caa91906122ef565b9250508190555082866003016000828254610cc591906122ef565b90915550508115610d3a57600b60009054906101000a90046001600160a01b03166001600160a01b03166344df8e70836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d2057600080fd5b505af1158015610d34573d6000803e3d6000fd5b50505050505b8015610d6f57604051339082156108fc029083906000818181858888f19350505050158015610d6d573d6000803e3d6000fd5b505b60405134815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423190602001610b2c565b6001600160a01b0382166000908152600560205260408120805484918491821015610ddf57604051630309cb8760e51b815260040160405180910390fd5b6001600160a01b0386166000908152600560205260409020610e0181876116b1565b50979650505050505050565b6008546001600160a01b03163314610e37576040516282b42960e81b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314610e83576040516282b42960e81b815260040160405180910390fd5b600355565b6040516350bf06bf60e01b81526001600160a01b038216600482015242602482015260009030906350bf06bf90604401602060405180830381865afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef99190612430565b92915050565b600a546040805180820182526007815266272a2716a0aa2760c91b602082015290516333f98c7760e01b815260009283926001600160a01b03909116916333f98c7791610f4e91600401612449565b608060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190612497565b90508060600151610fb35760405163cb08be8160e01b815260040160405180910390fd5b6000816020015111610fd75760405162bfc92160e01b815260040160405180910390fd5b60200151919050565b6060600680548060200260200160405190810160405280929190818152602001828054801561103857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161101a575b5050505050905090565b6007546001600160a01b0316331461106c576040516282b42960e81b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b80806000036110b057604051630309cb8760e51b815260040160405180910390fd5b600154828082106110d457604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b031633146110fe576040516282b42960e81b815260040160405180910390fd5b505050600255565b6000831580611113575081155b1561113157604051630309cb8760e51b815260040160405180910390fd5b61113d6012600a6123e6565b61114790836122a0565b8361115286886122a0565b6105df91906122a0565b600254819080821061118157604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b031633146111ab576040516282b42960e81b815260040160405180910390fd5b5050600155565b6007546001600160a01b031633146111dc576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b80806000036112205760405163162908e360e11b815260040160405180910390fd5b600b54600160a01b900460ff1680156112445750600c546001600160a01b03163314155b15611261576040516282b42960e81b815260040160405180910390fd5b600954604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d39190612430565b10156112f2576040516313be252b60e01b815260040160405180910390fd5b336000908152600560205260408120805490910361134d57600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031916331790555b42815560018101805484919060009061136790849061241d565b90915550506009546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190612402565b611404576040516312171d8360e31b815260040160405180910390fd5b60405183815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2505050565b80806000036114605760405163162908e360e11b815260040160405180910390fd5b600b54600160a01b900460ff1680156114845750600c546001600160a01b03163314155b156114a1576040516282b42960e81b815260040160405180910390fd5b33600090815260056020526040812090806114bc83426116b1565b90925090506114cb858361241d565b6003549092508210156114f15760405163e6bd447960e01b815260040160405180910390fd5b60006114fb610eff565b90506115128460010154828560006001015461165a565b1561153057604051636229415360e01b815260040160405180910390fd5b600061154c856001015483600060040154600060020154611106565b90508084111561156f57604051633a23d82560e01b815260040160405180910390fd5b42855560028501805488919060009061158990849061241d565b92505081905550828560030160008282546115a4919061241d565b9091555050600b546040516340c10f1960e01b8152336004820152602481018990526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156115f557600080fd5b505af1158015611609573d6000803e3d6000fd5b50506040518981523392507fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750915060200160405180910390a250505050505050565b6116576012600a6123e6565b81565b6000838060000361167d5760405162bfc92160e01b815260040160405180910390fd5b8360000361168e57600091506116a8565b828461169a87896122a0565b6116a491906122cd565b1091505b50949350505050565b600080826000036116d557604051630309cb8760e51b815260040160405180910390fd5b6000846003015485600201546116eb919061241d565b855490915084036116ff5760009150611713565b6000548554611710918391876105f2565b91505b61171d828261241d565b9250509250929050565b600061173f61062e84670de0b6b3a76400008561182b565b9392505050565b600061173f61062e84846118fe565b600081680736ea4425c11ac63081111561178a57604051630d7b1d6560e11b8152600481018490526024015b60405180910390fd5b6714057b7ef767814f8102610580670de0b6b3a764000082046119b4565b600061173f61062e83856122ef565b600080600080856003015486600201546117d1919061241d565b9050856003015485106117e85785600301546117ea565b845b93508085106117fd578560020154611807565b61180784866122ef565b9250808511611817576000611821565b61182181866122ef565b9150509250925092565b60008080600019858709858702925082811083820303915050806000036118655783828161185b5761185b6122b7565b049250505061173f565b83811061189657604051630c740aef60e31b8152600481018790526024810186905260448101859052606401611781565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050806000036119325750670de0b6b3a764000090049050610ef9565b670de0b6b3a7640000811061196457604051635173648d60e01b81526004810186905260248101859052604401611781565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b600081680a688906bd8affffff8111156119e45760405163b3b6ba1f60e01b815260048101849052602401611781565b60006119fc670de0b6b3a7640000604084901b6122cd565b905061058061062e82600160bf1b67ff00000000000000821615611b1257678000000000000000821615611a395768016a09e667f3bcc9090260401c5b674000000000000000821615611a58576801306fe0a31b7152df0260401c5b672000000000000000821615611a77576801172b83c7d517adce0260401c5b671000000000000000821615611a965768010b5586cf9890f62a0260401c5b670800000000000000821615611ab5576801059b0d31585743ae0260401c5b670400000000000000821615611ad457680102c9a3e778060ee70260401c5b670200000000000000821615611af35768010163da9fb33356d80260401c5b670100000000000000821615611b1257680100b1afa5abcbed610260401c5b66ff000000000000821615611c11576680000000000000821615611b3f5768010058c86da1c09ea20260401c5b6640000000000000821615611b5d576801002c605e2e8cec500260401c5b6620000000000000821615611b7b57680100162f3904051fa10260401c5b6610000000000000821615611b99576801000b175effdc76ba0260401c5b6608000000000000821615611bb757680100058ba01fb9f96d0260401c5b6604000000000000821615611bd55768010002c5cc37da94920260401c5b6602000000000000821615611bf3576801000162e525ee05470260401c5b6601000000000000821615611c115768010000b17255775c040260401c5b65ff0000000000821615611d075765800000000000821615611c3c576801000058b91b5bc9ae0260401c5b65400000000000821615611c5957680100002c5c89d5ec6d0260401c5b65200000000000821615611c765768010000162e43f4f8310260401c5b65100000000000821615611c9357680100000b1721bcfc9a0260401c5b65080000000000821615611cb05768010000058b90cf1e6e0260401c5b65040000000000821615611ccd576801000002c5c863b73f0260401c5b65020000000000821615611cea57680100000162e430e5a20260401c5b65010000000000821615611d07576801000000b1721835510260401c5b64ff00000000821615611df457648000000000821615611d3057680100000058b90c0b490260401c5b644000000000821615611d4c5768010000002c5c8601cc0260401c5b642000000000821615611d68576801000000162e42fff00260401c5b641000000000821615611d845768010000000b17217fbb0260401c5b640800000000821615611da0576801000000058b90bfce0260401c5b640400000000821615611dbc57680100000002c5c85fe30260401c5b640200000000821615611dd85768010000000162e42ff10260401c5b640100000000821615611df457680100000000b17217f80260401c5b63ff000000821615611ed8576380000000821615611e1b5768010000000058b90bfc0260401c5b6340000000821615611e36576801000000002c5c85fe0260401c5b6320000000821615611e5157680100000000162e42ff0260401c5b6310000000821615611e6c576801000000000b17217f0260401c5b6308000000821615611e8757680100000000058b90c00260401c5b6304000000821615611ea25768010000000002c5c8600260401c5b6302000000821615611ebd576801000000000162e4300260401c5b6301000000821615611ed85768010000000000b172180260401c5b62ff0000821615611fb35762800000821615611efd576801000000000058b90c0260401c5b62400000821615611f1757680100000000002c5c860260401c5b62200000821615611f315768010000000000162e430260401c5b62100000821615611f4b57680100000000000b17210260401c5b62080000821615611f655768010000000000058b910260401c5b62040000821615611f7f576801000000000002c5c80260401c5b62020000821615611f9957680100000000000162e40260401c5b62010000821615611fb3576801000000000000b1720260401c5b61ff0082161561208557618000821615611fd657680100000000000058b90260401c5b614000821615611fef5768010000000000002c5d0260401c5b612000821615612008576801000000000000162e0260401c5b6110008216156120215768010000000000000b170260401c5b61080082161561203a576801000000000000058c0260401c5b61040082161561205357680100000000000002c60260401c5b61020082161561206c57680100000000000001630260401c5b61010082161561208557680100000000000000b10260401c5b60ff82161561214e5760808216156120a657680100000000000000590260401c5b60408216156120be576801000000000000002c0260401c5b60208216156120d657680100000000000000160260401c5b60108216156120ee576801000000000000000b0260401c5b600882161561210657680100000000000000060260401c5b600482161561211e57680100000000000000030260401c5b600282161561213657680100000000000000010260401c5b600182161561214e57680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b80356001600160a01b038116811461217c57600080fd5b919050565b60006020828403121561219357600080fd5b61173f82612165565b6000806000606084860312156121b157600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156121de57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561220c57600080fd5b5035919050565b6000806040838503121561222657600080fd5b61222f83612165565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561227e5783516001600160a01b031683529284019291840191600101612259565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ef957610ef961228a565b634e487b7160e01b600052601260045260246000fd5b6000826122ea57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610ef957610ef961228a565b600181815b8085111561233d5781600019048211156123235761232361228a565b8085161561233057918102915b93841c9390800290612307565b509250929050565b60008261235457506001610ef9565b8161236157506000610ef9565b816001811461237757600281146123815761239d565b6001915050610ef9565b60ff8411156123925761239261228a565b50506001821b610ef9565b5060208310610133831016604e8410600b84101617156123c0575081810a610ef9565b6123ca8383612302565b80600019048211156123de576123de61228a565b029392505050565b600061173f8383612345565b8051801515811461217c57600080fd5b60006020828403121561241457600080fd5b61173f826123f2565b80820180821115610ef957610ef961228a565b60006020828403121561244257600080fd5b5051919050565b600060208083528351808285015260005b818110156124765785810183015185820160400152820161245a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000608082840312156124a957600080fd5b6040516080810181811067ffffffffffffffff821117156124da57634e487b7160e01b600052604160045260246000fd5b8060405250825181526020830151602082015260408301516040820152612503606084016123f2565b6060820152939250505056fea2646970667358221220a319bd4b4f2dfd7b8506f59d416b9f7129bc890f324f60030495f7ad10ecf11e64736f6c63430008150033",
}

// StabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use StabilizationMetaData.ABI instead.
var StabilizationABI = StabilizationMetaData.ABI

// Deprecated: Use StabilizationMetaData.Sigs instead.
// StabilizationFuncSigs maps the 4-byte function signature to its string representation.
var StabilizationFuncSigs = StabilizationMetaData.Sigs

// StabilizationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StabilizationMetaData.Bin instead.
var StabilizationBin = StabilizationMetaData.Bin

// DeployStabilization deploys a new Ethereum contract, binding an instance of Stabilization to it.
func DeployStabilization(auth *bind.TransactOpts, backend bind.ContractBackend, config_ StabilizationConfig, autonity common.Address, operator common.Address, oracle common.Address, supplyControl common.Address, collateralToken common.Address) (common.Address, *types.Transaction, *Stabilization, error) {
	parsed, err := StabilizationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StabilizationBin), backend, config_, autonity, operator, oracle, supplyControl, collateralToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Stabilization{StabilizationCaller: StabilizationCaller{contract: contract}, StabilizationTransactor: StabilizationTransactor{contract: contract}, StabilizationFilterer: StabilizationFilterer{contract: contract}}, nil
}

// Stabilization is an auto generated Go binding around an Ethereum contract.
type Stabilization struct {
	StabilizationCaller     // Read-only binding to the contract
	StabilizationTransactor // Write-only binding to the contract
	StabilizationFilterer   // Log filterer for contract events
}

// StabilizationCaller is an auto generated read-only Go binding around an Ethereum contract.
type StabilizationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StabilizationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StabilizationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StabilizationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StabilizationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StabilizationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StabilizationSession struct {
	Contract     *Stabilization    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StabilizationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StabilizationCallerSession struct {
	Contract *StabilizationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StabilizationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StabilizationTransactorSession struct {
	Contract     *StabilizationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StabilizationRaw is an auto generated low-level Go binding around an Ethereum contract.
type StabilizationRaw struct {
	Contract *Stabilization // Generic contract binding to access the raw methods on
}

// StabilizationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StabilizationCallerRaw struct {
	Contract *StabilizationCaller // Generic read-only contract binding to access the raw methods on
}

// StabilizationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StabilizationTransactorRaw struct {
	Contract *StabilizationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStabilization creates a new instance of Stabilization, bound to a specific deployed contract.
func NewStabilization(address common.Address, backend bind.ContractBackend) (*Stabilization, error) {
	contract, err := bindStabilization(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Stabilization{StabilizationCaller: StabilizationCaller{contract: contract}, StabilizationTransactor: StabilizationTransactor{contract: contract}, StabilizationFilterer: StabilizationFilterer{contract: contract}}, nil
}

// NewStabilizationCaller creates a new read-only instance of Stabilization, bound to a specific deployed contract.
func NewStabilizationCaller(address common.Address, caller bind.ContractCaller) (*StabilizationCaller, error) {
	contract, err := bindStabilization(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StabilizationCaller{contract: contract}, nil
}

// NewStabilizationTransactor creates a new write-only instance of Stabilization, bound to a specific deployed contract.
func NewStabilizationTransactor(address common.Address, transactor bind.ContractTransactor) (*StabilizationTransactor, error) {
	contract, err := bindStabilization(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StabilizationTransactor{contract: contract}, nil
}

// NewStabilizationFilterer creates a new log filterer instance of Stabilization, bound to a specific deployed contract.
func NewStabilizationFilterer(address common.Address, filterer bind.ContractFilterer) (*StabilizationFilterer, error) {
	contract, err := bindStabilization(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StabilizationFilterer{contract: contract}, nil
}

// bindStabilization binds a generic wrapper to an already deployed contract.
func bindStabilization(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StabilizationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stabilization *StabilizationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stabilization.Contract.StabilizationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stabilization *StabilizationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stabilization.Contract.StabilizationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stabilization *StabilizationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stabilization.Contract.StabilizationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stabilization *StabilizationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stabilization.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stabilization *StabilizationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stabilization.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stabilization *StabilizationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stabilization.Contract.contract.Transact(opts, method, params...)
}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *StabilizationCaller) SCALE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "SCALE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *StabilizationSession) SCALE() (*big.Int, error) {
	return _Stabilization.Contract.SCALE(&_Stabilization.CallOpts)
}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *StabilizationCallerSession) SCALE() (*big.Int, error) {
	return _Stabilization.Contract.SCALE(&_Stabilization.CallOpts)
}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *StabilizationCaller) SCALEFACTOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *StabilizationSession) SCALEFACTOR() (*big.Int, error) {
	return _Stabilization.Contract.SCALEFACTOR(&_Stabilization.CallOpts)
}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *StabilizationCallerSession) SCALEFACTOR() (*big.Int, error) {
	return _Stabilization.Contract.SCALEFACTOR(&_Stabilization.CallOpts)
}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *StabilizationCaller) SECONDSINYEAR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "SECONDS_IN_YEAR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *StabilizationSession) SECONDSINYEAR() (*big.Int, error) {
	return _Stabilization.Contract.SECONDSINYEAR(&_Stabilization.CallOpts)
}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *StabilizationCallerSession) SECONDSINYEAR() (*big.Int, error) {
	return _Stabilization.Contract.SECONDSINYEAR(&_Stabilization.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *StabilizationCaller) Accounts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "accounts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *StabilizationSession) Accounts() ([]common.Address, error) {
	return _Stabilization.Contract.Accounts(&_Stabilization.CallOpts)
}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *StabilizationCallerSession) Accounts() ([]common.Address, error) {
	return _Stabilization.Contract.Accounts(&_Stabilization.CallOpts)
}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCaller) BorrowLimit(opts *bind.CallOpts, collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "borrowLimit", collateral, price, targetPrice, mcr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationSession) BorrowLimit(collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.BorrowLimit(&_Stabilization.CallOpts, collateral, price, targetPrice, mcr)
}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCallerSession) BorrowLimit(collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.BorrowLimit(&_Stabilization.CallOpts, collateral, price, targetPrice, mcr)
}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *StabilizationCaller) Cdps(opts *bind.CallOpts, arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "cdps", arg0)

	outstruct := new(struct {
		Timestamp  *big.Int
		Collateral *big.Int
		Principal  *big.Int
		Interest   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Collateral = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Principal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Interest = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *StabilizationSession) Cdps(arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, error) {
	return _Stabilization.Contract.Cdps(&_Stabilization.CallOpts, arg0)
}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *StabilizationCallerSession) Cdps(arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, error) {
	return _Stabilization.Contract.Cdps(&_Stabilization.CallOpts, arg0)
}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *StabilizationCaller) CollateralPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "collateralPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *StabilizationSession) CollateralPrice() (*big.Int, error) {
	return _Stabilization.Contract.CollateralPrice(&_Stabilization.CallOpts)
}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *StabilizationCallerSession) CollateralPrice() (*big.Int, error) {
	return _Stabilization.Contract.CollateralPrice(&_Stabilization.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *StabilizationCaller) Config(opts *bind.CallOpts) (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		BorrowInterestRate        *big.Int
		LiquidationRatio          *big.Int
		MinCollateralizationRatio *big.Int
		MinDebtRequirement        *big.Int
		TargetPrice               *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.BorrowInterestRate = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LiquidationRatio = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinCollateralizationRatio = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinDebtRequirement = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TargetPrice = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *StabilizationSession) Config() (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, error) {
	return _Stabilization.Contract.Config(&_Stabilization.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *StabilizationCallerSession) Config() (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, error) {
	return _Stabilization.Contract.Config(&_Stabilization.CallOpts)
}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *StabilizationCaller) DebtAmount(opts *bind.CallOpts, account common.Address, timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "debtAmount", account, timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *StabilizationSession) DebtAmount(account common.Address, timestamp *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount(&_Stabilization.CallOpts, account, timestamp)
}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *StabilizationCallerSession) DebtAmount(account common.Address, timestamp *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount(&_Stabilization.CallOpts, account, timestamp)
}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *StabilizationCaller) DebtAmount0(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "debtAmount0", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *StabilizationSession) DebtAmount0(account common.Address) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount0(&_Stabilization.CallOpts, account)
}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *StabilizationCallerSession) DebtAmount0(account common.Address) (*big.Int, error) {
	return _Stabilization.Contract.DebtAmount0(&_Stabilization.CallOpts, account)
}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *StabilizationCaller) InterestDue(opts *bind.CallOpts, debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "interestDue", debt, rate, timeBorrow, timeDue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *StabilizationSession) InterestDue(debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.InterestDue(&_Stabilization.CallOpts, debt, rate, timeBorrow, timeDue)
}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *StabilizationCallerSession) InterestDue(debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.InterestDue(&_Stabilization.CallOpts, debt, rate, timeBorrow, timeDue)
}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *StabilizationCaller) IsLiquidatable(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "isLiquidatable", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *StabilizationSession) IsLiquidatable(account common.Address) (bool, error) {
	return _Stabilization.Contract.IsLiquidatable(&_Stabilization.CallOpts, account)
}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *StabilizationCallerSession) IsLiquidatable(account common.Address) (bool, error) {
	return _Stabilization.Contract.IsLiquidatable(&_Stabilization.CallOpts, account)
}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCaller) MinimumCollateral(opts *bind.CallOpts, principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "minimumCollateral", principal, price, mcr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationSession) MinimumCollateral(principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.MinimumCollateral(&_Stabilization.CallOpts, principal, price, mcr)
}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *StabilizationCallerSession) MinimumCollateral(principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, error) {
	return _Stabilization.Contract.MinimumCollateral(&_Stabilization.CallOpts, principal, price, mcr)
}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *StabilizationCaller) UnderCollateralized(opts *bind.CallOpts, collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, error) {
	var out []interface{}
	err := _Stabilization.contract.Call(opts, &out, "underCollateralized", collateral, price, debt, liquidationRatio)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *StabilizationSession) UnderCollateralized(collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, error) {
	return _Stabilization.Contract.UnderCollateralized(&_Stabilization.CallOpts, collateral, price, debt, liquidationRatio)
}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *StabilizationCallerSession) UnderCollateralized(collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, error) {
	return _Stabilization.Contract.UnderCollateralized(&_Stabilization.CallOpts, collateral, price, debt, liquidationRatio)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) Borrow(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "borrow", amount)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *StabilizationSession) Borrow(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Borrow(&_Stabilization.TransactOpts, amount)
}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) Borrow(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Borrow(&_Stabilization.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *StabilizationSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Deposit(&_Stabilization.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Deposit(&_Stabilization.TransactOpts, amount)
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *StabilizationTransactor) Liquidate(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "liquidate", account)
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *StabilizationSession) Liquidate(account common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.Liquidate(&_Stabilization.TransactOpts, account)
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *StabilizationTransactorSession) Liquidate(account common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.Liquidate(&_Stabilization.TransactOpts, account)
}

// RemoveCDPRestrictions is a paid mutator transaction binding the contract method 0x2c01c1b9.
//
// Solidity: function removeCDPRestrictions() returns()
func (_Stabilization *StabilizationTransactor) RemoveCDPRestrictions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "removeCDPRestrictions")
}

// RemoveCDPRestrictions is a paid mutator transaction binding the contract method 0x2c01c1b9.
//
// Solidity: function removeCDPRestrictions() returns()
func (_Stabilization *StabilizationSession) RemoveCDPRestrictions() (*types.Transaction, error) {
	return _Stabilization.Contract.RemoveCDPRestrictions(&_Stabilization.TransactOpts)
}

// RemoveCDPRestrictions is a paid mutator transaction binding the contract method 0x2c01c1b9.
//
// Solidity: function removeCDPRestrictions() returns()
func (_Stabilization *StabilizationTransactorSession) RemoveCDPRestrictions() (*types.Transaction, error) {
	return _Stabilization.Contract.RemoveCDPRestrictions(&_Stabilization.TransactOpts)
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *StabilizationTransactor) Repay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "repay")
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *StabilizationSession) Repay() (*types.Transaction, error) {
	return _Stabilization.Contract.Repay(&_Stabilization.TransactOpts)
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *StabilizationTransactorSession) Repay() (*types.Transaction, error) {
	return _Stabilization.Contract.Repay(&_Stabilization.TransactOpts)
}

// SetAtnSupplyOperator is a paid mutator transaction binding the contract method 0x3c1cb964.
//
// Solidity: function setAtnSupplyOperator(address atnSupplyOperator) returns()
func (_Stabilization *StabilizationTransactor) SetAtnSupplyOperator(opts *bind.TransactOpts, atnSupplyOperator common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setAtnSupplyOperator", atnSupplyOperator)
}

// SetAtnSupplyOperator is a paid mutator transaction binding the contract method 0x3c1cb964.
//
// Solidity: function setAtnSupplyOperator(address atnSupplyOperator) returns()
func (_Stabilization *StabilizationSession) SetAtnSupplyOperator(atnSupplyOperator common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetAtnSupplyOperator(&_Stabilization.TransactOpts, atnSupplyOperator)
}

// SetAtnSupplyOperator is a paid mutator transaction binding the contract method 0x3c1cb964.
//
// Solidity: function setAtnSupplyOperator(address atnSupplyOperator) returns()
func (_Stabilization *StabilizationTransactorSession) SetAtnSupplyOperator(atnSupplyOperator common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetAtnSupplyOperator(&_Stabilization.TransactOpts, atnSupplyOperator)
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactor) SetLiquidationRatio(opts *bind.TransactOpts, ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setLiquidationRatio", ratio)
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationSession) SetLiquidationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetLiquidationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactorSession) SetLiquidationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetLiquidationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactor) SetMinCollateralizationRatio(opts *bind.TransactOpts, ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setMinCollateralizationRatio", ratio)
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationSession) SetMinCollateralizationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinCollateralizationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *StabilizationTransactorSession) SetMinCollateralizationRatio(ratio *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinCollateralizationRatio(&_Stabilization.TransactOpts, ratio)
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) SetMinDebtRequirement(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setMinDebtRequirement", amount)
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *StabilizationSession) SetMinDebtRequirement(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinDebtRequirement(&_Stabilization.TransactOpts, amount)
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) SetMinDebtRequirement(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.SetMinDebtRequirement(&_Stabilization.TransactOpts, amount)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *StabilizationTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *StabilizationSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOperator(&_Stabilization.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *StabilizationTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOperator(&_Stabilization.TransactOpts, operator)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *StabilizationTransactor) SetOracle(opts *bind.TransactOpts, oracle common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setOracle", oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *StabilizationSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOracle(&_Stabilization.TransactOpts, oracle)
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *StabilizationTransactorSession) SetOracle(oracle common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetOracle(&_Stabilization.TransactOpts, oracle)
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *StabilizationTransactor) SetSupplyControl(opts *bind.TransactOpts, supplyControl common.Address) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "setSupplyControl", supplyControl)
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *StabilizationSession) SetSupplyControl(supplyControl common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetSupplyControl(&_Stabilization.TransactOpts, supplyControl)
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *StabilizationTransactorSession) SetSupplyControl(supplyControl common.Address) (*types.Transaction, error) {
	return _Stabilization.Contract.SetSupplyControl(&_Stabilization.TransactOpts, supplyControl)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *StabilizationTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *StabilizationSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Withdraw(&_Stabilization.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *StabilizationTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Stabilization.Contract.Withdraw(&_Stabilization.TransactOpts, amount)
}

// StabilizationBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the Stabilization contract.
type StabilizationBorrowIterator struct {
	Event *StabilizationBorrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationBorrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationBorrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationBorrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationBorrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationBorrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationBorrow represents a Borrow event raised by the Stabilization contract.
type StabilizationBorrow struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBorrow is a free log retrieval operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
//
// Solidity: event Borrow(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterBorrow(opts *bind.FilterOpts, account []common.Address) (*StabilizationBorrowIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Borrow", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationBorrowIterator{contract: _Stabilization.contract, event: "Borrow", logs: logs, sub: sub}, nil
}

// WatchBorrow is a free log subscription operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
//
// Solidity: event Borrow(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchBorrow(opts *bind.WatchOpts, sink chan<- *StabilizationBorrow, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Borrow", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationBorrow)
				if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrow is a log parse operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
//
// Solidity: event Borrow(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseBorrow(log types.Log) (*StabilizationBorrow, error) {
	event := new(StabilizationBorrow)
	if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Stabilization contract.
type StabilizationDepositIterator struct {
	Event *StabilizationDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationDeposit represents a Deposit event raised by the Stabilization contract.
type StabilizationDeposit struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterDeposit(opts *bind.FilterOpts, account []common.Address) (*StabilizationDepositIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Deposit", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationDepositIterator{contract: _Stabilization.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StabilizationDeposit, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Deposit", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationDeposit)
				if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseDeposit(log types.Log) (*StabilizationDeposit, error) {
	event := new(StabilizationDeposit)
	if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationLiquidateIterator is returned from FilterLiquidate and is used to iterate over the raw logs and unpacked data for Liquidate events raised by the Stabilization contract.
type StabilizationLiquidateIterator struct {
	Event *StabilizationLiquidate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationLiquidateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationLiquidate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationLiquidate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationLiquidateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationLiquidateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationLiquidate represents a Liquidate event raised by the Stabilization contract.
type StabilizationLiquidate struct {
	Account    common.Address
	Liquidator common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLiquidate is a free log retrieval operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
//
// Solidity: event Liquidate(address indexed account, address liquidator)
func (_Stabilization *StabilizationFilterer) FilterLiquidate(opts *bind.FilterOpts, account []common.Address) (*StabilizationLiquidateIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Liquidate", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationLiquidateIterator{contract: _Stabilization.contract, event: "Liquidate", logs: logs, sub: sub}, nil
}

// WatchLiquidate is a free log subscription operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
//
// Solidity: event Liquidate(address indexed account, address liquidator)
func (_Stabilization *StabilizationFilterer) WatchLiquidate(opts *bind.WatchOpts, sink chan<- *StabilizationLiquidate, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Liquidate", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationLiquidate)
				if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLiquidate is a log parse operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
//
// Solidity: event Liquidate(address indexed account, address liquidator)
func (_Stabilization *StabilizationFilterer) ParseLiquidate(log types.Log) (*StabilizationLiquidate, error) {
	event := new(StabilizationLiquidate)
	if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the Stabilization contract.
type StabilizationRepayIterator struct {
	Event *StabilizationRepay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationRepayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationRepay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationRepay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationRepayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationRepayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationRepay represents a Repay event raised by the Stabilization contract.
type StabilizationRepay struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRepay is a free log retrieval operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
//
// Solidity: event Repay(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterRepay(opts *bind.FilterOpts, account []common.Address) (*StabilizationRepayIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Repay", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationRepayIterator{contract: _Stabilization.contract, event: "Repay", logs: logs, sub: sub}, nil
}

// WatchRepay is a free log subscription operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
//
// Solidity: event Repay(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchRepay(opts *bind.WatchOpts, sink chan<- *StabilizationRepay, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Repay", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationRepay)
				if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRepay is a log parse operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
//
// Solidity: event Repay(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseRepay(log types.Log) (*StabilizationRepay, error) {
	event := new(StabilizationRepay)
	if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StabilizationWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Stabilization contract.
type StabilizationWithdrawIterator struct {
	Event *StabilizationWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StabilizationWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StabilizationWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StabilizationWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StabilizationWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StabilizationWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StabilizationWithdraw represents a Withdraw event raised by the Stabilization contract.
type StabilizationWithdraw struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) FilterWithdraw(opts *bind.FilterOpts, account []common.Address) (*StabilizationWithdrawIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Withdraw", accountRule)
	if err != nil {
		return nil, err
	}
	return &StabilizationWithdrawIterator{contract: _Stabilization.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StabilizationWithdraw, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Withdraw", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StabilizationWithdraw)
				if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed account, uint256 amount)
func (_Stabilization *StabilizationFilterer) ParseWithdraw(log types.Log) (*StabilizationWithdraw, error) {
	event := new(StabilizationWithdraw)
	if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeableVestingLogicMetaData contains all meta data concerning the StakeableVestingLogic contract.
var StakeableVestingLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
	Bin: "",
}

// StakeableVestingLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingLogicMetaData.ABI instead.
var StakeableVestingLogicABI = StakeableVestingLogicMetaData.ABI

// Deprecated: Use StakeableVestingLogicMetaData.Sigs instead.
// StakeableVestingLogicFuncSigs maps the 4-byte function signature to its string representation.
var StakeableVestingLogicFuncSigs = StakeableVestingLogicMetaData.Sigs

// StakeableVestingLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingLogicMetaData.Bin instead.
var StakeableVestingLogicBin = StakeableVestingLogicMetaData.Bin

// DeployStakeableVestingLogic deploys a new Ethereum contract, binding an instance of StakeableVestingLogic to it.
func DeployStakeableVestingLogic(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *StakeableVestingLogic, error) {
	parsed, err := StakeableVestingLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeableVestingLogicBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeableVestingLogic{StakeableVestingLogicCaller: StakeableVestingLogicCaller{contract: contract}, StakeableVestingLogicTransactor: StakeableVestingLogicTransactor{contract: contract}, StakeableVestingLogicFilterer: StakeableVestingLogicFilterer{contract: contract}}, nil
}

// StakeableVestingLogic is an auto generated Go binding around an Ethereum contract.
type StakeableVestingLogic struct {
	StakeableVestingLogicCaller     // Read-only binding to the contract
	StakeableVestingLogicTransactor // Write-only binding to the contract
	StakeableVestingLogicFilterer   // Log filterer for contract events
}

// StakeableVestingLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeableVestingLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeableVestingLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeableVestingLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeableVestingLogicSession struct {
	Contract     *StakeableVestingLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// StakeableVestingLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeableVestingLogicCallerSession struct {
	Contract *StakeableVestingLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// StakeableVestingLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeableVestingLogicTransactorSession struct {
	Contract     *StakeableVestingLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// StakeableVestingLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeableVestingLogicRaw struct {
	Contract *StakeableVestingLogic // Generic contract binding to access the raw methods on
}

// StakeableVestingLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeableVestingLogicCallerRaw struct {
	Contract *StakeableVestingLogicCaller // Generic read-only contract binding to access the raw methods on
}

// StakeableVestingLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeableVestingLogicTransactorRaw struct {
	Contract *StakeableVestingLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeableVestingLogic creates a new instance of StakeableVestingLogic, bound to a specific deployed contract.
func NewStakeableVestingLogic(address common.Address, backend bind.ContractBackend) (*StakeableVestingLogic, error) {
	contract, err := bindStakeableVestingLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogic{StakeableVestingLogicCaller: StakeableVestingLogicCaller{contract: contract}, StakeableVestingLogicTransactor: StakeableVestingLogicTransactor{contract: contract}, StakeableVestingLogicFilterer: StakeableVestingLogicFilterer{contract: contract}}, nil
}

// NewStakeableVestingLogicCaller creates a new read-only instance of StakeableVestingLogic, bound to a specific deployed contract.
func NewStakeableVestingLogicCaller(address common.Address, caller bind.ContractCaller) (*StakeableVestingLogicCaller, error) {
	contract, err := bindStakeableVestingLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicCaller{contract: contract}, nil
}

// NewStakeableVestingLogicTransactor creates a new write-only instance of StakeableVestingLogic, bound to a specific deployed contract.
func NewStakeableVestingLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeableVestingLogicTransactor, error) {
	contract, err := bindStakeableVestingLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicTransactor{contract: contract}, nil
}

// NewStakeableVestingLogicFilterer creates a new log filterer instance of StakeableVestingLogic, bound to a specific deployed contract.
func NewStakeableVestingLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeableVestingLogicFilterer, error) {
	contract, err := bindStakeableVestingLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicFilterer{contract: contract}, nil
}

// bindStakeableVestingLogic binds a generic wrapper to an already deployed contract.
func bindStakeableVestingLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeableVestingLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingLogic *StakeableVestingLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingLogic.Contract.StakeableVestingLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingLogic *StakeableVestingLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.StakeableVestingLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingLogic *StakeableVestingLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.StakeableVestingLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingLogic *StakeableVestingLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingLogic *StakeableVestingLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingLogic *StakeableVestingLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.contract.Transact(opts, method, params...)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) ContractTotalValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) ContractTotalValue() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.ContractTotalValue(&_StakeableVestingLogic.CallOpts)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) ContractTotalValue() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.ContractTotalValue(&_StakeableVestingLogic.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) GetBeneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "getBeneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogicSession) GetBeneficiary() (common.Address, error) {
	return _StakeableVestingLogic.Contract.GetBeneficiary(&_StakeableVestingLogic.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) GetBeneficiary() (common.Address, error) {
	return _StakeableVestingLogic.Contract.GetBeneficiary(&_StakeableVestingLogic.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogicCaller) GetContract(opts *bind.CallOpts) (ContractBaseContract, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "getContract")

	if err != nil {
		return *new(ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogicSession) GetContract() (ContractBaseContract, error) {
	return _StakeableVestingLogic.Contract.GetContract(&_StakeableVestingLogic.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) GetContract() (ContractBaseContract, error) {
	return _StakeableVestingLogic.Contract.GetContract(&_StakeableVestingLogic.CallOpts)
}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogic *StakeableVestingLogicCaller) GetLinkedValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogic *StakeableVestingLogicSession) GetLinkedValidators() ([]common.Address, error) {
	return _StakeableVestingLogic.Contract.GetLinkedValidators(&_StakeableVestingLogic.CallOpts)
}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) GetLinkedValidators() ([]common.Address, error) {
	return _StakeableVestingLogic.Contract.GetLinkedValidators(&_StakeableVestingLogic.CallOpts)
}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) GetManagerContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogicSession) GetManagerContractAddress() (common.Address, error) {
	return _StakeableVestingLogic.Contract.GetManagerContractAddress(&_StakeableVestingLogic.CallOpts)
}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) GetManagerContractAddress() (common.Address, error) {
	return _StakeableVestingLogic.Contract.GetManagerContractAddress(&_StakeableVestingLogic.CallOpts)
}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) LiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) LiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.LiquidBalance(&_StakeableVestingLogic.CallOpts, _validator)
}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) LiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.LiquidBalance(&_StakeableVestingLogic.CallOpts, _validator)
}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) LockedLiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) LockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.LockedLiquidBalance(&_StakeableVestingLogic.CallOpts, _validator)
}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) LockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.LockedLiquidBalance(&_StakeableVestingLogic.CallOpts, _validator)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) UnclaimedRewards(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "unclaimedRewards", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) UnclaimedRewards(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.UnclaimedRewards(&_StakeableVestingLogic.CallOpts, _validator)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) UnclaimedRewards(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.UnclaimedRewards(&_StakeableVestingLogic.CallOpts, _validator)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) UnclaimedRewards0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "unclaimedRewards0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) UnclaimedRewards0() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.UnclaimedRewards0(&_StakeableVestingLogic.CallOpts)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) UnclaimedRewards0() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.UnclaimedRewards0(&_StakeableVestingLogic.CallOpts)
}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) UnlockedLiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) UnlockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.UnlockedLiquidBalance(&_StakeableVestingLogic.CallOpts, _validator)
}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) UnlockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogic.Contract.UnlockedLiquidBalance(&_StakeableVestingLogic.CallOpts, _validator)
}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) VestedFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "vestedFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) VestedFunds() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.VestedFunds(&_StakeableVestingLogic.CallOpts)
}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) VestedFunds() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.VestedFunds(&_StakeableVestingLogic.CallOpts)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCaller) WithdrawableVestedFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogic.contract.Call(opts, &out, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) WithdrawableVestedFunds() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.WithdrawableVestedFunds(&_StakeableVestingLogic.CallOpts)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicCallerSession) WithdrawableVestedFunds() (*big.Int, error) {
	return _StakeableVestingLogic.Contract.WithdrawableVestedFunds(&_StakeableVestingLogic.CallOpts)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) Bond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "bond", _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Bond(&_StakeableVestingLogic.TransactOpts, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Bond(&_StakeableVestingLogic.TransactOpts, _validator, _amount)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ChangeContractBeneficiary(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "changeContractBeneficiary", _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ChangeContractBeneficiary(_recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ChangeContractBeneficiary(&_StakeableVestingLogic.TransactOpts, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ChangeContractBeneficiary(_recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ChangeContractBeneficiary(&_StakeableVestingLogic.TransactOpts, _recipient)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "claimRewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ClaimRewards() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ClaimRewards(&_StakeableVestingLogic.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ClaimRewards(&_StakeableVestingLogic.TransactOpts)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ClaimRewards0(opts *bind.TransactOpts, _validator common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "claimRewards0", _validator)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ClaimRewards0(_validator common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ClaimRewards0(&_StakeableVestingLogic.TransactOpts, _validator)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ClaimRewards0(_validator common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ClaimRewards0(&_StakeableVestingLogic.TransactOpts, _validator)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) CreateContract(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) CreateContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.CreateContract(&_StakeableVestingLogic.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) CreateContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.CreateContract(&_StakeableVestingLogic.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ReleaseAllLNTN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "releaseAllLNTN")
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ReleaseAllLNTN() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseAllLNTN(&_StakeableVestingLogic.TransactOpts)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ReleaseAllLNTN() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseAllLNTN(&_StakeableVestingLogic.TransactOpts)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ReleaseAllNTN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "releaseAllNTN")
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ReleaseAllNTN() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseAllNTN(&_StakeableVestingLogic.TransactOpts)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ReleaseAllNTN() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseAllNTN(&_StakeableVestingLogic.TransactOpts)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ReleaseFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "releaseFunds")
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ReleaseFunds() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseFunds(&_StakeableVestingLogic.TransactOpts)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ReleaseFunds() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseFunds(&_StakeableVestingLogic.TransactOpts)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ReleaseLNTN(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "releaseLNTN", _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ReleaseLNTN(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseLNTN(&_StakeableVestingLogic.TransactOpts, _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ReleaseLNTN(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseLNTN(&_StakeableVestingLogic.TransactOpts, _validator, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) ReleaseNTN(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "releaseNTN", _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) ReleaseNTN(_amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseNTN(&_StakeableVestingLogic.TransactOpts, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) ReleaseNTN(_amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.ReleaseNTN(&_StakeableVestingLogic.TransactOpts, _amount)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) SetManagerContract(opts *bind.TransactOpts, _managerContract common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "setManagerContract", _managerContract)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) SetManagerContract(_managerContract common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.SetManagerContract(&_StakeableVestingLogic.TransactOpts, _managerContract)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) SetManagerContract(_managerContract common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.SetManagerContract(&_StakeableVestingLogic.TransactOpts, _managerContract)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) Unbond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "unbond", _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Unbond(&_StakeableVestingLogic.TransactOpts, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Unbond(&_StakeableVestingLogic.TransactOpts, _validator, _amount)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) UpdateFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "updateFunds")
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) UpdateFunds() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.UpdateFunds(&_StakeableVestingLogic.TransactOpts)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) UpdateFunds() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.UpdateFunds(&_StakeableVestingLogic.TransactOpts)
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) UpdateFundsAndGetContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.Transact(opts, "updateFundsAndGetContract")
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogicSession) UpdateFundsAndGetContract() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.UpdateFundsAndGetContract(&_StakeableVestingLogic.TransactOpts)
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) UpdateFundsAndGetContract() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.UpdateFundsAndGetContract(&_StakeableVestingLogic.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Fallback(&_StakeableVestingLogic.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Fallback(&_StakeableVestingLogic.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogic.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogicSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Receive(&_StakeableVestingLogic.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogicTransactorSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingLogic.Contract.Receive(&_StakeableVestingLogic.TransactOpts)
}

// StakeableVestingLogicFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the StakeableVestingLogic contract.
type StakeableVestingLogicFundsReleasedIterator struct {
	Event *StakeableVestingLogicFundsReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeableVestingLogicFundsReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeableVestingLogicFundsReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeableVestingLogicFundsReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeableVestingLogicFundsReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeableVestingLogicFundsReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeableVestingLogicFundsReleased represents a FundsReleased event raised by the StakeableVestingLogic contract.
type StakeableVestingLogicFundsReleased struct {
	To     common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_StakeableVestingLogic *StakeableVestingLogicFilterer) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*StakeableVestingLogicFundsReleasedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _StakeableVestingLogic.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicFundsReleasedIterator{contract: _StakeableVestingLogic.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
}

// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_StakeableVestingLogic *StakeableVestingLogicFilterer) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *StakeableVestingLogicFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _StakeableVestingLogic.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeableVestingLogicFundsReleased)
				if err := _StakeableVestingLogic.contract.UnpackLog(event, "FundsReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_StakeableVestingLogic *StakeableVestingLogicFilterer) ParseFundsReleased(log types.Log) (*StakeableVestingLogicFundsReleased, error) {
	event := new(StakeableVestingLogicFundsReleased)
	if err := _StakeableVestingLogic.contract.UnpackLog(event, "FundsReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeableVestingLogicTestMetaData contains all meta data concerning the StakeableVestingLogicTest contract.
var StakeableVestingLogicTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"cfae4141": "clearValidators()",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
	Bin: "",
}

// StakeableVestingLogicTestABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingLogicTestMetaData.ABI instead.
var StakeableVestingLogicTestABI = StakeableVestingLogicTestMetaData.ABI

// Deprecated: Use StakeableVestingLogicTestMetaData.Sigs instead.
// StakeableVestingLogicTestFuncSigs maps the 4-byte function signature to its string representation.
var StakeableVestingLogicTestFuncSigs = StakeableVestingLogicTestMetaData.Sigs

// StakeableVestingLogicTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingLogicTestMetaData.Bin instead.
var StakeableVestingLogicTestBin = StakeableVestingLogicTestMetaData.Bin

// DeployStakeableVestingLogicTest deploys a new Ethereum contract, binding an instance of StakeableVestingLogicTest to it.
func DeployStakeableVestingLogicTest(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *StakeableVestingLogicTest, error) {
	parsed, err := StakeableVestingLogicTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeableVestingLogicTestBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeableVestingLogicTest{StakeableVestingLogicTestCaller: StakeableVestingLogicTestCaller{contract: contract}, StakeableVestingLogicTestTransactor: StakeableVestingLogicTestTransactor{contract: contract}, StakeableVestingLogicTestFilterer: StakeableVestingLogicTestFilterer{contract: contract}}, nil
}

// StakeableVestingLogicTest is an auto generated Go binding around an Ethereum contract.
type StakeableVestingLogicTest struct {
	StakeableVestingLogicTestCaller     // Read-only binding to the contract
	StakeableVestingLogicTestTransactor // Write-only binding to the contract
	StakeableVestingLogicTestFilterer   // Log filterer for contract events
}

// StakeableVestingLogicTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeableVestingLogicTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingLogicTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeableVestingLogicTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingLogicTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeableVestingLogicTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingLogicTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeableVestingLogicTestSession struct {
	Contract     *StakeableVestingLogicTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// StakeableVestingLogicTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeableVestingLogicTestCallerSession struct {
	Contract *StakeableVestingLogicTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// StakeableVestingLogicTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeableVestingLogicTestTransactorSession struct {
	Contract     *StakeableVestingLogicTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// StakeableVestingLogicTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeableVestingLogicTestRaw struct {
	Contract *StakeableVestingLogicTest // Generic contract binding to access the raw methods on
}

// StakeableVestingLogicTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeableVestingLogicTestCallerRaw struct {
	Contract *StakeableVestingLogicTestCaller // Generic read-only contract binding to access the raw methods on
}

// StakeableVestingLogicTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeableVestingLogicTestTransactorRaw struct {
	Contract *StakeableVestingLogicTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeableVestingLogicTest creates a new instance of StakeableVestingLogicTest, bound to a specific deployed contract.
func NewStakeableVestingLogicTest(address common.Address, backend bind.ContractBackend) (*StakeableVestingLogicTest, error) {
	contract, err := bindStakeableVestingLogicTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicTest{StakeableVestingLogicTestCaller: StakeableVestingLogicTestCaller{contract: contract}, StakeableVestingLogicTestTransactor: StakeableVestingLogicTestTransactor{contract: contract}, StakeableVestingLogicTestFilterer: StakeableVestingLogicTestFilterer{contract: contract}}, nil
}

// NewStakeableVestingLogicTestCaller creates a new read-only instance of StakeableVestingLogicTest, bound to a specific deployed contract.
func NewStakeableVestingLogicTestCaller(address common.Address, caller bind.ContractCaller) (*StakeableVestingLogicTestCaller, error) {
	contract, err := bindStakeableVestingLogicTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicTestCaller{contract: contract}, nil
}

// NewStakeableVestingLogicTestTransactor creates a new write-only instance of StakeableVestingLogicTest, bound to a specific deployed contract.
func NewStakeableVestingLogicTestTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeableVestingLogicTestTransactor, error) {
	contract, err := bindStakeableVestingLogicTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicTestTransactor{contract: contract}, nil
}

// NewStakeableVestingLogicTestFilterer creates a new log filterer instance of StakeableVestingLogicTest, bound to a specific deployed contract.
func NewStakeableVestingLogicTestFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeableVestingLogicTestFilterer, error) {
	contract, err := bindStakeableVestingLogicTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicTestFilterer{contract: contract}, nil
}

// bindStakeableVestingLogicTest binds a generic wrapper to an already deployed contract.
func bindStakeableVestingLogicTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeableVestingLogicTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingLogicTest *StakeableVestingLogicTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingLogicTest.Contract.StakeableVestingLogicTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingLogicTest *StakeableVestingLogicTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.StakeableVestingLogicTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingLogicTest *StakeableVestingLogicTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.StakeableVestingLogicTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingLogicTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.contract.Transact(opts, method, params...)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) ContractTotalValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ContractTotalValue() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.ContractTotalValue(&_StakeableVestingLogicTest.CallOpts)
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) ContractTotalValue() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.ContractTotalValue(&_StakeableVestingLogicTest.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) GetBeneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "getBeneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) GetBeneficiary() (common.Address, error) {
	return _StakeableVestingLogicTest.Contract.GetBeneficiary(&_StakeableVestingLogicTest.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) GetBeneficiary() (common.Address, error) {
	return _StakeableVestingLogicTest.Contract.GetBeneficiary(&_StakeableVestingLogicTest.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) GetContract(opts *bind.CallOpts) (ContractBaseContract, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "getContract")

	if err != nil {
		return *new(ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) GetContract() (ContractBaseContract, error) {
	return _StakeableVestingLogicTest.Contract.GetContract(&_StakeableVestingLogicTest.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) GetContract() (ContractBaseContract, error) {
	return _StakeableVestingLogicTest.Contract.GetContract(&_StakeableVestingLogicTest.CallOpts)
}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) GetLinkedValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) GetLinkedValidators() ([]common.Address, error) {
	return _StakeableVestingLogicTest.Contract.GetLinkedValidators(&_StakeableVestingLogicTest.CallOpts)
}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) GetLinkedValidators() ([]common.Address, error) {
	return _StakeableVestingLogicTest.Contract.GetLinkedValidators(&_StakeableVestingLogicTest.CallOpts)
}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) GetManagerContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) GetManagerContractAddress() (common.Address, error) {
	return _StakeableVestingLogicTest.Contract.GetManagerContractAddress(&_StakeableVestingLogicTest.CallOpts)
}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) GetManagerContractAddress() (common.Address, error) {
	return _StakeableVestingLogicTest.Contract.GetManagerContractAddress(&_StakeableVestingLogicTest.CallOpts)
}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) LiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) LiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.LiquidBalance(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) LiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.LiquidBalance(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) LockedLiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) LockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.LockedLiquidBalance(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) LockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.LockedLiquidBalance(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) UnclaimedRewards(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "unclaimedRewards", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) UnclaimedRewards(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.UnclaimedRewards(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) UnclaimedRewards(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.UnclaimedRewards(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) UnclaimedRewards0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "unclaimedRewards0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) UnclaimedRewards0() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.UnclaimedRewards0(&_StakeableVestingLogicTest.CallOpts)
}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) UnclaimedRewards0() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.UnclaimedRewards0(&_StakeableVestingLogicTest.CallOpts)
}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) UnlockedLiquidBalance(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) UnlockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.UnlockedLiquidBalance(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) UnlockedLiquidBalance(_validator common.Address) (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.UnlockedLiquidBalance(&_StakeableVestingLogicTest.CallOpts, _validator)
}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) VestedFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "vestedFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) VestedFunds() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.VestedFunds(&_StakeableVestingLogicTest.CallOpts)
}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) VestedFunds() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.VestedFunds(&_StakeableVestingLogicTest.CallOpts)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCaller) WithdrawableVestedFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingLogicTest.contract.Call(opts, &out, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) WithdrawableVestedFunds() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.WithdrawableVestedFunds(&_StakeableVestingLogicTest.CallOpts)
}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestCallerSession) WithdrawableVestedFunds() (*big.Int, error) {
	return _StakeableVestingLogicTest.Contract.WithdrawableVestedFunds(&_StakeableVestingLogicTest.CallOpts)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) Bond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "bond", _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Bond(&_StakeableVestingLogicTest.TransactOpts, _validator, _amount)
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) Bond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Bond(&_StakeableVestingLogicTest.TransactOpts, _validator, _amount)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ChangeContractBeneficiary(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "changeContractBeneficiary", _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ChangeContractBeneficiary(_recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ChangeContractBeneficiary(&_StakeableVestingLogicTest.TransactOpts, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ChangeContractBeneficiary(_recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ChangeContractBeneficiary(&_StakeableVestingLogicTest.TransactOpts, _recipient)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "claimRewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ClaimRewards() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ClaimRewards(&_StakeableVestingLogicTest.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ClaimRewards(&_StakeableVestingLogicTest.TransactOpts)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ClaimRewards0(opts *bind.TransactOpts, _validator common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "claimRewards0", _validator)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ClaimRewards0(_validator common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ClaimRewards0(&_StakeableVestingLogicTest.TransactOpts, _validator)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ClaimRewards0(_validator common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ClaimRewards0(&_StakeableVestingLogicTest.TransactOpts, _validator)
}

// ClearValidators is a paid mutator transaction binding the contract method 0xcfae4141.
//
// Solidity: function clearValidators() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ClearValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "clearValidators")
}

// ClearValidators is a paid mutator transaction binding the contract method 0xcfae4141.
//
// Solidity: function clearValidators() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ClearValidators() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ClearValidators(&_StakeableVestingLogicTest.TransactOpts)
}

// ClearValidators is a paid mutator transaction binding the contract method 0xcfae4141.
//
// Solidity: function clearValidators() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ClearValidators() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ClearValidators(&_StakeableVestingLogicTest.TransactOpts)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) CreateContract(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) CreateContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.CreateContract(&_StakeableVestingLogicTest.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) CreateContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.CreateContract(&_StakeableVestingLogicTest.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ReleaseAllLNTN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "releaseAllLNTN")
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ReleaseAllLNTN() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseAllLNTN(&_StakeableVestingLogicTest.TransactOpts)
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ReleaseAllLNTN() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseAllLNTN(&_StakeableVestingLogicTest.TransactOpts)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ReleaseAllNTN(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "releaseAllNTN")
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ReleaseAllNTN() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseAllNTN(&_StakeableVestingLogicTest.TransactOpts)
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ReleaseAllNTN() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseAllNTN(&_StakeableVestingLogicTest.TransactOpts)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ReleaseFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "releaseFunds")
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ReleaseFunds() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseFunds(&_StakeableVestingLogicTest.TransactOpts)
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ReleaseFunds() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseFunds(&_StakeableVestingLogicTest.TransactOpts)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ReleaseLNTN(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "releaseLNTN", _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ReleaseLNTN(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseLNTN(&_StakeableVestingLogicTest.TransactOpts, _validator, _amount)
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ReleaseLNTN(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseLNTN(&_StakeableVestingLogicTest.TransactOpts, _validator, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) ReleaseNTN(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "releaseNTN", _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) ReleaseNTN(_amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseNTN(&_StakeableVestingLogicTest.TransactOpts, _amount)
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) ReleaseNTN(_amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.ReleaseNTN(&_StakeableVestingLogicTest.TransactOpts, _amount)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) SetManagerContract(opts *bind.TransactOpts, _managerContract common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "setManagerContract", _managerContract)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) SetManagerContract(_managerContract common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.SetManagerContract(&_StakeableVestingLogicTest.TransactOpts, _managerContract)
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) SetManagerContract(_managerContract common.Address) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.SetManagerContract(&_StakeableVestingLogicTest.TransactOpts, _managerContract)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) Unbond(opts *bind.TransactOpts, _validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "unbond", _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Unbond(&_StakeableVestingLogicTest.TransactOpts, _validator, _amount)
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) Unbond(_validator common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Unbond(&_StakeableVestingLogicTest.TransactOpts, _validator, _amount)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) UpdateFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "updateFunds")
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) UpdateFunds() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.UpdateFunds(&_StakeableVestingLogicTest.TransactOpts)
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) UpdateFunds() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.UpdateFunds(&_StakeableVestingLogicTest.TransactOpts)
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) UpdateFundsAndGetContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.Transact(opts, "updateFundsAndGetContract")
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) UpdateFundsAndGetContract() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.UpdateFundsAndGetContract(&_StakeableVestingLogicTest.TransactOpts)
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) UpdateFundsAndGetContract() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.UpdateFundsAndGetContract(&_StakeableVestingLogicTest.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Fallback(&_StakeableVestingLogicTest.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Fallback(&_StakeableVestingLogicTest.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingLogicTest.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Receive(&_StakeableVestingLogicTest.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTestTransactorSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingLogicTest.Contract.Receive(&_StakeableVestingLogicTest.TransactOpts)
}

// StakeableVestingLogicTestFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the StakeableVestingLogicTest contract.
type StakeableVestingLogicTestFundsReleasedIterator struct {
	Event *StakeableVestingLogicTestFundsReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeableVestingLogicTestFundsReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeableVestingLogicTestFundsReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeableVestingLogicTestFundsReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeableVestingLogicTestFundsReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeableVestingLogicTestFundsReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeableVestingLogicTestFundsReleased represents a FundsReleased event raised by the StakeableVestingLogicTest contract.
type StakeableVestingLogicTestFundsReleased struct {
	To     common.Address
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestFilterer) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*StakeableVestingLogicTestFundsReleasedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _StakeableVestingLogicTest.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingLogicTestFundsReleasedIterator{contract: _StakeableVestingLogicTest.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
}

// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestFilterer) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *StakeableVestingLogicTestFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _StakeableVestingLogicTest.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeableVestingLogicTestFundsReleased)
				if err := _StakeableVestingLogicTest.contract.UnpackLog(event, "FundsReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
//
// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
func (_StakeableVestingLogicTest *StakeableVestingLogicTestFilterer) ParseFundsReleased(log types.Log) (*StakeableVestingLogicTestFundsReleased, error) {
	event := new(StakeableVestingLogicTestFundsReleased)
	if err := _StakeableVestingLogicTest.contract.UnpackLog(event, "FundsReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeableVestingManagerMetaData contains all meta data concerning the StakeableVestingManager contract.
var StakeableVestingManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniqueContractID\",\"type\":\"uint256\"}],\"name\":\"getContractAccount\",\"outputs\":[{\"internalType\":\"contractIStakeableVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContractAccount\",\"outputs\":[{\"internalType\":\"contractIStakeableVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContractAccounts\",\"outputs\":[{\"internalType\":\"contractIStakeableVesting[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setStakeableVestingLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeableVestingLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"a0a8e460": "contractVersion()",
		"5cdc502d": "getContractAccount(address,uint256)",
		"0bdeeda4": "getContractAccount(uint256)",
		"531ffd2f": "getContractAccounts(address)",
		"213fe2b7": "getContracts(address)",
		"fca78d11": "getUniqueContractID(address,uint256)",
		"2d8d17c6": "newContract(address,uint256,uint256,uint256,uint256)",
		"2c272d38": "setStakeableVestingLogicContract(address)",
		"a04ab5f8": "stakeableVestingLogicContract()",
		"635bf933": "totalContracts(address)",
	},
	Bin: "",
}

// StakeableVestingManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingManagerMetaData.ABI instead.
var StakeableVestingManagerABI = StakeableVestingManagerMetaData.ABI

// Deprecated: Use StakeableVestingManagerMetaData.Sigs instead.
// StakeableVestingManagerFuncSigs maps the 4-byte function signature to its string representation.
var StakeableVestingManagerFuncSigs = StakeableVestingManagerMetaData.Sigs

// StakeableVestingManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingManagerMetaData.Bin instead.
var StakeableVestingManagerBin = StakeableVestingManagerMetaData.Bin

// DeployStakeableVestingManager deploys a new Ethereum contract, binding an instance of StakeableVestingManager to it.
func DeployStakeableVestingManager(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *StakeableVestingManager, error) {
	parsed, err := StakeableVestingManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeableVestingManagerBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeableVestingManager{StakeableVestingManagerCaller: StakeableVestingManagerCaller{contract: contract}, StakeableVestingManagerTransactor: StakeableVestingManagerTransactor{contract: contract}, StakeableVestingManagerFilterer: StakeableVestingManagerFilterer{contract: contract}}, nil
}

// StakeableVestingManager is an auto generated Go binding around an Ethereum contract.
type StakeableVestingManager struct {
	StakeableVestingManagerCaller     // Read-only binding to the contract
	StakeableVestingManagerTransactor // Write-only binding to the contract
	StakeableVestingManagerFilterer   // Log filterer for contract events
}

// StakeableVestingManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeableVestingManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeableVestingManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeableVestingManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeableVestingManagerSession struct {
	Contract     *StakeableVestingManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StakeableVestingManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeableVestingManagerCallerSession struct {
	Contract *StakeableVestingManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// StakeableVestingManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeableVestingManagerTransactorSession struct {
	Contract     *StakeableVestingManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// StakeableVestingManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeableVestingManagerRaw struct {
	Contract *StakeableVestingManager // Generic contract binding to access the raw methods on
}

// StakeableVestingManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeableVestingManagerCallerRaw struct {
	Contract *StakeableVestingManagerCaller // Generic read-only contract binding to access the raw methods on
}

// StakeableVestingManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeableVestingManagerTransactorRaw struct {
	Contract *StakeableVestingManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeableVestingManager creates a new instance of StakeableVestingManager, bound to a specific deployed contract.
func NewStakeableVestingManager(address common.Address, backend bind.ContractBackend) (*StakeableVestingManager, error) {
	contract, err := bindStakeableVestingManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingManager{StakeableVestingManagerCaller: StakeableVestingManagerCaller{contract: contract}, StakeableVestingManagerTransactor: StakeableVestingManagerTransactor{contract: contract}, StakeableVestingManagerFilterer: StakeableVestingManagerFilterer{contract: contract}}, nil
}

// NewStakeableVestingManagerCaller creates a new read-only instance of StakeableVestingManager, bound to a specific deployed contract.
func NewStakeableVestingManagerCaller(address common.Address, caller bind.ContractCaller) (*StakeableVestingManagerCaller, error) {
	contract, err := bindStakeableVestingManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingManagerCaller{contract: contract}, nil
}

// NewStakeableVestingManagerTransactor creates a new write-only instance of StakeableVestingManager, bound to a specific deployed contract.
func NewStakeableVestingManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeableVestingManagerTransactor, error) {
	contract, err := bindStakeableVestingManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingManagerTransactor{contract: contract}, nil
}

// NewStakeableVestingManagerFilterer creates a new log filterer instance of StakeableVestingManager, bound to a specific deployed contract.
func NewStakeableVestingManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeableVestingManagerFilterer, error) {
	contract, err := bindStakeableVestingManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingManagerFilterer{contract: contract}, nil
}

// bindStakeableVestingManager binds a generic wrapper to an already deployed contract.
func bindStakeableVestingManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeableVestingManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingManager *StakeableVestingManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingManager.Contract.StakeableVestingManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingManager *StakeableVestingManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.StakeableVestingManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingManager *StakeableVestingManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.StakeableVestingManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingManager *StakeableVestingManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingManager *StakeableVestingManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingManager *StakeableVestingManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.contract.Transact(opts, method, params...)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerCaller) ContractVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "contractVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerSession) ContractVersion() (*big.Int, error) {
	return _StakeableVestingManager.Contract.ContractVersion(&_StakeableVestingManager.CallOpts)
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) ContractVersion() (*big.Int, error) {
	return _StakeableVestingManager.Contract.ContractVersion(&_StakeableVestingManager.CallOpts)
}

// GetContractAccount is a free data retrieval call binding the contract method 0x0bdeeda4.
//
// Solidity: function getContractAccount(uint256 _uniqueContractID) view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerCaller) GetContractAccount(opts *bind.CallOpts, _uniqueContractID *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "getContractAccount", _uniqueContractID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractAccount is a free data retrieval call binding the contract method 0x0bdeeda4.
//
// Solidity: function getContractAccount(uint256 _uniqueContractID) view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerSession) GetContractAccount(_uniqueContractID *big.Int) (common.Address, error) {
	return _StakeableVestingManager.Contract.GetContractAccount(&_StakeableVestingManager.CallOpts, _uniqueContractID)
}

// GetContractAccount is a free data retrieval call binding the contract method 0x0bdeeda4.
//
// Solidity: function getContractAccount(uint256 _uniqueContractID) view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) GetContractAccount(_uniqueContractID *big.Int) (common.Address, error) {
	return _StakeableVestingManager.Contract.GetContractAccount(&_StakeableVestingManager.CallOpts, _uniqueContractID)
}

// GetContractAccount0 is a free data retrieval call binding the contract method 0x5cdc502d.
//
// Solidity: function getContractAccount(address _beneficiary, uint256 _id) view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerCaller) GetContractAccount0(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "getContractAccount0", _beneficiary, _id)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractAccount0 is a free data retrieval call binding the contract method 0x5cdc502d.
//
// Solidity: function getContractAccount(address _beneficiary, uint256 _id) view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerSession) GetContractAccount0(_beneficiary common.Address, _id *big.Int) (common.Address, error) {
	return _StakeableVestingManager.Contract.GetContractAccount0(&_StakeableVestingManager.CallOpts, _beneficiary, _id)
}

// GetContractAccount0 is a free data retrieval call binding the contract method 0x5cdc502d.
//
// Solidity: function getContractAccount(address _beneficiary, uint256 _id) view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) GetContractAccount0(_beneficiary common.Address, _id *big.Int) (common.Address, error) {
	return _StakeableVestingManager.Contract.GetContractAccount0(&_StakeableVestingManager.CallOpts, _beneficiary, _id)
}

// GetContractAccounts is a free data retrieval call binding the contract method 0x531ffd2f.
//
// Solidity: function getContractAccounts(address _beneficiary) view returns(address[])
func (_StakeableVestingManager *StakeableVestingManagerCaller) GetContractAccounts(opts *bind.CallOpts, _beneficiary common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "getContractAccounts", _beneficiary)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetContractAccounts is a free data retrieval call binding the contract method 0x531ffd2f.
//
// Solidity: function getContractAccounts(address _beneficiary) view returns(address[])
func (_StakeableVestingManager *StakeableVestingManagerSession) GetContractAccounts(_beneficiary common.Address) ([]common.Address, error) {
	return _StakeableVestingManager.Contract.GetContractAccounts(&_StakeableVestingManager.CallOpts, _beneficiary)
}

// GetContractAccounts is a free data retrieval call binding the contract method 0x531ffd2f.
//
// Solidity: function getContractAccounts(address _beneficiary) view returns(address[])
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) GetContractAccounts(_beneficiary common.Address) ([]common.Address, error) {
	return _StakeableVestingManager.Contract.GetContractAccounts(&_StakeableVestingManager.CallOpts, _beneficiary)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakeableVestingManager *StakeableVestingManagerCaller) GetContracts(opts *bind.CallOpts, _beneficiary common.Address) ([]ContractBaseContract, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)

	return out0, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakeableVestingManager *StakeableVestingManagerSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _StakeableVestingManager.Contract.GetContracts(&_StakeableVestingManager.CallOpts, _beneficiary)
}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) GetContracts(_beneficiary common.Address) ([]ContractBaseContract, error) {
	return _StakeableVestingManager.Contract.GetContracts(&_StakeableVestingManager.CallOpts, _beneficiary)
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerCaller) GetUniqueContractID(opts *bind.CallOpts, _beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerSession) GetUniqueContractID(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _StakeableVestingManager.Contract.GetUniqueContractID(&_StakeableVestingManager.CallOpts, _beneficiary, _id)
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) GetUniqueContractID(_beneficiary common.Address, _id *big.Int) (*big.Int, error) {
	return _StakeableVestingManager.Contract.GetUniqueContractID(&_StakeableVestingManager.CallOpts, _beneficiary, _id)
}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerCaller) StakeableVestingLogicContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "stakeableVestingLogicContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerSession) StakeableVestingLogicContract() (common.Address, error) {
	return _StakeableVestingManager.Contract.StakeableVestingLogicContract(&_StakeableVestingManager.CallOpts)
}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) StakeableVestingLogicContract() (common.Address, error) {
	return _StakeableVestingManager.Contract.StakeableVestingLogicContract(&_StakeableVestingManager.CallOpts)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerCaller) TotalContracts(opts *bind.CallOpts, _beneficiary common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeableVestingManager.contract.Call(opts, &out, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _StakeableVestingManager.Contract.TotalContracts(&_StakeableVestingManager.CallOpts, _beneficiary)
}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManagerCallerSession) TotalContracts(_beneficiary common.Address) (*big.Int, error) {
	return _StakeableVestingManager.Contract.TotalContracts(&_StakeableVestingManager.CallOpts, _beneficiary)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactor) ChangeContractBeneficiary(opts *bind.TransactOpts, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingManager.contract.Transact(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakeableVestingManager *StakeableVestingManagerSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.ChangeContractBeneficiary(&_StakeableVestingManager.TransactOpts, _beneficiary, _id, _recipient)
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactorSession) ChangeContractBeneficiary(_beneficiary common.Address, _id *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.ChangeContractBeneficiary(&_StakeableVestingManager.TransactOpts, _beneficiary, _id, _recipient)
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactor) NewContract(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingManager.contract.Transact(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingManager *StakeableVestingManagerSession) NewContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.NewContract(&_StakeableVestingManager.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactorSession) NewContract(_beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.NewContract(&_StakeableVestingManager.TransactOpts, _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
}

// SetStakeableVestingLogicContract is a paid mutator transaction binding the contract method 0x2c272d38.
//
// Solidity: function setStakeableVestingLogicContract(address _contract) returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactor) SetStakeableVestingLogicContract(opts *bind.TransactOpts, _contract common.Address) (*types.Transaction, error) {
	return _StakeableVestingManager.contract.Transact(opts, "setStakeableVestingLogicContract", _contract)
}

// SetStakeableVestingLogicContract is a paid mutator transaction binding the contract method 0x2c272d38.
//
// Solidity: function setStakeableVestingLogicContract(address _contract) returns()
func (_StakeableVestingManager *StakeableVestingManagerSession) SetStakeableVestingLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.SetStakeableVestingLogicContract(&_StakeableVestingManager.TransactOpts, _contract)
}

// SetStakeableVestingLogicContract is a paid mutator transaction binding the contract method 0x2c272d38.
//
// Solidity: function setStakeableVestingLogicContract(address _contract) returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactorSession) SetStakeableVestingLogicContract(_contract common.Address) (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.SetStakeableVestingLogicContract(&_StakeableVestingManager.TransactOpts, _contract)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingManager.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingManager *StakeableVestingManagerSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.Receive(&_StakeableVestingManager.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingManager *StakeableVestingManagerTransactorSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingManager.Contract.Receive(&_StakeableVestingManager.TransactOpts)
}

// StakeableVestingManagerBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the StakeableVestingManager contract.
type StakeableVestingManagerBeneficiaryChangedIterator struct {
	Event *StakeableVestingManagerBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeableVestingManagerBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeableVestingManagerBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeableVestingManagerBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeableVestingManagerBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeableVestingManagerBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeableVestingManagerBeneficiaryChanged represents a BeneficiaryChanged event raised by the StakeableVestingManager contract.
type StakeableVestingManagerBeneficiaryChanged struct {
	NewBeneficiary common.Address
	OldBeneficiary common.Address
	ContractID     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_StakeableVestingManager *StakeableVestingManagerFilterer) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*StakeableVestingManagerBeneficiaryChangedIterator, error) {

	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}
	var oldBeneficiaryRule []interface{}
	for _, oldBeneficiaryItem := range oldBeneficiary {
		oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
	}

	logs, sub, err := _StakeableVestingManager.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingManagerBeneficiaryChangedIterator{contract: _StakeableVestingManager.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_StakeableVestingManager *StakeableVestingManagerFilterer) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *StakeableVestingManagerBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

	var newBeneficiaryRule []interface{}
	for _, newBeneficiaryItem := range newBeneficiary {
		newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
	}
	var oldBeneficiaryRule []interface{}
	for _, oldBeneficiaryItem := range oldBeneficiary {
		oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
	}

	logs, sub, err := _StakeableVestingManager.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeableVestingManagerBeneficiaryChanged)
				if err := _StakeableVestingManager.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
//
// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
func (_StakeableVestingManager *StakeableVestingManagerFilterer) ParseBeneficiaryChanged(log types.Log) (*StakeableVestingManagerBeneficiaryChanged, error) {
	event := new(StakeableVestingManagerBeneficiaryChanged)
	if err := _StakeableVestingManager.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeableVestingStateMetaData contains all meta data concerning the StakeableVestingState contract.
var StakeableVestingStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b5060405161023c38038061023c83398101604081905261002f9161005d565b600080546001600160a01b039092166001600160a01b0319928316179055600580549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b6101a08061009c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610117565b005b6100226100145b600080600560009054906101000a90046001600160a01b03166001600160a01b031663a04ab5f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a5919061013a565b90506001600160a01b0381166101125760405162461bcd60e51b815260206004820152602860248201527f7374616b6561626c652076657374696e67206c6f67696320636f6e7472616374604482015267081b9bdd081cd95d60c21b606482015260840160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610134573d6000fd5b503d6000f35b60006020828403121561014c57600080fd5b81516001600160a01b038116811461016357600080fd5b939250505056fea2646970667358221220abbe630deeaef99d952a81ec5ecb23a076b653b372f903b37ef32d039f007f5164736f6c63430008150033",
}

// StakeableVestingStateABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingStateMetaData.ABI instead.
var StakeableVestingStateABI = StakeableVestingStateMetaData.ABI

// StakeableVestingStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingStateMetaData.Bin instead.
var StakeableVestingStateBin = StakeableVestingStateMetaData.Bin

// DeployStakeableVestingState deploys a new Ethereum contract, binding an instance of StakeableVestingState to it.
func DeployStakeableVestingState(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address) (common.Address, *types.Transaction, *StakeableVestingState, error) {
	parsed, err := StakeableVestingStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeableVestingStateBin), backend, _autonity)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeableVestingState{StakeableVestingStateCaller: StakeableVestingStateCaller{contract: contract}, StakeableVestingStateTransactor: StakeableVestingStateTransactor{contract: contract}, StakeableVestingStateFilterer: StakeableVestingStateFilterer{contract: contract}}, nil
}

// StakeableVestingState is an auto generated Go binding around an Ethereum contract.
type StakeableVestingState struct {
	StakeableVestingStateCaller     // Read-only binding to the contract
	StakeableVestingStateTransactor // Write-only binding to the contract
	StakeableVestingStateFilterer   // Log filterer for contract events
}

// StakeableVestingStateCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeableVestingStateCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingStateTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeableVestingStateTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingStateFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeableVestingStateFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingStateSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeableVestingStateSession struct {
	Contract     *StakeableVestingState // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// StakeableVestingStateCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeableVestingStateCallerSession struct {
	Contract *StakeableVestingStateCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// StakeableVestingStateTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeableVestingStateTransactorSession struct {
	Contract     *StakeableVestingStateTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// StakeableVestingStateRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeableVestingStateRaw struct {
	Contract *StakeableVestingState // Generic contract binding to access the raw methods on
}

// StakeableVestingStateCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeableVestingStateCallerRaw struct {
	Contract *StakeableVestingStateCaller // Generic read-only contract binding to access the raw methods on
}

// StakeableVestingStateTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeableVestingStateTransactorRaw struct {
	Contract *StakeableVestingStateTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeableVestingState creates a new instance of StakeableVestingState, bound to a specific deployed contract.
func NewStakeableVestingState(address common.Address, backend bind.ContractBackend) (*StakeableVestingState, error) {
	contract, err := bindStakeableVestingState(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingState{StakeableVestingStateCaller: StakeableVestingStateCaller{contract: contract}, StakeableVestingStateTransactor: StakeableVestingStateTransactor{contract: contract}, StakeableVestingStateFilterer: StakeableVestingStateFilterer{contract: contract}}, nil
}

// NewStakeableVestingStateCaller creates a new read-only instance of StakeableVestingState, bound to a specific deployed contract.
func NewStakeableVestingStateCaller(address common.Address, caller bind.ContractCaller) (*StakeableVestingStateCaller, error) {
	contract, err := bindStakeableVestingState(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingStateCaller{contract: contract}, nil
}

// NewStakeableVestingStateTransactor creates a new write-only instance of StakeableVestingState, bound to a specific deployed contract.
func NewStakeableVestingStateTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeableVestingStateTransactor, error) {
	contract, err := bindStakeableVestingState(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingStateTransactor{contract: contract}, nil
}

// NewStakeableVestingStateFilterer creates a new log filterer instance of StakeableVestingState, bound to a specific deployed contract.
func NewStakeableVestingStateFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeableVestingStateFilterer, error) {
	contract, err := bindStakeableVestingState(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingStateFilterer{contract: contract}, nil
}

// bindStakeableVestingState binds a generic wrapper to an already deployed contract.
func bindStakeableVestingState(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeableVestingStateABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingState *StakeableVestingStateRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingState.Contract.StakeableVestingStateCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingState *StakeableVestingStateRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingState.Contract.StakeableVestingStateTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingState *StakeableVestingStateRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingState.Contract.StakeableVestingStateTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingState *StakeableVestingStateCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingState.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingState *StakeableVestingStateTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingState.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingState *StakeableVestingStateTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingState.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingState *StakeableVestingStateTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingState.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingState *StakeableVestingStateSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingState.Contract.Fallback(&_StakeableVestingState.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_StakeableVestingState *StakeableVestingStateTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _StakeableVestingState.Contract.Fallback(&_StakeableVestingState.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingState *StakeableVestingStateTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingState.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingState *StakeableVestingStateSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingState.Contract.Receive(&_StakeableVestingState.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeableVestingState *StakeableVestingStateTransactorSession) Receive() (*types.Transaction, error) {
	return _StakeableVestingState.Contract.Receive(&_StakeableVestingState.TransactOpts)
}

// StakeableVestingStorageMetaData contains all meta data concerning the StakeableVestingStorage contract.
var StakeableVestingStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// StakeableVestingStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingStorageMetaData.ABI instead.
var StakeableVestingStorageABI = StakeableVestingStorageMetaData.ABI

// StakeableVestingStorage is an auto generated Go binding around an Ethereum contract.
type StakeableVestingStorage struct {
	StakeableVestingStorageCaller     // Read-only binding to the contract
	StakeableVestingStorageTransactor // Write-only binding to the contract
	StakeableVestingStorageFilterer   // Log filterer for contract events
}

// StakeableVestingStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeableVestingStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeableVestingStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeableVestingStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeableVestingStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeableVestingStorageSession struct {
	Contract     *StakeableVestingStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StakeableVestingStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeableVestingStorageCallerSession struct {
	Contract *StakeableVestingStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// StakeableVestingStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeableVestingStorageTransactorSession struct {
	Contract     *StakeableVestingStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// StakeableVestingStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeableVestingStorageRaw struct {
	Contract *StakeableVestingStorage // Generic contract binding to access the raw methods on
}

// StakeableVestingStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeableVestingStorageCallerRaw struct {
	Contract *StakeableVestingStorageCaller // Generic read-only contract binding to access the raw methods on
}

// StakeableVestingStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeableVestingStorageTransactorRaw struct {
	Contract *StakeableVestingStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeableVestingStorage creates a new instance of StakeableVestingStorage, bound to a specific deployed contract.
func NewStakeableVestingStorage(address common.Address, backend bind.ContractBackend) (*StakeableVestingStorage, error) {
	contract, err := bindStakeableVestingStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingStorage{StakeableVestingStorageCaller: StakeableVestingStorageCaller{contract: contract}, StakeableVestingStorageTransactor: StakeableVestingStorageTransactor{contract: contract}, StakeableVestingStorageFilterer: StakeableVestingStorageFilterer{contract: contract}}, nil
}

// NewStakeableVestingStorageCaller creates a new read-only instance of StakeableVestingStorage, bound to a specific deployed contract.
func NewStakeableVestingStorageCaller(address common.Address, caller bind.ContractCaller) (*StakeableVestingStorageCaller, error) {
	contract, err := bindStakeableVestingStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingStorageCaller{contract: contract}, nil
}

// NewStakeableVestingStorageTransactor creates a new write-only instance of StakeableVestingStorage, bound to a specific deployed contract.
func NewStakeableVestingStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeableVestingStorageTransactor, error) {
	contract, err := bindStakeableVestingStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingStorageTransactor{contract: contract}, nil
}

// NewStakeableVestingStorageFilterer creates a new log filterer instance of StakeableVestingStorage, bound to a specific deployed contract.
func NewStakeableVestingStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeableVestingStorageFilterer, error) {
	contract, err := bindStakeableVestingStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeableVestingStorageFilterer{contract: contract}, nil
}

// bindStakeableVestingStorage binds a generic wrapper to an already deployed contract.
func bindStakeableVestingStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeableVestingStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingStorage *StakeableVestingStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingStorage.Contract.StakeableVestingStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingStorage *StakeableVestingStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingStorage.Contract.StakeableVestingStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingStorage *StakeableVestingStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingStorage.Contract.StakeableVestingStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeableVestingStorage *StakeableVestingStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeableVestingStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeableVestingStorage *StakeableVestingStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeableVestingStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeableVestingStorage *StakeableVestingStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeableVestingStorage.Contract.contract.Transact(opts, method, params...)
}

// SupplyControlMetaData contains all meta data concerning the SupplyControl contract.
var SupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
	Bin: "0x6080604052604051610512380380610512833981016040819052610022916100a5565b3460000361004357604051637c946ed760e01b815260040160405180910390fd5b600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560008054919093169116179055346001556100e8565b80516001600160a01b03811681146100a057600080fd5b919050565b6000806000606084860312156100ba57600080fd5b6100c384610089565b92506100d160208501610089565b91506100df60408501610089565b90509250925092565b61041b806100f76000396000f3fe6080604052600436106100705760003560e01c80637e47961c1161004e5780637e47961c146100c85780637ecc2b5614610100578063b3ab15fb14610113578063db7f521a1461013357600080fd5b806318160ddd1461007557806340c10f191461009e57806344df8e70146100c0575b600080fd5b34801561008157600080fd5b5061008b60015481565b6040519081526020015b60405180910390f35b3480156100aa57600080fd5b506100be6100b9366004610399565b610153565b005b6100be610265565b3480156100d457600080fd5b506000546100e8906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b34801561010c57600080fd5b504761008b565b34801561011f57600080fd5b506100be61012e3660046103c3565b6102e5565b34801561013f57600080fd5b506100be61014e3660046103c3565b610331565b6000546001600160a01b0316331461017d576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821615806101a057506000546001600160a01b038381169116145b156101be57604051634e46966960e11b815260040160405180910390fd5b8015806101ca57504781115b156101e85760405163162908e360e11b815260040160405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561021e573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a15050565b3460000361028657604051637c946ed760e01b815260040160405180910390fd5b6000546001600160a01b031633146102b0576040516282b42960e81b815260040160405180910390fd5b6040513481527fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9060200160405180910390a1565b6002546001600160a01b0316331461030f576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461035b576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461039457600080fd5b919050565b600080604083850312156103ac57600080fd5b6103b58361037d565b946020939093013593505050565b6000602082840312156103d557600080fd5b6103de8261037d565b939250505056fea26469706673582212207646b2e6881a2d6269951386532b4fc6a3409fe50e89f6a55b709c4060cd997f64736f6c63430008150033",
}

// SupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use SupplyControlMetaData.ABI instead.
var SupplyControlABI = SupplyControlMetaData.ABI

// Deprecated: Use SupplyControlMetaData.Sigs instead.
// SupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var SupplyControlFuncSigs = SupplyControlMetaData.Sigs

// SupplyControlBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SupplyControlMetaData.Bin instead.
var SupplyControlBin = SupplyControlMetaData.Bin

// DeploySupplyControl deploys a new Ethereum contract, binding an instance of SupplyControl to it.
func DeploySupplyControl(auth *bind.TransactOpts, backend bind.ContractBackend, autonity common.Address, operator common.Address, stabilizer_ common.Address) (common.Address, *types.Transaction, *SupplyControl, error) {
	parsed, err := SupplyControlMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SupplyControlBin), backend, autonity, operator, stabilizer_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SupplyControl{SupplyControlCaller: SupplyControlCaller{contract: contract}, SupplyControlTransactor: SupplyControlTransactor{contract: contract}, SupplyControlFilterer: SupplyControlFilterer{contract: contract}}, nil
}

// SupplyControl is an auto generated Go binding around an Ethereum contract.
type SupplyControl struct {
	SupplyControlCaller     // Read-only binding to the contract
	SupplyControlTransactor // Write-only binding to the contract
	SupplyControlFilterer   // Log filterer for contract events
}

// SupplyControlCaller is an auto generated read-only Go binding around an Ethereum contract.
type SupplyControlCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyControlTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SupplyControlTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyControlFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SupplyControlFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SupplyControlSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SupplyControlSession struct {
	Contract     *SupplyControl    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SupplyControlCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SupplyControlCallerSession struct {
	Contract *SupplyControlCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// SupplyControlTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SupplyControlTransactorSession struct {
	Contract     *SupplyControlTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// SupplyControlRaw is an auto generated low-level Go binding around an Ethereum contract.
type SupplyControlRaw struct {
	Contract *SupplyControl // Generic contract binding to access the raw methods on
}

// SupplyControlCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SupplyControlCallerRaw struct {
	Contract *SupplyControlCaller // Generic read-only contract binding to access the raw methods on
}

// SupplyControlTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SupplyControlTransactorRaw struct {
	Contract *SupplyControlTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSupplyControl creates a new instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControl(address common.Address, backend bind.ContractBackend) (*SupplyControl, error) {
	contract, err := bindSupplyControl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SupplyControl{SupplyControlCaller: SupplyControlCaller{contract: contract}, SupplyControlTransactor: SupplyControlTransactor{contract: contract}, SupplyControlFilterer: SupplyControlFilterer{contract: contract}}, nil
}

// NewSupplyControlCaller creates a new read-only instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControlCaller(address common.Address, caller bind.ContractCaller) (*SupplyControlCaller, error) {
	contract, err := bindSupplyControl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SupplyControlCaller{contract: contract}, nil
}

// NewSupplyControlTransactor creates a new write-only instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControlTransactor(address common.Address, transactor bind.ContractTransactor) (*SupplyControlTransactor, error) {
	contract, err := bindSupplyControl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SupplyControlTransactor{contract: contract}, nil
}

// NewSupplyControlFilterer creates a new log filterer instance of SupplyControl, bound to a specific deployed contract.
func NewSupplyControlFilterer(address common.Address, filterer bind.ContractFilterer) (*SupplyControlFilterer, error) {
	contract, err := bindSupplyControl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SupplyControlFilterer{contract: contract}, nil
}

// bindSupplyControl binds a generic wrapper to an already deployed contract.
func bindSupplyControl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SupplyControlABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SupplyControl *SupplyControlRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SupplyControl.Contract.SupplyControlCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SupplyControl *SupplyControlRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SupplyControl.Contract.SupplyControlTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SupplyControl *SupplyControlRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SupplyControl.Contract.SupplyControlTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SupplyControl *SupplyControlCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SupplyControl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SupplyControl *SupplyControlTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SupplyControl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SupplyControl *SupplyControlTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SupplyControl.Contract.contract.Transact(opts, method, params...)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCaller) AvailableSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SupplyControl.contract.Call(opts, &out, "availableSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControlSession) AvailableSupply() (*big.Int, error) {
	return _SupplyControl.Contract.AvailableSupply(&_SupplyControl.CallOpts)
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCallerSession) AvailableSupply() (*big.Int, error) {
	return _SupplyControl.Contract.AvailableSupply(&_SupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControlCaller) Stabilizer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SupplyControl.contract.Call(opts, &out, "stabilizer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControlSession) Stabilizer() (common.Address, error) {
	return _SupplyControl.Contract.Stabilizer(&_SupplyControl.CallOpts)
}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControlCallerSession) Stabilizer() (common.Address, error) {
	return _SupplyControl.Contract.Stabilizer(&_SupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SupplyControl.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControlSession) TotalSupply() (*big.Int, error) {
	return _SupplyControl.Contract.TotalSupply(&_SupplyControl.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControlCallerSession) TotalSupply() (*big.Int, error) {
	return _SupplyControl.Contract.TotalSupply(&_SupplyControl.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControlTransactor) Burn(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "burn")
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControlSession) Burn() (*types.Transaction, error) {
	return _SupplyControl.Contract.Burn(&_SupplyControl.TransactOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControlTransactorSession) Burn() (*types.Transaction, error) {
	return _SupplyControl.Contract.Burn(&_SupplyControl.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControlTransactor) Mint(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "mint", recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControlSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyControl.Contract.Mint(&_SupplyControl.TransactOpts, recipient, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControlTransactorSession) Mint(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SupplyControl.Contract.Mint(&_SupplyControl.TransactOpts, recipient, amount)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControlTransactor) SetOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "setOperator", operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControlSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetOperator(&_SupplyControl.TransactOpts, operator)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControlTransactorSession) SetOperator(operator common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetOperator(&_SupplyControl.TransactOpts, operator)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControlTransactor) SetStabilizer(opts *bind.TransactOpts, stabilizer_ common.Address) (*types.Transaction, error) {
	return _SupplyControl.contract.Transact(opts, "setStabilizer", stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControlSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetStabilizer(&_SupplyControl.TransactOpts, stabilizer_)
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControlTransactorSession) SetStabilizer(stabilizer_ common.Address) (*types.Transaction, error) {
	return _SupplyControl.Contract.SetStabilizer(&_SupplyControl.TransactOpts, stabilizer_)
}

// SupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the SupplyControl contract.
type SupplyControlBurnIterator struct {
	Event *SupplyControlBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyControlBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyControlBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyControlBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyControlBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyControlBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyControlBurn represents a Burn event raised by the SupplyControl contract.
type SupplyControlBurn struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_SupplyControl *SupplyControlFilterer) FilterBurn(opts *bind.FilterOpts) (*SupplyControlBurnIterator, error) {

	logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return &SupplyControlBurnIterator{contract: _SupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_SupplyControl *SupplyControlFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *SupplyControlBurn) (event.Subscription, error) {

	logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyControlBurn)
				if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 amount)
func (_SupplyControl *SupplyControlFilterer) ParseBurn(log types.Log) (*SupplyControlBurn, error) {
	event := new(SupplyControlBurn)
	if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the SupplyControl contract.
type SupplyControlMintIterator struct {
	Event *SupplyControlMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SupplyControlMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SupplyControlMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SupplyControlMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SupplyControlMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SupplyControlMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SupplyControlMint represents a Mint event raised by the SupplyControl contract.
type SupplyControlMint struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_SupplyControl *SupplyControlFilterer) FilterMint(opts *bind.FilterOpts) (*SupplyControlMintIterator, error) {

	logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &SupplyControlMintIterator{contract: _SupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_SupplyControl *SupplyControlFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *SupplyControlMint) (event.Subscription, error) {

	logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SupplyControlMint)
				if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address recipient, uint256 amount)
func (_SupplyControl *SupplyControlFilterer) ParseMint(log types.Log) (*SupplyControlMint, error) {
	event := new(SupplyControlMint)
	if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestBaseMetaData contains all meta data concerning the TestBase contract.
var TestBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"bfb4ebcf": "Foo()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161041238038061041283398101604081905261002f91610058565b600061003b82826101aa565b5050610269565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006b57600080fd5b82516001600160401b038082111561008257600080fd5b818501915085601f83011261009657600080fd5b8151818111156100a8576100a8610042565b604051601f8201601f19908116603f011681019083821181831017156100d0576100d0610042565b8160405282815288868487010111156100e857600080fd5b600093505b8284101561010a57848401860151818501870152928501926100ed565b600086848301015280965050505050505092915050565b600181811c9082168061013557607f821691505b60208210810361015557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101a557600081815260208120601f850160051c810160208610156101825750805b601f850160051c820191505b818110156101a15782815560010161018e565b5050505b505050565b81516001600160401b038111156101c3576101c3610042565b6101d7816101d18454610121565b8461015b565b602080601f83116001811461020c57600084156101f45750858301515b600019600386901b1c1916600185901b1785556101a1565b600085815260208120601f198616915b8281101561023b5788860151825594840194600190910190840161021c565b50858210156102595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806102786000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bfb4ebcf14610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a46db2828a27f773165dd8f4708b8fbda85fd0d7e29b83c1da61d6764855183364736f6c63430008150033",
}

// TestBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use TestBaseMetaData.ABI instead.
var TestBaseABI = TestBaseMetaData.ABI

// Deprecated: Use TestBaseMetaData.Sigs instead.
// TestBaseFuncSigs maps the 4-byte function signature to its string representation.
var TestBaseFuncSigs = TestBaseMetaData.Sigs

// TestBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestBaseMetaData.Bin instead.
var TestBaseBin = TestBaseMetaData.Bin

// DeployTestBase deploys a new Ethereum contract, binding an instance of TestBase to it.
func DeployTestBase(auth *bind.TransactOpts, backend bind.ContractBackend, _foo string) (common.Address, *types.Transaction, *TestBase, error) {
	parsed, err := TestBaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestBaseBin), backend, _foo)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestBase{TestBaseCaller: TestBaseCaller{contract: contract}, TestBaseTransactor: TestBaseTransactor{contract: contract}, TestBaseFilterer: TestBaseFilterer{contract: contract}}, nil
}

// TestBase is an auto generated Go binding around an Ethereum contract.
type TestBase struct {
	TestBaseCaller     // Read-only binding to the contract
	TestBaseTransactor // Write-only binding to the contract
	TestBaseFilterer   // Log filterer for contract events
}

// TestBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestBaseSession struct {
	Contract     *TestBase         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestBaseCallerSession struct {
	Contract *TestBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TestBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestBaseTransactorSession struct {
	Contract     *TestBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TestBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestBaseRaw struct {
	Contract *TestBase // Generic contract binding to access the raw methods on
}

// TestBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestBaseCallerRaw struct {
	Contract *TestBaseCaller // Generic read-only contract binding to access the raw methods on
}

// TestBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestBaseTransactorRaw struct {
	Contract *TestBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestBase creates a new instance of TestBase, bound to a specific deployed contract.
func NewTestBase(address common.Address, backend bind.ContractBackend) (*TestBase, error) {
	contract, err := bindTestBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestBase{TestBaseCaller: TestBaseCaller{contract: contract}, TestBaseTransactor: TestBaseTransactor{contract: contract}, TestBaseFilterer: TestBaseFilterer{contract: contract}}, nil
}

// NewTestBaseCaller creates a new read-only instance of TestBase, bound to a specific deployed contract.
func NewTestBaseCaller(address common.Address, caller bind.ContractCaller) (*TestBaseCaller, error) {
	contract, err := bindTestBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestBaseCaller{contract: contract}, nil
}

// NewTestBaseTransactor creates a new write-only instance of TestBase, bound to a specific deployed contract.
func NewTestBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*TestBaseTransactor, error) {
	contract, err := bindTestBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestBaseTransactor{contract: contract}, nil
}

// NewTestBaseFilterer creates a new log filterer instance of TestBase, bound to a specific deployed contract.
func NewTestBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*TestBaseFilterer, error) {
	contract, err := bindTestBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestBaseFilterer{contract: contract}, nil
}

// bindTestBase binds a generic wrapper to an already deployed contract.
func bindTestBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBase *TestBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBase.Contract.TestBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBase *TestBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBase.Contract.TestBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBase *TestBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBase.Contract.TestBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBase *TestBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBase *TestBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBase *TestBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBase.Contract.contract.Transact(opts, method, params...)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBaseCaller) Foo(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestBase.contract.Call(opts, &out, "Foo")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBaseSession) Foo() (string, error) {
	return _TestBase.Contract.Foo(&_TestBase.CallOpts)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBaseCallerSession) Foo() (string, error) {
	return _TestBase.Contract.Foo(&_TestBase.CallOpts)
}

// TestUpgradedMetaData contains all meta data concerning the TestUpgraded contract.
var TestUpgradedMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Bar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"name\":\"FooBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b0a378b0": "Bar()",
		"bfb4ebcf": "Foo()",
		"1e4f3395": "FooBar(string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161068838038061068883398101604081905261002f9161010e565b80600061003c82826101fa565b506001905061004b83826101fa565b5050506102b9565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261007a57600080fd5b81516001600160401b038082111561009457610094610053565b604051601f8301601f19908116603f011681019082821181831017156100bc576100bc610053565b816040528381526020925086838588010111156100d857600080fd5b600091505b838210156100fa57858201830151818301840152908201906100dd565b600093810190920192909252949350505050565b6000806040838503121561012157600080fd5b82516001600160401b038082111561013857600080fd5b61014486838701610069565b9350602085015191508082111561015a57600080fd5b5061016785828601610069565b9150509250929050565b600181811c9082168061018557607f821691505b6020821081036101a557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101f557600081815260208120601f850160051c810160208610156101d25750805b601f850160051c820191505b818110156101f1578281556001016101de565b5050505b505050565b81516001600160401b0381111561021357610213610053565b610227816102218454610171565b846101ab565b602080601f83116001811461025c57600084156102445750858301515b600019600386901b1c1916600185901b1785556101f1565b600085815260208120601f198616915b8281101561028b5788860151825594840194600190910190840161026c565b50858210156102a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6103c0806102c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e4f339514610046578063b0a378b01461005b578063bfb4ebcf14610079575b600080fd5b610059610054366004610142565b610081565b005b610063610091565b60405161007091906101f3565b60405180910390f35b61006361011f565b600061008d82826102ca565b5050565b6001805461009e90610241565b80601f01602080910402602001604051908101604052809291908181526020018280546100ca90610241565b80156101175780601f106100ec57610100808354040283529160200191610117565b820191906000526020600020905b8154815290600101906020018083116100fa57829003601f168201915b505050505081565b6000805461009e90610241565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561015457600080fd5b813567ffffffffffffffff8082111561016c57600080fd5b818401915084601f83011261018057600080fd5b8135818111156101925761019261012c565b604051601f8201601f19908116603f011681019083821181831017156101ba576101ba61012c565b816040528281528760208487010111156101d357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561022057858101830151858201604001528201610204565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061025557607f821691505b60208210810361027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102c557600081815260208120601f850160051c810160208610156102a25750805b601f850160051c820191505b818110156102c1578281556001016102ae565b5050505b505050565b815167ffffffffffffffff8111156102e4576102e461012c565b6102f8816102f28454610241565b8461027b565b602080601f83116001811461032d57600084156103155750858301515b600019600386901b1c1916600185901b1785556102c1565b600085815260208120601f198616915b8281101561035c5788860151825594840194600190910190840161033d565b508582101561037a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220ba6997a00058c31dc5c9a400e9a85b1f032a7e86b8e78facb8c192e391de6d5e64736f6c63430008150033",
}

// TestUpgradedABI is the input ABI used to generate the binding from.
// Deprecated: Use TestUpgradedMetaData.ABI instead.
var TestUpgradedABI = TestUpgradedMetaData.ABI

// Deprecated: Use TestUpgradedMetaData.Sigs instead.
// TestUpgradedFuncSigs maps the 4-byte function signature to its string representation.
var TestUpgradedFuncSigs = TestUpgradedMetaData.Sigs

// TestUpgradedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestUpgradedMetaData.Bin instead.
var TestUpgradedBin = TestUpgradedMetaData.Bin

// DeployTestUpgraded deploys a new Ethereum contract, binding an instance of TestUpgraded to it.
func DeployTestUpgraded(auth *bind.TransactOpts, backend bind.ContractBackend, _bar string, _foo string) (common.Address, *types.Transaction, *TestUpgraded, error) {
	parsed, err := TestUpgradedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestUpgradedBin), backend, _bar, _foo)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestUpgraded{TestUpgradedCaller: TestUpgradedCaller{contract: contract}, TestUpgradedTransactor: TestUpgradedTransactor{contract: contract}, TestUpgradedFilterer: TestUpgradedFilterer{contract: contract}}, nil
}

// TestUpgraded is an auto generated Go binding around an Ethereum contract.
type TestUpgraded struct {
	TestUpgradedCaller     // Read-only binding to the contract
	TestUpgradedTransactor // Write-only binding to the contract
	TestUpgradedFilterer   // Log filterer for contract events
}

// TestUpgradedCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestUpgradedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestUpgradedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestUpgradedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestUpgradedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestUpgradedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestUpgradedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestUpgradedSession struct {
	Contract     *TestUpgraded     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestUpgradedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestUpgradedCallerSession struct {
	Contract *TestUpgradedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TestUpgradedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestUpgradedTransactorSession struct {
	Contract     *TestUpgradedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TestUpgradedRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestUpgradedRaw struct {
	Contract *TestUpgraded // Generic contract binding to access the raw methods on
}

// TestUpgradedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestUpgradedCallerRaw struct {
	Contract *TestUpgradedCaller // Generic read-only contract binding to access the raw methods on
}

// TestUpgradedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestUpgradedTransactorRaw struct {
	Contract *TestUpgradedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestUpgraded creates a new instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgraded(address common.Address, backend bind.ContractBackend) (*TestUpgraded, error) {
	contract, err := bindTestUpgraded(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestUpgraded{TestUpgradedCaller: TestUpgradedCaller{contract: contract}, TestUpgradedTransactor: TestUpgradedTransactor{contract: contract}, TestUpgradedFilterer: TestUpgradedFilterer{contract: contract}}, nil
}

// NewTestUpgradedCaller creates a new read-only instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgradedCaller(address common.Address, caller bind.ContractCaller) (*TestUpgradedCaller, error) {
	contract, err := bindTestUpgraded(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestUpgradedCaller{contract: contract}, nil
}

// NewTestUpgradedTransactor creates a new write-only instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgradedTransactor(address common.Address, transactor bind.ContractTransactor) (*TestUpgradedTransactor, error) {
	contract, err := bindTestUpgraded(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestUpgradedTransactor{contract: contract}, nil
}

// NewTestUpgradedFilterer creates a new log filterer instance of TestUpgraded, bound to a specific deployed contract.
func NewTestUpgradedFilterer(address common.Address, filterer bind.ContractFilterer) (*TestUpgradedFilterer, error) {
	contract, err := bindTestUpgraded(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestUpgradedFilterer{contract: contract}, nil
}

// bindTestUpgraded binds a generic wrapper to an already deployed contract.
func bindTestUpgraded(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestUpgradedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestUpgraded *TestUpgradedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestUpgraded.Contract.TestUpgradedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestUpgraded *TestUpgradedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestUpgraded.Contract.TestUpgradedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestUpgraded *TestUpgradedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestUpgraded.Contract.TestUpgradedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestUpgraded *TestUpgradedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestUpgraded.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestUpgraded *TestUpgradedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestUpgraded.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestUpgraded *TestUpgradedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestUpgraded.Contract.contract.Transact(opts, method, params...)
}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgradedCaller) Bar(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestUpgraded.contract.Call(opts, &out, "Bar")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgradedSession) Bar() (string, error) {
	return _TestUpgraded.Contract.Bar(&_TestUpgraded.CallOpts)
}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgradedCallerSession) Bar() (string, error) {
	return _TestUpgraded.Contract.Bar(&_TestUpgraded.CallOpts)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgradedCaller) Foo(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestUpgraded.contract.Call(opts, &out, "Foo")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgradedSession) Foo() (string, error) {
	return _TestUpgraded.Contract.Foo(&_TestUpgraded.CallOpts)
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgradedCallerSession) Foo() (string, error) {
	return _TestUpgraded.Contract.Foo(&_TestUpgraded.CallOpts)
}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgradedTransactor) FooBar(opts *bind.TransactOpts, _foo string) (*types.Transaction, error) {
	return _TestUpgraded.contract.Transact(opts, "FooBar", _foo)
}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgradedSession) FooBar(_foo string) (*types.Transaction, error) {
	return _TestUpgraded.Contract.FooBar(&_TestUpgraded.TransactOpts, _foo)
}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgradedTransactorSession) FooBar(_foo string) (*types.Transaction, error) {
	return _TestUpgraded.Contract.FooBar(&_TestUpgraded.TransactOpts, _foo)
}

// UpgradeManagerMetaData contains all meta data concerning the UpgradeManager contract.
var UpgradeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"autonity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"55463ceb": "autonity()",
		"570ca735": "operator()",
		"b3ab15fb": "setOperator(address)",
		"6e3d9ff0": "upgrade(address,string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161044338038061044383398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610385806100be6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355463ceb14610051578063570ca735146100805780636e3d9ff014610093578063b3ab15fb146100a8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610064906001600160a01b031681565b6100a66100a1366004610220565b6100bb565b005b6100a66100b63660046102e2565b610166565b6001546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064015b60405180910390fd5b60405160f9906000906101339085908590602001610304565b6040516020818303038152906040529050600080825160208401855af43d6000803e808015610161573d6000f35b3d6000fd5b6000546001600160a01b031633146101cc5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f7420746865204175746f6e69747920636f6e74726044820152621858dd60ea1b6064820152608401610111565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461020557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561023357600080fd5b61023c836101ee565b9150602083013567ffffffffffffffff8082111561025957600080fd5b818501915085601f83011261026d57600080fd5b81358181111561027f5761027f61020a565b604051601f8201601f19908116603f011681019083821181831017156102a7576102a761020a565b816040528281528860208487010111156102c057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156102f457600080fd5b6102fd826101ee565b9392505050565b6bffffffffffffffffffffffff198360601b1681526000825160005b8181101561033d5760208186018101516014868401015201610320565b5060009201601401918252509291505056fea2646970667358221220b4a7a54f61270cff1d5d72adf6b4650ea968150216c3563883a09ac3b1d3506a64736f6c63430008150033",
}

// UpgradeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeManagerMetaData.ABI instead.
var UpgradeManagerABI = UpgradeManagerMetaData.ABI

// Deprecated: Use UpgradeManagerMetaData.Sigs instead.
// UpgradeManagerFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeManagerFuncSigs = UpgradeManagerMetaData.Sigs

// UpgradeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UpgradeManagerMetaData.Bin instead.
var UpgradeManagerBin = UpgradeManagerMetaData.Bin

// DeployUpgradeManager deploys a new Ethereum contract, binding an instance of UpgradeManager to it.
func DeployUpgradeManager(auth *bind.TransactOpts, backend bind.ContractBackend, _autonity common.Address, _operator common.Address) (common.Address, *types.Transaction, *UpgradeManager, error) {
	parsed, err := UpgradeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UpgradeManagerBin), backend, _autonity, _operator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpgradeManager{UpgradeManagerCaller: UpgradeManagerCaller{contract: contract}, UpgradeManagerTransactor: UpgradeManagerTransactor{contract: contract}, UpgradeManagerFilterer: UpgradeManagerFilterer{contract: contract}}, nil
}

// UpgradeManager is an auto generated Go binding around an Ethereum contract.
type UpgradeManager struct {
	UpgradeManagerCaller     // Read-only binding to the contract
	UpgradeManagerTransactor // Write-only binding to the contract
	UpgradeManagerFilterer   // Log filterer for contract events
}

// UpgradeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradeManagerSession struct {
	Contract     *UpgradeManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UpgradeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradeManagerCallerSession struct {
	Contract *UpgradeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// UpgradeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradeManagerTransactorSession struct {
	Contract     *UpgradeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// UpgradeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradeManagerRaw struct {
	Contract *UpgradeManager // Generic contract binding to access the raw methods on
}

// UpgradeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradeManagerCallerRaw struct {
	Contract *UpgradeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradeManagerTransactorRaw struct {
	Contract *UpgradeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradeManager creates a new instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManager(address common.Address, backend bind.ContractBackend) (*UpgradeManager, error) {
	contract, err := bindUpgradeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpgradeManager{UpgradeManagerCaller: UpgradeManagerCaller{contract: contract}, UpgradeManagerTransactor: UpgradeManagerTransactor{contract: contract}, UpgradeManagerFilterer: UpgradeManagerFilterer{contract: contract}}, nil
}

// NewUpgradeManagerCaller creates a new read-only instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManagerCaller(address common.Address, caller bind.ContractCaller) (*UpgradeManagerCaller, error) {
	contract, err := bindUpgradeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeManagerCaller{contract: contract}, nil
}

// NewUpgradeManagerTransactor creates a new write-only instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradeManagerTransactor, error) {
	contract, err := bindUpgradeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeManagerTransactor{contract: contract}, nil
}

// NewUpgradeManagerFilterer creates a new log filterer instance of UpgradeManager, bound to a specific deployed contract.
func NewUpgradeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradeManagerFilterer, error) {
	contract, err := bindUpgradeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradeManagerFilterer{contract: contract}, nil
}

// bindUpgradeManager binds a generic wrapper to an already deployed contract.
func bindUpgradeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeManager *UpgradeManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeManager.Contract.UpgradeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeManager *UpgradeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeManager.Contract.UpgradeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeManager *UpgradeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeManager.Contract.UpgradeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeManager *UpgradeManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UpgradeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeManager *UpgradeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeManager *UpgradeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeManager.Contract.contract.Transact(opts, method, params...)
}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManagerCaller) Autonity(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradeManager.contract.Call(opts, &out, "autonity")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManagerSession) Autonity() (common.Address, error) {
	return _UpgradeManager.Contract.Autonity(&_UpgradeManager.CallOpts)
}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManagerCallerSession) Autonity() (common.Address, error) {
	return _UpgradeManager.Contract.Autonity(&_UpgradeManager.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManagerCaller) Operator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UpgradeManager.contract.Call(opts, &out, "operator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManagerSession) Operator() (common.Address, error) {
	return _UpgradeManager.Contract.Operator(&_UpgradeManager.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManagerCallerSession) Operator() (common.Address, error) {
	return _UpgradeManager.Contract.Operator(&_UpgradeManager.CallOpts)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManagerTransactor) SetOperator(opts *bind.TransactOpts, _account common.Address) (*types.Transaction, error) {
	return _UpgradeManager.contract.Transact(opts, "setOperator", _account)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManagerSession) SetOperator(_account common.Address) (*types.Transaction, error) {
	return _UpgradeManager.Contract.SetOperator(&_UpgradeManager.TransactOpts, _account)
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManagerTransactorSession) SetOperator(_account common.Address) (*types.Transaction, error) {
	return _UpgradeManager.Contract.SetOperator(&_UpgradeManager.TransactOpts, _account)
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManagerTransactor) Upgrade(opts *bind.TransactOpts, _target common.Address, _data string) (*types.Transaction, error) {
	return _UpgradeManager.contract.Transact(opts, "upgrade", _target, _data)
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManagerSession) Upgrade(_target common.Address, _data string) (*types.Transaction, error) {
	return _UpgradeManager.Contract.Upgrade(&_UpgradeManager.TransactOpts, _target, _data)
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManagerTransactorSession) Upgrade(_target common.Address, _data string) (*types.Transaction, error) {
	return _UpgradeManager.Contract.Upgrade(&_UpgradeManager.TransactOpts, _target, _data)
}

// UpgradeableMetaData contains all meta data concerning the Upgradeable contract.
var UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"872cf059": "completeContractUpgrade()",
		"b66b3e79": "getNewContract()",
		"cf9c5719": "resetContractUpgrade()",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
}

// UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeableMetaData.ABI instead.
var UpgradeableABI = UpgradeableMetaData.ABI

// Deprecated: Use UpgradeableMetaData.Sigs instead.
// UpgradeableFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeableFuncSigs = UpgradeableMetaData.Sigs

// Upgradeable is an auto generated Go binding around an Ethereum contract.
type Upgradeable struct {
	UpgradeableCaller     // Read-only binding to the contract
	UpgradeableTransactor // Write-only binding to the contract
	UpgradeableFilterer   // Log filterer for contract events
}

// UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradeableSession struct {
	Contract     *Upgradeable      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradeableCallerSession struct {
	Contract *UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradeableTransactorSession struct {
	Contract     *UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradeableRaw struct {
	Contract *Upgradeable // Generic contract binding to access the raw methods on
}

// UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradeableCallerRaw struct {
	Contract *UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradeableTransactorRaw struct {
	Contract *UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradeable creates a new instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeable(address common.Address, backend bind.ContractBackend) (*Upgradeable, error) {
	contract, err := bindUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Upgradeable{UpgradeableCaller: UpgradeableCaller{contract: contract}, UpgradeableTransactor: UpgradeableTransactor{contract: contract}, UpgradeableFilterer: UpgradeableFilterer{contract: contract}}, nil
}

// NewUpgradeableCaller creates a new read-only instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*UpgradeableCaller, error) {
	contract, err := bindUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeableCaller{contract: contract}, nil
}

// NewUpgradeableTransactor creates a new write-only instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradeableTransactor, error) {
	contract, err := bindUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeableTransactor{contract: contract}, nil
}

// NewUpgradeableFilterer creates a new log filterer instance of Upgradeable, bound to a specific deployed contract.
func NewUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradeableFilterer, error) {
	contract, err := bindUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradeableFilterer{contract: contract}, nil
}

// bindUpgradeable binds a generic wrapper to an already deployed contract.
func bindUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Upgradeable *UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Upgradeable.Contract.UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Upgradeable *UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Upgradeable *UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Upgradeable *UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Upgradeable *UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Upgradeable *UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *UpgradeableCaller) GetNewContract(opts *bind.CallOpts) ([]byte, string, error) {
	var out []interface{}
	err := _Upgradeable.contract.Call(opts, &out, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *UpgradeableSession) GetNewContract() ([]byte, string, error) {
	return _Upgradeable.Contract.GetNewContract(&_Upgradeable.CallOpts)
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *UpgradeableCallerSession) GetNewContract() ([]byte, string, error) {
	return _Upgradeable.Contract.GetNewContract(&_Upgradeable.CallOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactor) CompleteContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.contract.Transact(opts, "completeContractUpgrade")
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *UpgradeableSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.CompleteContractUpgrade(&_Upgradeable.TransactOpts)
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactorSession) CompleteContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.CompleteContractUpgrade(&_Upgradeable.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactor) ResetContractUpgrade(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Upgradeable.contract.Transact(opts, "resetContractUpgrade")
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *UpgradeableSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.ResetContractUpgrade(&_Upgradeable.TransactOpts)
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *UpgradeableTransactorSession) ResetContractUpgrade() (*types.Transaction, error) {
	return _Upgradeable.Contract.ResetContractUpgrade(&_Upgradeable.TransactOpts)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *UpgradeableTransactor) UpgradeContract(opts *bind.TransactOpts, _bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Upgradeable.contract.Transact(opts, "upgradeContract", _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *UpgradeableSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeContract(&_Upgradeable.TransactOpts, _bytecode, _abi)
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *UpgradeableTransactorSession) UpgradeContract(_bytecode []byte, _abi string) (*types.Transaction, error) {
	return _Upgradeable.Contract.UpgradeContract(&_Upgradeable.TransactOpts, _bytecode, _abi)
}

// ValidatorManagerMetaData contains all meta data concerning the ValidatorManager contract.
var ValidatorManagerMetaData = &bind.MetaData{
	ABI: "[]",
}

// ValidatorManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerMetaData.ABI instead.
var ValidatorManagerABI = ValidatorManagerMetaData.ABI

// ValidatorManager is an auto generated Go binding around an Ethereum contract.
type ValidatorManager struct {
	ValidatorManagerCaller     // Read-only binding to the contract
	ValidatorManagerTransactor // Write-only binding to the contract
	ValidatorManagerFilterer   // Log filterer for contract events
}

// ValidatorManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorManagerSession struct {
	Contract     *ValidatorManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorManagerCallerSession struct {
	Contract *ValidatorManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorManagerTransactorSession struct {
	Contract     *ValidatorManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorManagerRaw struct {
	Contract *ValidatorManager // Generic contract binding to access the raw methods on
}

// ValidatorManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorManagerCallerRaw struct {
	Contract *ValidatorManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorManagerTransactorRaw struct {
	Contract *ValidatorManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorManager creates a new instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManager(address common.Address, backend bind.ContractBackend) (*ValidatorManager, error) {
	contract, err := bindValidatorManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorManager{ValidatorManagerCaller: ValidatorManagerCaller{contract: contract}, ValidatorManagerTransactor: ValidatorManagerTransactor{contract: contract}, ValidatorManagerFilterer: ValidatorManagerFilterer{contract: contract}}, nil
}

// NewValidatorManagerCaller creates a new read-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerCaller(address common.Address, caller bind.ContractCaller) (*ValidatorManagerCaller, error) {
	contract, err := bindValidatorManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerCaller{contract: contract}, nil
}

// NewValidatorManagerTransactor creates a new write-only instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorManagerTransactor, error) {
	contract, err := bindValidatorManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerTransactor{contract: contract}, nil
}

// NewValidatorManagerFilterer creates a new log filterer instance of ValidatorManager, bound to a specific deployed contract.
func NewValidatorManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorManagerFilterer, error) {
	contract, err := bindValidatorManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerFilterer{contract: contract}, nil
}

// bindValidatorManager binds a generic wrapper to an already deployed contract.
func bindValidatorManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.ValidatorManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.ValidatorManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManager *ValidatorManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManager *ValidatorManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManager.Contract.contract.Transact(opts, method, params...)
}

// ValidatorManagerStorageMetaData contains all meta data concerning the ValidatorManagerStorage contract.
var ValidatorManagerStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// ValidatorManagerStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerStorageMetaData.ABI instead.
var ValidatorManagerStorageABI = ValidatorManagerStorageMetaData.ABI

// ValidatorManagerStorage is an auto generated Go binding around an Ethereum contract.
type ValidatorManagerStorage struct {
	ValidatorManagerStorageCaller     // Read-only binding to the contract
	ValidatorManagerStorageTransactor // Write-only binding to the contract
	ValidatorManagerStorageFilterer   // Log filterer for contract events
}

// ValidatorManagerStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorManagerStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorManagerStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorManagerStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorManagerStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorManagerStorageSession struct {
	Contract     *ValidatorManagerStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidatorManagerStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorManagerStorageCallerSession struct {
	Contract *ValidatorManagerStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ValidatorManagerStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorManagerStorageTransactorSession struct {
	Contract     *ValidatorManagerStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ValidatorManagerStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorManagerStorageRaw struct {
	Contract *ValidatorManagerStorage // Generic contract binding to access the raw methods on
}

// ValidatorManagerStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorManagerStorageCallerRaw struct {
	Contract *ValidatorManagerStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorManagerStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorManagerStorageTransactorRaw struct {
	Contract *ValidatorManagerStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorManagerStorage creates a new instance of ValidatorManagerStorage, bound to a specific deployed contract.
func NewValidatorManagerStorage(address common.Address, backend bind.ContractBackend) (*ValidatorManagerStorage, error) {
	contract, err := bindValidatorManagerStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerStorage{ValidatorManagerStorageCaller: ValidatorManagerStorageCaller{contract: contract}, ValidatorManagerStorageTransactor: ValidatorManagerStorageTransactor{contract: contract}, ValidatorManagerStorageFilterer: ValidatorManagerStorageFilterer{contract: contract}}, nil
}

// NewValidatorManagerStorageCaller creates a new read-only instance of ValidatorManagerStorage, bound to a specific deployed contract.
func NewValidatorManagerStorageCaller(address common.Address, caller bind.ContractCaller) (*ValidatorManagerStorageCaller, error) {
	contract, err := bindValidatorManagerStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerStorageCaller{contract: contract}, nil
}

// NewValidatorManagerStorageTransactor creates a new write-only instance of ValidatorManagerStorage, bound to a specific deployed contract.
func NewValidatorManagerStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorManagerStorageTransactor, error) {
	contract, err := bindValidatorManagerStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerStorageTransactor{contract: contract}, nil
}

// NewValidatorManagerStorageFilterer creates a new log filterer instance of ValidatorManagerStorage, bound to a specific deployed contract.
func NewValidatorManagerStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorManagerStorageFilterer, error) {
	contract, err := bindValidatorManagerStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorManagerStorageFilterer{contract: contract}, nil
}

// bindValidatorManagerStorage binds a generic wrapper to an already deployed contract.
func bindValidatorManagerStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorManagerStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManagerStorage *ValidatorManagerStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManagerStorage.Contract.ValidatorManagerStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManagerStorage *ValidatorManagerStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManagerStorage.Contract.ValidatorManagerStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManagerStorage *ValidatorManagerStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManagerStorage.Contract.ValidatorManagerStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorManagerStorage *ValidatorManagerStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorManagerStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorManagerStorage *ValidatorManagerStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorManagerStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorManagerStorage *ValidatorManagerStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorManagerStorage.Contract.contract.Transact(opts, method, params...)
}
