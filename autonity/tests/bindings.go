// Code generated for internal testing purposes only - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tests

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/autonity/autonity"
	"github.com/autonity/autonity/accounts/abi"
	"github.com/autonity/autonity/accounts/abi/bind"
	"github.com/autonity/autonity/common"
	"github.com/autonity/autonity/core/types"
	"github.com/autonity/autonity/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccountabilityConfig is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityConfig struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
}

// AccountabilityEvent is an auto generated low-level Go binding around an user-defined struct.
type AccountabilityEvent struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}

// AutonityCommitteeMember is an auto generated low-level Go binding around an user-defined struct.
type AutonityCommitteeMember struct {
	Addr         common.Address
	VotingPower  *big.Int
	ConsensusKey []byte
}

// AutonityConfig is an auto generated low-level Go binding around an user-defined struct.
type AutonityConfig struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}

// AutonityContracts is an auto generated low-level Go binding around an user-defined struct.
type AutonityContracts struct {
	AccountabilityContract         common.Address
	OracleContract                 common.Address
	AcuContract                    common.Address
	SupplyControlContract          common.Address
	StabilizationContract          common.Address
	UpgradeManagerContract         common.Address
	InflationControllerContract    common.Address
	OmissionAccountabilityContract common.Address
}

// AutonityEpochInfo is an auto generated low-level Go binding around an user-defined struct.
type AutonityEpochInfo struct {
	Committee          []AutonityCommitteeMember
	PreviousEpochBlock *big.Int
	EpochBlock         *big.Int
	NextEpochBlock     *big.Int
	Delta              *big.Int
}

// AutonityPolicy is an auto generated low-level Go binding around an user-defined struct.
type AutonityPolicy struct {
	TreasuryFee             *big.Int
	MinBaseFee              *big.Int
	DelegationRate          *big.Int
	UnbondingPeriod         *big.Int
	InitialInflationReserve *big.Int
	WithholdingThreshold    *big.Int
	ProposerRewardRate      *big.Int
	WithheldRewardsPool     common.Address
	TreasuryAccount         common.Address
}

// AutonityProtocol is an auto generated low-level Go binding around an user-defined struct.
type AutonityProtocol struct {
	OperatorAccount     common.Address
	EpochPeriod         *big.Int
	BlockPeriod         *big.Int
	CommitteeSize       *big.Int
	MaxScheduleDuration *big.Int
}

// AutonityValidator is an auto generated low-level Go binding around an user-defined struct.
type AutonityValidator struct {
	Treasury                 common.Address
	NodeAddress              common.Address
	OracleAddress            common.Address
	Enode                    string
	CommissionRate           *big.Int
	BondedStake              *big.Int
	UnbondingStake           *big.Int
	UnbondingShares          *big.Int
	SelfBondedStake          *big.Int
	SelfUnbondingStake       *big.Int
	SelfUnbondingShares      *big.Int
	SelfUnbondingStakeLocked *big.Int
	LiquidStateContract      common.Address
	LiquidSupply             *big.Int
	RegistrationBlock        *big.Int
	TotalSlashed             *big.Int
	JailReleaseBlock         *big.Int
	ConsensusKey             []byte
	State                    uint8
}

// ContractBaseContract is an auto generated low-level Go binding around an user-defined struct.
type ContractBaseContract struct {
	CurrentNTNAmount *big.Int
	WithdrawnValue   *big.Int
	Start            *big.Int
	CliffDuration    *big.Int
	TotalDuration    *big.Int
	CanStake         bool
}

// IOracleRoundData is an auto generated low-level Go binding around an user-defined struct.
type IOracleRoundData struct {
	Round     *big.Int
	Price     *big.Int
	Timestamp *big.Int
	Success   bool
}

// InflationControllerParams is an auto generated low-level Go binding around an user-defined struct.
type InflationControllerParams struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}

// NonStakeableVestingScheduleTracker is an auto generated low-level Go binding around an user-defined struct.
type NonStakeableVestingScheduleTracker struct {
	UnsubscribedAmount  *big.Int
	ExpiredFromContract *big.Int
	Initialized         bool
}

// OmissionAccountabilityConfig is an auto generated low-level Go binding around an user-defined struct.
type OmissionAccountabilityConfig struct {
	InactivityThreshold    *big.Int
	LookbackWindow         *big.Int
	PastPerformanceWeight  *big.Int
	InitialJailingPeriod   *big.Int
	InitialProbationPeriod *big.Int
	InitialSlashingRate    *big.Int
	Delta                  *big.Int
}

// ScheduleControllerSchedule is an auto generated low-level Go binding around an user-defined struct.
type ScheduleControllerSchedule struct {
	TotalAmount    *big.Int
	UnlockedAmount *big.Int
	Start          *big.Int
	TotalDuration  *big.Int
	LastUnlockTime *big.Int
}

// StabilizationConfig is an auto generated low-level Go binding around an user-defined struct.
type StabilizationConfig struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}

// ACUMetaData contains all meta data concerning the ACU contract.
var ACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidBasket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoACUValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"BasketModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols_\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"scale_\",\"type\":\"uint256\"}],\"name\":\"modifyBasket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"44b4708a": "modifyBasket(string[],uint256[],uint256)",
		"d54d2799": "quantities()",
		"146ca531": "round()",
		"f51e181a": "scale()",
		"683dd191": "scaleFactor()",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"07039ff9": "symbols()",
		"a2e62045": "update()",
		"3fa4f245": "value()",
	},
	Bin: "",
}

// ACUABI is the input ABI used to generate the binding from.
// Deprecated: Use ACUMetaData.ABI instead.
var ACUABI = ACUMetaData.ABI

// Deprecated: Use ACUMetaData.Sigs instead.
// ACUFuncSigs maps the 4-byte function signature to its string representation.
var ACUFuncSigs = ACUMetaData.Sigs

// ACUBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ACUMetaData.Bin instead.
var ACUBin = ACUMetaData.Bin

// DeployACU deploys a new Ethereum contract, binding an instance of ACU to it.
func (r *Runner) DeployACU(opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int, autonity common.Address, operator common.Address, oracle common.Address) (common.Address, uint64, *ACU, error) {
	parsed, err := ACUMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(ACUBin), symbols_, quantities_, scale_, autonity, operator, oracle)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &ACU{contract: c}, nil
}

// ACU is an auto generated Go binding around an Ethereum contract.
type ACU struct {
	*contract
}

// Quantities is a free data retrieval call binding the contract method 0xd54d2799.
//
// Solidity: function quantities() view returns(uint256[])
func (_ACU *ACU) Quantities(opts *runOptions) ([]*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "quantities")

	if err != nil {
		return *new([]*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	return out0, consumed, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_ACU *ACU) Round(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "round")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Scale is a free data retrieval call binding the contract method 0xf51e181a.
//
// Solidity: function scale() view returns(uint256)
func (_ACU *ACU) Scale(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "scale")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ScaleFactor is a free data retrieval call binding the contract method 0x683dd191.
//
// Solidity: function scaleFactor() view returns(uint256)
func (_ACU *ACU) ScaleFactor(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "scaleFactor")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Symbols is a free data retrieval call binding the contract method 0x07039ff9.
//
// Solidity: function symbols() view returns(string[])
func (_ACU *ACU) Symbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _ACU.call(opts, "symbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(int256)
func (_ACU *ACU) Value(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ACU.call(opts, "value")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ModifyBasket is a free data retrieval call for a paid mutator transaction binding the contract method 0x44b4708a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACU) CallModifyBasket(r *Runner, opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "modifyBasket", symbols_, quantities_, scale_)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACU) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACU) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ACU.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// Update is a free data retrieval call for a paid mutator transaction binding the contract method 0xa2e62045.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function update() returns(bool status)
func (_ACU *ACU) CallUpdate(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ACU.call(opts, "update")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// ModifyBasket is a paid mutator transaction binding the contract method 0x44b4708a.
//
// Solidity: function modifyBasket(string[] symbols_, uint256[] quantities_, uint256 scale_) returns()
func (_ACU *ACU) ModifyBasket(opts *runOptions, symbols_ []string, quantities_ []*big.Int, scale_ *big.Int) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "modifyBasket", symbols_, quantities_, scale_)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ACU *ACU) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_ACU *ACU) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "setOracle", oracle)
	return consumed, err
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_ACU *ACU) Update(opts *runOptions) (uint64, error) {
	_, consumed, err := _ACU.call(opts, "update")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ACUBasketModifiedIterator is returned from FilterBasketModified and is used to iterate over the raw logs and unpacked data for BasketModified events raised by the ACU contract.
		type ACUBasketModifiedIterator struct {
			Event *ACUBasketModified // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ACUBasketModifiedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ACUBasketModified)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ACUBasketModified)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ACUBasketModifiedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ACUBasketModifiedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ACUBasketModified represents a BasketModified event raised by the ACU contract.
		type ACUBasketModified struct {
			Symbols []string;
			Quantities []*big.Int;
			Scale *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBasketModified is a free log retrieval operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
 		func (_ACU *ACU) FilterBasketModified(opts *bind.FilterOpts) (*ACUBasketModifiedIterator, error) {





			logs, sub, err := _ACU.contract.FilterLogs(opts, "BasketModified")
			if err != nil {
				return nil, err
			}
			return &ACUBasketModifiedIterator{contract: _ACU.contract, event: "BasketModified", logs: logs, sub: sub}, nil
 		}

		// WatchBasketModified is a free log subscription operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
		func (_ACU *ACU) WatchBasketModified(opts *bind.WatchOpts, sink chan<- *ACUBasketModified) (event.Subscription, error) {





			logs, sub, err := _ACU.contract.WatchLogs(opts, "BasketModified")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ACUBasketModified)
						if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBasketModified is a log parse operation binding the contract event 0xdbdcd10543a20811a4a332247f28d03b22686d3281043de35824a06075c06c09.
		//
		// Solidity: event BasketModified(string[] symbols, uint256[] quantities, uint256 scale)
		func (_ACU *ACU) ParseBasketModified(log types.Log) (*ACUBasketModified, error) {
			event := new(ACUBasketModified)
			if err := _ACU.contract.UnpackLog(event, "BasketModified", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ACUUpdatedIterator is returned from FilterUpdated and is used to iterate over the raw logs and unpacked data for Updated events raised by the ACU contract.
		type ACUUpdatedIterator struct {
			Event *ACUUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ACUUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ACUUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ACUUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ACUUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ACUUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ACUUpdated represents a Updated event raised by the ACU contract.
		type ACUUpdated struct {
			Height *big.Int;
			Timestamp *big.Int;
			Round *big.Int;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterUpdated is a free log retrieval operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
 		func (_ACU *ACU) FilterUpdated(opts *bind.FilterOpts) (*ACUUpdatedIterator, error) {






			logs, sub, err := _ACU.contract.FilterLogs(opts, "Updated")
			if err != nil {
				return nil, err
			}
			return &ACUUpdatedIterator{contract: _ACU.contract, event: "Updated", logs: logs, sub: sub}, nil
 		}

		// WatchUpdated is a free log subscription operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
		func (_ACU *ACU) WatchUpdated(opts *bind.WatchOpts, sink chan<- *ACUUpdated) (event.Subscription, error) {






			logs, sub, err := _ACU.contract.WatchLogs(opts, "Updated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ACUUpdated)
						if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseUpdated is a log parse operation binding the contract event 0x23f161ca67071b3e902d4fa7afade82672c6160677e89d373a830145bdda6d26.
		//
		// Solidity: event Updated(uint256 height, uint256 timestamp, uint256 round, int256 value)
		func (_ACU *ACU) ParseUpdated(log types.Log) (*ACUUpdated, error) {
			event := new(ACUUpdated)
			if err := _ACU.contract.UnpackLog(event, "Updated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AccessAutonityMetaData contains all meta data concerning the AccessAutonity contract.
var AccessAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
	Bin: "0x6080604052348015600f57600080fd5b5060405160c838038060c8833981016040819052602a91604e565b600080546001600160a01b0319166001600160a01b0392909216919091179055607c565b600060208284031215605f57600080fd5b81516001600160a01b0381168114607557600080fd5b9392505050565b603f8060896000396000f3fe6080604052600080fdfea264697066735822122053dd24095a5eeb945e18b721209a16f191ee625b45f458ff61041c8b75609b5d64736f6c63430008150033",
}

// AccessAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessAutonityMetaData.ABI instead.
var AccessAutonityABI = AccessAutonityMetaData.ABI

// AccessAutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessAutonityMetaData.Bin instead.
var AccessAutonityBin = AccessAutonityMetaData.Bin

// DeployAccessAutonity deploys a new Ethereum contract, binding an instance of AccessAutonity to it.
func (r *Runner) DeployAccessAutonity(opts *runOptions, _autonity common.Address) (common.Address, uint64, *AccessAutonity, error) {
	parsed, err := AccessAutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AccessAutonityBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &AccessAutonity{contract: c}, nil
}

// AccessAutonity is an auto generated Go binding around an Ethereum contract.
type AccessAutonity struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// AccountabilityMetaData contains all meta data concerning the Accountability contract.
var AccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleMisbehaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newCommittee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"b5b7a184": "epochPeriod()",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"1e85f2e5": "handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"e05f8786": "handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"a48a9b50": "handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"931c7c68": "history(address)",
		"e08b14ed": "setCommittee(address[])",
		"6b5f444c": "setEpochPeriod(uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "",
}

// AccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityMetaData.ABI instead.
var AccountabilityABI = AccountabilityMetaData.ABI

// Deprecated: Use AccountabilityMetaData.Sigs instead.
// AccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityFuncSigs = AccountabilityMetaData.Sigs

// AccountabilityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityMetaData.Bin instead.
var AccountabilityBin = AccountabilityMetaData.Bin

// DeployAccountability deploys a new Ethereum contract, binding an instance of Accountability to it.
func (r *Runner) DeployAccountability(opts *runOptions, _autonity common.Address, _config AccountabilityConfig) (common.Address, uint64, *Accountability, error) {
	parsed, err := AccountabilityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AccountabilityBin), _autonity, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Accountability{contract: c}, nil
}

// Accountability is an auto generated Go binding around an Ethereum contract.
type Accountability struct {
	*contract
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_Accountability *Accountability) Beneficiaries(opts *runOptions, arg0 common.Address) (common.Address, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_Accountability *Accountability) CanAccuse(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_Accountability *Accountability) CanSlash(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (bool, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor)
func (_Accountability *Accountability) Config(opts *runOptions) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRateLow            *big.Int
		BaseSlashingRateMid            *big.Int
		CollusionFactor                *big.Int
		HistoryFactor                  *big.Int
		JailFactor                     *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateLow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateMid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CollusionFactor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.HistoryFactor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.JailFactor = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_Accountability *Accountability) EpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "epochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_Accountability *Accountability) Events(opts *runOptions, arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "events", arg0)

	outstruct := new(struct {
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.EventType = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_Accountability *Accountability) GetValidatorAccusation(opts *runOptions, _val common.Address) (AccountabilityEvent, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)
	return out0, consumed, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_Accountability *Accountability) GetValidatorFaults(opts *runOptions, _val common.Address) ([]AccountabilityEvent, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)
	return out0, consumed, err

}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_Accountability *Accountability) History(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "history", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_Accountability *Accountability) SlashingHistory(opts *runOptions, arg0 common.Address, arg1 *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Accountability.call(opts, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *Accountability) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *Accountability) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleAccusation is a free data retrieval call for a paid mutator transaction binding the contract method 0x1e85f2e5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) CallHandleAccusation(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "handleAccusation", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleInnocenceProof is a free data retrieval call for a paid mutator transaction binding the contract method 0xe05f8786.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) CallHandleInnocenceProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "handleInnocenceProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleMisbehaviour is a free data retrieval call for a paid mutator transaction binding the contract method 0xa48a9b50.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) CallHandleMisbehaviour(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "handleMisbehaviour", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe08b14ed.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_Accountability *Accountability) CallSetCommittee(r *Runner, opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "setCommittee", _newCommittee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *Accountability) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Accountability.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_Accountability *Accountability) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_Accountability *Accountability) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) HandleAccusation(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "handleAccusation", _event)
	return consumed, err
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) HandleInnocenceProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "handleInnocenceProof", _event)
	return consumed, err
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_Accountability *Accountability) HandleMisbehaviour(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "handleMisbehaviour", _event)
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_Accountability *Accountability) SetCommittee(opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "setCommittee", _newCommittee)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_Accountability *Accountability) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _Accountability.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the Accountability contract.
		type AccountabilityInnocenceProvenIterator struct {
			Event *AccountabilityInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityInnocenceProven represents a InnocenceProven event raised by the Accountability contract.
		type AccountabilityInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_Accountability *Accountability) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _Accountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityInnocenceProvenIterator{contract: _Accountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_Accountability *Accountability) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _Accountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityInnocenceProven)
						if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_Accountability *Accountability) ParseInnocenceProven(log types.Log) (*AccountabilityInnocenceProven, error) {
			event := new(AccountabilityInnocenceProven)
			if err := _Accountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the Accountability contract.
		type AccountabilityNewAccusationIterator struct {
			Event *AccountabilityNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityNewAccusation represents a NewAccusation event raised by the Accountability contract.
		type AccountabilityNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_Accountability *Accountability) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityNewAccusationIterator{contract: _Accountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityNewAccusation)
						if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) ParseNewAccusation(log types.Log) (*AccountabilityNewAccusation, error) {
			event := new(AccountabilityNewAccusation)
			if err := _Accountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the Accountability contract.
		type AccountabilityNewFaultProofIterator struct {
			Event *AccountabilityNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityNewFaultProof represents a NewFaultProof event raised by the Accountability contract.
		type AccountabilityNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_Accountability *Accountability) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityNewFaultProofIterator{contract: _Accountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _Accountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityNewFaultProof)
						if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_Accountability *Accountability) ParseNewFaultProof(log types.Log) (*AccountabilityNewFaultProof, error) {
			event := new(AccountabilityNewFaultProof)
			if err := _Accountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the Accountability contract.
		type AccountabilitySlashingEventIterator struct {
			Event *AccountabilitySlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilitySlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilitySlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilitySlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilitySlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilitySlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilitySlashingEvent represents a SlashingEvent event raised by the Accountability contract.
		type AccountabilitySlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_Accountability *Accountability) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilitySlashingEventIterator, error) {







			logs, sub, err := _Accountability.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &AccountabilitySlashingEventIterator{contract: _Accountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_Accountability *Accountability) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilitySlashingEvent) (event.Subscription, error) {







			logs, sub, err := _Accountability.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilitySlashingEvent)
						if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_Accountability *Accountability) ParseSlashingEvent(log types.Log) (*AccountabilitySlashingEvent, error) {
			event := new(AccountabilitySlashingEvent)
			if err := _Accountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AccountabilityTestMetaData contains all meta data concerning the AccountabilityTest contract.
var AccountabilityTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canAccuse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"_rule\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"innocenceProofSubmissionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseSlashingRateMid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collusionFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorAccusation\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"getValidatorFaults\",\"outputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleMisbehaviour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidAccusation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidFaultProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"}],\"name\":\"handleValidInnocenceProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performSlashingTasks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoteGuiltyAccusations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newCommittee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enumAccountability.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"enumAccountability.Rule\",\"name\":\"rule\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rawProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageHash\",\"type\":\"uint256\"}],\"internalType\":\"structAccountability.Event\",\"name\":\"_event\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_epochOffencesCount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"0af86dc2": "addBeneficiary(address,address)",
		"01567739": "beneficiaries(address)",
		"7ccecadd": "canAccuse(address,uint8,uint256)",
		"4108a95a": "canSlash(address,uint8,uint256)",
		"79502c55": "config()",
		"a8031a1d": "distributeRewards(address,uint256)",
		"b5b7a184": "epochPeriod()",
		"0b791430": "events(uint256)",
		"6c9789b0": "finalize(bool)",
		"9cb22b06": "getValidatorAccusation(address)",
		"bebaa8fc": "getValidatorFaults(address)",
		"1e85f2e5": "handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"e05f8786": "handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"a48a9b50": "handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"239a49ba": "handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"51772af9": "handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"653cd199": "handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))",
		"931c7c68": "history(address)",
		"633b5e5e": "performSlashingTasks()",
		"7ec8be1d": "promoteGuiltyAccusations()",
		"e08b14ed": "setCommittee(address[])",
		"6b5f444c": "setEpochPeriod(uint256)",
		"24134570": "slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256),uint256)",
		"e7bb0b52": "slashingHistory(address,uint256)",
	},
	Bin: "",
}

// AccountabilityTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AccountabilityTestMetaData.ABI instead.
var AccountabilityTestABI = AccountabilityTestMetaData.ABI

// Deprecated: Use AccountabilityTestMetaData.Sigs instead.
// AccountabilityTestFuncSigs maps the 4-byte function signature to its string representation.
var AccountabilityTestFuncSigs = AccountabilityTestMetaData.Sigs

// AccountabilityTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccountabilityTestMetaData.Bin instead.
var AccountabilityTestBin = AccountabilityTestMetaData.Bin

// DeployAccountabilityTest deploys a new Ethereum contract, binding an instance of AccountabilityTest to it.
func (r *Runner) DeployAccountabilityTest(opts *runOptions, _autonity common.Address, _config AccountabilityConfig) (common.Address, uint64, *AccountabilityTest, error) {
	parsed, err := AccountabilityTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AccountabilityTestBin), _autonity, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &AccountabilityTest{contract: c}, nil
}

// AccountabilityTest is an auto generated Go binding around an Ethereum contract.
type AccountabilityTest struct {
	*contract
}

// Beneficiaries is a free data retrieval call binding the contract method 0x01567739.
//
// Solidity: function beneficiaries(address ) view returns(address)
func (_AccountabilityTest *AccountabilityTest) Beneficiaries(opts *runOptions, arg0 common.Address) (common.Address, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "beneficiaries", arg0)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// CanAccuse is a free data retrieval call binding the contract method 0x7ccecadd.
//
// Solidity: function canAccuse(address _offender, uint8 _rule, uint256 _block) view returns(bool _result, uint256 _deadline)
func (_AccountabilityTest *AccountabilityTest) CanAccuse(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (struct {
	Result   bool
	Deadline *big.Int
}, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "canAccuse", _offender, _rule, _block)

	outstruct := new(struct {
		Result   bool
		Deadline *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Result = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Deadline = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CanSlash is a free data retrieval call binding the contract method 0x4108a95a.
//
// Solidity: function canSlash(address _offender, uint8 _rule, uint256 _block) view returns(bool)
func (_AccountabilityTest *AccountabilityTest) CanSlash(opts *runOptions, _offender common.Address, _rule uint8, _block *big.Int) (bool, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "canSlash", _offender, _rule, _block)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 innocenceProofSubmissionWindow, uint256 baseSlashingRateLow, uint256 baseSlashingRateMid, uint256 collusionFactor, uint256 historyFactor, uint256 jailFactor)
func (_AccountabilityTest *AccountabilityTest) Config(opts *runOptions) (struct {
	InnocenceProofSubmissionWindow *big.Int
	BaseSlashingRateLow            *big.Int
	BaseSlashingRateMid            *big.Int
	CollusionFactor                *big.Int
	HistoryFactor                  *big.Int
	JailFactor                     *big.Int
}, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "config")

	outstruct := new(struct {
		InnocenceProofSubmissionWindow *big.Int
		BaseSlashingRateLow            *big.Int
		BaseSlashingRateMid            *big.Int
		CollusionFactor                *big.Int
		HistoryFactor                  *big.Int
		JailFactor                     *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InnocenceProofSubmissionWindow = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateLow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.BaseSlashingRateMid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CollusionFactor = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.HistoryFactor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.JailFactor = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// EpochPeriod is a free data retrieval call binding the contract method 0xb5b7a184.
//
// Solidity: function epochPeriod() view returns(uint256)
func (_AccountabilityTest *AccountabilityTest) EpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "epochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Events is a free data retrieval call binding the contract method 0x0b791430.
//
// Solidity: function events(uint256 ) view returns(uint8 eventType, uint8 rule, address reporter, address offender, bytes rawProof, uint256 id, uint256 block, uint256 epoch, uint256 reportingBlock, uint256 messageHash)
func (_AccountabilityTest *AccountabilityTest) Events(opts *runOptions, arg0 *big.Int) (struct {
	EventType      uint8
	Rule           uint8
	Reporter       common.Address
	Offender       common.Address
	RawProof       []byte
	Id             *big.Int
	Block          *big.Int
	Epoch          *big.Int
	ReportingBlock *big.Int
	MessageHash    *big.Int
}, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "events", arg0)

	outstruct := new(struct {
		EventType      uint8
		Rule           uint8
		Reporter       common.Address
		Offender       common.Address
		RawProof       []byte
		Id             *big.Int
		Block          *big.Int
		Epoch          *big.Int
		ReportingBlock *big.Int
		MessageHash    *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.EventType = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Rule = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.Reporter = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Offender = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RawProof = *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	outstruct.Id = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Epoch = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.ReportingBlock = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)
	outstruct.MessageHash = *abi.ConvertType(out[9], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// GetValidatorAccusation is a free data retrieval call binding the contract method 0x9cb22b06.
//
// Solidity: function getValidatorAccusation(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256))
func (_AccountabilityTest *AccountabilityTest) GetValidatorAccusation(opts *runOptions, _val common.Address) (AccountabilityEvent, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "getValidatorAccusation", _val)

	if err != nil {
		return *new(AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AccountabilityEvent)).(*AccountabilityEvent)
	return out0, consumed, err

}

// GetValidatorFaults is a free data retrieval call binding the contract method 0xbebaa8fc.
//
// Solidity: function getValidatorFaults(address _val) view returns((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256)[])
func (_AccountabilityTest *AccountabilityTest) GetValidatorFaults(opts *runOptions, _val common.Address) ([]AccountabilityEvent, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "getValidatorFaults", _val)

	if err != nil {
		return *new([]AccountabilityEvent), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AccountabilityEvent)).(*[]AccountabilityEvent)
	return out0, consumed, err

}

// History is a free data retrieval call binding the contract method 0x931c7c68.
//
// Solidity: function history(address ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTest) History(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "history", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SlashingHistory is a free data retrieval call binding the contract method 0xe7bb0b52.
//
// Solidity: function slashingHistory(address , uint256 ) view returns(uint256)
func (_AccountabilityTest *AccountabilityTest) SlashingHistory(opts *runOptions, arg0 common.Address, arg1 *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AccountabilityTest.call(opts, "slashingHistory", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// AddBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0x0af86dc2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function addBeneficiary(address _offender, address _reporter) returns()
func (_AccountabilityTest *AccountabilityTest) CallAddBeneficiary(r *Runner, opts *runOptions, _offender common.Address, _reporter common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "addBeneficiary", _offender, _reporter)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_AccountabilityTest *AccountabilityTest) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_AccountabilityTest *AccountabilityTest) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleAccusation is a free data retrieval call for a paid mutator transaction binding the contract method 0x1e85f2e5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleAccusation(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleAccusation", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleInnocenceProof is a free data retrieval call for a paid mutator transaction binding the contract method 0xe05f8786.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleInnocenceProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleInnocenceProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleMisbehaviour is a free data retrieval call for a paid mutator transaction binding the contract method 0xa48a9b50.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleMisbehaviour(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleMisbehaviour", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleValidAccusation is a free data retrieval call for a paid mutator transaction binding the contract method 0x239a49ba.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleValidAccusation(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleValidAccusation", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleValidFaultProof is a free data retrieval call for a paid mutator transaction binding the contract method 0x51772af9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleValidFaultProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleValidFaultProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// HandleValidInnocenceProof is a free data retrieval call for a paid mutator transaction binding the contract method 0x653cd199.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) CallHandleValidInnocenceProof(r *Runner, opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "handleValidInnocenceProof", _event)
	r.revertSnapshot(snap)
	return consumed, err

}

// PerformSlashingTasks is a free data retrieval call for a paid mutator transaction binding the contract method 0x633b5e5e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function performSlashingTasks() returns()
func (_AccountabilityTest *AccountabilityTest) CallPerformSlashingTasks(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "performSlashingTasks")
	r.revertSnapshot(snap)
	return consumed, err

}

// PromoteGuiltyAccusations is a free data retrieval call for a paid mutator transaction binding the contract method 0x7ec8be1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function promoteGuiltyAccusations() returns()
func (_AccountabilityTest *AccountabilityTest) CallPromoteGuiltyAccusations(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "promoteGuiltyAccusations")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe08b14ed.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_AccountabilityTest *AccountabilityTest) CallSetCommittee(r *Runner, opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "setCommittee", _newCommittee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_AccountabilityTest *AccountabilityTest) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// Slash is a free data retrieval call for a paid mutator transaction binding the contract method 0x24134570.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event, uint256 _epochOffencesCount) returns()
func (_AccountabilityTest *AccountabilityTest) CallSlash(r *Runner, opts *runOptions, _event AccountabilityEvent, _epochOffencesCount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AccountabilityTest.call(opts, "slash", _event, _epochOffencesCount)
	r.revertSnapshot(snap)
	return consumed, err

}

// AddBeneficiary is a paid mutator transaction binding the contract method 0x0af86dc2.
//
// Solidity: function addBeneficiary(address _offender, address _reporter) returns()
func (_AccountabilityTest *AccountabilityTest) AddBeneficiary(opts *runOptions, _offender common.Address, _reporter common.Address) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "addBeneficiary", _offender, _reporter)
	return consumed, err
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_AccountabilityTest *AccountabilityTest) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_AccountabilityTest *AccountabilityTest) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// HandleAccusation is a paid mutator transaction binding the contract method 0x1e85f2e5.
//
// Solidity: function handleAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleAccusation(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleAccusation", _event)
	return consumed, err
}

// HandleInnocenceProof is a paid mutator transaction binding the contract method 0xe05f8786.
//
// Solidity: function handleInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleInnocenceProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleInnocenceProof", _event)
	return consumed, err
}

// HandleMisbehaviour is a paid mutator transaction binding the contract method 0xa48a9b50.
//
// Solidity: function handleMisbehaviour((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleMisbehaviour(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleMisbehaviour", _event)
	return consumed, err
}

// HandleValidAccusation is a paid mutator transaction binding the contract method 0x239a49ba.
//
// Solidity: function handleValidAccusation((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleValidAccusation(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleValidAccusation", _event)
	return consumed, err
}

// HandleValidFaultProof is a paid mutator transaction binding the contract method 0x51772af9.
//
// Solidity: function handleValidFaultProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleValidFaultProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleValidFaultProof", _event)
	return consumed, err
}

// HandleValidInnocenceProof is a paid mutator transaction binding the contract method 0x653cd199.
//
// Solidity: function handleValidInnocenceProof((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event) returns()
func (_AccountabilityTest *AccountabilityTest) HandleValidInnocenceProof(opts *runOptions, _event AccountabilityEvent) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "handleValidInnocenceProof", _event)
	return consumed, err
}

// PerformSlashingTasks is a paid mutator transaction binding the contract method 0x633b5e5e.
//
// Solidity: function performSlashingTasks() returns()
func (_AccountabilityTest *AccountabilityTest) PerformSlashingTasks(opts *runOptions) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "performSlashingTasks")
	return consumed, err
}

// PromoteGuiltyAccusations is a paid mutator transaction binding the contract method 0x7ec8be1d.
//
// Solidity: function promoteGuiltyAccusations() returns()
func (_AccountabilityTest *AccountabilityTest) PromoteGuiltyAccusations(opts *runOptions) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "promoteGuiltyAccusations")
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _newCommittee) returns()
func (_AccountabilityTest *AccountabilityTest) SetCommittee(opts *runOptions, _newCommittee []common.Address) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "setCommittee", _newCommittee)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_AccountabilityTest *AccountabilityTest) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

// Slash is a paid mutator transaction binding the contract method 0x24134570.
//
// Solidity: function slash((uint8,uint8,address,address,bytes,uint256,uint256,uint256,uint256,uint256) _event, uint256 _epochOffencesCount) returns()
func (_AccountabilityTest *AccountabilityTest) Slash(opts *runOptions, _event AccountabilityEvent, _epochOffencesCount *big.Int) (uint64, error) {
	_, consumed, err := _AccountabilityTest.call(opts, "slash", _event, _epochOffencesCount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AccountabilityTestInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the AccountabilityTest contract.
		type AccountabilityTestInnocenceProvenIterator struct {
			Event *AccountabilityTestInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestInnocenceProven represents a InnocenceProven event raised by the AccountabilityTest contract.
		type AccountabilityTestInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_AccountabilityTest *AccountabilityTest) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestInnocenceProvenIterator{contract: _AccountabilityTest.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *AccountabilityTestInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestInnocenceProven)
						if err := _AccountabilityTest.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) ParseInnocenceProven(log types.Log) (*AccountabilityTestInnocenceProven, error) {
			event := new(AccountabilityTestInnocenceProven)
			if err := _AccountabilityTest.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityTestNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the AccountabilityTest contract.
		type AccountabilityTestNewAccusationIterator struct {
			Event *AccountabilityTestNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestNewAccusation represents a NewAccusation event raised by the AccountabilityTest contract.
		type AccountabilityTestNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_AccountabilityTest *AccountabilityTest) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestNewAccusationIterator{contract: _AccountabilityTest.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *AccountabilityTestNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestNewAccusation)
						if err := _AccountabilityTest.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) ParseNewAccusation(log types.Log) (*AccountabilityTestNewAccusation, error) {
			event := new(AccountabilityTestNewAccusation)
			if err := _AccountabilityTest.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityTestNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the AccountabilityTest contract.
		type AccountabilityTestNewFaultProofIterator struct {
			Event *AccountabilityTestNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestNewFaultProof represents a NewFaultProof event raised by the AccountabilityTest contract.
		type AccountabilityTestNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_AccountabilityTest *AccountabilityTest) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*AccountabilityTestNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestNewFaultProofIterator{contract: _AccountabilityTest.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *AccountabilityTestNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestNewFaultProof)
						if err := _AccountabilityTest.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_AccountabilityTest *AccountabilityTest) ParseNewFaultProof(log types.Log) (*AccountabilityTestNewFaultProof, error) {
			event := new(AccountabilityTestNewFaultProof)
			if err := _AccountabilityTest.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AccountabilityTestSlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the AccountabilityTest contract.
		type AccountabilityTestSlashingEventIterator struct {
			Event *AccountabilityTestSlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AccountabilityTestSlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AccountabilityTestSlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AccountabilityTestSlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AccountabilityTestSlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AccountabilityTestSlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AccountabilityTestSlashingEvent represents a SlashingEvent event raised by the AccountabilityTest contract.
		type AccountabilityTestSlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_AccountabilityTest *AccountabilityTest) FilterSlashingEvent(opts *bind.FilterOpts) (*AccountabilityTestSlashingEventIterator, error) {







			logs, sub, err := _AccountabilityTest.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &AccountabilityTestSlashingEventIterator{contract: _AccountabilityTest.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_AccountabilityTest *AccountabilityTest) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *AccountabilityTestSlashingEvent) (event.Subscription, error) {







			logs, sub, err := _AccountabilityTest.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AccountabilityTestSlashingEvent)
						if err := _AccountabilityTest.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_AccountabilityTest *AccountabilityTest) ParseSlashingEvent(log types.Log) (*AccountabilityTestSlashingEvent, error) {
			event := new(AccountabilityTestSlashingEvent)
			if err := _AccountabilityTest.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AutonityMetaData contains all meta data concerning the Autonity contract.
var AutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator[]\",\"name\":\"_validators\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withholdingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposerRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"withheldRewardsPool\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"omissionAccountabilityContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBeAppliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scheduleVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"NewSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER_REWARD_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHHOLDING_THRESHOLD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withholdingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposerRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"withheldRewardsPool\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"omissionAccountabilityContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriodToBeApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getEpochByHeight\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxScheduleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidatorState\",\"outputs\":[{\"internalType\":\"enumValidatorState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxScheduleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOmissionAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposerRewardRate\",\"type\":\"uint256\"}],\"name\":\"setProposerRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"}],\"name\":\"setSlasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setWithheldRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withholdingThreshold\",\"type\":\"uint256\"}],\"name\":\"setWithholdingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"5115840b": "PROPOSER_REWARD_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"e490389e": "WITHHOLDING_THRESHOLD_PRECISION()",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"9358928b": "circulatingSupply()",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"354c40a7": "createSchedule(address,uint256,uint256,uint256)",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"573963b8": "epochPeriodToBeApplied()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"4da3baec": "finalizeInitialization(uint256)",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"0aac2da1": "getCurrentEpochPeriod()",
		"affb1cf1": "getEpochByHeight(uint256)",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"fed76a56": "getMaxScheduleDuration()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"8d347287": "getUnbondingShare(uint256)",
		"1904bb2e": "getValidator(address)",
		"5b7d6c36": "getValidatorState(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"e294df7c": "isUnbondingReleased(uint256)",
		"154d76d7": "jail(address,uint256,uint8)",
		"8ef8c2fd": "jailbound(address,uint8)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"8bb2e477": "setMaxScheduleDuration(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"b47c3eaa": "setOmissionAccountabilityContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"416f86a2": "setProposerRewardRate(uint256)",
		"aabc2496": "setSlasher(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"39f9eb1f": "setWithheldRewardsPool(address)",
		"905d76e9": "setWithholdingThreshold(uint256)",
		"02fb4d85": "slash(address,uint256)",
		"122b4122": "slashAndJail(address,uint256,uint256,uint8,uint8)",
		"b1344271": "slasher()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600e556000600f553480156200001b57600080fd5b506040516200dc043803806200dc048339810160408190526200003e91620010b5565b6026546000036200006757603880546001600160a01b031916331790556200006782826200006f565b505062001571565b80518051601055602080820151601155604080830151601255606080840151601355608080850151601481905560a08087015160155560c08088015160165560e080890151601780546001600160a01b03199081166001600160a01b0393841617909155610100909a0151601880548c16918316919091179055888b01518051601980548d16918416919091179055808a0151601a80548d1691841691909117905580890151601b80548d1691841691909117905580880151601c80548d1691841691909117905580870151601d80548d1691841691909117905593840151601e80548c1691831691909117905591830151601f80548b16918416919091179055919091015186548816908216178655848801518051602180549099169216919091179096559385015160228190558584015160235585830151602455940151602555840151602655602a9290925560375551620001cd9062000c9d565b604051809103906000f080158015620001ea573d6000803e3d6000fd5b50603980546001600160a01b0319166001600160a01b039290921691909117905560405130906200021b9062000cab565b6001600160a01b039091168152602001604051809103906000f08015801562000248573d6000803e3d6000fd5b50603a80546001600160a01b0319166001600160a01b039290921691909117905560005b82518110156200054a5760008382815181106200028d576200028d620012e7565b602002602001015160a0015190506000848381518110620002b257620002b2620012e7565b60200260200101516101a00181815250506000848381518110620002da57620002da620012e7565b602002602001015161018001906001600160a01b031690816001600160a01b0316815250506000848381518110620003165762000316620012e7565b602002602001015160a001818152505060008483815181106200033d576200033d620012e7565b60209081029190910101516101c001526012548451859084908110620003675762000367620012e7565b6020026020010151608001818152505060008483815181106200038e576200038e620012e7565b602002602001015161024001906005811115620003af57620003af620012fd565b90816005811115620003c557620003c5620012fd565b815250506000848381518110620003e057620003e0620012e7565b60200260200101516101600181815250506200041e8483815181106200040a576200040a620012e7565b60200260200101516200054f60201b60201c565b6200044b848381518110620004375762000437620012e7565b60200260200101516200068a60201b60201c565b8060336000868581518110620004655762000465620012e7565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000828254620004a2919062001329565b925050819055508060356000828254620004bd919062001329565b925050819055508060366000828254620004d8919062001329565b9250508190555062000532848381518110620004f857620004f8620012e7565b602002602001015160200151828685815181106200051a576200051a620012e7565b6020026020010151600001516200092c60201b60201c565b50508080620005419062001345565b9150506200026c565b505050565b600062000566826060015162000b2f60201b60201c565b6001600160a01b03909116602084015290508015620005ba5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064015b60405180910390fd5b6020808301516001600160a01b039081166000908152603490925260409091206001015416156200062e5760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c72656164792072656769737465726564000000006044820152606401620005b1565b61271082608001511115620006865760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401620005b1565b5050565b6101808101516001600160a01b031662000789576039546001600160a01b0316620007035760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b6064820152608401620005b1565b602754600090620007149062000b7d565b905081602001518260000151836080015183603960009054906101000a90046001600160a01b03166040516200074a9062000cb9565b6200075a95949392919062001361565b604051809103906000f08015801562000777573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602780546001808201835560009283527f98a476f1687bc3d60a2da2adbcba2c46958e61fa2fb4042cd7bc5816a710195b90910180546001600160a01b03199081166001600160a01b03958616179091558451841683526034909552604091829020865181548716908516178155935190840180548616918416919091179055840151600283018054909416911617909155606082015182919060038201906200083b90826200144b565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620008fa90826200144b565b5061024082015160128201805460ff19166001836005811115620009225762000922620012fd565b0217905550505050565b60008083116200098b5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b6064820152608401620005b1565b6001600160a01b038216600090815260336020526040902054831115620009f55760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e636500000000006044820152606401620005b1565b6001600160a01b0382166000908152603360205260408120805485929062000a1f90849062001517565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000aae8362001345565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462000b25919062001517565b9695505050505050565b60008062000b3c62000cc7565b60008060ff9050604083875160208901845afa62000b5957600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000ba55750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000bd5578062000bbc8162001345565b915062000bcd9050600a8362001543565b915062000ba9565b6000816001600160401b0381111562000bf25762000bf262000ce5565b6040519080825280601f01601f19166020018201604052801562000c1d576020820181803683370190505b5090505b841562000c955762000c3560018362001517565b915062000c44600a866200155a565b62000c5190603062001329565b60f81b81838151811062000c695762000c69620012e7565b60200101906001600160f81b031916908160001a90535062000c8d600a8662001543565b945062000c21565b949350505050565b6116d4806200b1cd83390190565b610d98806200c8a183390190565b6105cb806200d63983390190565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000d205762000d2062000ce5565b60405290565b60405161012081016001600160401b038111828210171562000d205762000d2062000ce5565b60405161026081016001600160401b038111828210171562000d205762000d2062000ce5565b604051601f8201601f191681016001600160401b038111828210171562000d9d5762000d9d62000ce5565b604052919050565b6001600160a01b038116811462000dbb57600080fd5b50565b805162000dcb8162000da5565b919050565b60005b8381101562000ded57818101518382015260200162000dd3565b50506000910152565b600082601f83011262000e0857600080fd5b81516001600160401b0381111562000e245762000e2462000ce5565b62000e39601f8201601f191660200162000d72565b81815284602083860101111562000e4f57600080fd5b62000c9582602083016020870162000dd0565b80516006811062000dcb57600080fd5b600061010080838503121562000e8757600080fd5b604051908101906001600160401b038211818310171562000eac5762000eac62000ce5565b816040528092508351915062000ec28262000da5565b81815262000ed36020850162000dbe565b602082015262000ee66040850162000dbe565b604082015262000ef96060850162000dbe565b606082015262000f0c6080850162000dbe565b608082015262000f1f60a0850162000dbe565b60a082015262000f3260c0850162000dbe565b60c082015262000f4560e0850162000dbe565b60e0820152505092915050565b600060a0828403121562000f6557600080fd5b60405160a081016001600160401b038111828210171562000f8a5762000f8a62000ce5565b8060405250809150825162000f9f8162000da5565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201525092915050565b60008183036102e081121562000fe757600080fd5b62000ff162000cfb565b9150610120808212156200100457600080fd5b6200100e62000d26565b9150835182526020840151602083015260408401516040830152606084015160608301526080840151608083015260a084015160a083015260c084015160c08301526200105e60e0850162000dbe565b60e08301526101006200107381860162000dbe565b90830152818352620010888585830162000e72565b602084015250506200109f83610220840162000f52565b60408201526102c0820151606082015292915050565b6000806103008385031215620010ca57600080fd5b82516001600160401b0380821115620010e257600080fd5b818501915085601f830112620010f757600080fd5b81516020828211156200110e576200110e62000ce5565b8160051b6200111f82820162000d72565b928352848101820192828101908a8511156200113a57600080fd5b83870192505b84831015620012c6578251868111156200115957600080fd5b8701610260818d03601f190112156200117157600080fd5b6200117b62000d4c565b6200118886830162000dbe565b8152620011986040830162000dbe565b86820152620011aa6060830162000dbe565b6040820152608082015188811115620011c257600080fd5b620011d28e888386010162000df6565b60608301525060a0820151608082015260c082015160a082015260e082015160c082015261010082015160e0820152610120820151610100820152610140820151610120820152610160820151610140820152610180820151610160820152620012406101a0830162000dbe565b6101808201526101c08201516101a08201526101e08201516101c08201526102008201516101e082015261022082015161020082015261024080830151898111156200128b57600080fd5b6200129b8f898387010162000df6565b61022084015250620012b1610260840162000e62565b90820152835250918301919083019062001140565b809850505050620012da8882890162000fd2565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156200133f576200133f62001313565b92915050565b6000600182016200135a576200135a62001313565b5060010190565b600060018060a01b038088168352808716602084015285604084015260a0606084015284518060a08501526200139f8160c086016020890162000dd0565b9316608083015250601f91909101601f19160160c001949350505050565b600181811c90821680620013d257607f821691505b602082108103620013f357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200054a57600081815260208120601f850160051c81016020861015620014225750805b601f850160051c820191505b8181101562001443578281556001016200142e565b505050505050565b81516001600160401b0381111562001467576200146762000ce5565b6200147f81620014788454620013bd565b84620013f9565b602080601f831160018114620014b757600084156200149e5750858301515b600019600386901b1c1916600185901b17855562001443565b600085815260208120601f198616915b82811015620014e857888601518255948401946001909101908401620014c7565b5085821015620015075787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156200133f576200133f62001313565b634e487b7160e01b600052601260045260246000fd5b6000826200155557620015556200152d565b500490565b6000826200156c576200156c6200152d565b500690565b619c4c80620015816000396000f3fe608060405260043610620005375760003560e01c80638bac7dad11620002ab578063b2ea9adb116200016b578063d372c07e11620000d7578063e490389e116200008d578063e490389e1462000808578063e7f43c6814620013b5578063f03b959d14620013d5578063f1d592a714620013fa578063f7866ee3146200141f578063fed76a56146200143f57005b8063d372c07e14620012ac578063d5f3948814620012d1578063d886f8a214620012f3578063dd62ed3e1462001318578063dfb1a4d21462001362578063e294df7c146200137957005b8063b7ab4db5116200012d578063b7ab4db514620011e6578063c9d97af4146200120d578063cb696f541462001225578063ceaad455146200124a578063cf9c5719146200126f578063cfd19fb9146200128757005b8063b2ea9adb146200112a578063b3ecbadd146200114f578063b46e55201462001174578063b47c3eaa1462001199578063b66b3e7914620011be57005b80639dc29fac1162000217578063aabc249611620001cd578063aabc24961462001056578063ab8f6ffe146200107b578063ae1da0b514620010a2578063ae1f5fa014620010ba578063affb1cf114620010e3578063b1344271146200110857005b80639dc29fac1462000f74578063a515366a1462000f99578063a5d059ca1462000fbe578063a8b2216e1462000fe3578063a9059cbb146200100a578063a9fd1a8f146200102f57005b80639358928b116200026d5780639358928b1462000eb857806395d89b411462000ecf57806396b477cb1462000efd57806396f18a321462000f225780639ac310741462000f445780639c98e4711462000f5c57005b80638bac7dad1462000dff5780638bb2e4771462000e245780638d3472871462000e495780638ef8c2fd1462000e6e578063905d76e91462000e9357005b8063416f86a211620003f757806370a082311162000363578063819b64631162000319578063819b64631462000d3a578063833b1fce1462000d5157806384467fdb1462000d85578063852c48491462000daa578063872cf0591462000dcf57806389c614b81462000de757005b806370a082311462000a0c5780637264c4da1462000a46578063731b3a031462000aae57806377e741c71462000ad7578063784304b51462000afc57806379502c551462000b2157005b80635115840b11620003b95780635115840b1462000808578063520fdbbc146200095f578063573963b814620009845780635b7d6c36146200099c5780636b5f444c14620009d05780636fd2c80b14620009f557005b8063416f86a214620008ad5780634364596914620008d2578063496ccd9b14620008e95780634bb278f3146200090e5780634da3baec146200093a57005b8063154d76d711620004a357806329070c6d116200045957806329070c6d14620007f15780632f2c3f2e1462000808578063313ce5671462000820578063354c40a7146200083e57806339f9eb1f146200086357806340c10f19146200088857005b8063154d76d7146200071b5780631604e416146200074057806318160ddd14620007585780631904bb2e146200076f57806323b872dd14620007a357806325ce1bb914620007c857005b80630ae65e7a11620004f95780630ae65e7a146200063b5780630d8e6e2c1462000660578063112206331462000677578063114eaf55146200068e578063122b412214620006b35780631250a28d14620006f657005b806302fb4d85146200054157806306fdde031462000579578063088566e914620005b4578063095ea7b314620005ee5780630aac2da1146200062457005b366200053f57005b005b3480156200054e57600080fd5b5062000566620005603660046200824c565b62001456565b6040519081526020015b60405180910390f35b3480156200058657600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b604051620005709190620082cf565b348015620005c157600080fd5b5062000566620005d3366004620082e4565b6001600160a01b031660009081526001602052604090205490565b348015620005fb57600080fd5b50620006136200060d3660046200824c565b620016d8565b604051901515815260200162000570565b3480156200063157600080fd5b5060225462000566565b3480156200064857600080fd5b506200053f6200065a366004620082e4565b620016f1565b3480156200066d57600080fd5b5060265462000566565b3480156200068457600080fd5b5060115462000566565b3480156200069b57600080fd5b506200053f620006ad36600462008304565b6200178f565b348015620006c057600080fd5b50620006d8620006d23660046200832c565b620017c1565b60408051938452602084019290925215159082015260600162000570565b3480156200070357600080fd5b506200053f62000715366004620082e4565b62001a55565b3480156200072857600080fd5b50620005666200073a36600462008392565b62001aa4565b3480156200074d57600080fd5b506200056660305481565b3480156200076557600080fd5b5060355462000566565b3480156200077c57600080fd5b50620007946200078e366004620082e4565b62001cea565b60405162000570919062008557565b348015620007b057600080fd5b5062000613620007c23660046200856c565b62001cff565b348015620007d557600080fd5b506028546000908152602e602052604090206003015462000566565b348015620007fe57600080fd5b5060105462000566565b3480156200081557600080fd5b506200056661271081565b3480156200082d57600080fd5b506040516012815260200162000570565b3480156200084b57600080fd5b506200053f6200085d366004620085b2565b62001e04565b3480156200087057600080fd5b506200053f62000882366004620082e4565b62001edc565b3480156200089557600080fd5b506200053f620008a73660046200824c565b62001f83565b348015620008ba57600080fd5b506200053f620008cc36600462008304565b62001fc0565b348015620008df57600080fd5b5060235462000566565b348015620008f657600080fd5b506200053f62000908366004620082e4565b6200203b565b3480156200091b57600080fd5b506200092662002145565b604051620005709695949392919062008672565b3480156200094757600080fd5b506200053f6200095936600462008304565b620029ff565b3480156200096c57600080fd5b506200053f6200097e366004620082e4565b62002bb0565b3480156200099157600080fd5b5062000566602a5481565b348015620009a957600080fd5b50620009c1620009bb366004620082e4565b62002e0c565b604051620005709190620086b5565b348015620009dd57600080fd5b506200053f620009ef36600462008304565b62002e24565b34801562000a0257600080fd5b5060135462000566565b34801562000a1957600080fd5b506200056662000a2b366004620082e4565b6001600160a01b031660009081526033602052604090205490565b34801562000a5357600080fd5b5062000a6b62000a653660046200824c565b62003020565b604051620005709190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801562000abb57600080fd5b506028546000908152602e602052604090206002015462000566565b34801562000ae457600080fd5b506200053f62000af636600462008304565b62003126565b34801562000b0957600080fd5b506200053f62000b1b366004620087c0565b62003158565b34801562000b2e57600080fd5b50604080516101208101825260105481526011546020808301919091526012548284015260135460608084019190915260145460808085019190915260155460a08086019190915260165460c0808701919091526017546001600160a01b0390811660e0808901919091526018548216610100808a019190915289519081018a5260195483168152601a54831681890152601b548316818b0152601c54831681880152601d54831681870152601e54831681860152601f548316938101939093528654821690830152875192830188526021541682526022549482019490945260235495810195909552602454918501919091526025549084015260265462000c35939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0808a01518186015260c0808b01518187015260e0808c01516001600160a01b03908116828901526101009c8d015181169c88019c909c528a518c16610120880152858b01518c166101408801528a8801518c16610160880152848b01518c16610180880152838b01518c166101a0880152918a01518b166101c08701528901518a166101e0860152909701518816610200840152855190971661022083015284015161024082015290830151610260820152938201516102808501529101516102a08301526102c08201526102e00162000570565b34801562000d4757600080fd5b5060245462000566565b34801562000d5e57600080fd5b50601a546001600160a01b03165b6040516001600160a01b03909116815260200162000570565b34801562000d9257600080fd5b506200053f62000da436600462008815565b62003303565b34801562000db757600080fd5b506200053f62000dc93660046200824c565b6200342b565b34801562000ddc57600080fd5b506200053f620035bc565b34801562000df457600080fd5b5062000566602c5481565b34801562000e0c57600080fd5b506200053f62000e1e36600462008304565b620035f8565b34801562000e3157600080fd5b506200053f62000e4336600462008304565b6200367c565b34801562000e5657600080fd5b506200056662000e6836600462008304565b620036ae565b34801562000e7b57600080fd5b506200053f62000e8d366004620088bd565b62003727565b34801562000ea057600080fd5b506200053f62000eb236600462008304565b6200395e565b34801562000ec557600080fd5b5060365462000566565b34801562000edc57600080fd5b50604080518082019091526003815262272a2760e91b6020820152620005a5565b34801562000f0a57600080fd5b506200056662000f1c36600462008304565b620039d9565b34801562000f2f57600080fd5b5060395462000d6c906001600160a01b031681565b34801562000f5157600080fd5b506200056660375481565b34801562000f6957600080fd5b5062000566602d5481565b34801562000f8157600080fd5b506200053f62000f933660046200824c565b62003a71565b34801562000fa657600080fd5b506200056662000fb83660046200824c565b62003ba9565b34801562000fcb57600080fd5b506200056662000fdd3660046200824c565b62003c90565b34801562000ff057600080fd5b5062000ffb62003d33565b604051620005709190620088fb565b3480156200101757600080fd5b5062000613620010293660046200824c565b62003e16565b3480156200103c57600080fd5b506200104762003e6e565b60405162000570919062008961565b3480156200106357600080fd5b506200053f62001075366004620082e4565b62003ffd565b3480156200108857600080fd5b5062001093620040b8565b604051620005709190620089b3565b348015620010af57600080fd5b5062000566602b5481565b348015620010c757600080fd5b50620010d2620041ca565b604051620005709392919062008a0e565b348015620010f057600080fd5b50620010476200110236600462008304565b62004515565b3480156200111557600080fd5b50603a5462000d6c906001600160a01b031681565b3480156200113757600080fd5b506200053f6200114936600462008a4d565b6200472f565b3480156200115c57600080fd5b506200053f6200116e366004620082e4565b62004776565b3480156200118157600080fd5b506200053f62001193366004620082e4565b620047c5565b348015620011a657600080fd5b506200053f620011b8366004620082e4565b62004acd565b348015620011cb57600080fd5b50620011d662004b1c565b6040516200057092919062008aad565b348015620011f357600080fd5b50620011fe62004c53565b60405162000570919062008adf565b3480156200121a57600080fd5b506200056660285481565b3480156200123257600080fd5b506200053f6200124436600462008304565b62004cb7565b3480156200125757600080fd5b506200053f62001269366004620082e4565b62004d1f565b3480156200127c57600080fd5b506200053f62004d6e565b3480156200129457600080fd5b506200053f620012a6366004620082e4565b62004dc3565b348015620012b957600080fd5b506200053f620012cb366004620082e4565b62004e12565b348015620012de57600080fd5b5060385462000d6c906001600160a01b031681565b3480156200130057600080fd5b506200053f62001312366004620082e4565b62004e61565b3480156200132557600080fd5b50620005666200133736600462008af4565b6001600160a01b03918216600090815260326020908152604080832093909416825291909152205490565b3480156200136f57600080fd5b50602a5462000566565b3480156200138657600080fd5b50620006136200139836600462008304565b600090815260096020526040902060050154610100900460ff1690565b348015620013c257600080fd5b506021546001600160a01b031662000d6c565b348015620013e257600080fd5b506200053f620013f4366004620082e4565b62004eb0565b3480156200140757600080fd5b506200053f62001419366004620082e4565b62004eff565b3480156200142c57600080fd5b506018546001600160a01b031662000d6c565b3480156200144c57600080fd5b5060255462000566565b6019546000906001600160a01b03163314806200147d57506020546001600160a01b031633145b620014a55760405162461bcd60e51b81526004016200149c9062008b27565b60405180910390fd5b620014af6200806a565b603a546001600160a01b031663f774fac0620014cb8662004fb8565b856040518363ffffffff1660e01b8152600401620014eb92919062008b6f565b6000604051808303816000875af11580156200150b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001535919081019062008d5f565b6018546001600160a01b0316600090815260336020526040812080549295509293508492916200156790849062008dbf565b90915550506001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201518291906003820190620015e2908262008e5b565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620016a1908262008e5b565b5061024082015160128201805460ff19166001836005811115620016c957620016c9620083d9565b02179055509050505092915050565b6000620016e7338484620052b3565b5060015b92915050565b620016fb620053dc565b6001600160a01b03808216600081815260346020526040902060010154909116146200173b5760405162461bcd60e51b81526004016200149c9062008f27565b6001600160a01b03818116600090815260346020526040902054163314620017775760405162461bcd60e51b81526004016200149c9062008f5e565b62001782816200542b565b6200178c60008055565b50565b6021546001600160a01b03163314620017bc5760405162461bcd60e51b81526004016200149c9062008faa565b601355565b601954600090819081906001600160a01b0316331480620017ec57506020546001600160a01b031633145b6200180b5760405162461bcd60e51b81526004016200149c9062008b27565b620018156200806a565b603a546001600160a01b03166364d61bbe620018318b62004fb8565b8a8a8a8a6040518663ffffffff1660e01b81526004016200185795949392919062008fe1565b6000604051808303816000875af115801562001877573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018a1919081019062009033565b6102008301516018546001600160a01b031660009081526033602052604081208054949950919750919550929350869291620018df90849062008dbf565b90915550506001600160a01b03808a16600090815260346020908152604091829020845181549085166001600160a01b0319918216178255918501516001820180549186169184169190911790559184015160028301805491909416911617909155606082015182919060038201906200195a908262008e5b565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062001a19908262008e5b565b5061024082015160128201805460ff1916600183600581111562001a415762001a41620083d9565b021790555090505050955095509592505050565b6021546001600160a01b0316331462001a825760405162461bcd60e51b81526004016200149c9062008faa565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6019546000906001600160a01b031633148062001acb57506020546001600160a01b031633145b62001aea5760405162461bcd60e51b81526004016200149c9062008b27565b603a546000906001600160a01b031663f189d66c62001b098762004fb8565b86866040518463ffffffff1660e01b815260040162001b2b9392919062009086565b6000604051808303816000875af115801562001b4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b759190810190620090b2565b6001600160a01b03808716600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201519192508291600382019062001bed908262008e5b565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062001cac908262008e5b565b5061024082015160128201805460ff1916600183600581111562001cd45762001cd4620083d9565b02179055505050610200015190505b9392505050565b62001cf46200806a565b620016eb8262004fb8565b6001600160a01b03831660009081526032602090815260408083203384529091528120548281101562001d865760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016200149c565b62001d938585856200551b565b62001dab853362001da58685620090ea565b620052b3565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405162001df191815260200190565b60405180910390a3506001949350505050565b6021546001600160a01b0316331462001e315760405162461bcd60e51b81526004016200149c9062008faa565b60255481111562001ea25760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b60648201526084016200149c565b62001eae8484620055e1565b826036600082825462001ec29190620090ea565b9091555062001ed690508484848462005682565b50505050565b6021546001600160a01b0316331462001f095760405162461bcd60e51b81526004016200149c9062008faa565b6001600160a01b03811662001f615760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c2063616e6e6f74206265207a65726f2061646472657373000000000060448201526064016200149c565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462001fb05760405162461bcd60e51b81526004016200149c9062008faa565b62001fbc8282620055e1565b5050565b6021546001600160a01b0316331462001fed5760405162461bcd60e51b81526004016200149c9062008faa565b612710811115620020365760405162461bcd60e51b815260206004820152601260248201527143616e6e6f7420657863656564203130302560701b60448201526064016200149c565b601655565b6021546001600160a01b03163314620020685760405162461bcd60e51b81526004016200149c9062008faa565b601a80546001600160a01b0319166001600160a01b03838116918217909255601b54604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b158015620020c757600080fd5b505af1158015620020dc573d6000803e3d6000fd5b5050601d54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b1580156200212957600080fd5b505af11580156200213e573d6000803e3d6000fd5b5050505050565b60385460009081906060908290819081906001600160a01b03163314620021805760405162461bcd60e51b81526004016200149c9062009100565b6200218a620053dc565b43602b8190556028546000828152602960209081526040808320849055928252602e90528190206003015460195491516306c9789b60e41b815292101560048301819052916001600160a01b0390911690636c9789b090602401600060405180830381600087803b158015620021ff57600080fd5b505af115801562002214573d6000803e3d6000fd5b50506020546040516306c9789b60e41b81528415156004820152600093506001600160a01b039091169150636c9789b0906024016020604051808303816000875af115801562002268573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200228e919062009143565b90508115620027b057601f54603654603754602c546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa158015620022ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002325919062009143565b90508060375410156200233757506037545b620023433082620055e1565b8060376000828254620023579190620090ea565b909155506200236890504262005904565b603660008282546200237b919062008dbf565b9091555050306000908152603360205260409020546200239d90479062005ac4565b620023a76200645d565b620023b16200654c565b6000806000620023c0620041ca565b601a5460405163422811f960e11b815293965091945092506001600160a01b03169063845023f290620023f890869060040162008adf565b600060405180830381600087803b1580156200241357600080fd5b505af115801562002428573d6000803e3d6000fd5b505060195460405163e08b14ed60e01b81526001600160a01b03909116925063e08b14ed91506200245e90859060040162008adf565b600060405180830381600087803b1580156200247957600080fd5b505af11580156200248e573d6000803e3d6000fd5b50506020546040516338f7bbe760e21b81526001600160a01b03909116925063e3deef9c9150620024c790602f9085906004016200915d565b600060405180830381600087803b158015620024e257600080fd5b505af1158015620024f7573d6000803e3d6000fd5b5050602a5460225414801592509050620025125750602a5415155b156200258057602a546022819055601954604051631ad7d11360e21b815260048101929092526001600160a01b031690636b5f444c90602401600060405180830381600087803b1580156200256657600080fd5b505af11580156200257b573d6000803e3d6000fd5b505050505b602054604051633009330b60e21b81524360048201526001600160a01b039091169063c024cc2c90602401600060405180830381600087803b158015620025c657600080fd5b505af1158015620025db573d6000803e3d6000fd5b50506028546000908152602e602052604081206002015460225490935090915062002607904362008dbf565b905042602c8190555060016028600082825462002625919062008dbf565b909155505060285460408051602f805460c0602082028401810190945260a083018181526200276d9594849391929060009085015b8282101562002748576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620026b09062008dd5565b80601f0160208091040260200160405190810160405280929190818152602001828054620026de9062008dd5565b80156200272f5780601f1062002703576101008083540402835291602001916200272f565b820191906000526020600020905b8154815290600101906020018083116200271157829003601f168201915b505050505081525050815260200190600101906200265a565b5050505081526020018581526020014381526020018481526020018a81525062006669565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335602854604051620027a191815260200190565b60405180910390a15050505050505b601a5460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af1158015620027fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002822919062009275565b905080156200289e57601b546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af192505050801562002896575060408051601f3d908101601f19168201909252620028939181019062009275565b60015b156200289e57505b6005546028546000908152602e602090815260408083206001810154600390910154602f805484518187028101870190955280855260ff909716968a969195939492938a939287929184015b82821015620029d8576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620029409062008dd5565b80601f01602080910402602001604051908101604052809291908181526020018280546200296e9062008dd5565b8015620029bf5780601f106200299357610100808354040283529160200191620029bf565b820191906000526020600020905b815481529060010190602001808311620029a157829003601f168201915b50505050508152505081526020019060010190620028ea565b505050509350985098509850985098509850505050620029f760008055565b909192939495565b6038546001600160a01b0316331462002a2c5760405162461bcd60e51b81526004016200149c9062009100565b62002a36620053dc565b62002a406200645d565b62002a4a620041ca565b505042602c555043602b81905560009081526029602090815260408083208390556028548151602f805460c09581028301860190945260a082018481526200178296939592948594919390919085015b8282101562002b88576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162002af09062008dd5565b80601f016020809104026020016040519081016040528092919081815260200182805462002b1e9062008dd5565b801562002b6f5780601f1062002b435761010080835404028352916020019162002b6f565b820191906000526020600020905b81548152906001019060200180831162002b5157829003601f168201915b5050505050815250508152602001906001019062002a9a565b5050509082525060006020820152436040820152602254606082015260800184905262006669565b6021546001600160a01b0316331462002bdd5760405162461bcd60e51b81526004016200149c9062008faa565b602180546001600160a01b0319166001600160a01b03838116918217909255601a5460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b15801562002c3c57600080fd5b505af115801562002c51573d6000803e3d6000fd5b5050601b5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002c9d57600080fd5b505af115801562002cb2573d6000803e3d6000fd5b5050601c5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002cfe57600080fd5b505af115801562002d13573d6000803e3d6000fd5b5050601d5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002d5f57600080fd5b505af115801562002d74573d6000803e3d6000fd5b5050601e5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002dc057600080fd5b505af115801562002dd5573d6000803e3d6000fd5b505060205460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb91506024016200210e565b600062002e198262004fb8565b610240015192915050565b6021546001600160a01b0316331462002e515760405162461bcd60e51b81526004016200149c9062008faa565b6020805460408051631728602760e21b815290516000936001600160a01b0390931692635ca1809c92600480820193918290030181865afa15801562002e9b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ec1919062009143565b60208054604080516362a48bb760e11b815290519394506000936001600160a01b039092169263c549176e926004808401938290030181865afa15801562002f0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f33919062009143565b9050600162002f43838362008dbf565b62002f4f9190620090ea565b831162002fc55760405162461bcd60e51b815260206004820152603c60248201527f65706f636820706572696f64206e6565647320746f206265206772656174657260448201527f207468616e2064656c74612b6c6f6f6b6261636b57696e646f772d310000000060648201526084016200149c565b602a8390556028546000908152602e6020908152604091829020600301548251868152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7910160405180910390a150505050565b620030536040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038316600090815260016020526040902080548310620030bd5760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f7420657869737400000000000000000060448201526064016200149c565b808381548110620030d257620030d262009293565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505091505092915050565b6021546001600160a01b03163314620031535760405162461bcd60e51b81526004016200149c9062008faa565b601055565b6001600160a01b038083166000818152603460205260409020600181015490921614620031995760405162461bcd60e51b81526004016200149c90620092a9565b80546001600160a01b03163314620031c55760405162461bcd60e51b81526004016200149c90620092e0565b620031d08362006743565b156200322a5760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b60648201526084016200149c565b6000806200323884620067b4565b9250905081156200327a5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200149c565b60018301546001600160a01b03828116911614620032eb5760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b60648201526084016200149c565b60038301620032fb858262008e5b565b505050505050565b6000604051806102600160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160106000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001438152602001600081526020016000815260200184815260200160006005811115620033cb57620033cb620083d9565b90529050620033db8183620067f9565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200341c92339289918b916200932f565b60405180910390a15050505050565b6001600160a01b03808316600081815260346020526040902060010154909116146200346b5760405162461bcd60e51b81526004016200149c9062008f27565b6001600160a01b03828116600090815260346020526040902054163314620034a75760405162461bcd60e51b81526004016200149c9062008f5e565b612710811115620034fb5760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e20726174650060448201526064016200149c565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600f80546000908152600d909352958220855181546001600160a01b0319169516949094178455915160018085019190915591516002909301929092558354929390929091906200357490849062008dbf565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b6021546001600160a01b03163314620035e95760405162461bcd60e51b81526004016200149c9062008faa565b6005805460ff19166001179055565b6021546001600160a01b03163314620036255760405162461bcd60e51b81526004016200149c9062008faa565b60008111620036775760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e277420626520300000000000000060448201526064016200149c565b602455565b6021546001600160a01b03163314620036a95760405162461bcd60e51b81526004016200149c9062008faa565b602555565b60008181526009602052604081206005015460ff16620037115760405162461bcd60e51b815260206004820152601960248201527f756e626f6e64696e67206e6f74206170706c696564207965740000000000000060448201526064016200149c565b5060009081526009602052604090206003015490565b6019546001600160a01b03163314806200374b57506020546001600160a01b031633145b6200376a5760405162461bcd60e51b81526004016200149c9062008b27565b603a546000906001600160a01b031663c44a5b21620037898562004fb8565b846040518363ffffffff1660e01b8152600401620037a992919062009378565b6000604051808303816000875af1158015620037c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620037f39190810190620090b2565b6001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b03199182161782559185015160018201805491861691841691909117905591840151600283018054919094169116179091556060820151919250829160038201906200386b908262008e5b565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f820155610200820151601082015561022082015160118201906200392a908262008e5b565b5061024082015160128201805460ff19166001836005811115620039525762003952620083d9565b02179055505050505050565b6021546001600160a01b031633146200398b5760405162461bcd60e51b81526004016200149c9062008faa565b612710811115620039d45760405162461bcd60e51b815260206004820152601260248201527143616e6e6f7420657863656564203130302560701b60448201526064016200149c565b601555565b6000602b546001620039ec919062008dbf565b82111562003a4c5760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74206765742065706f636820696420666f7220612066757475726560448201526520626c6f636b60d01b60648201526084016200149c565b602b54821162003a69575060009081526029602052604090205490565b505060285490565b6021546001600160a01b0316331462003a9e5760405162461bcd60e51b81526004016200149c9062008faa565b6001600160a01b03821660009081526033602052604090205481111562003b015760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b60448201526064016200149c565b6001600160a01b0382166000908152603360205260408120805483929062003b2b908490620090ea565b92505081905550806035600082825462003b469190620090ea565b92505081905550806036600082825462003b619190620090ea565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062003bb5620053dc565b6001600160a01b038084166000818152603460205260409020600101549091161462003bf55760405162461bcd60e51b81526004016200149c90620092a9565b6001600160a01b03831660009081526034602052604081206012015460ff16600581111562003c285762003c28620083d9565b1462003c775760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f20626520616374697665000000000060448201526064016200149c565b62003c8483833362006c53565b9050620016eb60008055565b600062003c9c620053dc565b6001600160a01b038084166000818152603460205260409020600101549091161462003cdc5760405162461bcd60e51b81526004016200149c90620092a9565b6000821162003d265760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b60448201526064016200149c565b62003c8483833362006e56565b60606031805480602002602001604051908101604052809291908181526020016000905b8282101562003e0d57838290600052602060002001805462003d799062008dd5565b80601f016020809104026020016040519081016040528092919081815260200182805462003da79062008dd5565b801562003df85780601f1062003dcc5761010080835404028352916020019162003df8565b820191906000526020600020905b81548152906001019060200180831162003dda57829003601f168201915b50505050508152602001906001019062003d57565b50505050905090565b600062003e253384846200551b565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b62003ea16040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b6028546000908152602e602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b8282101562003fc8576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003f309062008dd5565b80601f016020809104026020016040519081016040528092919081815260200182805462003f5e9062008dd5565b801562003faf5780601f1062003f835761010080835404028352916020019162003faf565b820191906000526020600020905b81548152906001019060200180831162003f9157829003601f168201915b5050505050815250508152602001906001019062003eda565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905090565b6021546001600160a01b031633146200402a5760405162461bcd60e51b81526004016200149c9062008faa565b6001600160a01b038116620040965760405162461bcd60e51b815260206004820152602b60248201527f736c617368657220636f6e74726163742063616e6e6f7420626520746865207a60448201526a65726f206164647265737360a81b60648201526084016200149c565b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060602f805480602002602001604051908101604052809291908181526020016000905b8282101562003e0d576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620041329062008dd5565b80601f0160208091040260200160405190810160405280929190818152602001828054620041609062008dd5565b8015620041b15780601f106200418557610100808354040283529160200191620041b1565b820191906000526020600020905b8154815290600101906020018083116200419357829003601f168201915b50505050508152505081526020019060010190620040dc565b603854606090819081906001600160a01b03163314620041fe5760405162461bcd60e51b81526004016200149c9062009100565b6027546200424f5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f7273000000000000000060448201526064016200149c565b6200425962008133565b60245460808201526027815260346020820152602f6040820152602d60608201526200428581620071bf565b620042936031600062008151565b602f5480620042da5760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b60448201526064016200149c565b6000816001600160401b03811115620042f757620042f7620086c5565b60405190808252806020026020018201604052801562004321578160200160208202803683370190505b5090506000826001600160401b03811115620043415762004341620086c5565b6040519080825280602002602001820160405280156200436b578160200160208202803683370190505b5090506000836001600160401b038111156200438b576200438b620086c5565b604051908082528060200260200182016040528015620043b5578160200160208202803683370190505b50905060005b848110156200450657600060346000602f8481548110620043e057620043e062009293565b60009182526020808320600392830201546001600160a01b031684528301939093526040909101812060318054600181018255925292507fc54045fa7c6ec765e825df7f9e9bf9dec12c5cef146f93a5eee56772ee647fbc019062004448908301826200939e565b50600281015485516001600160a01b039091169086908490811062004471576200447162009293565b6001600160a01b03928316602091820292909201015260018201548551911690859084908110620044a657620044a662009293565b6001600160a01b03928316602091820292909201015281548451911690849084908110620044d857620044d862009293565b6001600160a01b03909216602092830291909101909101525080620044fd816200947f565b915050620043bb565b50919650945092505050909192565b620045486040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b602b546200455890600162008dbf565b821115620045b55760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b60648201526084016200149c565b602854602b548311620045d357506000828152602960205260409020545b6000818152602e602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b82821015620046f7576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916200465f9062008dd5565b80601f01602080910402602001604051908101604052809291908181526020018280546200468d9062008dd5565b8015620046de5780601f10620046b257610100808354040283529160200191620046de565b820191906000526020600020905b815481529060010190602001808311620046c057829003601f168201915b5050505050815250508152602001906001019062004609565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050915050919050565b6021546001600160a01b031633146200475c5760405162461bcd60e51b81526004016200149c9062008faa565b62004769600383620071df565b62001fbc600482620071df565b6021546001600160a01b03163314620047a35760405162461bcd60e51b81526004016200149c9062008faa565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b620047cf620053dc565b6001600160a01b03808216600081815260346020526040902060010154909116146200480f5760405162461bcd60e51b81526004016200149c9062008f27565b6001600160a01b038082166000908152603460205260409020805490911633146200484e5760405162461bcd60e51b81526004016200149c90620092e0565b6000601282015460ff1660058111156200486c576200486c620083d9565b03620048bb5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c726561647920616374697665000000000000000060448201526064016200149c565b6002601282015460ff166005811115620048d957620048d9620083d9565b148015620048ea5750438160100154115b15620049395760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c00000000000000000060448201526064016200149c565b6004601282015460ff166005811115620049575762004957620083d9565b148015620049685750438160100154115b15620049c65760405162461bcd60e51b815260206004820152602660248201527f76616c696461746f72207374696c6c20696e206a61696c20666f7220696e616360448201526574697669747960d01b60648201526084016200149c565b6003601282015460ff166005811115620049e457620049e4620083d9565b1415801562004a0f57506005601282015460ff16600581111562004a0c5762004a0c620083d9565b14155b62004a5d5760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c790000000060448201526064016200149c565b60128101805460ff1916905580546028546000908152602e60209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200178c60008055565b6021546001600160a01b0316331462004afa5760405162461bcd60e51b81526004016200149c9062008faa565b602080546001600160a01b0319166001600160a01b0392909216919091179055565b6060806003600481805462004b319062008dd5565b80601f016020809104026020016040519081016040528092919081815260200182805462004b5f9062008dd5565b801562004bb05780601f1062004b845761010080835404028352916020019162004bb0565b820191906000526020600020905b81548152906001019060200180831162004b9257829003601f168201915b5050505050915080805462004bc59062008dd5565b80601f016020809104026020016040519081016040528092919081815260200182805462004bf39062008dd5565b801562004c445780601f1062004c185761010080835404028352916020019162004c44565b820191906000526020600020905b81548152906001019060200180831162004c2657829003601f168201915b50505050509050915091509091565b6060602780548060200260200160405190810160405280929190818152602001828054801562004cad57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162004c8e575b5050505050905090565b6021546001600160a01b0316331462004ce45760405162461bcd60e51b81526004016200149c9062008faa565b60118190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b6021546001600160a01b0316331462004d4c5760405162461bcd60e51b81526004016200149c9062008faa565b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004d9b5760405162461bcd60e51b81526004016200149c9062008faa565b62004da96003600062008171565b62004db76004600062008171565b6005805460ff19169055565b6021546001600160a01b0316331462004df05760405162461bcd60e51b81526004016200149c9062008faa565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004e3f5760405162461bcd60e51b81526004016200149c9062008faa565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004e8e5760405162461bcd60e51b81526004016200149c9062008faa565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004edd5760405162461bcd60e51b81526004016200149c9062008faa565b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004f2c5760405162461bcd60e51b81526004016200149c9062008faa565b6001600160a01b03811662004f965760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b60648201526084016200149c565b603980546001600160a01b0319166001600160a01b0392909216919091179055565b62004fc26200806a565b6001600160a01b0382166200501a5760405162461bcd60e51b815260206004820152601e60248201527f63616e6e6f74207265717565737420656d7074792076616c696461746f72000060448201526064016200149c565b6001600160a01b03808316600081815260346020526040902060010154909116146200505a5760405162461bcd60e51b81526004016200149c90620092a9565b6001600160a01b038083166000908152603460209081526040918290208251610260810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620050bd9062008dd5565b80601f0160208091040260200160405190810160405280929190818152602001828054620050eb9062008dd5565b80156200513c5780601f1062005110576101008083540402835291602001916200513c565b820191906000526020600020905b8154815290600101906020018083116200511e57829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a08201526011820180546101c090920191620051ed9062008dd5565b80601f01602080910402602001604051908101604052809291908181526020018280546200521b9062008dd5565b80156200526c5780601f1062005240576101008083540402835291602001916200526c565b820191906000526020600020905b8154815290600101906020018083116200524e57829003601f168201915b5050509183525050601282015460209091019060ff166005811115620052965762005296620083d9565b6005811115620052aa57620052aa620083d9565b90525092915050565b6001600160a01b038316620053175760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016200149c565b6001600160a01b0382166200537a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016200149c565b6001600160a01b0383811660008181526032602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60005415620054245760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b60448201526064016200149c565b6001600055565b6001600160a01b038116600090815260346020526040812090601282015460ff166005811115620054605762005460620083d9565b14620054af5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d75737420626520616374697665000000000000000060448201526064016200149c565b60128101805460ff1916600117905580546028546000908152602e60209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b0383166000908152603360205260409020548111156200557e5760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b60448201526064016200149c565b6001600160a01b03831660009081526033602052604081208054839290620055a8908490620090ea565b90915550506001600160a01b03821660009081526033602052604081208054839290620055d790849062008dbf565b9091555050505050565b6001600160a01b038216600090815260336020526040812080548392906200560b90849062008dbf565b92505081905550806035600082825462005626919062008dbf565b92505081905550806036600082825462005641919062008dbf565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162003b9d565b6001600160a01b038416620056da5760405162461bcd60e51b815260206004820152601c60248201527f7661756c7420616464726573732063616e6e6f74206265207a65726f0000000060448201526064016200149c565b600081116200572c5760405162461bcd60e51b815260206004820181905260248201527f7363686564756c65206475726174696f6e2063616e6e6f74206265207a65726f60448201526064016200149c565b428210156200578c5760405162461bcd60e51b815260206004820152602560248201527f7363686564756c652063616e6e6f74207374617274206265666f72652063726560448201526430ba34b7b760d91b60648201526084016200149c565b60008311620057de5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f7369746976650000000000000060448201526064016200149c565b6001600160a01b038416600090815260016020526040812080549091036200584c57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0387161790555b6040805160a08101825285815260006020808301828152838501888152606080860189815260808701868152895460018082018c558b8952978790209851600590910290980197885593519587019590955590516002860155925160038501555160049093019290925582518781529182018690529181018490526001600160a01b038716917fe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd910160405180910390a25050505050565b600254600090815b8181101562005abd576000600160006002848154811062005931576200593162009293565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909250905b8181101562005aa45760008382815481106200597c576200597c62009293565b906000526020600020906005020190508060040154881015620059f35760405162461bcd60e51b815260206004820152602860248201527f7363686564756c6520616c726561647920756e6c6f636b656420666f7220676960448201526776656e2074696d6560c01b60648201526084016200149c565b8060020154881162005a06575062005a8f565b60048101889055600381015460028201546000919062005a27908b620090ea565b1062005a365750805462005a69565b60038201548254600284015462005a4e908c620090ea565b62005a5a91906200949b565b62005a669190620094cb565b90505b600182015462005a7a9082620090ea565b62005a86908962008dbf565b60019092015595505b8062005a9b816200947f565b9150506200595c565b505050808062005ab4906200947f565b9150506200590c565b5050919050565b8115801562005ad1575080155b1562005adb575050565b601054600090670de0b6b3a76400009062005af89085906200949b565b62005b049190620094cb565b9050801562005b82576018546040516000916001600160a01b03169083908381818185875af1925050503d806000811462005b5c576040519150601f19603f3d011682016040523d82523d6000602084013e62005b61565b606091505b509091505080151560010362005b805762005b7d8285620090ea565b93505b505b60208054604080516353b1821b60e01b815290516000936001600160a01b03909316926353b1821b92600480820193918290030181865afa15801562005bcc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005bf2919062009143565b111562005d2b5760245460009062005c0d906127106200949b565b602f5460165462005c1f90876200949b565b62005c2b91906200949b565b62005c379190620094cb565b60245490915060009062005c4e906127106200949b565b602f5460165462005c6090876200949b565b62005c6c91906200949b565b62005c789190620094cb565b6020549091506001600160a01b031662005c943082846200551b565b602080546001600160a01b038381166000908152603390935260409283902054925163eeb9223360e01b81526004810193909352169063eeb922339085906024016000604051808303818588803b15801562005cef57600080fd5b505af115801562005d04573d6000803e3d6000fd5b5050505050828662005d179190620090ea565b955062005d258286620090ea565b94505050505b6020805460408051637f5e2f1160e01b815290516000936001600160a01b0390931692637f5e2f1192600480820193918290030181865afa15801562005d75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005d9b919062009143565b905060008060005b602f548110156200637e57600060346000602f848154811062005dca5762005dca62009293565b600091825260208083206003909202909101546001600160a01b031683528201929092526040018120602d54602f805492945090918b91908690811062005e155762005e1562009293565b90600052602060002090600302016001015462005e3391906200949b565b62005e3f9190620094cb565b90506000602d5489602f868154811062005e5d5762005e5d62009293565b90600052602060002090600302016001015462005e7b91906200949b565b62005e879190620094cb565b9050600082118062005e995750600081115b1562006365576002601284015460ff16600581111562005ebd5762005ebd620083d9565b148062005ee557506003601284015460ff16600581111562005ee35762005ee3620083d9565b145b1562005faf5760195462005f059030906001600160a01b0316836200551b565b601954602f80546001600160a01b039092169163a8031a1d9185918890811062005f335762005f3362009293565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b15801562005f8c57600080fd5b505af115801562005fa1573d6000803e3d6000fd5b505050505050505062006369565b6004601284015460ff16600581111562005fcd5762005fcd620083d9565b148062005ff557506005601284015460ff16600581111562005ff35762005ff3620083d9565b145b15620060205762006007828762008dbf565b955062006015818662008dbf565b945050505062006369565b6020546001840154604051634d08f07360e11b81526001600160a01b0391821660048201526000929190911690639a11e0e690602401602060405180830381865afa15801562006074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200609a919062009143565b6015549091508111156200611d57600088620060b783866200949b565b620060c39190620094cb565b9050600089620060d484866200949b565b620060e09190620094cb565b9050620060ee828a62008dbf565b9850620060fc818962008dbf565b97506200610a8286620090ea565b9450620061188185620090ea565b935050505b600084600501548486600801546200613691906200949b565b620061429190620094cb565b905080156200620457845460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d8060008114620061a2576040519150601f19603f3d011682016040523d82523d6000602084013e620061a7565b606091505b509092509050811515600003620062015786546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d35291620061f8916001600160a01b03909116908490620094e2565b60405180910390a15b50505b600085600501548487600801546200621d91906200949b565b620062299190620094cb565b905080156200624b5785546200624b9030906001600160a01b0316836200551b565b6000620062598286620090ea565b90506000620062698488620090ea565b905060008111806200627b5750600082115b156200631557600c8801546200629d9030906001600160a01b0316846200551b565b600c88015460405163a0ce552d60e01b8152600481018490526001600160a01b039091169063a0ce552d908390602401604080518083038185885af1158015620062eb573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062006312919062009513565b50505b600188015460408051898152602081018990526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a250505050505b5050505b8062006375816200947f565b91505062005da3565b5081156200643c5760175460405160009182916001600160a01b039091169085908381818185875af1925050503d8060008114620063d9576040519150601f19603f3d011682016040523d82523d6000602084013e620063de565b606091505b50909250905081151560000362006439576017546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162006430916001600160a01b03909116908490620094e2565b60405180910390a15b50505b8015620032fb57601754620032fb9030906001600160a01b0316836200551b565b6007545b6008548110156200648a5762006484816200647c816200947f565b925062007332565b62006461565b50600854600755600b54600a54036200649f57565b600c545b600b54811015620064cc57620064c681620064be816200947f565b925062007563565b620064a3565b50600b54600c55600a54805b600b5481101562006546576013546000828152600960205260409020600401544391620065059162008dbf565b116200652b5762006516816200785f565b6200652360018362008dbf565b915062006531565b62006546565b806200653d816200947f565b915050620064d8565b50600a55565b600f54600e5410156200666757600e546000908152600d60205260409020601354600182015443916200657f9162008dbf565b1115620065895750565b80546001600160a01b039081166000908152603460205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd92620065e192910190815260200190565b600060405180830381600087803b158015620065fc57600080fd5b505af115801562006611573d6000803e3d6000fd5b5050600e80546000908152600d6020526040812080546001600160a01b0319168155600180820183905560029091018290558254909450919250906200665990849062008dbf565b909155506200654c92505050565b565b6000828152602e6020908152604080832091840151600183015583015160028201556060830151600382015560808301516004820155905b82515181101562001ed6578251805183919083908110620066c657620066c662009293565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b039092169190911781559181015192820192909255604082015160028201906200672a908262008e5b565b50505080806200673a906200947f565b915050620066a1565b6000805b602f54811015620067ab57602f818154811062006768576200676862009293565b60009182526020909120600390910201546001600160a01b0390811690841603620067965750600192915050565b80620067a2816200947f565b91505062006747565b50600092915050565b600080620067c1620081b0565b60008060ff9050604083875160208901845afa620067de57600080fd5b50508051602090910151600160601b90910494909350915050565b60e2815114620068435760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064016200149c565b603082610220015151146200689b5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e6774680000000060448201526064016200149c565b620068a682620079bc565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262006909920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262006929835162007ae9565b836040516020016200693e9392919062009538565b60408051601f198184030181528282528051602091820120600280855260608501845290945060009392909183019080368337019050509050600080808062006996898262006990604160026200949b565b62007c09565b90506000620069b58a620069ad604160026200949b565b606062007c09565b905060205b825181101562006a8657620069d0838262007d22565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa15801562006a2c573d6000803e3d6000fd5b5050604051601f19015190508762006a46604184620094cb565b8151811062006a595762006a5962009293565b6001600160a01b039092166020928302919091019091015262006a7e60418262008dbf565b9050620069ba565b508a602001516001600160a01b03168660008151811062006aab5762006aab62009293565b60200260200101516001600160a01b03161462006b1d5760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b60648201526084016200149c565b8a604001516001600160a01b03168660018151811062006b415762006b4162009293565b60200260200101516001600160a01b03161462006bb55760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b60648201526084016200149c565b600162006bcd8c6102200151838e6000015162007d59565b1462006c3b5760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b60648201526084016200149c565b62006c468b62007dc8565b5050505050505050505050565b600080831162006cb25760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b60648201526084016200149c565b6001600160a01b03821660009081526033602052604090205483111562006d1c5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e6365000000000060448201526064016200149c565b6001600160a01b0382166000908152603360205260408120805485929062006d46908490620090ea565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062006dd5836200947f565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462006e4c9190620090ea565b9695505050505050565b6001600160a01b0380841660009081526034602052604081208054919290918482169116148062006fce57600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa15801562006ecf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006ef5919062009143565b90508581101562006f5d5760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b60648201526084016200149c565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b15801562006fae57600080fd5b505af115801562006fc3573d6000803e3d6000fd5b505050505062007061565b8482600b0154836008015462006fe59190620090ea565b1015620070455760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b60648201526084016200149c565b8482600b0160008282546200705b919062008dbf565b90915550505b6040805161010080820183526001600160a01b03878116835289811660208085019182528486018b8152600060608701818152436080890190815260a0890183815260c08a018481528c151560e08c01908152600b8054875260099098529b85209a518b546001600160a01b0319908116918b16919091178c55975160018c01805490991699169890981790965592516002890155516003880155905160048701559151600590950180549351965161ffff1990941695151561ff001916959095179515159093029490941762ff0000191662010000911515919091021790915580549162007150836200947f565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc8388604051620071a69291909115158252602082015260400190565b60405180910390a36001600b5462006e4c9190620090ea565b60fa60a06000808285855af4620071da573d6000803e3d6000fd5b505050565b8154600260018083161561010002038216048251808201602081106020841001600281146200728e5760018114620072b4578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b8082101562007277578151845560018401935060208201915062007258565b815191036101000a90819004029091555062007329565b60028302826020036101000a846020036101000a60208901510402018501875562007329565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b80821015620073175781518455600184019350602082019150620072f8565b815191036101000a9081900402909155505b50505050505050565b600081815260066020908152604080832060018101546001600160a01b03168452603490925282209091601282015460ff166005811115620073785762007378620083d9565b146200740c57600282015482546001600160a01b031660009081526033602052604081208054909190620073ae90849062008dbf565b909155505081546001830154600284015460128401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f87834292620053cf92909160ff9091169062009581565b805482546001600160a01b039081169116146200752957600080826008015483600501546200743c9190620090ea565b9050806000036200745457836002015491506200747a565b80846002015484600d01546200746b91906200949b565b620074779190620094cb565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b158015620074cc57600080fd5b505af1158015620074e1573d6000803e3d6000fd5b505050508183600d016000828254620074fb919062008dbf565b909155505060028401546005840180546000906200751b90849062008dbf565b90915550620071da92505050565b816002015481600801600082825462007543919062008dbf565b90915550506002820154600582018054600090620055d790849062008dbf565b600081815260096020908152604080832060018101546001600160a01b031684526034909252822060058201549192909162010000900460ff1662007758576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b158015620075f957600080fd5b505af11580156200760e573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b1580156200766457600080fd5b505af115801562007679573d6000803e3d6000fd5b50505050600083600801548460050154620076959190620090ea565b600d850154909150620076a982846200949b565b620076b59190620094cb565b92508184600d016000828254620076cd9190620090ea565b90915550506006840154600003620076ec576003850183905562007714565b600684015460078501546200770290856200949b565b6200770e9190620094cb565b60038601555b828460060160008282546200772a919062008dbf565b909155505060038501546007850180546000906200774a90849062008dbf565b909155506200782d92505050565b506002820154600882015481111562007772575060088101545b81600901546000036200778c5760038301819055620077b4565b6009820154600a830154620077a290836200949b565b620077ae9190620094cb565b60038401555b80826009016000828254620077ca919062008dbf565b90915550506003830154600a83018054600090620077ea90849062008dbf565b9250508190555080826008016000828254620078079190620090ea565b90915550506002830154600b8301805460009062007827908490620090ea565b90915550505b6005808401805460ff191660011790558201805482919060009062007854908490620090ea565b909155505050505050565b600081815260096020526040812060058101805461ff00191661010017905560038101549091036200788f575050565b60018101546001600160a01b03166000908152603460205260408120600583015490919062010000900460ff166200792c57816007015482600601548460030154620078dc91906200949b565b620078e89190620094cb565b905080826006016000828254620079009190620090ea565b9091555050600383015460078301805460009062007920908490620090ea565b90915550620079919050565b81600a0154826009015484600301546200794791906200949b565b620079539190620094cb565b9050808260090160008282546200796b9190620090ea565b90915550506003830154600a830180546000906200798b908490620090ea565b90915550505b82546001600160a01b0316600090815260336020526040812080548392906200785490849062008dbf565b6000620079cd8260600151620067b4565b6001600160a01b0390911660208401529050801562007a1d5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200149c565b6020808301516001600160a01b0390811660009081526034909252604090912060010154161562007a915760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c726561647920726567697374657265640000000060448201526064016200149c565b6127108260800151111562001fbc5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e207261746500000000000000000060448201526064016200149c565b60608160000362007b115750506040805180820190915260018152600360fc1b602082015290565b8160005b811562007b41578062007b28816200947f565b915062007b399050600a83620094cb565b915062007b15565b6000816001600160401b0381111562007b5e5762007b5e620086c5565b6040519080825280601f01601f19166020018201604052801562007b89576020820181803683370190505b5090505b841562007c015762007ba1600183620090ea565b915062007bb0600a8662009597565b62007bbd90603062008dbf565b60f81b81838151811062007bd55762007bd562009293565b60200101906001600160f81b031916908160001a90535062007bf9600a86620094cb565b945062007b8d565b949350505050565b60608162007c1981601f62008dbf565b101562007c5a5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016200149c565b62007c66828462008dbf565b8451101562007cac5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016200149c565b60608215801562007ccd576040519150600082526020820160405262007d19565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101562007d0857805183526020928301920162007cee565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b81101562007d525762007d4f601b82620095ae565b90505b9250925092565b600062007d65620081ce565b600085858560405160200162007d7e93929190620095ca565b6040516020818303038152906040529050600060fb905060008251602062007da7919062008dbf565b90506020848285855afa62007dbb57600080fd5b5050905195945050505050565b6101808101516001600160a01b031662007ec7576039546001600160a01b031662007e415760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b60648201526084016200149c565b60275460009062007e529062007ae9565b905081602001518260000151836080015183603960009054906101000a90046001600160a01b031660405162007e8890620081ec565b62007e9895949392919062009619565b604051809103906000f08015801562007eb5573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602780546001808201835560009283527f98a476f1687bc3d60a2da2adbcba2c46958e61fa2fb4042cd7bc5816a710195b90910180546001600160a01b03199081166001600160a01b039586161790915584518416835260349095526040918290208651815487169085161781559351908401805486169184169190911790558401516002830180549094169116179091556060820151829190600382019062007f79908262008e5b565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062008038908262008e5b565b5061024082015160128201805460ff19166001836005811115620080605762008060620083d9565b0217905550505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160608152602001600060058111156200812e576200812e620083d9565b905290565b6040518060a001604052806005906020820280368337509192915050565b50805460008255906000526020600020908101906200178c9190620081fa565b5080546200817f9062008dd5565b6000825580601f1062008190575050565b601f0160209004906000526020600020908101906200178c91906200821f565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105cb806200964c83390190565b808211156200821b57600062008211828262008171565b50600101620081fa565b5090565b5b808211156200821b576000815560010162008220565b6001600160a01b03811681146200178c57600080fd5b600080604083850312156200826057600080fd5b82356200826d8162008236565b946020939093013593505050565b60005b83811015620082985781810151838201526020016200827e565b50506000910152565b60008151808452620082bb8160208601602086016200827b565b601f01601f19169290920160200192915050565b60208152600062001ce36020830184620082a1565b600060208284031215620082f757600080fd5b813562001ce38162008236565b6000602082840312156200831757600080fd5b5035919050565b600681106200178c57600080fd5b600080600080600060a086880312156200834557600080fd5b8535620083528162008236565b94506020860135935060408601359250606086013562008372816200831e565b9150608086013562008384816200831e565b809150509295509295909350565b600080600060608486031215620083a857600080fd5b8335620083b58162008236565b9250602084013591506040840135620083ce816200831e565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b600681106200840e57634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061026060208301516200843f60208601826001600160a01b03169052565b5060408301516200845b60408601826001600160a01b03169052565b5060608301518160608601526200847582860182620082a1565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151620084ec828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152620085348382620082a1565b92505050610240808401516200854d82870182620083ef565b5090949350505050565b60208152600062001ce3602083018462008412565b6000806000606084860312156200858257600080fd5b83356200858f8162008236565b92506020840135620085a18162008236565b929592945050506040919091013590565b60008060008060808587031215620085c957600080fd5b8435620085d68162008236565b966020860135965060408601359560600135945092505050565b600081518084526020808501808196508360051b8101915082860160005b8581101562008665578284038952815180516001600160a01b0316855285810151868601526040908101516060918601829052906200865081870183620082a1565b9a87019a95505050908401906001016200860e565b5091979650505050505050565b8615158152851515602082015260c0604082015260006200869760c0830187620085f0565b606083019590955250608081019290925260a0909101529392505050565b60208101620016eb8284620083ef565b634e487b7160e01b600052604160045260246000fd5b60405161026081016001600160401b0381118282101715620087015762008701620086c5565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620087325762008732620086c5565b604052919050565b60006001600160401b03821115620087565762008756620086c5565b50601f01601f191660200190565b600082601f8301126200877657600080fd5b81356200878d62008787826200873a565b62008707565b818152846020838601011115620087a357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215620087d457600080fd5b8235620087e18162008236565b915060208301356001600160401b03811115620087fd57600080fd5b6200880b8582860162008764565b9150509250929050565b600080600080608085870312156200882c57600080fd5b84356001600160401b03808211156200884457600080fd5b620088528883890162008764565b955060208701359150620088668262008236565b909350604086013590808211156200887d57600080fd5b6200888b8883890162008764565b93506060870135915080821115620088a257600080fd5b50620088b18782880162008764565b91505092959194509250565b60008060408385031215620088d157600080fd5b8235620088de8162008236565b91506020830135620088f0816200831e565b809150509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200895457603f1988860301845262008941858351620082a1565b9450928501929085019060010162008922565b5092979650505050505050565b602081526000825160a060208401526200897f60c0840182620085f0565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60208152600062001ce36020830184620085f0565b600081518084526020808501945080840160005b8381101562008a035781516001600160a01b031687529582019590820190600101620089dc565b509495945050505050565b60608152600062008a236060830186620089c8565b828103602084015262008a378186620089c8565b9050828103604084015262006e4c8185620089c8565b6000806040838503121562008a6157600080fd5b82356001600160401b038082111562008a7957600080fd5b62008a878683870162008764565b9350602085013591508082111562008a9e57600080fd5b506200880b8582860162008764565b60408152600062008ac26040830185620082a1565b828103602084015262008ad68185620082a1565b95945050505050565b60208152600062001ce36020830184620089c8565b6000806040838503121562008b0857600080fd5b823562008b158162008236565b91506020830135620088f08162008236565b60208082526028908201527f63616c6c6572206973206e6f7420616e206163636f756e746162696c6974792060408201526718dbdb9d1c9858dd60c21b606082015260800190565b60408152600062008b84604083018562008412565b90508260208301529392505050565b805162008ba08162008236565b919050565b600082601f83011262008bb757600080fd5b815162008bc862008787826200873a565b81815284602083860101111562008bde57600080fd5b62007c018260208301602087016200827b565b805162008ba0816200831e565b6000610260828403121562008c1257600080fd5b62008c1c620086db565b905062008c298262008b93565b815262008c396020830162008b93565b602082015262008c4c6040830162008b93565b604082015260608201516001600160401b038082111562008c6c57600080fd5b62008c7a8583860162008ba5565b60608401526080848101519084015260a0808501519084015260c0808501519084015260e080850151908401526101008085015190840152610120808501519084015261014080850151908401526101608085015190840152610180915062008ce582850162008b93565b918301919091526101a083810151908301526101c080840151908301526101e080840151908301526102008084015190830152610220808401519091908181111562008d3057600080fd5b62008d3e8682870162008ba5565b8385015250505061024062008d5581840162008bf1565b9082015292915050565b6000806040838503121562008d7357600080fd5b82516001600160401b0381111562008d8a57600080fd5b62008d988582860162008bfe565b925050602083015190509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620016eb57620016eb62008da9565b600181811c9082168062008dea57607f821691505b60208210810362008e0b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620071da57600081815260208120601f850160051c8101602086101562008e3a5750805b601f850160051c820191505b81811015620032fb5782815560010162008e46565b81516001600160401b0381111562008e775762008e77620086c5565b62008e8f8162008e88845462008dd5565b8462008e11565b602080601f83116001811462008ec7576000841562008eae5750858301515b600019600386901b1c1916600185901b178555620032fb565b600085815260208120601f198616915b8281101562008ef85788860151825594840194600190910190840162008ed7565b508582101562008f175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60a08152600062008ff660a083018862008412565b9050856020830152846040830152620090136060830185620083ef565b62006e4c6080830184620083ef565b8051801515811462008ba057600080fd5b6000806000606084860312156200904957600080fd5b83516001600160401b038111156200906057600080fd5b6200906e8682870162008bfe565b9350506020840151915062007d4f6040850162009022565b6060815260006200909b606083018662008412565b905083602083015262007c016040830184620083ef565b600060208284031215620090c557600080fd5b81516001600160401b03811115620090dc57600080fd5b62007c018482850162008bfe565b81810381811115620016eb57620016eb62008da9565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b6000602082840312156200915657600080fd5b5051919050565b6000604082016040835280855480835260608501915060608160051b8601019250600087815260208120815b838110156200925c57878603605f1901855281546001600160a01b0316865260018201546020870152606060408701526002820180548490620091cc8162008dd5565b8060608b01526001821660008114620091ee57600181146200920b576200923e565b60ff19831660808c0152608082151560051b8c010193506200923e565b84885260208820885b83811015620092355781548d82016080015260019091019060200162009214565b8c016080019450505b50919850505060209590950194506003919091019060010162009189565b5050505050828103602084015262008ad68185620089c8565b6000602082840312156200928857600080fd5b62001ce38262009022565b634e487b7160e01b600052603260045260246000fd5b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b600060018060a01b0380881683528087166020840152808616604084015260a060608401526200936360a0840186620082a1565b91508084166080840152509695505050505050565b6040815260006200938d604083018562008412565b905062001ce36020830184620083ef565b818103620093aa575050565b620093b6825462008dd5565b6001600160401b03811115620093d057620093d0620086c5565b620093e18162008e88845462008dd5565b6000601f821160018114620094185760008315620093ff5750848201545b600019600385901b1c1916600184901b1784556200213e565b600085815260209020601f19841690600086815260209020845b8381101562009454578286015482556001958601959091019060200162009432565b508583101562008f175793015460001960f8600387901b161c19169092555050600190811b01905550565b60006001820162009494576200949462008da9565b5060010190565b8082028115828204841417620016eb57620016eb62008da9565b634e487b7160e01b600052601260045260246000fd5b600082620094dd57620094dd620094b5565b500490565b60018060a01b0383168152606060208201526000606082015260806040820152600062007c016080830184620082a1565b600080604083850312156200952757600080fd5b505080516020909101519092909150565b600084516200954c8184602089016200827b565b845190830190620095628183602089016200827b565b8451910190620095778183602088016200827b565b0195945050505050565b8281526040810162001ce36020830184620083ef565b600082620095a957620095a9620094b5565b500690565b60ff8181168382160190811115620016eb57620016eb62008da9565b60008451620095de8184602089016200827b565b845190830190620095f48183602089016200827b565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a060608401526200936360a0840186620082a156fe608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220f521dfcbc3cb8b516c16f450cc0b3f59fa019109d73913d47c59da7b8920d00464736f6c63430008150033a264697066735822122096aba743f6619c8466665ab57bfc442d4f31963b9b65cc0cbed449e47601c24864736f6c63430008150033608060405234801561001057600080fd5b50601080546001600160a01b031916331790556116a2806100326000396000f3fe6080604052600436106101855760003560e01c80633e4eb36c116100d1578063949813b81161008a578063a0ce552d11610064578063a0ce552d146104d5578063a9059cbb146104e8578063bd96102f14610508578063dd62ed3e1461051d5761018c565b8063949813b81461046b57806395d89b41146104a05780639dc29fac146104b55761018c565b80633e4eb36c1461038a57806340c10f191461039f57806359355736146103bf57806370a08231146103f55780637eee288d1461042b57806384955c881461044b5761018c565b80631eeffad01161013e5780632f2c3f2e116101185780632f2c3f2e14610325578063313ce5671461033b578063372500ab146103575780633b19e84a1461036c5761018c565b80631eeffad0146102d057806323b872dd146102e5578063282d3fdf146103055761018c565b806306fdde03146101ea578063095ea7b3146102155780631195e07e1461024557806318160ddd14610277578063187cf4d71461029657806319fac8fd146102ae5761018c565b3661018c57005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b3480156101f657600080fd5b506101ff610563565b60405161020c91906113fc565b60405180910390f35b34801561022157600080fd5b50610235610230366004611466565b6105f5565b604051901515815260200161020c565b34801561025157600080fd5b50600c546001600160a01b03165b6040516001600160a01b03909116815260200161020c565b34801561028357600080fd5b506003545b60405190815260200161020c565b3480156102a257600080fd5b50610288633b9aca0081565b3480156102ba57600080fd5b506102ce6102c9366004611490565b61060c565b005b3480156102dc57600080fd5b50600f54610288565b3480156102f157600080fd5b506102356103003660046114a9565b61063b565b34801561031157600080fd5b506102ce610320366004611466565b610730565b34801561033157600080fd5b5061028861271081565b34801561034757600080fd5b506040516012815260200161020c565b34801561036357600080fd5b506102ce610814565b34801561037857600080fd5b50600d546001600160a01b031661025f565b34801561039657600080fd5b50600e54610288565b3480156103ab57600080fd5b506102ce6103ba366004611466565b610995565b3480156103cb57600080fd5b506102886103da3660046114e5565b6001600160a01b031660009081526001602052604090205490565b34801561040157600080fd5b506102886104103660046114e5565b6001600160a01b031660009081526020819052604090205490565b34801561043757600080fd5b506102ce610446366004611466565b6109fd565b34801561045757600080fd5b506102886104663660046114e5565b610ac3565b34801561047757600080fd5b5061048b6104863660046114e5565b610af0565b6040805192835260208301919091520161020c565b3480156104ac57600080fd5b506101ff610ba8565b3480156104c157600080fd5b506102ce6104d0366004611466565b610bb7565b61048b6104e3366004611490565b610c17565b3480156104f457600080fd5b50610235610503366004611466565b610f0b565b34801561051457600080fd5b506102ce610f58565b34801561052957600080fd5b50610288610538366004611500565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6060600a805461057290611533565b80601f016020809104026020016040519081016040528092919081815260200182805461059e90611533565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b5050505050905090565b600061060233848461105f565b5060015b92915050565b6010546001600160a01b031633146106365760405162461bcd60e51b81526004016101e19061156d565b600e55565b6001600160a01b0383166000908152600260209081526040808320338452909152812054828110156106c05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101e1565b6106d485336106cf86856115cb565b61105f565b6106de8584611183565b6106e88484611277565b836001600160a01b0316856001600160a01b031660008051602061164d8339815191528560405161071b91815260200190565b60405180910390a360019150505b9392505050565b6010546001600160a01b0316331461075a5760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b03821660009081526001602090815260408083205491839052909120548291610789916115cb565b10156107e35760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115de565b90915550505050565b600080610820336112c3565b33600090815260046020908152604080832083905560079091528120819055919350915081156109035760105460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf91906115f1565b9050806109035760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101e1565b60405133908490600081818185875af1925050503d8060008114610943576040519150601f19603f3d011682016040523d82523d6000602084013e610948565b606091505b505080915050806109905760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b505050565b6010546001600160a01b031633146109bf5760405162461bcd60e51b81526004016101e19061156d565b6109c98282611277565b6040518181526001600160a01b0383169060009060008051602061164d833981519152906020015b60405180910390a35050565b6010546001600160a01b03163314610a275760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b038216600090815260016020526040902054811115610a9b5760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115cb565b6001600160a01b0381166000908152600160209081526040808320549183905282205461060691906115cb565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205483928391610b259184916113be565b6001600160a01b038616600090815260046020526040902054909150610b4c9082906115de565b6009546001600160a01b03871660009081526008602052604081205492965091610b779185916113be565b6001600160a01b038716600090815260076020526040902054909150610b9e9082906115de565b9350505050915091565b6060600b805461057290611533565b6010546001600160a01b03163314610be15760405162461bcd60e51b81526004016101e19061156d565b610beb8282611183565b6040518181526000906001600160a01b0384169060008051602061164d833981519152906020016109f1565b60105460009081906001600160a01b03163314610c465760405162461bcd60e51b81526004016101e19061156d565b600e54349060009061271090610c5c9084611613565b610c66919061162a565b905081811115610cb85760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610cc281836115cb565b600d546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610d19576040519150601f19603f3d011682016040523d82523d6000602084013e610d1e565b606091505b5090915050801515600003610d455781600f6000828254610d3f91906115de565b90915550505b6000612710600e5488610d589190611613565b610d62919061162a565b905086811115610db45760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610dbe81886115cb565b96508015610e4157601054600d5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f91906115f1565b505b600354600090610e55633b9aca0087611613565b610e5f919061162a565b905080600654610e6f91906115de565b600655600354600090610e86633b9aca008b611613565b610e90919061162a565b905080600954610ea091906115de565b600955600354600090633b9aca0090610eb99085611613565b610ec3919061162a565b90506000633b9aca0060035484610eda9190611613565b610ee4919061162a565b9050610ef082886115de565b610efa82876115de565b995099505050505050505050915091565b6000610f173383611183565b610f218383611277565b6040518281526001600160a01b03841690339060008051602061164d8339815191529060200160405180910390a350600192915050565b600d546001600160a01b03163314610fbd5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101e1565b600d54600f546040516000926001600160a01b031691908381818185875af1925050503d806000811461100c576040519150601f19603f3d011682016040523d82523d6000602084013e611011565b606091505b50509050806110575760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b506000600f55565b6001600160a01b0383166110c15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101e1565b6001600160a01b0382166111225760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101e1565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b61118c826112c3565b50506001600160a01b038216600090815260208181526040808320546001909252909120546111bb90826115cb565b82111561120a5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101e1565b61121482826115cb565b6001600160a01b03841660009081526020819052604090205580820361125b576001600160a01b038316600090815260056020908152604080832083905560089091528120555b816003600082825461126d91906115cb565b9091555050505050565b611280826112c3565b50506001600160a01b038216600090815260208190526040812080548392906112aa9084906115de565b92505081905550806003600082825461080b91906115de565b6001600160a01b03811660009081526020818152604080832054600654600590935290832054839283916112f89184916113be565b6001600160a01b03861660009081526004602052604090205490915061131f9082906115de565b6001600160a01b03861660009081526004602090815260408083208490556006546005835281842055600954600890925282205492965090916113639185916113be565b6001600160a01b03871660009081526007602052604090205490915061138a9082906115de565b6001600160a01b03909616600090815260076020908152604080832089905560095460089092529091205550929492505050565b6000836000036113d057506000610729565b633b9aca00846113e084866115cb565b6113ea9190611613565b6113f4919061162a565b949350505050565b600060208083528351808285015260005b818110156114295785810183015185820160400152820161140d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461146157600080fd5b919050565b6000806040838503121561147957600080fd5b6114828361144a565b946020939093013593505050565b6000602082840312156114a257600080fd5b5035919050565b6000806000606084860312156114be57600080fd5b6114c78461144a565b92506114d56020850161144a565b9150604084013590509250925092565b6000602082840312156114f757600080fd5b6107298261144a565b6000806040838503121561151357600080fd5b61151c8361144a565b915061152a6020840161144a565b90509250929050565b600181811c9082168061154757607f821691505b60208210810361156757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610606576106066115b5565b80820180821115610606576106066115b5565b60006020828403121561160357600080fd5b8151801515811461072957600080fd5b8082028115828204841417610606576106066115b5565b60008261164757634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122080b3bd79a0539cd8687c9906380fbf3c01e31f581aed2b2837f4bbd235959e8b64736f6c63430008150033608060405234801561001057600080fd5b50604051610d98380380610d9883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610d05806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806364d61bbe1461005c578063c1f1884b14610087578063c44a5b2114610097578063f189d66c146100b7578063f774fac0146100ca575b600080fd5b61006f61006a366004610896565b6100eb565b60405161007e93929190610ac2565b60405180910390f35b604051612710815260200161007e565b6100aa6100a5366004610aec565b6101d6565b60405161007e9190610b3a565b6100aa6100c5366004610b54565b61021b565b6100dd6100d8366004610bab565b610260565b60405161007e929190610bf0565b6100f361058b565b6000805481906001600160a01b031633146101295760405162461bcd60e51b815260040161012090610c12565b60405180910390fd5b61271087106101a85760008861012001518960c001518a60a0015161014e9190610c70565b6101589190610c70565b600060a08b018190526101008b018190526101208b0181905260c08b01526101e08a018051919250829161018d908390610c70565b90525061019a89866102a8565b8893509150600190506101cb565b60006101b489896102e1565b90506101c1898888610549565b8893509150600090505b955095509592505050565b6101de61058b565b6000546001600160a01b031633146102085760405162461bcd60e51b815260040161012090610c12565b61021283836102a8565b50815b92915050565b61022361058b565b6000546001600160a01b0316331461024d5760405162461bcd60e51b815260040161012090610c12565b610258848484610549565b509192915050565b61026861058b565b600080546001600160a01b031633146102935760405162461bcd60e51b815260040161012090610c12565b600061029f85856102e1565b94959350505050565b600061020083015261024082018160058111156102c7576102c761094e565b908160058111156102da576102da61094e565b9052505050565b600061271082106103435760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f7420736c617368203130302520776974686f7574206a61696c626f604482015265756e64696e6760d01b6064820152608401610120565b60008361012001518460c001518560a0015161035f9190610c70565b6103699190610c70565b9050600061271061037a8386610c83565b6103849190610c9a565b9050600081905080866101200151106103b6578086610120018181516103aa9190610cbc565b905250600090506103d1565b6101208601516103c69082610cbc565b600061012088015290505b801561044e578086610100015110610419578086610100018181516103f69190610cbc565b90525060a08601805182919061040d908390610cbc565b9052506000905061044e565b6101008601516104299082610cbc565b90508561010001518660a0018181516104429190610cbc565b90525060006101008701525b600081118015610471575060008660a001518760c0015161046f9190610c70565b115b1561051d5760008660a001518760c0015161048c9190610c70565b60c088015161049b9084610c83565b6104a59190610c9a565b905060008760a001518860c001516104bd9190610c70565b60a08901516104cc9085610c83565b6104d69190610c9a565b9050818860c0018181516104ea9190610cbc565b90525060a088018051829190610501908390610cbc565b90525061050e8183610c70565b6105189084610cbc565b925050505b6105278183610cbc565b915081866101e00181815161053c9190610c70565b9052509095945050505050565b6105538243610c70565b61020084015261024083018160058111156105705761057061094e565b908160058111156105835761058361094e565b905250505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600581111561064c5761064c61094e565b905290565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff8111828210171561068b5761068b610651565b60405290565b80356001600160a01b03811681146106a857600080fd5b919050565b600082601f8301126106be57600080fd5b813567ffffffffffffffff808211156106d9576106d9610651565b604051601f8301601f19908116603f0116810190828211818310171561070157610701610651565b8160405283815286602085880101111561071a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600681106106a857600080fd5b6000610260828403121561075c57600080fd5b610764610667565b905061076f82610691565b815261077d60208301610691565b602082015261078e60408301610691565b6040820152606082013567ffffffffffffffff808211156107ae57600080fd5b6107ba858386016106ad565b60608401526080848101359084015260a0808501359084015260c0808501359084015260e0808501359084015261010080850135908401526101208085013590840152610140808501359084015261016080850135908401526101809150610823828501610691565b918301919091526101a083810135908301526101c080840135908301526101e08084013590830152610200808401359083015261022090818401358181111561086b57600080fd5b610877868287016106ad565b8385015250505061024061088c81840161073a565b9082015292915050565b600080600080600060a086880312156108ae57600080fd5b853567ffffffffffffffff8111156108c557600080fd5b6108d188828901610749565b95505060208601359350604086013592506108ee6060870161073a565b91506108fc6080870161073a565b90509295509295909350565b6000815180845260005b8181101561092e57602081850181015186830182015201610912565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6006811061098257634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061026060208301516109b260208601826001600160a01b03169052565b5060408301516109cd60408601826001600160a01b03169052565b5060608301518160608601526109e582860182610908565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151610a5b828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152610aa18382610908565b9250505061024080840151610ab882870182610964565b5090949350505050565b606081526000610ad56060830186610986565b602083019490945250901515604090910152919050565b60008060408385031215610aff57600080fd5b823567ffffffffffffffff811115610b1657600080fd5b610b2285828601610749565b925050610b316020840161073a565b90509250929050565b602081526000610b4d6020830184610986565b9392505050565b600080600060608486031215610b6957600080fd5b833567ffffffffffffffff811115610b8057600080fd5b610b8c86828701610749565b93505060208401359150610ba26040850161073a565b90509250925092565b60008060408385031215610bbe57600080fd5b823567ffffffffffffffff811115610bd557600080fd5b610be185828601610749565b95602094909401359450505050565b604081526000610c036040830185610986565b90508260208301529392505050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561021557610215610c5a565b808202811582820484141761021557610215610c5a565b600082610cb757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561021557610215610c5a56fea26469706673582212207b537dedb1ff9035c844758012466cfe097788f03cea3d876f65d3f7bcccb30264736f6c63430008150033608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220f521dfcbc3cb8b516c16f450cc0b3f59fa019109d73913d47c59da7b8920d00464736f6c63430008150033",
}

// AutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityMetaData.ABI instead.
var AutonityABI = AutonityMetaData.ABI

// Deprecated: Use AutonityMetaData.Sigs instead.
// AutonityFuncSigs maps the 4-byte function signature to its string representation.
var AutonityFuncSigs = AutonityMetaData.Sigs

// AutonityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityMetaData.Bin instead.
var AutonityBin = AutonityMetaData.Bin

// DeployAutonity deploys a new Ethereum contract, binding an instance of Autonity to it.
func (r *Runner) DeployAutonity(opts *runOptions, _validators []AutonityValidator, _config AutonityConfig) (common.Address, uint64, *Autonity, error) {
	parsed, err := AutonityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AutonityBin), _validators, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Autonity{contract: c}, nil
}

// Autonity is an auto generated Go binding around an Ethereum contract.
type Autonity struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_Autonity *Autonity) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// PROPOSERREWARDRATEPRECISION is a free data retrieval call binding the contract method 0x5115840b.
//
// Solidity: function PROPOSER_REWARD_RATE_PRECISION() view returns(uint256)
func (_Autonity *Autonity) PROPOSERREWARDRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "PROPOSER_REWARD_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WITHHOLDINGTHRESHOLDPRECISION is a free data retrieval call binding the contract method 0xe490389e.
//
// Solidity: function WITHHOLDING_THRESHOLD_PRECISION() view returns(uint256)
func (_Autonity *Autonity) WITHHOLDINGTHRESHOLDPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "WITHHOLDING_THRESHOLD_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Autonity *Autonity) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_Autonity *Autonity) BalanceOf(opts *runOptions, _addr common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_Autonity *Autonity) CirculatingSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "circulatingSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_Autonity *Autonity) Config(opts *runOptions) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Autonity *Autonity) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Autonity *Autonity) Deployer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "deployer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_Autonity *Autonity) EpochID(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochID")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochPeriodToBeApplied is a free data retrieval call binding the contract method 0x573963b8.
//
// Solidity: function epochPeriodToBeApplied() view returns(uint256)
func (_Autonity *Autonity) EpochPeriodToBeApplied(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochPeriodToBeApplied")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_Autonity *Autonity) EpochReward(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochReward")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_Autonity *Autonity) EpochTotalBondedStake(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_Autonity *Autonity) GetBlockPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_Autonity *Autonity) GetCommittee(opts *runOptions) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_Autonity *Autonity) GetCommitteeEnodes(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_Autonity *Autonity) GetCurrentEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getCurrentEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *Autonity) GetEpochByHeight(opts *runOptions, _height *big.Int) (AutonityEpochInfo, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochByHeight", _height)

	if err != nil {
		return *new(AutonityEpochInfo), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)
	return out0, consumed, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_Autonity *Autonity) GetEpochFromBlock(opts *runOptions, _block *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_Autonity *Autonity) GetEpochInfo(opts *runOptions) (AutonityEpochInfo, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochInfo")

	if err != nil {
		return *new(AutonityEpochInfo), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)
	return out0, consumed, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_Autonity *Autonity) GetEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_Autonity *Autonity) GetLastEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_Autonity *Autonity) GetMaxCommitteeSize(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_Autonity *Autonity) GetMaxScheduleDuration(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMaxScheduleDuration")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_Autonity *Autonity) GetMinimumBaseFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Autonity *Autonity) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_Autonity *Autonity) GetNextEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_Autonity *Autonity) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_Autonity *Autonity) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_Autonity *Autonity) GetSchedule(opts *runOptions, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)
	return out0, consumed, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_Autonity *Autonity) GetTotalSchedules(opts *runOptions, _vault common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_Autonity *Autonity) GetTreasuryAccount(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_Autonity *Autonity) GetTreasuryFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_Autonity *Autonity) GetUnbondingPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_Autonity *Autonity) GetUnbondingShare(opts *runOptions, _unbondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getUnbondingShare", _unbondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Autonity *Autonity) GetValidator(opts *runOptions, _addr common.Address) (AutonityValidator, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_Autonity *Autonity) GetValidatorState(opts *runOptions, _addr common.Address) (uint8, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getValidatorState", _addr)

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Autonity *Autonity) GetValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_Autonity *Autonity) GetVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "getVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_Autonity *Autonity) InflationReserve(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "inflationReserve")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_Autonity *Autonity) IsUnbondingReleased(opts *runOptions, _unbondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_Autonity *Autonity) LastEpochTime(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_Autonity *Autonity) LastFinalizedBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_Autonity *Autonity) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Autonity *Autonity) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_Autonity *Autonity) Slasher(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "slasher")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Autonity *Autonity) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Autonity *Autonity) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Autonity.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetLiquidLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf1d592a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *Autonity) CallSetLiquidLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "SetLiquidLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ActivateValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb46e5520.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *Autonity) CallActivateValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "activateValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *Autonity) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) CallBurn(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "burn", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x852c4849.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *Autonity) CallChangeCommissionRate(r *Runner, opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "changeCommissionRate", _validator, _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *Autonity) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ComputeCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xae1f5fa0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_Autonity *Autonity) CallComputeCommittee(r *Runner, opts *runOptions) ([]common.Address, []common.Address, []common.Address, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "computeCommittee")
	r.revertSnapshot(snap)

	if err != nil {
		return *new([]common.Address), *new([]common.Address), *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	out2 := *abi.ConvertType(out[2], new([]common.Address)).(*[]common.Address)
	return out0, out1, out2, consumed, err

}

// CreateSchedule is a free data retrieval call for a paid mutator transaction binding the contract method 0x354c40a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_Autonity *Autonity) CallCreateSchedule(r *Runner, opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *Autonity) CallFinalize(r *Runner, opts *runOptions) (bool, bool, []AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), *new(bool), *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, out4, out5, consumed, err

}

// FinalizeInitialization is a free data retrieval call for a paid mutator transaction binding the contract method 0x4da3baec.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_Autonity *Autonity) CallFinalizeInitialization(r *Runner, opts *runOptions, delta *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "finalizeInitialization", delta)
	r.revertSnapshot(snap)
	return consumed, err

}

// Jail is a free data retrieval call for a paid mutator transaction binding the contract method 0x154d76d7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_Autonity *Autonity) CallJail(r *Runner, opts *runOptions, _nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "jail", _nodeAddress, _jailtime, _newJailedState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Jailbound is a free data retrieval call for a paid mutator transaction binding the contract method 0x8ef8c2fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_Autonity *Autonity) CallJailbound(r *Runner, opts *runOptions, _nodeAddress common.Address, _newJailboundState uint8) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "jailbound", _nodeAddress, _newJailboundState)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) CallMint(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "mint", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// PauseValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae65e7a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *Autonity) CallPauseValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "pauseValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// RegisterValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x84467fdb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *Autonity) CallRegisterValidator(r *Runner, opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *Autonity) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1250a28d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) CallSetAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAcuContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xd372c07e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *Autonity) CallSetAcuContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setAcuContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommitteeSize is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bac7dad.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *Autonity) CallSetCommitteeSize(r *Runner, opts *runOptions, _size *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setCommitteeSize", _size)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *Autonity) CallSetEpochPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setEpochPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInflationControllerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf03b959d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *Autonity) CallSetInflationControllerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setInflationControllerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMaxScheduleDuration is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bb2e477.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_Autonity *Autonity) CallSetMaxScheduleDuration(r *Runner, opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinimumBaseFee is a free data retrieval call for a paid mutator transaction binding the contract method 0xcb696f54.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *Autonity) CallSetMinimumBaseFee(r *Runner, opts *runOptions, _price *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setMinimumBaseFee", _price)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOmissionAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb47c3eaa.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) CallSetOmissionAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setOmissionAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperatorAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0x520fdbbc.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *Autonity) CallSetOperatorAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setOperatorAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracleContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x496ccd9b.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *Autonity) CallSetOracleContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setOracleContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetProposerRewardRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x416f86a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_Autonity *Autonity) CallSetProposerRewardRate(r *Runner, opts *runOptions, _proposerRewardRate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setProposerRewardRate", _proposerRewardRate)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSlasher is a free data retrieval call for a paid mutator transaction binding the contract method 0xaabc2496.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSlasher(address _slasher) returns()
func (_Autonity *Autonity) CallSetSlasher(r *Runner, opts *runOptions, _slasher common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setSlasher", _slasher)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizationContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfd19fb9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *Autonity) CallSetStabilizationContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setStabilizationContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControlContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ecbadd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *Autonity) CallSetSupplyControlContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setSupplyControlContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0xd886f8a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *Autonity) CallSetTreasuryAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setTreasuryAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryFee is a free data retrieval call for a paid mutator transaction binding the contract method 0x77e741c7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *Autonity) CallSetTreasuryFee(r *Runner, opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setTreasuryFee", _treasuryFee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUnbondingPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x114eaf55.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *Autonity) CallSetUnbondingPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setUnbondingPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUpgradeManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xceaad455.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *Autonity) CallSetUpgradeManagerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setUpgradeManagerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetWithheldRewardsPool is a free data retrieval call for a paid mutator transaction binding the contract method 0x39f9eb1f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_Autonity *Autonity) CallSetWithheldRewardsPool(r *Runner, opts *runOptions, _pool common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setWithheldRewardsPool", _pool)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetWithholdingThreshold is a free data retrieval call for a paid mutator transaction binding the contract method 0x905d76e9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_Autonity *Autonity) CallSetWithholdingThreshold(r *Runner, opts *runOptions, _withholdingThreshold *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "setWithholdingThreshold", _withholdingThreshold)
	r.revertSnapshot(snap)
	return consumed, err

}

// Slash is a free data retrieval call for a paid mutator transaction binding the contract method 0x02fb4d85.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_Autonity *Autonity) CallSlash(r *Runner, opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "slash", _nodeAddress, _slashingRate)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SlashAndJail is a free data retrieval call for a paid mutator transaction binding the contract method 0x122b4122.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_Autonity *Autonity) CallSlashAndJail(r *Runner, opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (struct {
	SlashingAmount   *big.Int
	JailReleaseBlock *big.Int
	IsJailbound      bool
}, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "slashAndJail", _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	r.revertSnapshot(snap)

	outstruct := new(struct {
		SlashingAmount   *big.Int
		JailReleaseBlock *big.Int
		IsJailbound      bool
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.SlashingAmount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.JailReleaseBlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsJailbound = *abi.ConvertType(out[2], new(bool)).(*bool)
	return *outstruct, consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) CallTransfer(r *Runner, opts *runOptions, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "transfer", _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Autonity.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateEnode is a free data retrieval call for a paid mutator transaction binding the contract method 0x784304b5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *Autonity) CallUpdateEnode(r *Runner, opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "updateEnode", _nodeAddress, _enode)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *Autonity) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Autonity.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_Autonity *Autonity) SetLiquidLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "SetLiquidLogicContract", _contract)
	return consumed, err
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_Autonity *Autonity) ActivateValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "activateValidator", _address)
	return consumed, err
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Autonity *Autonity) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "approve", spender, amount)
	return consumed, err
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) Burn(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "burn", _addr, _amount)
	return consumed, err
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_Autonity *Autonity) ChangeCommissionRate(opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "changeCommissionRate", _validator, _rate)
	return consumed, err
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Autonity *Autonity) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_Autonity *Autonity) ComputeCommittee(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "computeCommittee")
	return consumed, err
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_Autonity *Autonity) CreateSchedule(opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_Autonity *Autonity) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "finalize")
	return consumed, err
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_Autonity *Autonity) FinalizeInitialization(opts *runOptions, delta *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "finalizeInitialization", delta)
	return consumed, err
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_Autonity *Autonity) Jail(opts *runOptions, _nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "jail", _nodeAddress, _jailtime, _newJailedState)
	return consumed, err
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_Autonity *Autonity) Jailbound(opts *runOptions, _nodeAddress common.Address, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "jailbound", _nodeAddress, _newJailboundState)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_Autonity *Autonity) Mint(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "mint", _addr, _amount)
	return consumed, err
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_Autonity *Autonity) PauseValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "pauseValidator", _address)
	return consumed, err
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_Autonity *Autonity) RegisterValidator(opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Autonity *Autonity) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "resetContractUpgrade")
	return consumed, err
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) SetAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setAccountabilityContract", _address)
	return consumed, err
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_Autonity *Autonity) SetAcuContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setAcuContract", _address)
	return consumed, err
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_Autonity *Autonity) SetCommitteeSize(opts *runOptions, _size *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setCommitteeSize", _size)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_Autonity *Autonity) SetEpochPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setEpochPeriod", _period)
	return consumed, err
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_Autonity *Autonity) SetInflationControllerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setInflationControllerContract", _address)
	return consumed, err
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_Autonity *Autonity) SetMaxScheduleDuration(opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	return consumed, err
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_Autonity *Autonity) SetMinimumBaseFee(opts *runOptions, _price *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setMinimumBaseFee", _price)
	return consumed, err
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_Autonity *Autonity) SetOmissionAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setOmissionAccountabilityContract", _address)
	return consumed, err
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_Autonity *Autonity) SetOperatorAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setOperatorAccount", _account)
	return consumed, err
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_Autonity *Autonity) SetOracleContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setOracleContract", _address)
	return consumed, err
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_Autonity *Autonity) SetProposerRewardRate(opts *runOptions, _proposerRewardRate *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setProposerRewardRate", _proposerRewardRate)
	return consumed, err
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_Autonity *Autonity) SetSlasher(opts *runOptions, _slasher common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setSlasher", _slasher)
	return consumed, err
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_Autonity *Autonity) SetStabilizationContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setStabilizationContract", _address)
	return consumed, err
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_Autonity *Autonity) SetSupplyControlContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setSupplyControlContract", _address)
	return consumed, err
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_Autonity *Autonity) SetTreasuryAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setTreasuryAccount", _account)
	return consumed, err
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_Autonity *Autonity) SetTreasuryFee(opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setTreasuryFee", _treasuryFee)
	return consumed, err
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_Autonity *Autonity) SetUnbondingPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setUnbondingPeriod", _period)
	return consumed, err
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_Autonity *Autonity) SetUpgradeManagerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setUpgradeManagerContract", _address)
	return consumed, err
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_Autonity *Autonity) SetWithheldRewardsPool(opts *runOptions, _pool common.Address) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setWithheldRewardsPool", _pool)
	return consumed, err
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_Autonity *Autonity) SetWithholdingThreshold(opts *runOptions, _withholdingThreshold *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "setWithholdingThreshold", _withholdingThreshold)
	return consumed, err
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_Autonity *Autonity) Slash(opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "slash", _nodeAddress, _slashingRate)
	return consumed, err
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_Autonity *Autonity) SlashAndJail(opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "slashAndJail", _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) Transfer(opts *runOptions, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "transfer", _recipient, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_Autonity *Autonity) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_Autonity *Autonity) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_Autonity *Autonity) UpdateEnode(opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "updateEnode", _nodeAddress, _enode)
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Autonity *Autonity) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_Autonity *Autonity) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_Autonity *Autonity) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _Autonity.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AutonityActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the Autonity contract.
		type AutonityActivatedValidatorIterator struct {
			Event *AutonityActivatedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityActivatedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityActivatedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityActivatedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityActivatedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityActivatedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityActivatedValidator represents a ActivatedValidator event raised by the Autonity contract.
		type AutonityActivatedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_Autonity *Autonity) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityActivatedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityActivatedValidatorIterator{contract: _Autonity.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityActivatedValidator)
						if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) ParseActivatedValidator(log types.Log) (*AutonityActivatedValidator, error) {
			event := new(AutonityActivatedValidator)
			if err := _Autonity.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Autonity contract.
		type AutonityApprovalIterator struct {
			Event *AutonityApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityApproval represents a Approval event raised by the Autonity contract.
		type AutonityApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_Autonity *Autonity) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &AutonityApprovalIterator{contract: _Autonity.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_Autonity *Autonity) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityApproval)
						if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_Autonity *Autonity) ParseApproval(log types.Log) (*AutonityApproval, error) {
			event := new(AutonityApproval)
			if err := _Autonity.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the Autonity contract.
		type AutonityBondingRejectedIterator struct {
			Event *AutonityBondingRejected // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityBondingRejectedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityBondingRejected)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityBondingRejected)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityBondingRejectedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityBondingRejectedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityBondingRejected represents a BondingRejected event raised by the Autonity contract.
		type AutonityBondingRejected struct {
			Validator common.Address;
			Delegator common.Address;
			Amount *big.Int;
			State uint8;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
 		func (_Autonity *Autonity) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityBondingRejectedIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityBondingRejectedIterator{contract: _Autonity.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
 		}

		// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_Autonity *Autonity) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityBondingRejected)
						if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_Autonity *Autonity) ParseBondingRejected(log types.Log) (*AutonityBondingRejected, error) {
			event := new(AutonityBondingRejected)
			if err := _Autonity.contract.UnpackLog(event, "BondingRejected", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the Autonity contract.
		type AutonityBurnedStakeIterator struct {
			Event *AutonityBurnedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityBurnedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityBurnedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityBurnedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityBurnedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityBurnedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityBurnedStake represents a BurnedStake event raised by the Autonity contract.
		type AutonityBurnedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
 		func (_Autonity *Autonity) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityBurnedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityBurnedStakeIterator{contract: _Autonity.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
 		}

		// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityBurnedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityBurnedStake)
						if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) ParseBurnedStake(log types.Log) (*AutonityBurnedStake, error) {
			event := new(AutonityBurnedStake)
			if err := _Autonity.contract.UnpackLog(event, "BurnedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the Autonity contract.
		type AutonityCallFailedIterator struct {
			Event *AutonityCallFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityCallFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityCallFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityCallFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityCallFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityCallFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityCallFailed represents a CallFailed event raised by the Autonity contract.
		type AutonityCallFailed struct {
			To common.Address;
			MethodSignature string;
			ReturnData []byte;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
 		func (_Autonity *Autonity) FilterCallFailed(opts *bind.FilterOpts) (*AutonityCallFailedIterator, error) {





			logs, sub, err := _Autonity.contract.FilterLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityCallFailedIterator{contract: _Autonity.contract, event: "CallFailed", logs: logs, sub: sub}, nil
 		}

		// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_Autonity *Autonity) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityCallFailed) (event.Subscription, error) {





			logs, sub, err := _Autonity.contract.WatchLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityCallFailed)
						if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_Autonity *Autonity) ParseCallFailed(log types.Log) (*AutonityCallFailed, error) {
			event := new(AutonityCallFailed)
			if err := _Autonity.contract.UnpackLog(event, "CallFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the Autonity contract.
		type AutonityCommissionRateChangeIterator struct {
			Event *AutonityCommissionRateChange // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityCommissionRateChangeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityCommissionRateChange)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityCommissionRateChange)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityCommissionRateChangeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityCommissionRateChangeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityCommissionRateChange represents a CommissionRateChange event raised by the Autonity contract.
		type AutonityCommissionRateChange struct {
			Validator common.Address;
			Rate *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
 		func (_Autonity *Autonity) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityCommissionRateChangeIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityCommissionRateChangeIterator{contract: _Autonity.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
 		}

		// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_Autonity *Autonity) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityCommissionRateChange, validator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityCommissionRateChange)
						if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_Autonity *Autonity) ParseCommissionRateChange(log types.Log) (*AutonityCommissionRateChange, error) {
			event := new(AutonityCommissionRateChange)
			if err := _Autonity.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the Autonity contract.
		type AutonityEpochPeriodUpdatedIterator struct {
			Event *AutonityEpochPeriodUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityEpochPeriodUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityEpochPeriodUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityEpochPeriodUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityEpochPeriodUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityEpochPeriodUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the Autonity contract.
		type AutonityEpochPeriodUpdated struct {
			Period *big.Int;
			ToBeAppliedAtBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
 		func (_Autonity *Autonity) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityEpochPeriodUpdatedIterator, error) {




			logs, sub, err := _Autonity.contract.FilterLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityEpochPeriodUpdatedIterator{contract: _Autonity.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_Autonity *Autonity) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityEpochPeriodUpdated) (event.Subscription, error) {




			logs, sub, err := _Autonity.contract.WatchLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityEpochPeriodUpdated)
						if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_Autonity *Autonity) ParseEpochPeriodUpdated(log types.Log) (*AutonityEpochPeriodUpdated, error) {
			event := new(AutonityEpochPeriodUpdated)
			if err := _Autonity.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the Autonity contract.
		type AutonityMinimumBaseFeeUpdatedIterator struct {
			Event *AutonityMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityMinimumBaseFeeUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityMinimumBaseFeeUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityMinimumBaseFeeUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the Autonity contract.
		type AutonityMinimumBaseFeeUpdated struct {
			GasPrice *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
 		func (_Autonity *Autonity) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityMinimumBaseFeeUpdatedIterator, error) {



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityMinimumBaseFeeUpdatedIterator{contract: _Autonity.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_Autonity *Autonity) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityMinimumBaseFeeUpdated) (event.Subscription, error) {



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityMinimumBaseFeeUpdated)
						if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_Autonity *Autonity) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityMinimumBaseFeeUpdated, error) {
			event := new(AutonityMinimumBaseFeeUpdated)
			if err := _Autonity.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the Autonity contract.
		type AutonityMintedStakeIterator struct {
			Event *AutonityMintedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityMintedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityMintedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityMintedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityMintedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityMintedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityMintedStake represents a MintedStake event raised by the Autonity contract.
		type AutonityMintedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
 		func (_Autonity *Autonity) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityMintedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityMintedStakeIterator{contract: _Autonity.contract, event: "MintedStake", logs: logs, sub: sub}, nil
 		}

		// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityMintedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityMintedStake)
						if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_Autonity *Autonity) ParseMintedStake(log types.Log) (*AutonityMintedStake, error) {
			event := new(AutonityMintedStake)
			if err := _Autonity.contract.UnpackLog(event, "MintedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the Autonity contract.
		type AutonityNewBondingRequestIterator struct {
			Event *AutonityNewBondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewBondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewBondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewBondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewBondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewBondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewBondingRequest represents a NewBondingRequest event raised by the Autonity contract.
		type AutonityNewBondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_Autonity *Autonity) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewBondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityNewBondingRequestIterator{contract: _Autonity.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewBondingRequest)
						if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) ParseNewBondingRequest(log types.Log) (*AutonityNewBondingRequest, error) {
			event := new(AutonityNewBondingRequest)
			if err := _Autonity.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the Autonity contract.
		type AutonityNewEpochIterator struct {
			Event *AutonityNewEpoch // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewEpochIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewEpoch)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewEpoch)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewEpochIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewEpochIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewEpoch represents a NewEpoch event raised by the Autonity contract.
		type AutonityNewEpoch struct {
			Epoch *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
 		func (_Autonity *Autonity) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityNewEpochIterator, error) {



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return &AutonityNewEpochIterator{contract: _Autonity.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
 		}

		// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_Autonity *Autonity) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityNewEpoch) (event.Subscription, error) {



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewEpoch)
						if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_Autonity *Autonity) ParseNewEpoch(log types.Log) (*AutonityNewEpoch, error) {
			event := new(AutonityNewEpoch)
			if err := _Autonity.contract.UnpackLog(event, "NewEpoch", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewScheduleIterator is returned from FilterNewSchedule and is used to iterate over the raw logs and unpacked data for NewSchedule events raised by the Autonity contract.
		type AutonityNewScheduleIterator struct {
			Event *AutonityNewSchedule // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewScheduleIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewSchedule)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewSchedule)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewScheduleIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewScheduleIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewSchedule represents a NewSchedule event raised by the Autonity contract.
		type AutonityNewSchedule struct {
			ScheduleVault common.Address;
			Amount *big.Int;
			Start *big.Int;
			TotalDuration *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSchedule is a free log retrieval operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
 		func (_Autonity *Autonity) FilterNewSchedule(opts *bind.FilterOpts, scheduleVault []common.Address) (*AutonityNewScheduleIterator, error) {

			var scheduleVaultRule []interface{}
			for _, scheduleVaultItem := range scheduleVault {
				scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
			}




			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewSchedule", scheduleVaultRule)
			if err != nil {
				return nil, err
			}
			return &AutonityNewScheduleIterator{contract: _Autonity.contract, event: "NewSchedule", logs: logs, sub: sub}, nil
 		}

		// WatchNewSchedule is a free log subscription operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
		func (_Autonity *Autonity) WatchNewSchedule(opts *bind.WatchOpts, sink chan<- *AutonityNewSchedule, scheduleVault []common.Address) (event.Subscription, error) {

			var scheduleVaultRule []interface{}
			for _, scheduleVaultItem := range scheduleVault {
				scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
			}




			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewSchedule", scheduleVaultRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewSchedule)
						if err := _Autonity.contract.UnpackLog(event, "NewSchedule", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSchedule is a log parse operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
		func (_Autonity *Autonity) ParseNewSchedule(log types.Log) (*AutonityNewSchedule, error) {
			event := new(AutonityNewSchedule)
			if err := _Autonity.contract.UnpackLog(event, "NewSchedule", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the Autonity contract.
		type AutonityNewUnbondingRequestIterator struct {
			Event *AutonityNewUnbondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityNewUnbondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityNewUnbondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityNewUnbondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityNewUnbondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityNewUnbondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityNewUnbondingRequest represents a NewUnbondingRequest event raised by the Autonity contract.
		type AutonityNewUnbondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_Autonity *Autonity) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityNewUnbondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityNewUnbondingRequestIterator{contract: _Autonity.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityNewUnbondingRequest)
						if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_Autonity *Autonity) ParseNewUnbondingRequest(log types.Log) (*AutonityNewUnbondingRequest, error) {
			event := new(AutonityNewUnbondingRequest)
			if err := _Autonity.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the Autonity contract.
		type AutonityPausedValidatorIterator struct {
			Event *AutonityPausedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityPausedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityPausedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityPausedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityPausedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityPausedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityPausedValidator represents a PausedValidator event raised by the Autonity contract.
		type AutonityPausedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_Autonity *Autonity) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityPausedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityPausedValidatorIterator{contract: _Autonity.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityPausedValidator)
						if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_Autonity *Autonity) ParsePausedValidator(log types.Log) (*AutonityPausedValidator, error) {
			event := new(AutonityPausedValidator)
			if err := _Autonity.contract.UnpackLog(event, "PausedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the Autonity contract.
		type AutonityRegisteredValidatorIterator struct {
			Event *AutonityRegisteredValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityRegisteredValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityRegisteredValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityRegisteredValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityRegisteredValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityRegisteredValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityRegisteredValidator represents a RegisteredValidator event raised by the Autonity contract.
		type AutonityRegisteredValidator struct {
			Treasury common.Address;
			Addr common.Address;
			OracleAddress common.Address;
			Enode string;
			LiquidStateContract common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
 		func (_Autonity *Autonity) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityRegisteredValidatorIterator, error) {







			logs, sub, err := _Autonity.contract.FilterLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return &AutonityRegisteredValidatorIterator{contract: _Autonity.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
 		}

		// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_Autonity *Autonity) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityRegisteredValidator) (event.Subscription, error) {







			logs, sub, err := _Autonity.contract.WatchLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityRegisteredValidator)
						if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_Autonity *Autonity) ParseRegisteredValidator(log types.Log) (*AutonityRegisteredValidator, error) {
			event := new(AutonityRegisteredValidator)
			if err := _Autonity.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the Autonity contract.
		type AutonityRewardedIterator struct {
			Event *AutonityRewarded // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityRewardedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityRewarded)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityRewarded)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityRewardedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityRewardedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityRewarded represents a Rewarded event raised by the Autonity contract.
		type AutonityRewarded struct {
			Addr common.Address;
			AtnAmount *big.Int;
			NtnAmount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
 		func (_Autonity *Autonity) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityRewardedIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityRewardedIterator{contract: _Autonity.contract, event: "Rewarded", logs: logs, sub: sub}, nil
 		}

		// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_Autonity *Autonity) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityRewarded, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityRewarded)
						if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_Autonity *Autonity) ParseRewarded(log types.Log) (*AutonityRewarded, error) {
			event := new(AutonityRewarded)
			if err := _Autonity.contract.UnpackLog(event, "Rewarded", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Autonity contract.
		type AutonityTransferIterator struct {
			Event *AutonityTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityTransfer represents a Transfer event raised by the Autonity contract.
		type AutonityTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_Autonity *Autonity) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _Autonity.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &AutonityTransferIterator{contract: _Autonity.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_Autonity *Autonity) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _Autonity.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityTransfer)
						if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_Autonity *Autonity) ParseTransfer(log types.Log) (*AutonityTransfer, error) {
			event := new(AutonityTransfer)
			if err := _Autonity.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// AutonityUpgradeTestMetaData contains all meta data concerning the AutonityUpgradeTest contract.
var AutonityUpgradeTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"ActivatedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"BondingRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBeAppliedAtBlock\",\"type\":\"uint256\"}],\"name\":\"EpochPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumBaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scheduleVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"NewSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"selfBonded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewUnbondingRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"PausedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidStateContract\",\"type\":\"address\"}],\"name\":\"RegisteredValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntnAmount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER_REWARD_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHHOLDING_THRESHOLD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"activateValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialInflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withholdingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposerRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"withheldRewardsPool\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"treasuryAccount\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Policy\",\"name\":\"policy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIAccountability\",\"name\":\"accountabilityContract\",\"type\":\"address\"},{\"internalType\":\"contractIOracle\",\"name\":\"oracleContract\",\"type\":\"address\"},{\"internalType\":\"contractIACU\",\"name\":\"acuContract\",\"type\":\"address\"},{\"internalType\":\"contractISupplyControl\",\"name\":\"supplyControlContract\",\"type\":\"address\"},{\"internalType\":\"contractIStabilization\",\"name\":\"stabilizationContract\",\"type\":\"address\"},{\"internalType\":\"contractUpgradeManager\",\"name\":\"upgradeManagerContract\",\"type\":\"address\"},{\"internalType\":\"contractIInflationController\",\"name\":\"inflationControllerContract\",\"type\":\"address\"},{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"omissionAccountabilityContract\",\"type\":\"address\"}],\"internalType\":\"structAutonity.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operatorAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committeeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxScheduleDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.Protocol\",\"name\":\"protocol\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"contractVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriodToBeApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTotalBondedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitteeEnodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getEpochByHeight\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getEpochFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"committee\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"previousEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEpochBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structAutonity.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCommitteeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxScheduleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getValidatorState\",\"outputs\":[{\"internalType\":\"enumValidatorState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingID\",\"type\":\"uint256\"}],\"name\":\"isUnbondingReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"pauseValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIACU\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAcuContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setCommitteeSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInflationController\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInflationControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxScheduleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinimumBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOmissionAccountability\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOmissionAccountabilityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperatorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposerRewardRate\",\"type\":\"uint256\"}],\"name\":\"setProposerRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"}],\"name\":\"setSlasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStabilization\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStabilizationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISupplyControl\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSupplyControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasuryAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUnbondingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractUpgradeManager\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setWithheldRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withholdingThreshold\",\"type\":\"uint256\"}],\"name\":\"setWithholdingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_enode\",\"type\":\"string\"}],\"name\":\"updateEnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"5115840b": "PROPOSER_REWARD_RATE_PRECISION()",
		"f1d592a7": "SetLiquidLogicContract(address)",
		"e490389e": "WITHHOLDING_THRESHOLD_PRECISION()",
		"b46e5520": "activateValidator(address)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"a515366a": "bond(address,uint256)",
		"9dc29fac": "burn(address,uint256)",
		"852c4849": "changeCommissionRate(address,uint256)",
		"9358928b": "circulatingSupply()",
		"872cf059": "completeContractUpgrade()",
		"ae1f5fa0": "computeCommittee()",
		"79502c55": "config()",
		"354c40a7": "createSchedule(address,uint256,uint256,uint256)",
		"313ce567": "decimals()",
		"d5f39488": "deployer()",
		"c9d97af4": "epochID()",
		"573963b8": "epochPeriodToBeApplied()",
		"1604e416": "epochReward()",
		"9c98e471": "epochTotalBondedStake()",
		"4bb278f3": "finalize()",
		"4da3baec": "finalizeInitialization(uint256)",
		"43645969": "getBlockPeriod()",
		"ab8f6ffe": "getCommittee()",
		"a8b2216e": "getCommitteeEnodes()",
		"0aac2da1": "getCurrentEpochPeriod()",
		"affb1cf1": "getEpochByHeight(uint256)",
		"96b477cb": "getEpochFromBlock(uint256)",
		"a9fd1a8f": "getEpochInfo()",
		"dfb1a4d2": "getEpochPeriod()",
		"731b3a03": "getLastEpochBlock()",
		"819b6463": "getMaxCommitteeSize()",
		"fed76a56": "getMaxScheduleDuration()",
		"11220633": "getMinimumBaseFee()",
		"b66b3e79": "getNewContract()",
		"25ce1bb9": "getNextEpochBlock()",
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
		"f7866ee3": "getTreasuryAccount()",
		"29070c6d": "getTreasuryFee()",
		"6fd2c80b": "getUnbondingPeriod()",
		"8d347287": "getUnbondingShare(uint256)",
		"1904bb2e": "getValidator(address)",
		"5b7d6c36": "getValidatorState(address)",
		"b7ab4db5": "getValidators()",
		"0d8e6e2c": "getVersion()",
		"9ac31074": "inflationReserve()",
		"e294df7c": "isUnbondingReleased(uint256)",
		"154d76d7": "jail(address,uint256,uint8)",
		"8ef8c2fd": "jailbound(address,uint8)",
		"89c614b8": "lastEpochTime()",
		"ae1da0b5": "lastFinalizedBlock()",
		"96f18a32": "liquidLogicContract()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"0ae65e7a": "pauseValidator(address)",
		"84467fdb": "registerValidator(string,address,bytes,bytes)",
		"cf9c5719": "resetContractUpgrade()",
		"1250a28d": "setAccountabilityContract(address)",
		"d372c07e": "setAcuContract(address)",
		"8bac7dad": "setCommitteeSize(uint256)",
		"6b5f444c": "setEpochPeriod(uint256)",
		"f03b959d": "setInflationControllerContract(address)",
		"8bb2e477": "setMaxScheduleDuration(uint256)",
		"cb696f54": "setMinimumBaseFee(uint256)",
		"b47c3eaa": "setOmissionAccountabilityContract(address)",
		"520fdbbc": "setOperatorAccount(address)",
		"496ccd9b": "setOracleContract(address)",
		"416f86a2": "setProposerRewardRate(uint256)",
		"aabc2496": "setSlasher(address)",
		"cfd19fb9": "setStabilizationContract(address)",
		"b3ecbadd": "setSupplyControlContract(address)",
		"d886f8a2": "setTreasuryAccount(address)",
		"77e741c7": "setTreasuryFee(uint256)",
		"114eaf55": "setUnbondingPeriod(uint256)",
		"ceaad455": "setUpgradeManagerContract(address)",
		"39f9eb1f": "setWithheldRewardsPool(address)",
		"905d76e9": "setWithholdingThreshold(uint256)",
		"02fb4d85": "slash(address,uint256)",
		"122b4122": "slashAndJail(address,uint256,uint256,uint8,uint8)",
		"b1344271": "slasher()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"a5d059ca": "unbond(address,uint256)",
		"784304b5": "updateEnode(address,string)",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
	Bin: "0x60806040526000600e556000600f553480156200001b57600080fd5b50604080516000808252602082019092529062000051565b6200003d62000f4c565b815260200190600190039081620000335790505b50604080516101a081018252601054608080830191825260115460a08085019190915260125460c08086019190915260135460e080870191909152601454610100808801919091526015546101208801526016546101408801526017546001600160a01b0390811661016089015260185481166101808901529587528751908101885260195486168152601a548616602082810191909152601b548716828a0152601c548716606080840191909152601d54881683880152601e54881683870152601f548816948301949094528054871692820192909252818701528651928301875260215490941682526022549382019390935260235481860152602454818401526025549181019190915292820192909252602654918101829052906000036200019557603880546001600160a01b03191633179055620001958282620001b2565b5050602654600103620001ac57620001ac62000692565b6200137e565b80518051601055602080820151601155604080830151601255606080840151601355608080850151601481905560a08087015160155560c08088015160165560e080890151601780546001600160a01b03199081166001600160a01b0393841617909155610100909a0151601880548c16918316919091179055888b01518051601980548d16918416919091179055808a0151601a80548d1691841691909117905580890151601b80548d1691841691909117905580880151601c80548d1691841691909117905580870151601d80548d1691841691909117905593840151601e80548c1691831691909117905591830151601f80548b16918416919091179055919091015186548816908216178655848801518051602180549099169216919091179096559385015160228190558584015160235585830151602455940151602555840151602655602a9290925560375551620003109062001015565b604051809103906000f0801580156200032d573d6000803e3d6000fd5b50603980546001600160a01b0319166001600160a01b039290921691909117905560405130906200035e9062001023565b6001600160a01b039091168152602001604051809103906000f0801580156200038b573d6000803e3d6000fd5b50603a80546001600160a01b0319166001600160a01b039290921691909117905560005b82518110156200068d576000838281518110620003d057620003d0620010d0565b602002602001015160a0015190506000848381518110620003f557620003f5620010d0565b60200260200101516101a001818152505060008483815181106200041d576200041d620010d0565b602002602001015161018001906001600160a01b031690816001600160a01b0316815250506000848381518110620004595762000459620010d0565b602002602001015160a00181815250506000848381518110620004805762000480620010d0565b60209081029190910101516101c001526012548451859084908110620004aa57620004aa620010d0565b602002602001015160800181815250506000848381518110620004d157620004d1620010d0565b602002602001015161024001906005811115620004f257620004f2620010e6565b90816005811115620005085762000508620010e6565b815250506000848381518110620005235762000523620010d0565b6020026020010151610160018181525050620005618483815181106200054d576200054d620010d0565b60200260200101516200080260201b60201c565b6200058e8483815181106200057a576200057a620010d0565b60200260200101516200093960201b60201c565b8060336000868581518110620005a857620005a8620010d0565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000828254620005e5919062001112565b92505081905550806035600082825462000600919062001112565b9250508190555080603660008282546200061b919062001112565b92505081905550620006758483815181106200063b576200063b620010d0565b602002602001015160200151828685815181106200065d576200065d620010d0565b60200260200101516000015162000bdb60201b60201c565b5050808062000684906200112e565b915050620003af565b505050565b6038546001600160a01b03163314620006fe5760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60448201526218dbdb60ea1b60648201526084015b60405180910390fd5b60026034600060276001815481106200071b576200071b620010d0565b60009182526020808320909101546001600160a01b03168352820192909252604001812060050180549091906200075490849062001160565b925050819055506002603460006027600181548110620007785762000778620010d0565b60009182526020808320909101546001600160a01b0316835282019290925260400181206008018054909190620007b190849062001160565b909155505060026026556021546001600160a01b031660009081526033602052604081206103e89055620007e89060039062001031565b620007f66004600062001031565b6005805460ff19169055565b600062000819826060015162000dde60201b60201c565b6001600160a01b03909116602084015290508015620008695760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b6044820152606401620006f5565b6020808301516001600160a01b03908116600090815260349092526040909120600101541615620008dd5760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c72656164792072656769737465726564000000006044820152606401620006f5565b61271082608001511115620009355760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401620006f5565b5050565b6101808101516001600160a01b031662000a38576039546001600160a01b0316620009b25760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b6064820152608401620006f5565b602754600090620009c39062000e2c565b905081602001518260000151836080015183603960009054906101000a90046001600160a01b0316604051620009f99062001073565b62000a0995949392919062001177565b604051809103906000f08015801562000a26573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602780546001808201835560009283527f98a476f1687bc3d60a2da2adbcba2c46958e61fa2fb4042cd7bc5816a710195b90910180546001600160a01b03199081166001600160a01b039586161790915584518416835260349095526040918290208651815487169085161781559351908401805486169184169190911790558401516002830180549094169116179091556060820151829190600382019062000aea908262001285565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062000ba9908262001285565b5061024082015160128201805460ff1916600183600581111562000bd15762000bd1620010e6565b0217905550505050565b600080831162000c3a5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b6064820152608401620006f5565b6001600160a01b03821660009081526033602052604090205483111562000ca45760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e636500000000006044820152606401620006f5565b6001600160a01b0382166000908152603360205260408120805485929062000cce90849062001351565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062000d5d836200112e565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462000dd4919062001351565b9695505050505050565b60008062000deb62001081565b60008060ff9050604083875160208901845afa62000e0857600080fd5b505080516020909101516c0100000000000000000000000090910494909350915050565b60608160000362000e545750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000e84578062000e6b816200112e565b915062000e7c9050600a8362001160565b915062000e58565b6000816001600160401b0381111562000ea15762000ea1620010ba565b6040519080825280601f01601f19166020018201604052801562000ecc576020820181803683370190505b5090505b841562000f445762000ee460018362001351565b915062000ef3600a8662001367565b62000f0090603062001112565b60f81b81838151811062000f185762000f18620010d0565b60200101906001600160f81b031916908160001a90535062000f3c600a8662001160565b945062000ed0565b949350505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160006005811115620010105762001010620010e6565b905290565b6116d4806200b05083390190565b610d98806200c72483390190565b5080546200103f90620011f7565b6000825580601f1062001050575050565b601f0160209004906000526020600020908101906200107091906200109f565b50565b6105cb806200d4bc83390190565b60405180604001604052806002906020820280368337509192915050565b5b80821115620010b65760008155600101620010a0565b5090565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115620011285762001128620010fc565b92915050565b600060018201620011435762001143620010fc565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826200117257620011726200114a565b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b82811015620011c65786810182015185820160c001528101620011a8565b5050600060c0828501015260c0601f19601f83011684010191505062000dd460808301846001600160a01b03169052565b600181811c908216806200120c57607f821691505b6020821081036200122d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200068d57600081815260208120601f850160051c810160208610156200125c5750805b601f850160051c820191505b818110156200127d5782815560010162001268565b505050505050565b81516001600160401b03811115620012a157620012a1620010ba565b620012b981620012b28454620011f7565b8462001233565b602080601f831160018114620012f15760008415620012d85750858301515b600019600386901b1c1916600185901b1785556200127d565b600085815260208120601f198616915b82811015620013225788860151825594840194600190910190840162001301565b5085821015620013415787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115620011285762001128620010fc565b6000826200137957620013796200114a565b500690565b619cc2806200138e6000396000f3fe608060405260043610620005375760003560e01c80638bac7dad11620002ab578063b2ea9adb116200016b578063d372c07e11620000d7578063e490389e116200008d578063e490389e1462000808578063e7f43c6814620013b5578063f03b959d14620013d5578063f1d592a714620013fa578063f7866ee3146200141f578063fed76a56146200143f57005b8063d372c07e14620012ac578063d5f3948814620012d1578063d886f8a214620012f3578063dd62ed3e1462001318578063dfb1a4d21462001362578063e294df7c146200137957005b8063b7ab4db5116200012d578063b7ab4db514620011e6578063c9d97af4146200120d578063cb696f541462001225578063ceaad455146200124a578063cf9c5719146200126f578063cfd19fb9146200128757005b8063b2ea9adb146200112a578063b3ecbadd146200114f578063b46e55201462001174578063b47c3eaa1462001199578063b66b3e7914620011be57005b80639dc29fac1162000217578063aabc249611620001cd578063aabc24961462001056578063ab8f6ffe146200107b578063ae1da0b514620010a2578063ae1f5fa014620010ba578063affb1cf114620010e3578063b1344271146200110857005b80639dc29fac1462000f74578063a515366a1462000f99578063a5d059ca1462000fbe578063a8b2216e1462000fe3578063a9059cbb146200100a578063a9fd1a8f146200102f57005b80639358928b116200026d5780639358928b1462000eb857806395d89b411462000ecf57806396b477cb1462000efd57806396f18a321462000f225780639ac310741462000f445780639c98e4711462000f5c57005b80638bac7dad1462000dff5780638bb2e4771462000e245780638d3472871462000e495780638ef8c2fd1462000e6e578063905d76e91462000e9357005b8063416f86a211620003f757806370a082311162000363578063819b64631162000319578063819b64631462000d3a578063833b1fce1462000d5157806384467fdb1462000d85578063852c48491462000daa578063872cf0591462000dcf57806389c614b81462000de757005b806370a082311462000a0c5780637264c4da1462000a46578063731b3a031462000aae57806377e741c71462000ad7578063784304b51462000afc57806379502c551462000b2157005b80635115840b11620003b95780635115840b1462000808578063520fdbbc146200095f578063573963b814620009845780635b7d6c36146200099c5780636b5f444c14620009d05780636fd2c80b14620009f557005b8063416f86a214620008ad5780634364596914620008d2578063496ccd9b14620008e95780634bb278f3146200090e5780634da3baec146200093a57005b8063154d76d711620004a357806329070c6d116200045957806329070c6d14620007f15780632f2c3f2e1462000808578063313ce5671462000820578063354c40a7146200083e57806339f9eb1f146200086357806340c10f19146200088857005b8063154d76d7146200071b5780631604e416146200074057806318160ddd14620007585780631904bb2e146200076f57806323b872dd14620007a357806325ce1bb914620007c857005b80630ae65e7a11620004f95780630ae65e7a146200063b5780630d8e6e2c1462000660578063112206331462000677578063114eaf55146200068e578063122b412214620006b35780631250a28d14620006f657005b806302fb4d85146200054157806306fdde031462000579578063088566e914620005b4578063095ea7b314620005ee5780630aac2da1146200062457005b366200053f57005b005b3480156200054e57600080fd5b506200056662000560366004620082c2565b62001456565b6040519081526020015b60405180910390f35b3480156200058657600080fd5b506040805180820190915260068152652732bbba37b760d11b60208201525b60405162000570919062008345565b348015620005c157600080fd5b5062000566620005d33660046200835a565b6001600160a01b031660009081526001602052604090205490565b348015620005fb57600080fd5b50620006136200060d366004620082c2565b620016d8565b604051901515815260200162000570565b3480156200063157600080fd5b5060225462000566565b3480156200064857600080fd5b506200053f6200065a3660046200835a565b620016f1565b3480156200066d57600080fd5b5060265462000566565b3480156200068457600080fd5b5060115462000566565b3480156200069b57600080fd5b506200053f620006ad3660046200837a565b6200178f565b348015620006c057600080fd5b50620006d8620006d2366004620083a2565b620017c1565b60408051938452602084019290925215159082015260600162000570565b3480156200070357600080fd5b506200053f620007153660046200835a565b62001a55565b3480156200072857600080fd5b50620005666200073a36600462008408565b62001aa4565b3480156200074d57600080fd5b506200056660305481565b3480156200076557600080fd5b5060355462000566565b3480156200077c57600080fd5b50620007946200078e3660046200835a565b62001cea565b604051620005709190620085cd565b348015620007b057600080fd5b5062000613620007c2366004620085e2565b62001cff565b348015620007d557600080fd5b506028546000908152602e602052604090206003015462000566565b348015620007fe57600080fd5b5060105462000566565b3480156200081557600080fd5b506200056661271081565b3480156200082d57600080fd5b506040516012815260200162000570565b3480156200084b57600080fd5b506200053f6200085d36600462008628565b62001e04565b3480156200087057600080fd5b506200053f620008823660046200835a565b62001edc565b3480156200089557600080fd5b506200053f620008a7366004620082c2565b62001f83565b348015620008ba57600080fd5b506200053f620008cc3660046200837a565b62001fc0565b348015620008df57600080fd5b5060235462000566565b348015620008f657600080fd5b506200053f620009083660046200835a565b6200203b565b3480156200091b57600080fd5b506200092662002145565b6040516200057096959493929190620086e8565b3480156200094757600080fd5b506200053f620009593660046200837a565b620029ff565b3480156200096c57600080fd5b506200053f6200097e3660046200835a565b62002bb0565b3480156200099157600080fd5b5062000566602a5481565b348015620009a957600080fd5b50620009c1620009bb3660046200835a565b62002e0c565b6040516200057091906200872b565b348015620009dd57600080fd5b506200053f620009ef3660046200837a565b62002e24565b34801562000a0257600080fd5b5060135462000566565b34801562000a1957600080fd5b506200056662000a2b3660046200835a565b6001600160a01b031660009081526033602052604090205490565b34801562000a5357600080fd5b5062000a6b62000a65366004620082c2565b62003020565b604051620005709190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801562000abb57600080fd5b506028546000908152602e602052604090206002015462000566565b34801562000ae457600080fd5b506200053f62000af63660046200837a565b62003126565b34801562000b0957600080fd5b506200053f62000b1b36600462008836565b62003158565b34801562000b2e57600080fd5b50604080516101208101825260105481526011546020808301919091526012548284015260135460608084019190915260145460808085019190915260155460a08086019190915260165460c0808701919091526017546001600160a01b0390811660e0808901919091526018548216610100808a019190915289519081018a5260195483168152601a54831681890152601b548316818b0152601c54831681880152601d54831681870152601e54831681860152601f548316938101939093528654821690830152875192830188526021541682526022549482019490945260235495810195909552602454918501919091526025549084015260265462000c35939084565b6040805185518152602080870151818301528683015182840152606080880151818401526080808901518185015260a0808a01518186015260c0808b01518187015260e0808c01516001600160a01b03908116828901526101009c8d015181169c88019c909c528a518c16610120880152858b01518c166101408801528a8801518c16610160880152848b01518c16610180880152838b01518c166101a0880152918a01518b166101c08701528901518a166101e0860152909701518816610200840152855190971661022083015284015161024082015290830151610260820152938201516102808501529101516102a08301526102c08201526102e00162000570565b34801562000d4757600080fd5b5060245462000566565b34801562000d5e57600080fd5b50601a546001600160a01b03165b6040516001600160a01b03909116815260200162000570565b34801562000d9257600080fd5b506200053f62000da43660046200888b565b62003303565b34801562000db757600080fd5b506200053f62000dc9366004620082c2565b6200342b565b34801562000ddc57600080fd5b506200053f620035bc565b34801562000df457600080fd5b5062000566602c5481565b34801562000e0c57600080fd5b506200053f62000e1e3660046200837a565b620035f8565b34801562000e3157600080fd5b506200053f62000e433660046200837a565b6200367c565b34801562000e5657600080fd5b506200056662000e683660046200837a565b620036ae565b34801562000e7b57600080fd5b506200053f62000e8d36600462008933565b62003727565b34801562000ea057600080fd5b506200053f62000eb23660046200837a565b6200395e565b34801562000ec557600080fd5b5060365462000566565b34801562000edc57600080fd5b50604080518082019091526003815262272a2760e91b6020820152620005a5565b34801562000f0a57600080fd5b506200056662000f1c3660046200837a565b620039d9565b34801562000f2f57600080fd5b5060395462000d6c906001600160a01b031681565b34801562000f5157600080fd5b506200056660375481565b34801562000f6957600080fd5b5062000566602d5481565b34801562000f8157600080fd5b506200053f62000f93366004620082c2565b62003a71565b34801562000fa657600080fd5b506200056662000fb8366004620082c2565b62003ba9565b34801562000fcb57600080fd5b506200056662000fdd366004620082c2565b62003c90565b34801562000ff057600080fd5b5062000ffb62003d33565b60405162000570919062008971565b3480156200101757600080fd5b506200061362001029366004620082c2565b62003e16565b3480156200103c57600080fd5b506200104762003e6e565b604051620005709190620089d7565b3480156200106357600080fd5b506200053f620010753660046200835a565b62003ffd565b3480156200108857600080fd5b5062001093620040b8565b60405162000570919062008a29565b348015620010af57600080fd5b5062000566602b5481565b348015620010c757600080fd5b50620010d2620041ca565b604051620005709392919062008a84565b348015620010f057600080fd5b5062001047620011023660046200837a565b62004515565b3480156200111557600080fd5b50603a5462000d6c906001600160a01b031681565b3480156200113757600080fd5b506200053f6200114936600462008ac3565b6200472f565b3480156200115c57600080fd5b506200053f6200116e3660046200835a565b62004776565b3480156200118157600080fd5b506200053f620011933660046200835a565b620047c5565b348015620011a657600080fd5b506200053f620011b83660046200835a565b62004acd565b348015620011cb57600080fd5b50620011d662004b1c565b6040516200057092919062008b23565b348015620011f357600080fd5b50620011fe62004c53565b60405162000570919062008b55565b3480156200121a57600080fd5b506200056660285481565b3480156200123257600080fd5b506200053f620012443660046200837a565b62004cb7565b3480156200125757600080fd5b506200053f620012693660046200835a565b62004d1f565b3480156200127c57600080fd5b506200053f62004d6e565b3480156200129457600080fd5b506200053f620012a63660046200835a565b62004dc3565b348015620012b957600080fd5b506200053f620012cb3660046200835a565b62004e12565b348015620012de57600080fd5b5060385462000d6c906001600160a01b031681565b3480156200130057600080fd5b506200053f620013123660046200835a565b62004e61565b3480156200132557600080fd5b50620005666200133736600462008b6a565b6001600160a01b03918216600090815260326020908152604080832093909416825291909152205490565b3480156200136f57600080fd5b50602a5462000566565b3480156200138657600080fd5b5062000613620013983660046200837a565b600090815260096020526040902060050154610100900460ff1690565b348015620013c257600080fd5b506021546001600160a01b031662000d6c565b348015620013e257600080fd5b506200053f620013f43660046200835a565b62004eb0565b3480156200140757600080fd5b506200053f620014193660046200835a565b62004eff565b3480156200142c57600080fd5b506018546001600160a01b031662000d6c565b3480156200144c57600080fd5b5060255462000566565b6019546000906001600160a01b03163314806200147d57506020546001600160a01b031633145b620014a55760405162461bcd60e51b81526004016200149c9062008b9d565b60405180910390fd5b620014af620080e0565b603a546001600160a01b031663f774fac0620014cb8662004fb8565b856040518363ffffffff1660e01b8152600401620014eb92919062008be5565b6000604051808303816000875af11580156200150b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001535919081019062008dd5565b6018546001600160a01b0316600090815260336020526040812080549295509293508492916200156790849062008e35565b90915550506001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201518291906003820190620015e2908262008ed1565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620016a1908262008ed1565b5061024082015160128201805460ff19166001836005811115620016c957620016c96200844f565b02179055509050505092915050565b6000620016e7338484620052b3565b5060015b92915050565b620016fb620053dc565b6001600160a01b03808216600081815260346020526040902060010154909116146200173b5760405162461bcd60e51b81526004016200149c9062008f9d565b6001600160a01b03818116600090815260346020526040902054163314620017775760405162461bcd60e51b81526004016200149c9062008fd4565b62001782816200542b565b6200178c60008055565b50565b6021546001600160a01b03163314620017bc5760405162461bcd60e51b81526004016200149c9062009020565b601355565b601954600090819081906001600160a01b0316331480620017ec57506020546001600160a01b031633145b6200180b5760405162461bcd60e51b81526004016200149c9062008b9d565b62001815620080e0565b603a546001600160a01b03166364d61bbe620018318b62004fb8565b8a8a8a8a6040518663ffffffff1660e01b81526004016200185795949392919062009057565b6000604051808303816000875af115801562001877573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018a19190810190620090a9565b6102008301516018546001600160a01b031660009081526033602052604081208054949950919750919550929350869291620018df90849062008e35565b90915550506001600160a01b03808a16600090815260346020908152604091829020845181549085166001600160a01b0319918216178255918501516001820180549186169184169190911790559184015160028301805491909416911617909155606082015182919060038201906200195a908262008ed1565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062001a19908262008ed1565b5061024082015160128201805460ff1916600183600581111562001a415762001a416200844f565b021790555090505050955095509592505050565b6021546001600160a01b0316331462001a825760405162461bcd60e51b81526004016200149c9062009020565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6019546000906001600160a01b031633148062001acb57506020546001600160a01b031633145b62001aea5760405162461bcd60e51b81526004016200149c9062008b9d565b603a546000906001600160a01b031663f189d66c62001b098762004fb8565b86866040518463ffffffff1660e01b815260040162001b2b93929190620090fc565b6000604051808303816000875af115801562001b4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b75919081019062009128565b6001600160a01b03808716600090815260346020908152604091829020845181549085166001600160a01b031991821617825591850151600182018054918616918416919091179055918401516002830180549190941691161790915560608201519192508291600382019062001bed908262008ed1565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f8201556102008201516010820155610220820151601182019062001cac908262008ed1565b5061024082015160128201805460ff1916600183600581111562001cd45762001cd46200844f565b02179055505050610200015190505b9392505050565b62001cf4620080e0565b620016eb8262004fb8565b6001600160a01b03831660009081526032602090815260408083203384529091528120548281101562001d865760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016200149c565b62001d938585856200551b565b62001dab853362001da5868562009160565b620052b3565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405162001df191815260200190565b60405180910390a3506001949350505050565b6021546001600160a01b0316331462001e315760405162461bcd60e51b81526004016200149c9062009020565b60255481111562001ea25760405162461bcd60e51b815260206004820152603460248201527f7363686564756c6520746f74616c206475726174696f6e20657863656564732060448201527336b0bc1030b63637bbb2b210323ab930ba34b7b760611b60648201526084016200149c565b62001eae84846200564d565b826036600082825462001ec2919062009160565b9091555062001ed6905084848484620056ee565b50505050565b6021546001600160a01b0316331462001f095760405162461bcd60e51b81526004016200149c9062009020565b6001600160a01b03811662001f615760405162461bcd60e51b815260206004820152601b60248201527f706f6f6c2063616e6e6f74206265207a65726f2061646472657373000000000060448201526064016200149c565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462001fb05760405162461bcd60e51b81526004016200149c9062009020565b62001fbc82826200564d565b5050565b6021546001600160a01b0316331462001fed5760405162461bcd60e51b81526004016200149c9062009020565b612710811115620020365760405162461bcd60e51b815260206004820152601260248201527143616e6e6f7420657863656564203130302560701b60448201526064016200149c565b601655565b6021546001600160a01b03163314620020685760405162461bcd60e51b81526004016200149c9062009020565b601a80546001600160a01b0319166001600160a01b03838116918217909255601b54604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b158015620020c757600080fd5b505af1158015620020dc573d6000803e3d6000fd5b5050601d54604051637adbf97360e01b81526001600160a01b0385811660048301529091169250637adbf97391506024015b600060405180830381600087803b1580156200212957600080fd5b505af11580156200213e573d6000803e3d6000fd5b5050505050565b60385460009081906060908290819081906001600160a01b03163314620021805760405162461bcd60e51b81526004016200149c9062009176565b6200218a620053dc565b43602b8190556028546000828152602960209081526040808320849055928252602e90528190206003015460195491516306c9789b60e41b815292101560048301819052916001600160a01b0390911690636c9789b090602401600060405180830381600087803b158015620021ff57600080fd5b505af115801562002214573d6000803e3d6000fd5b50506020546040516306c9789b60e41b81528415156004820152600093506001600160a01b039091169150636c9789b0906024016020604051808303816000875af115801562002268573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200228e9190620091b9565b90508115620027b057601f54603654603754602c546040516392eff3cd60e01b81526004810193909352602483019190915260448201524260648201526000916001600160a01b0316906392eff3cd90608401602060405180830381865afa158015620022ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023259190620091b9565b90508060375410156200233757506037545b6200234330826200564d565b806037600082825462002357919062009160565b909155506200236890504262005970565b603660008282546200237b919062008e35565b9091555050306000908152603360205260409020546200239d90479062005b30565b620023a7620064c9565b620023b1620065b8565b6000806000620023c0620041ca565b601a5460405163422811f960e11b815293965091945092506001600160a01b03169063845023f290620023f890869060040162008b55565b600060405180830381600087803b1580156200241357600080fd5b505af115801562002428573d6000803e3d6000fd5b505060195460405163e08b14ed60e01b81526001600160a01b03909116925063e08b14ed91506200245e90859060040162008b55565b600060405180830381600087803b1580156200247957600080fd5b505af11580156200248e573d6000803e3d6000fd5b50506020546040516338f7bbe760e21b81526001600160a01b03909116925063e3deef9c9150620024c790602f908590600401620091d3565b600060405180830381600087803b158015620024e257600080fd5b505af1158015620024f7573d6000803e3d6000fd5b5050602a5460225414801592509050620025125750602a5415155b156200258057602a546022819055601954604051631ad7d11360e21b815260048101929092526001600160a01b031690636b5f444c90602401600060405180830381600087803b1580156200256657600080fd5b505af11580156200257b573d6000803e3d6000fd5b505050505b602054604051633009330b60e21b81524360048201526001600160a01b039091169063c024cc2c90602401600060405180830381600087803b158015620025c657600080fd5b505af1158015620025db573d6000803e3d6000fd5b50506028546000908152602e602052604081206002015460225490935090915062002607904362008e35565b905042602c8190555060016028600082825462002625919062008e35565b909155505060285460408051602f805460c0602082028401810190945260a083018181526200276d9594849391929060009085015b8282101562002748576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620026b09062008e4b565b80601f0160208091040260200160405190810160405280929190818152602001828054620026de9062008e4b565b80156200272f5780601f1062002703576101008083540402835291602001916200272f565b820191906000526020600020905b8154815290600101906020018083116200271157829003601f168201915b505050505081525050815260200190600101906200265a565b5050505081526020018581526020014381526020018481526020018a815250620066d5565b7febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335602854604051620027a191815260200190565b60405180910390a15050505050505b601a5460408051634bb278f360e01b815290516000926001600160a01b031691634bb278f3916004808301926020929190829003018187875af1158015620027fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028229190620092eb565b905080156200289e57601b546040805163a2e6204560e01b815290516001600160a01b039092169163a2e620459160048082019260209290919082900301816000875af192505050801562002896575060408051601f3d908101601f191682019092526200289391810190620092eb565b60015b156200289e57505b6005546028546000908152602e602090815260408083206001810154600390910154602f805484518187028101870190955280855260ff909716968a969195939492938a939287929184015b82821015620029d8576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620029409062008e4b565b80601f01602080910402602001604051908101604052809291908181526020018280546200296e9062008e4b565b8015620029bf5780601f106200299357610100808354040283529160200191620029bf565b820191906000526020600020905b815481529060010190602001808311620029a157829003601f168201915b50505050508152505081526020019060010190620028ea565b505050509350985098509850985098509850505050620029f760008055565b909192939495565b6038546001600160a01b0316331462002a2c5760405162461bcd60e51b81526004016200149c9062009176565b62002a36620053dc565b62002a40620064c9565b62002a4a620041ca565b505042602c555043602b81905560009081526029602090815260408083208390556028548151602f805460c09581028301860190945260a082018481526200178296939592948594919390919085015b8282101562002b88576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162002af09062008e4b565b80601f016020809104026020016040519081016040528092919081815260200182805462002b1e9062008e4b565b801562002b6f5780601f1062002b435761010080835404028352916020019162002b6f565b820191906000526020600020905b81548152906001019060200180831162002b5157829003601f168201915b5050505050815250508152602001906001019062002a9a565b50505090825250600060208201524360408201526022546060820152608001849052620066d5565b6021546001600160a01b0316331462002bdd5760405162461bcd60e51b81526004016200149c9062009020565b602180546001600160a01b0319166001600160a01b03838116918217909255601a5460405163b3ab15fb60e01b815260048101929092529091169063b3ab15fb90602401600060405180830381600087803b15801562002c3c57600080fd5b505af115801562002c51573d6000803e3d6000fd5b5050601b5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002c9d57600080fd5b505af115801562002cb2573d6000803e3d6000fd5b5050601c5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002cfe57600080fd5b505af115801562002d13573d6000803e3d6000fd5b5050601d5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002d5f57600080fd5b505af115801562002d74573d6000803e3d6000fd5b5050601e5460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb9150602401600060405180830381600087803b15801562002dc057600080fd5b505af115801562002dd5573d6000803e3d6000fd5b505060205460405163b3ab15fb60e01b81526001600160a01b038581166004830152909116925063b3ab15fb91506024016200210e565b600062002e198262004fb8565b610240015192915050565b6021546001600160a01b0316331462002e515760405162461bcd60e51b81526004016200149c9062009020565b6020805460408051631728602760e21b815290516000936001600160a01b0390931692635ca1809c92600480820193918290030181865afa15801562002e9b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ec19190620091b9565b60208054604080516362a48bb760e11b815290519394506000936001600160a01b039092169263c549176e926004808401938290030181865afa15801562002f0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f339190620091b9565b9050600162002f43838362008e35565b62002f4f919062009160565b831162002fc55760405162461bcd60e51b815260206004820152603c60248201527f65706f636820706572696f64206e6565647320746f206265206772656174657260448201527f207468616e2064656c74612b6c6f6f6b6261636b57696e646f772d310000000060648201526084016200149c565b602a8390556028546000908152602e6020908152604091829020600301548251868152918201819052917f2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7910160405180910390a150505050565b620030536040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038316600090815260016020526040902080548310620030bd5760405162461bcd60e51b815260206004820152601760248201527f7363686564756c6520646f6573206e6f7420657869737400000000000000000060448201526064016200149c565b808381548110620030d257620030d262009309565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505091505092915050565b6021546001600160a01b03163314620031535760405162461bcd60e51b81526004016200149c9062009020565b601055565b6001600160a01b038083166000818152603460205260409020600181015490921614620031995760405162461bcd60e51b81526004016200149c906200931f565b80546001600160a01b03163314620031c55760405162461bcd60e51b81526004016200149c9062009356565b620031d083620067af565b156200322a5760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f72206d757374206e6f7420626520696e20636f6d6d697474604482015261656560f01b60648201526084016200149c565b600080620032388462006820565b9250905081156200327a5760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200149c565b60018301546001600160a01b03828116911614620032eb5760405162461bcd60e51b815260206004820152602760248201527f76616c696461746f72206e6f646520616464726573732063616e2774206265206044820152661d5c19185d195960ca1b60648201526084016200149c565b60038301620032fb858262008ed1565b505050505050565b6000604051806102600160405280336001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b0316815260200186815260200160106000016002015481526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001438152602001600081526020016000815260200184815260200160006005811115620033cb57620033cb6200844f565b90529050620033db818362006865565b60208101516101808201516040517f8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c926200341c92339289918b91620093a5565b60405180910390a15050505050565b6001600160a01b03808316600081815260346020526040902060010154909116146200346b5760405162461bcd60e51b81526004016200149c9062008f9d565b6001600160a01b03828116600090815260346020526040902054163314620034a75760405162461bcd60e51b81526004016200149c9062008fd4565b612710811115620034fb5760405162461bcd60e51b815260206004820152601f60248201527f7265717569726520636f727265637420636f6d6d697373696f6e20726174650060448201526064016200149c565b604080516060810182526001600160a01b038481168252436020808401918252838501868152600f80546000908152600d909352958220855181546001600160a01b0319169516949094178455915160018085019190915591516002909301929092558354929390929091906200357490849062008e35565b90915550506040518281526001600160a01b038416907f4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf9060200160405180910390a2505050565b6021546001600160a01b03163314620035e95760405162461bcd60e51b81526004016200149c9062009020565b6005805460ff19166001179055565b6021546001600160a01b03163314620036255760405162461bcd60e51b81526004016200149c9062009020565b60008111620036775760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69747465652073697a652063616e277420626520300000000000000060448201526064016200149c565b602455565b6021546001600160a01b03163314620036a95760405162461bcd60e51b81526004016200149c9062009020565b602555565b60008181526009602052604081206005015460ff16620037115760405162461bcd60e51b815260206004820152601960248201527f756e626f6e64696e67206e6f74206170706c696564207965740000000000000060448201526064016200149c565b5060009081526009602052604090206003015490565b6019546001600160a01b03163314806200374b57506020546001600160a01b031633145b6200376a5760405162461bcd60e51b81526004016200149c9062008b9d565b603a546000906001600160a01b031663c44a5b21620037898562004fb8565b846040518363ffffffff1660e01b8152600401620037a9929190620093ee565b6000604051808303816000875af1158015620037c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620037f3919081019062009128565b6001600160a01b03808516600090815260346020908152604091829020845181549085166001600160a01b03199182161782559185015160018201805491861691841691909117905591840151600283018054919094169116179091556060820151919250829160038201906200386b908262008ed1565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f820155610200820151601082015561022082015160118201906200392a908262008ed1565b5061024082015160128201805460ff191660018360058111156200395257620039526200844f565b02179055505050505050565b6021546001600160a01b031633146200398b5760405162461bcd60e51b81526004016200149c9062009020565b612710811115620039d45760405162461bcd60e51b815260206004820152601260248201527143616e6e6f7420657863656564203130302560701b60448201526064016200149c565b601555565b6000602b546001620039ec919062008e35565b82111562003a4c5760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74206765742065706f636820696420666f7220612066757475726560448201526520626c6f636b60d01b60648201526084016200149c565b602b54821162003a69575060009081526029602052604090205490565b505060285490565b6021546001600160a01b0316331462003a9e5760405162461bcd60e51b81526004016200149c9062009020565b6001600160a01b03821660009081526033602052604090205481111562003b015760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b60448201526064016200149c565b6001600160a01b0382166000908152603360205260408120805483929062003b2b90849062009160565b92505081905550806035600082825462003b46919062009160565b92505081905550806036600082825462003b61919062009160565b90915550506040518181526001600160a01b038316907f5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3906020015b60405180910390a25050565b600062003bb5620053dc565b6001600160a01b038084166000818152603460205260409020600101549091161462003bf55760405162461bcd60e51b81526004016200149c906200931f565b6001600160a01b03831660009081526034602052604081206012015460ff16600581111562003c285762003c286200844f565b1462003c775760405162461bcd60e51b815260206004820152601b60248201527f76616c696461746f72206e65656420746f20626520616374697665000000000060448201526064016200149c565b62003c8483833362006cbf565b9050620016eb60008055565b600062003c9c620053dc565b6001600160a01b038084166000818152603460205260409020600101549091161462003cdc5760405162461bcd60e51b81526004016200149c906200931f565b6000821162003d265760405162461bcd60e51b81526020600482015260156024820152740756e626f6e64696e6720616d6f756e74206973203605c1b60448201526064016200149c565b62003c8483833362006ec2565b60606031805480602002602001604051908101604052809291908181526020016000905b8282101562003e0d57838290600052602060002001805462003d799062008e4b565b80601f016020809104026020016040519081016040528092919081815260200182805462003da79062008e4b565b801562003df85780601f1062003dcc5761010080835404028352916020019162003df8565b820191906000526020600020905b81548152906001019060200180831162003dda57829003601f168201915b50505050508152602001906001019062003d57565b50505050905090565b600062003e253384846200551b565b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b62003ea16040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b6028546000908152602e602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b8282101562003fc8576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019162003f309062008e4b565b80601f016020809104026020016040519081016040528092919081815260200182805462003f5e9062008e4b565b801562003faf5780601f1062003f835761010080835404028352916020019162003faf565b820191906000526020600020905b81548152906001019060200180831162003f9157829003601f168201915b5050505050815250508152602001906001019062003eda565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905090565b6021546001600160a01b031633146200402a5760405162461bcd60e51b81526004016200149c9062009020565b6001600160a01b038116620040965760405162461bcd60e51b815260206004820152602b60248201527f736c617368657220636f6e74726163742063616e6e6f7420626520746865207a60448201526a65726f206164647265737360a81b60648201526084016200149c565b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060602f805480602002602001604051908101604052809291908181526020016000905b8282101562003e0d576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191620041329062008e4b565b80601f0160208091040260200160405190810160405280929190818152602001828054620041609062008e4b565b8015620041b15780601f106200418557610100808354040283529160200191620041b1565b820191906000526020600020905b8154815290600101906020018083116200419357829003601f168201915b50505050508152505081526020019060010190620040dc565b603854606090819081906001600160a01b03163314620041fe5760405162461bcd60e51b81526004016200149c9062009176565b6027546200424f5760405162461bcd60e51b815260206004820152601860248201527f5468657265206d7573742062652076616c696461746f7273000000000000000060448201526064016200149c565b62004259620081a9565b60245460808201526027815260346020820152602f6040820152602d606082015262004285816200722b565b6200429360316000620081c7565b602f5480620042da5760405162461bcd60e51b8152602060048201526012602482015271636f6d6d697474656520697320656d70747960701b60448201526064016200149c565b6000816001600160401b03811115620042f757620042f76200873b565b60405190808252806020026020018201604052801562004321578160200160208202803683370190505b5090506000826001600160401b038111156200434157620043416200873b565b6040519080825280602002602001820160405280156200436b578160200160208202803683370190505b5090506000836001600160401b038111156200438b576200438b6200873b565b604051908082528060200260200182016040528015620043b5578160200160208202803683370190505b50905060005b848110156200450657600060346000602f8481548110620043e057620043e062009309565b60009182526020808320600392830201546001600160a01b031684528301939093526040909101812060318054600181018255925292507fc54045fa7c6ec765e825df7f9e9bf9dec12c5cef146f93a5eee56772ee647fbc0190620044489083018262009414565b50600281015485516001600160a01b039091169086908490811062004471576200447162009309565b6001600160a01b03928316602091820292909201015260018201548551911690859084908110620044a657620044a662009309565b6001600160a01b03928316602091820292909201015281548451911690849084908110620044d857620044d862009309565b6001600160a01b03909216602092830291909101909101525080620044fd81620094f5565b915050620043bb565b50919650945092505050909192565b620045486040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b602b546200455890600162008e35565b821115620045b55760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74206765742065706f636820666f7220612066757475726520626c6044820152626f636b60e81b60648201526084016200149c565b602854602b548311620045d357506000828152602960205260409020545b6000818152602e602090815260408083208151815460c09481028201850190935260a08101838152909491938593919285929185015b82821015620046f7576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916200465f9062008e4b565b80601f01602080910402602001604051908101604052809291908181526020018280546200468d9062008e4b565b8015620046de5780601f10620046b257610100808354040283529160200191620046de565b820191906000526020600020905b815481529060010190602001808311620046c057829003601f168201915b5050505050815250508152602001906001019062004609565b505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050915050919050565b6021546001600160a01b031633146200475c5760405162461bcd60e51b81526004016200149c9062009020565b620047696003836200724b565b62001fbc6004826200724b565b6021546001600160a01b03163314620047a35760405162461bcd60e51b81526004016200149c9062009020565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b620047cf620053dc565b6001600160a01b03808216600081815260346020526040902060010154909116146200480f5760405162461bcd60e51b81526004016200149c9062008f9d565b6001600160a01b038082166000908152603460205260409020805490911633146200484e5760405162461bcd60e51b81526004016200149c9062009356565b6000601282015460ff1660058111156200486c576200486c6200844f565b03620048bb5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f7220616c726561647920616374697665000000000000000060448201526064016200149c565b6002601282015460ff166005811115620048d957620048d96200844f565b148015620048ea5750438160100154115b15620049395760405162461bcd60e51b815260206004820152601760248201527f76616c696461746f72207374696c6c20696e206a61696c00000000000000000060448201526064016200149c565b6004601282015460ff1660058111156200495757620049576200844f565b148015620049685750438160100154115b15620049c65760405162461bcd60e51b815260206004820152602660248201527f76616c696461746f72207374696c6c20696e206a61696c20666f7220696e616360448201526574697669747960d01b60648201526084016200149c565b6003601282015460ff166005811115620049e457620049e46200844f565b1415801562004a0f57506005601282015460ff16600581111562004a0c5762004a0c6200844f565b14155b62004a5d5760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f72206a61696c6564207065726d616e656e746c790000000060448201526064016200149c565b60128101805460ff1916905580546028546000908152602e60209081526040918290206003015491519182526001600160a01b038581169316917f60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5910160405180910390a3506200178c60008055565b6021546001600160a01b0316331462004afa5760405162461bcd60e51b81526004016200149c9062009020565b602080546001600160a01b0319166001600160a01b0392909216919091179055565b6060806003600481805462004b319062008e4b565b80601f016020809104026020016040519081016040528092919081815260200182805462004b5f9062008e4b565b801562004bb05780601f1062004b845761010080835404028352916020019162004bb0565b820191906000526020600020905b81548152906001019060200180831162004b9257829003601f168201915b5050505050915080805462004bc59062008e4b565b80601f016020809104026020016040519081016040528092919081815260200182805462004bf39062008e4b565b801562004c445780601f1062004c185761010080835404028352916020019162004c44565b820191906000526020600020905b81548152906001019060200180831162004c2657829003601f168201915b50505050509050915091509091565b6060602780548060200260200160405190810160405280929190818152602001828054801562004cad57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162004c8e575b5050505050905090565b6021546001600160a01b0316331462004ce45760405162461bcd60e51b81526004016200149c9062009020565b60118190556040518181527f1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd3891289060200160405180910390a150565b6021546001600160a01b0316331462004d4c5760405162461bcd60e51b81526004016200149c9062009020565b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004d9b5760405162461bcd60e51b81526004016200149c9062009020565b62004da960036000620081e7565b62004db760046000620081e7565b6005805460ff19169055565b6021546001600160a01b0316331462004df05760405162461bcd60e51b81526004016200149c9062009020565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004e3f5760405162461bcd60e51b81526004016200149c9062009020565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004e8e5760405162461bcd60e51b81526004016200149c9062009020565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004edd5760405162461bcd60e51b81526004016200149c9062009020565b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b6021546001600160a01b0316331462004f2c5760405162461bcd60e51b81526004016200149c9062009020565b6001600160a01b03811662004f965760405162461bcd60e51b815260206004820152602960248201527f696e76616c696420636f6e7472616374206164647265737320666f72206c6971604482015268756964206c6f67696360b81b60648201526084016200149c565b603980546001600160a01b0319166001600160a01b0392909216919091179055565b62004fc2620080e0565b6001600160a01b0382166200501a5760405162461bcd60e51b815260206004820152601e60248201527f63616e6e6f74207265717565737420656d7074792076616c696461746f72000060448201526064016200149c565b6001600160a01b03808316600081815260346020526040902060010154909116146200505a5760405162461bcd60e51b81526004016200149c906200931f565b6001600160a01b038083166000908152603460209081526040918290208251610260810184528154851681526001820154851692810192909252600281015490931691810191909152600382018054919291606084019190620050bd9062008e4b565b80601f0160208091040260200160405190810160405280929190818152602001828054620050eb9062008e4b565b80156200513c5780601f1062005110576101008083540402835291602001916200513c565b820191906000526020600020905b8154815290600101906020018083116200511e57829003601f168201915b505050918352505060048201546020820152600582015460408201526006820154606082015260078201546080820152600882015460a0820152600982015460c0820152600a82015460e0820152600b820154610100820152600c8201546001600160a01b0316610120820152600d820154610140820152600e820154610160820152600f82015461018082015260108201546101a08201526011820180546101c090920191620051ed9062008e4b565b80601f01602080910402602001604051908101604052809291908181526020018280546200521b9062008e4b565b80156200526c5780601f1062005240576101008083540402835291602001916200526c565b820191906000526020600020905b8154815290600101906020018083116200524e57829003601f168201915b5050509183525050601282015460209091019060ff1660058111156200529657620052966200844f565b6005811115620052aa57620052aa6200844f565b90525092915050565b6001600160a01b038316620053175760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016200149c565b6001600160a01b0382166200537a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016200149c565b6001600160a01b0383811660008181526032602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60005415620054245760405162461bcd60e51b81526020600482015260136024820152721c99595b9d1c985b98de4819195d1958dd1959606a1b60448201526064016200149c565b6001600055565b6001600160a01b038116600090815260346020526040812090601282015460ff1660058111156200546057620054606200844f565b14620054af5760405162461bcd60e51b815260206004820152601860248201527f76616c696461746f72206d75737420626520616374697665000000000000000060448201526064016200149c565b60128101805460ff1916600117905580546028546000908152602e60209081526040918290206003015491519182526001600160a01b038581169316917f75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c910160405180910390a35050565b6001600160a01b0383166000908152603360205260409020548111156200557e5760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7420657863656564732062616c616e636560501b60448201526064016200149c565b6001600160a01b03831660009081526033602052604081208054839290620055a890849062009160565b925050819055508060356000828254620055c3919062008e35565b90915550620055d6905081600262009511565b6001600160a01b038316600090815260336020526040812080549091906200560090849062008e35565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620053cf91815260200190565b6001600160a01b038216600090815260336020526040812080548392906200567790849062008e35565b92505081905550806035600082825462005692919062008e35565b925050819055508060366000828254620056ad919062008e35565b90915550506040518181526001600160a01b038316907f48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf9060200162003b9d565b6001600160a01b038416620057465760405162461bcd60e51b815260206004820152601c60248201527f7661756c7420616464726573732063616e6e6f74206265207a65726f0000000060448201526064016200149c565b60008111620057985760405162461bcd60e51b815260206004820181905260248201527f7363686564756c65206475726174696f6e2063616e6e6f74206265207a65726f60448201526064016200149c565b42821015620057f85760405162461bcd60e51b815260206004820152602560248201527f7363686564756c652063616e6e6f74207374617274206265666f72652063726560448201526430ba34b7b760d91b60648201526084016200149c565b600083116200584a5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f7369746976650000000000000060448201526064016200149c565b6001600160a01b03841660009081526001602052604081208054909103620058b857600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0387161790555b6040805160a08101825285815260006020808301828152838501888152606080860189815260808701868152895460018082018c558b8952978790209851600590910290980197885593519587019590955590516002860155925160038501555160049093019290925582518781529182018690529181018490526001600160a01b038716917fe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd910160405180910390a25050505050565b600254600090815b8181101562005b2957600060016000600284815481106200599d576200599d62009309565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909250905b8181101562005b10576000838281548110620059e857620059e862009309565b90600052602060002090600502019050806004015488101562005a5f5760405162461bcd60e51b815260206004820152602860248201527f7363686564756c6520616c726561647920756e6c6f636b656420666f7220676960448201526776656e2074696d6560c01b60648201526084016200149c565b8060020154881162005a72575062005afb565b60048101889055600381015460028201546000919062005a93908b62009160565b1062005aa25750805462005ad5565b60038201548254600284015462005aba908c62009160565b62005ac6919062009511565b62005ad2919062009541565b90505b600182015462005ae6908262009160565b62005af2908962008e35565b60019092015595505b8062005b0781620094f5565b915050620059c8565b505050808062005b2090620094f5565b91505062005978565b5050919050565b8115801562005b3d575080155b1562005b47575050565b601054600090670de0b6b3a76400009062005b6490859062009511565b62005b70919062009541565b9050801562005bee576018546040516000916001600160a01b03169083908381818185875af1925050503d806000811462005bc8576040519150601f19603f3d011682016040523d82523d6000602084013e62005bcd565b606091505b509091505080151560010362005bec5762005be9828562009160565b93505b505b60208054604080516353b1821b60e01b815290516000936001600160a01b03909316926353b1821b92600480820193918290030181865afa15801562005c38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005c5e9190620091b9565b111562005d975760245460009062005c799061271062009511565b602f5460165462005c8b908762009511565b62005c97919062009511565b62005ca3919062009541565b60245490915060009062005cba9061271062009511565b602f5460165462005ccc908762009511565b62005cd8919062009511565b62005ce4919062009541565b6020549091506001600160a01b031662005d003082846200551b565b602080546001600160a01b038381166000908152603390935260409283902054925163eeb9223360e01b81526004810193909352169063eeb922339085906024016000604051808303818588803b15801562005d5b57600080fd5b505af115801562005d70573d6000803e3d6000fd5b5050505050828662005d83919062009160565b955062005d91828662009160565b94505050505b6020805460408051637f5e2f1160e01b815290516000936001600160a01b0390931692637f5e2f1192600480820193918290030181865afa15801562005de1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005e079190620091b9565b905060008060005b602f54811015620063ea57600060346000602f848154811062005e365762005e3662009309565b600091825260208083206003909202909101546001600160a01b031683528201929092526040018120602d54602f805492945090918b91908690811062005e815762005e8162009309565b90600052602060002090600302016001015462005e9f919062009511565b62005eab919062009541565b90506000602d5489602f868154811062005ec95762005ec962009309565b90600052602060002090600302016001015462005ee7919062009511565b62005ef3919062009541565b9050600082118062005f055750600081115b15620063d1576002601284015460ff16600581111562005f295762005f296200844f565b148062005f5157506003601284015460ff16600581111562005f4f5762005f4f6200844f565b145b156200601b5760195462005f719030906001600160a01b0316836200551b565b601954602f80546001600160a01b039092169163a8031a1d9185918890811062005f9f5762005f9f62009309565b600091825260209091206003909102015460405160e084901b6001600160e01b03191681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b15801562005ff857600080fd5b505af11580156200600d573d6000803e3d6000fd5b5050505050505050620063d5565b6004601284015460ff1660058111156200603957620060396200844f565b14806200606157506005601284015460ff1660058111156200605f576200605f6200844f565b145b156200608c5762006073828762008e35565b955062006081818662008e35565b9450505050620063d5565b6020546001840154604051634d08f07360e11b81526001600160a01b0391821660048201526000929190911690639a11e0e690602401602060405180830381865afa158015620060e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620061069190620091b9565b601554909150811115620061895760008862006123838662009511565b6200612f919062009541565b905060008962006140848662009511565b6200614c919062009541565b90506200615a828a62008e35565b985062006168818962008e35565b975062006176828662009160565b945062006184818562009160565b935050505b60008460050154848660080154620061a2919062009511565b620061ae919062009541565b905080156200627057845460405160009182916001600160a01b03909116906108fc90859084818181858888f193505050503d80600081146200620e576040519150601f19603f3d011682016040523d82523d6000602084013e62006213565b606091505b5090925090508115156000036200626d5786546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d3529162006264916001600160a01b0390911690849062009558565b60405180910390a15b50505b6000856005015484876008015462006289919062009511565b62006295919062009541565b90508015620062b7578554620062b79030906001600160a01b0316836200551b565b6000620062c5828662009160565b90506000620062d5848862009160565b90506000811180620062e75750600082115b156200638157600c880154620063099030906001600160a01b0316846200551b565b600c88015460405163a0ce552d60e01b8152600481018490526001600160a01b039091169063a0ce552d908390602401604080518083038185885af115801562006357573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200637e919062009589565b50505b600188015460408051898152602081018990526001600160a01b03909216917f291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91910160405180910390a250505050505b5050505b80620063e181620094f5565b91505062005e0f565b508115620064a85760175460405160009182916001600160a01b039091169085908381818185875af1925050503d806000811462006445576040519150601f19603f3d011682016040523d82523d6000602084013e6200644a565b606091505b509092509050811515600003620064a5576017546040517f1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352916200649c916001600160a01b0390911690849062009558565b60405180910390a15b50505b8015620032fb57601754620032fb9030906001600160a01b0316836200551b565b6007545b600854811015620064f657620064f081620064e881620094f5565b92506200739e565b620064cd565b50600854600755600b54600a54036200650b57565b600c545b600b54811015620065385762006532816200652a81620094f5565b9250620075d9565b6200650f565b50600b54600c55600a54805b600b54811015620065b2576013546000828152600960205260409020600401544391620065719162008e35565b1162006597576200658281620078d5565b6200658f60018362008e35565b91506200659d565b620065b2565b80620065a981620094f5565b91505062006544565b50600a55565b600f54600e541015620066d357600e546000908152600d6020526040902060135460018201544391620065eb9162008e35565b1115620065f55750565b80546001600160a01b039081166000908152603460205260409081902060028401546004808301829055600c83015493516319fac8fd60e01b8152929493909316926319fac8fd926200664d92910190815260200190565b600060405180830381600087803b1580156200666857600080fd5b505af11580156200667d573d6000803e3d6000fd5b5050600e80546000908152600d6020526040812080546001600160a01b031916815560018082018390556002909101829055825490945091925090620066c590849062008e35565b90915550620065b892505050565b565b6000828152602e6020908152604080832091840151600183015583015160028201556060830151600382015560808301516004820155905b82515181101562001ed657825180518391908390811062006732576200673262009309565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b0390921691909117815591810151928201929092556040820151600282019062006796908262008ed1565b5050508080620067a690620094f5565b9150506200670d565b6000805b602f548110156200681757602f8181548110620067d457620067d462009309565b60009182526020909120600390910201546001600160a01b0390811690841603620068025750600192915050565b806200680e81620094f5565b915050620067b3565b50600092915050565b6000806200682d62008226565b60008060ff9050604083875160208901845afa6200684a57600080fd5b50508051602090910151600160601b90910494909350915050565b60e2815114620068af5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064016200149c565b60308261022001515114620069075760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6e73656e737573206b6579206c656e6774680000000060448201526064016200149c565b620069128262007a32565b604080518082018252601a81527f19457468657265756d205369676e6564204d6573736167653a0a00000000000060208083019190915284519251919260009262006975920160609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052905060008262006995835162007b5f565b83604051602001620069aa93929190620095ae565b60408051601f198184030181528282528051602091820120600280855260608501845290945060009392909183019080368337019050509050600080808062006a028982620069fc6041600262009511565b62007c7f565b9050600062006a218a62006a196041600262009511565b606062007c7f565b905060205b825181101562006af25762006a3c838262007d98565b6040805160008152602081018083528d905260ff8316918101919091526060810184905260808101839052929850909650945060019060a0016020604051602081039080840390855afa15801562006a98573d6000803e3d6000fd5b5050604051601f19015190508762006ab260418462009541565b8151811062006ac55762006ac562009309565b6001600160a01b039092166020928302919091019091015262006aea60418262008e35565b905062006a26565b508a602001516001600160a01b03168660008151811062006b175762006b1762009309565b60200260200101516001600160a01b03161462006b895760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206e6f6465206b6579206f776e6572736869702070726f6f66604482015268081c1c9bdd9a59195960ba1b60648201526084016200149c565b8a604001516001600160a01b03168660018151811062006bad5762006bad62009309565b60200260200101516001600160a01b03161462006c215760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206f7261636c65206b6579206f776e6572736869702070726f60448201526a1bd9881c1c9bdd9a59195960aa1b60648201526084016200149c565b600162006c398c6102200151838e6000015162007dcf565b1462006ca75760405162461bcd60e51b815260206004820152603660248201527f496e76616c696420636f6e73656e737573206b6579206f776e65727368697020604482015275383937b7b3103337b9103932b3b4b9ba3930ba34b7b760511b60648201526084016200149c565b62006cb28b62007e3e565b5050505050505050505050565b600080831162006d1e5760405162461bcd60e51b815260206004820152602360248201527f616d6f756e74206e65656420746f206265207374726963746c7920706f73697460448201526269766560e81b60648201526084016200149c565b6001600160a01b03821660009081526033602052604090205483111562006d885760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e74204e6577746f6e2062616c616e6365000000000060448201526064016200149c565b6001600160a01b0382166000908152603360205260408120805485929062006db290849062009160565b9091555050604080516080810182526001600160a01b038085168252868116602080840191825283850188815243606086019081526008805460009081526006909452968320865181549087166001600160a01b03199182161782559451600182018054919097169516949094179094555160028301559151600390910155825491929062006e4183620094f5565b90915550506001600160a01b03858116600081815260346020908152604091829020548251908516948816948514808252918101899052909392917fc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d910160405180910390a3600160085462006eb8919062009160565b9695505050505050565b6001600160a01b038084166000908152603460205260408120805491929091848216911614806200703a57600c820154604051631092ab9160e31b81526001600160a01b03868116600483015260009216906384955c8890602401602060405180830381865afa15801562006f3b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062006f619190620091b9565b90508581101562006fc95760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e7420756e6c6f636b6564204c6971756964204e657760448201526a746f6e2062616c616e636560a81b60648201526084016200149c565b600c83015460405163282d3fdf60e01b81526001600160a01b038781166004830152602482018990529091169063282d3fdf90604401600060405180830381600087803b1580156200701a57600080fd5b505af11580156200702f573d6000803e3d6000fd5b5050505050620070cd565b8482600b0154836008015462007051919062009160565b1015620070b15760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e742073656c6620626f6e646564206e6577746f6e2060448201526662616c616e636560c81b60648201526084016200149c565b8482600b016000828254620070c7919062008e35565b90915550505b6040805161010080820183526001600160a01b03878116835289811660208085019182528486018b8152600060608701818152436080890190815260a0890183815260c08a018481528c151560e08c01908152600b8054875260099098529b85209a518b546001600160a01b0319908116918b16919091178c55975160018c01805490991699169890981790965592516002890155516003880155905160048701559151600590950180549351965161ffff1990941695151561ff001916959095179515159093029490941762ff00001916620100009115159190910217909155805491620071bc83620094f5565b9190505550836001600160a01b0316866001600160a01b03167f63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc8388604051620072129291909115158252602082015260400190565b60405180910390a36001600b5462006eb8919062009160565b60fa60a06000808285855af462007246573d6000803e3d6000fd5b505050565b815460026001808316156101000203821604825180820160208110602084100160028114620072fa576001811462007320578660005260208404602060002001600160028402018855602085068060200390508088018589016001836101000a0392508282511684540184556001840193506020820191505b80821015620072e35781518455600184019350602082019150620072c4565b815191036101000a90819004029091555062007395565b60028302826020036101000a846020036101000a60208901510402018501875562007395565b8660005260208404602060002001600160028402018855846020038088018589016001836101000a0392508282511660ff198a160184556020820191506001840193505b8082101562007383578151845560018401935060208201915062007364565b815191036101000a9081900402909155505b50505050505050565b600081815260066020908152604080832060018101546001600160a01b03168452603490925282209091601282015460ff166005811115620073e457620073e46200844f565b146200747857600282015482546001600160a01b0316600090815260336020526040812080549091906200741a90849062008e35565b909155505081546001830154600284015460128401546040516001600160a01b0394851694909316927f1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f87834292620053cf92909160ff90911690620095f7565b805482546001600160a01b03908116911614620075955760008082600801548360050154620074a8919062009160565b905080600003620074c05783600201549150620074e6565b80846002015484600d0154620074d7919062009511565b620074e3919062009541565b91505b600c83015484546040516340c10f1960e01b81526001600160a01b039182166004820152602481018590529116906340c10f1990604401600060405180830381600087803b1580156200753857600080fd5b505af11580156200754d573d6000803e3d6000fd5b505050508183600d01600082825462007567919062008e35565b909155505060028401546005840180546000906200758790849062008e35565b909155506200724692505050565b8160020154816008016000828254620075af919062008e35565b90915550506002820154600582018054600090620075cf90849062008e35565b9091555050505050565b600081815260096020908152604080832060018101546001600160a01b031684526034909252822060058201549192909162010000900460ff16620077ce576002830154600c8301548454604051637eee288d60e01b81526001600160a01b03918216600482015260248101849052911690637eee288d90604401600060405180830381600087803b1580156200766f57600080fd5b505af115801562007684573d6000803e3d6000fd5b50505050600c8301548454604051632770a7eb60e21b81526001600160a01b03918216600482015260248101849052911690639dc29fac90604401600060405180830381600087803b158015620076da57600080fd5b505af1158015620076ef573d6000803e3d6000fd5b505050506000836008015484600501546200770b919062009160565b600d8501549091506200771f828462009511565b6200772b919062009541565b92508184600d01600082825462007743919062009160565b909155505060068401546000036200776257600385018390556200778a565b6006840154600785015462007778908562009511565b62007784919062009541565b60038601555b82846006016000828254620077a0919062008e35565b90915550506003850154600785018054600090620077c090849062008e35565b90915550620078a392505050565b5060028201546008820154811115620077e8575060088101545b81600901546000036200780257600383018190556200782a565b6009820154600a83015462007818908362009511565b62007824919062009541565b60038401555b8082600901600082825462007840919062008e35565b90915550506003830154600a830180546000906200786090849062008e35565b92505081905550808260080160008282546200787d919062009160565b90915550506002830154600b830180546000906200789d90849062009160565b90915550505b6005808401805460ff1916600117905582018054829190600090620078ca90849062009160565b909155505050505050565b600081815260096020526040812060058101805461ff001916610100179055600381015490910362007905575050565b60018101546001600160a01b03166000908152603460205260408120600583015490919062010000900460ff16620079a25781600701548260060154846003015462007952919062009511565b6200795e919062009541565b90508082600601600082825462007976919062009160565b909155505060038301546007830180546000906200799690849062009160565b9091555062007a079050565b81600a015482600901548460030154620079bd919062009511565b620079c9919062009541565b905080826009016000828254620079e1919062009160565b90915550506003830154600a8301805460009062007a0190849062009160565b90915550505b82546001600160a01b031660009081526033602052604081208054839290620078ca90849062008e35565b600062007a43826060015162006820565b6001600160a01b0390911660208401529050801562007a935760405162461bcd60e51b815260206004820152600b60248201526a32b737b2329032b93937b960a91b60448201526064016200149c565b6020808301516001600160a01b0390811660009081526034909252604090912060010154161562007b075760405162461bcd60e51b815260206004820152601c60248201527f76616c696461746f7220616c726561647920726567697374657265640000000060448201526064016200149c565b6127108260800151111562001fbc5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420636f6d6d697373696f6e207261746500000000000000000060448201526064016200149c565b60608160000362007b875750506040805180820190915260018152600360fc1b602082015290565b8160005b811562007bb7578062007b9e81620094f5565b915062007baf9050600a8362009541565b915062007b8b565b6000816001600160401b0381111562007bd45762007bd46200873b565b6040519080825280601f01601f19166020018201604052801562007bff576020820181803683370190505b5090505b841562007c775762007c1760018362009160565b915062007c26600a866200960d565b62007c3390603062008e35565b60f81b81838151811062007c4b5762007c4b62009309565b60200101906001600160f81b031916908160001a90535062007c6f600a8662009541565b945062007c03565b949350505050565b60608162007c8f81601f62008e35565b101562007cd05760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016200149c565b62007cdc828462008e35565b8451101562007d225760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016200149c565b60608215801562007d43576040519150600082526020820160405262007d8f565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101562007d7e57805183526020928301920162007d64565b5050858452601f01601f1916604052505b50949350505050565b8181018051602082015160409092015190919060001a601b81101562007dc85762007dc5601b8262009624565b90505b9250925092565b600062007ddb62008244565b600085858560405160200162007df49392919062009640565b6040516020818303038152906040529050600060fb905060008251602062007e1d919062008e35565b90506020848285855afa62007e3157600080fd5b5050905195945050505050565b6101808101516001600160a01b031662007f3d576039546001600160a01b031662007eb75760405162461bcd60e51b815260206004820152602260248201527f6c6971756964206c6f67696320636f6e7472616374206e6f74206465706c6f79604482015261195960f21b60648201526084016200149c565b60275460009062007ec89062007b5f565b905081602001518260000151836080015183603960009054906101000a90046001600160a01b031660405162007efe9062008262565b62007f0e9594939291906200968f565b604051809103906000f08015801562007f2b573d6000803e3d6000fd5b506001600160a01b0316610180830152505b60208181018051602780546001808201835560009283527f98a476f1687bc3d60a2da2adbcba2c46958e61fa2fb4042cd7bc5816a710195b90910180546001600160a01b03199081166001600160a01b039586161790915584518416835260349095526040918290208651815487169085161781559351908401805486169184169190911790558401516002830180549094169116179091556060820151829190600382019062007fef908262008ed1565b506080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b820155610180820151600c820180546001600160a01b0319166001600160a01b039092169190911790556101a0820151600d8201556101c0820151600e8201556101e0820151600f82015561020082015160108201556102208201516011820190620080ae908262008ed1565b5061024082015160128201805460ff19166001836005811115620080d657620080d66200844f565b0217905550505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160006005811115620081a457620081a46200844f565b905290565b6040518060a001604052806005906020820280368337509192915050565b50805460008255906000526020600020908101906200178c919062008270565b508054620081f59062008e4b565b6000825580601f1062008206575050565b601f0160209004906000526020600020908101906200178c919062008295565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6105cb80620096c283390190565b8082111562008291576000620082878282620081e7565b5060010162008270565b5090565b5b8082111562008291576000815560010162008296565b6001600160a01b03811681146200178c57600080fd5b60008060408385031215620082d657600080fd5b8235620082e381620082ac565b946020939093013593505050565b60005b838110156200830e578181015183820152602001620082f4565b50506000910152565b6000815180845262008331816020860160208601620082f1565b601f01601f19169290920160200192915050565b60208152600062001ce3602083018462008317565b6000602082840312156200836d57600080fd5b813562001ce381620082ac565b6000602082840312156200838d57600080fd5b5035919050565b600681106200178c57600080fd5b600080600080600060a08688031215620083bb57600080fd5b8535620083c881620082ac565b945060208601359350604086013592506060860135620083e88162008394565b91506080860135620083fa8162008394565b809150509295509295909350565b6000806000606084860312156200841e57600080fd5b83356200842b81620082ac565b9250602084013591506040840135620084448162008394565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b600681106200848457634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b0316825260006102606020830151620084b560208601826001600160a01b03169052565b506040830151620084d160408601826001600160a01b03169052565b506060830151816060860152620084eb8286018262008317565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152506101408084015181860152506101608084015181860152506101808084015162008562828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152620085aa838262008317565b9250505061024080840151620085c38287018262008465565b5090949350505050565b60208152600062001ce3602083018462008488565b600080600060608486031215620085f857600080fd5b83356200860581620082ac565b925060208401356200861781620082ac565b929592945050506040919091013590565b600080600080608085870312156200863f57600080fd5b84356200864c81620082ac565b966020860135965060408601359560600135945092505050565b600081518084526020808501808196508360051b8101915082860160005b85811015620086db578284038952815180516001600160a01b031685528581015186860152604090810151606091860182905290620086c68187018362008317565b9a87019a955050509084019060010162008684565b5091979650505050505050565b8615158152851515602082015260c0604082015260006200870d60c083018762008666565b606083019590955250608081019290925260a0909101529392505050565b60208101620016eb828462008465565b634e487b7160e01b600052604160045260246000fd5b60405161026081016001600160401b03811182821017156200877757620087776200873b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620087a857620087a86200873b565b604052919050565b60006001600160401b03821115620087cc57620087cc6200873b565b50601f01601f191660200190565b600082601f830112620087ec57600080fd5b813562008803620087fd82620087b0565b6200877d565b8181528460208386010111156200881957600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156200884a57600080fd5b82356200885781620082ac565b915060208301356001600160401b038111156200887357600080fd5b6200888185828601620087da565b9150509250929050565b60008060008060808587031215620088a257600080fd5b84356001600160401b0380821115620088ba57600080fd5b620088c888838901620087da565b955060208701359150620088dc82620082ac565b90935060408601359080821115620088f357600080fd5b6200890188838901620087da565b935060608701359150808211156200891857600080fd5b506200892787828801620087da565b91505092959194509250565b600080604083850312156200894757600080fd5b82356200895481620082ac565b91506020830135620089668162008394565b809150509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015620089ca57603f19888603018452620089b785835162008317565b9450928501929085019060010162008998565b5092979650505050505050565b602081526000825160a06020840152620089f560c084018262008666565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60208152600062001ce3602083018462008666565b600081518084526020808501945080840160005b8381101562008a795781516001600160a01b03168752958201959082019060010162008a52565b509495945050505050565b60608152600062008a99606083018662008a3e565b828103602084015262008aad818662008a3e565b9050828103604084015262006eb8818562008a3e565b6000806040838503121562008ad757600080fd5b82356001600160401b038082111562008aef57600080fd5b62008afd86838701620087da565b9350602085013591508082111562008b1457600080fd5b506200888185828601620087da565b60408152600062008b38604083018562008317565b828103602084015262008b4c818562008317565b95945050505050565b60208152600062001ce3602083018462008a3e565b6000806040838503121562008b7e57600080fd5b823562008b8b81620082ac565b915060208301356200896681620082ac565b60208082526028908201527f63616c6c6572206973206e6f7420616e206163636f756e746162696c6974792060408201526718dbdb9d1c9858dd60c21b606082015260800190565b60408152600062008bfa604083018562008488565b90508260208301529392505050565b805162008c1681620082ac565b919050565b600082601f83011262008c2d57600080fd5b815162008c3e620087fd82620087b0565b81815284602083860101111562008c5457600080fd5b62007c77826020830160208701620082f1565b805162008c168162008394565b6000610260828403121562008c8857600080fd5b62008c9262008751565b905062008c9f8262008c09565b815262008caf6020830162008c09565b602082015262008cc26040830162008c09565b604082015260608201516001600160401b038082111562008ce257600080fd5b62008cf08583860162008c1b565b60608401526080848101519084015260a0808501519084015260c0808501519084015260e080850151908401526101008085015190840152610120808501519084015261014080850151908401526101608085015190840152610180915062008d5b82850162008c09565b918301919091526101a083810151908301526101c080840151908301526101e080840151908301526102008084015190830152610220808401519091908181111562008da657600080fd5b62008db48682870162008c1b565b8385015250505061024062008dcb81840162008c67565b9082015292915050565b6000806040838503121562008de957600080fd5b82516001600160401b0381111562008e0057600080fd5b62008e0e8582860162008c74565b925050602083015190509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620016eb57620016eb62008e1f565b600181811c9082168062008e6057607f821691505b60208210810362008e8157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200724657600081815260208120601f850160051c8101602086101562008eb05750805b601f850160051c820191505b81811015620032fb5782815560010162008ebc565b81516001600160401b0381111562008eed5762008eed6200873b565b62008f058162008efe845462008e4b565b8462008e87565b602080601f83116001811462008f3d576000841562008f245750858301515b600019600386901b1c1916600185901b178555620032fb565b600085815260208120601f198616915b8281101562008f6e5788860151825594840194600190910190840162008f4d565b508582101562008f8d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601c908201527f76616c696461746f72206d757374206265207265676973746572656400000000604082015260600190565b6020808252602c908201527f726571756972652063616c6c657220746f2062652076616c696461746f72206160408201526b191b5a5b881858d8dbdd5b9d60a21b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420746865206f70657261746f72000000000000604082015260600190565b60a0815260006200906c60a083018862008488565b905085602083015284604083015262009089606083018562008465565b62006eb8608083018462008465565b8051801515811462008c1657600080fd5b600080600060608486031215620090bf57600080fd5b83516001600160401b03811115620090d657600080fd5b620090e48682870162008c74565b9350506020840151915062007dc56040850162009098565b60608152600062009111606083018662008488565b905083602083015262007c77604083018462008465565b6000602082840312156200913b57600080fd5b81516001600160401b038111156200915257600080fd5b62007c778482850162008c74565b81810381811115620016eb57620016eb62008e1f565b60208082526023908201527f66756e6374696f6e207265737472696374656420746f207468652070726f746f60408201526218dbdb60ea1b606082015260800190565b600060208284031215620091cc57600080fd5b5051919050565b6000604082016040835280855480835260608501915060608160051b8601019250600087815260208120815b83811015620092d257878603605f1901855281546001600160a01b0316865260018201546020870152606060408701526002820180548490620092428162008e4b565b8060608b015260018216600081146200926457600181146200928157620092b4565b60ff19831660808c0152608082151560051b8c01019350620092b4565b84885260208820885b83811015620092ab5781548d8201608001526001909101906020016200928a565b8c016080019450505b509198505050602095909501945060039190910190600101620091ff565b5050505050828103602084015262008b4c818562008a3e565b600060208284031215620092fe57600080fd5b62001ce38262009098565b634e487b7160e01b600052603260045260246000fd5b60208082526018908201527f76616c696461746f72206e6f7420726567697374657265640000000000000000604082015260600190565b6020808252602f908201527f726571756972652063616c6c657220746f2062652076616c696461746f72207460408201526e1c99585cdd5c9e481858d8dbdd5b9d608a1b606082015260800190565b600060018060a01b0380881683528087166020840152808616604084015260a06060840152620093d960a084018662008317565b91508084166080840152509695505050505050565b60408152600062009403604083018562008488565b905062001ce3602083018462008465565b81810362009420575050565b6200942c825462008e4b565b6001600160401b038111156200944657620094466200873b565b620094578162008efe845462008e4b565b6000601f8211600181146200948e5760008315620094755750848201545b600019600385901b1c1916600184901b1784556200213e565b600085815260209020601f19841690600086815260209020845b83811015620094ca5782860154825560019586019590910190602001620094a8565b508583101562008f8d5793015460001960f8600387901b161c19169092555050600190811b01905550565b6000600182016200950a576200950a62008e1f565b5060010190565b8082028115828204841417620016eb57620016eb62008e1f565b634e487b7160e01b600052601260045260246000fd5b6000826200955357620095536200952b565b500490565b60018060a01b0383168152606060208201526000606082015260806040820152600062007c77608083018462008317565b600080604083850312156200959d57600080fd5b505080516020909101519092909150565b60008451620095c2818460208901620082f1565b845190830190620095d8818360208901620082f1565b8451910190620095ed818360208801620082f1565b0195945050505050565b8281526040810162001ce3602083018462008465565b6000826200961f576200961f6200952b565b500690565b60ff8181168382160190811115620016eb57620016eb62008e1f565b6000845162009654818460208901620082f1565b8451908301906200966a818360208901620082f1565b60609490941b6bffffffffffffffffffffffff19169301928352505060140192915050565b600060018060a01b038088168352808716602084015285604084015260a06060840152620093d960a08401866200831756fe608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220f521dfcbc3cb8b516c16f450cc0b3f59fa019109d73913d47c59da7b8920d00464736f6c63430008150033a2646970667358221220bf07a123c4299389b90a4aec33303aeea503cf244f80a92dd7abe1b5f0e7c2ff64736f6c63430008150033608060405234801561001057600080fd5b50601080546001600160a01b031916331790556116a2806100326000396000f3fe6080604052600436106101855760003560e01c80633e4eb36c116100d1578063949813b81161008a578063a0ce552d11610064578063a0ce552d146104d5578063a9059cbb146104e8578063bd96102f14610508578063dd62ed3e1461051d5761018c565b8063949813b81461046b57806395d89b41146104a05780639dc29fac146104b55761018c565b80633e4eb36c1461038a57806340c10f191461039f57806359355736146103bf57806370a08231146103f55780637eee288d1461042b57806384955c881461044b5761018c565b80631eeffad01161013e5780632f2c3f2e116101185780632f2c3f2e14610325578063313ce5671461033b578063372500ab146103575780633b19e84a1461036c5761018c565b80631eeffad0146102d057806323b872dd146102e5578063282d3fdf146103055761018c565b806306fdde03146101ea578063095ea7b3146102155780631195e07e1461024557806318160ddd14610277578063187cf4d71461029657806319fac8fd146102ae5761018c565b3661018c57005b60405162461bcd60e51b815260206004820152602860248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72204c69716044820152677569644c6f67696360c01b60648201526084015b60405180910390fd5b3480156101f657600080fd5b506101ff610563565b60405161020c91906113fc565b60405180910390f35b34801561022157600080fd5b50610235610230366004611466565b6105f5565b604051901515815260200161020c565b34801561025157600080fd5b50600c546001600160a01b03165b6040516001600160a01b03909116815260200161020c565b34801561028357600080fd5b506003545b60405190815260200161020c565b3480156102a257600080fd5b50610288633b9aca0081565b3480156102ba57600080fd5b506102ce6102c9366004611490565b61060c565b005b3480156102dc57600080fd5b50600f54610288565b3480156102f157600080fd5b506102356103003660046114a9565b61063b565b34801561031157600080fd5b506102ce610320366004611466565b610730565b34801561033157600080fd5b5061028861271081565b34801561034757600080fd5b506040516012815260200161020c565b34801561036357600080fd5b506102ce610814565b34801561037857600080fd5b50600d546001600160a01b031661025f565b34801561039657600080fd5b50600e54610288565b3480156103ab57600080fd5b506102ce6103ba366004611466565b610995565b3480156103cb57600080fd5b506102886103da3660046114e5565b6001600160a01b031660009081526001602052604090205490565b34801561040157600080fd5b506102886104103660046114e5565b6001600160a01b031660009081526020819052604090205490565b34801561043757600080fd5b506102ce610446366004611466565b6109fd565b34801561045757600080fd5b506102886104663660046114e5565b610ac3565b34801561047757600080fd5b5061048b6104863660046114e5565b610af0565b6040805192835260208301919091520161020c565b3480156104ac57600080fd5b506101ff610ba8565b3480156104c157600080fd5b506102ce6104d0366004611466565b610bb7565b61048b6104e3366004611490565b610c17565b3480156104f457600080fd5b50610235610503366004611466565b610f0b565b34801561051457600080fd5b506102ce610f58565b34801561052957600080fd5b50610288610538366004611500565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6060600a805461057290611533565b80601f016020809104026020016040519081016040528092919081815260200182805461059e90611533565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b5050505050905090565b600061060233848461105f565b5060015b92915050565b6010546001600160a01b031633146106365760405162461bcd60e51b81526004016101e19061156d565b600e55565b6001600160a01b0383166000908152600260209081526040808320338452909152812054828110156106c05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016101e1565b6106d485336106cf86856115cb565b61105f565b6106de8584611183565b6106e88484611277565b836001600160a01b0316856001600160a01b031660008051602061164d8339815191528560405161071b91815260200190565b60405180910390a360019150505b9392505050565b6010546001600160a01b0316331461075a5760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b03821660009081526001602090815260408083205491839052909120548291610789916115cb565b10156107e35760405162461bcd60e51b8152602060048201526024808201527f63616e2774206c6f636b206d6f72652066756e6473207468616e20617661696c60448201526361626c6560e01b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115de565b90915550505050565b600080610820336112c3565b33600090815260046020908152604080832083905560079091528120819055919350915081156109035760105460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf91906115f1565b9050806109035760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b73210272a2760711b60448201526064016101e1565b60405133908490600081818185875af1925050503d8060008114610943576040519150601f19603f3d011682016040523d82523d6000602084013e610948565b606091505b505080915050806109905760405162461bcd60e51b81526020600482015260126024820152712330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b505050565b6010546001600160a01b031633146109bf5760405162461bcd60e51b81526004016101e19061156d565b6109c98282611277565b6040518181526001600160a01b0383169060009060008051602061164d833981519152906020015b60405180910390a35050565b6010546001600160a01b03163314610a275760405162461bcd60e51b81526004016101e19061156d565b6001600160a01b038216600090815260016020526040902054811115610a9b5760405162461bcd60e51b815260206004820152602360248201527f63616e277420756e6c6f636b206d6f72652066756e6473207468616e206c6f636044820152621ad95960ea1b60648201526084016101e1565b6001600160a01b0382166000908152600160205260408120805483929061080b9084906115cb565b6001600160a01b0381166000908152600160209081526040808320549183905282205461060691906115cb565b6001600160a01b0381166000908152602081815260408083205460065460059093529083205483928391610b259184916113be565b6001600160a01b038616600090815260046020526040902054909150610b4c9082906115de565b6009546001600160a01b03871660009081526008602052604081205492965091610b779185916113be565b6001600160a01b038716600090815260076020526040902054909150610b9e9082906115de565b9350505050915091565b6060600b805461057290611533565b6010546001600160a01b03163314610be15760405162461bcd60e51b81526004016101e19061156d565b610beb8282611183565b6040518181526000906001600160a01b0384169060008051602061164d833981519152906020016109f1565b60105460009081906001600160a01b03163314610c465760405162461bcd60e51b81526004016101e19061156d565b600e54349060009061271090610c5c9084611613565b610c66919061162a565b905081811115610cb85760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642061746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610cc281836115cb565b600d546040519193506000916001600160a01b03909116906108fc90849084818181858888f193505050503d8060008114610d19576040519150601f19603f3d011682016040523d82523d6000602084013e610d1e565b606091505b5090915050801515600003610d455781600f6000828254610d3f91906115de565b90915550505b6000612710600e5488610d589190611613565b610d62919061162a565b905086811115610db45760405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964206e746e2076616c696461746f72207265776172640000000060448201526064016101e1565b610dbe81886115cb565b96508015610e4157601054600d5460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f91906115f1565b505b600354600090610e55633b9aca0087611613565b610e5f919061162a565b905080600654610e6f91906115de565b600655600354600090610e86633b9aca008b611613565b610e90919061162a565b905080600954610ea091906115de565b600955600354600090633b9aca0090610eb99085611613565b610ec3919061162a565b90506000633b9aca0060035484610eda9190611613565b610ee4919061162a565b9050610ef082886115de565b610efa82876115de565b995099505050505050505050915091565b6000610f173383611183565b610f218383611277565b6040518281526001600160a01b03841690339060008051602061164d8339815191529060200160405180910390a350600192915050565b600d546001600160a01b03163314610fbd5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c792074726561737572792063616e20636c61696d2068697320726577616044820152611c9960f21b60648201526084016101e1565b600d54600f546040516000926001600160a01b031691908381818185875af1925050503d806000811461100c576040519150601f19603f3d011682016040523d82523d6000602084013e611011565b606091505b50509050806110575760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101e1565b506000600f55565b6001600160a01b0383166110c15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016101e1565b6001600160a01b0382166111225760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016101e1565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b61118c826112c3565b50506001600160a01b038216600090815260208181526040808320546001909252909120546111bb90826115cb565b82111561120a5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420756e6c6f636b65642066756e6473000000000060448201526064016101e1565b61121482826115cb565b6001600160a01b03841660009081526020819052604090205580820361125b576001600160a01b038316600090815260056020908152604080832083905560089091528120555b816003600082825461126d91906115cb565b9091555050505050565b611280826112c3565b50506001600160a01b038216600090815260208190526040812080548392906112aa9084906115de565b92505081905550806003600082825461080b91906115de565b6001600160a01b03811660009081526020818152604080832054600654600590935290832054839283916112f89184916113be565b6001600160a01b03861660009081526004602052604090205490915061131f9082906115de565b6001600160a01b03861660009081526004602090815260408083208490556006546005835281842055600954600890925282205492965090916113639185916113be565b6001600160a01b03871660009081526007602052604090205490915061138a9082906115de565b6001600160a01b03909616600090815260076020908152604080832089905560095460089092529091205550929492505050565b6000836000036113d057506000610729565b633b9aca00846113e084866115cb565b6113ea9190611613565b6113f4919061162a565b949350505050565b600060208083528351808285015260005b818110156114295785810183015185820160400152820161140d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461146157600080fd5b919050565b6000806040838503121561147957600080fd5b6114828361144a565b946020939093013593505050565b6000602082840312156114a257600080fd5b5035919050565b6000806000606084860312156114be57600080fd5b6114c78461144a565b92506114d56020850161144a565b9150604084013590509250925092565b6000602082840312156114f757600080fd5b6107298261144a565b6000806040838503121561151357600080fd5b61151c8361144a565b915061152a6020840161144a565b90509250929050565b600181811c9082168061154757607f821691505b60208210810361156757634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610606576106066115b5565b80820180821115610606576106066115b5565b60006020828403121561160357600080fd5b8151801515811461072957600080fd5b8082028115828204841417610606576106066115b5565b60008261164757634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122080b3bd79a0539cd8687c9906380fbf3c01e31f581aed2b2837f4bbd235959e8b64736f6c63430008150033608060405234801561001057600080fd5b50604051610d98380380610d9883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610d05806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806364d61bbe1461005c578063c1f1884b14610087578063c44a5b2114610097578063f189d66c146100b7578063f774fac0146100ca575b600080fd5b61006f61006a366004610896565b6100eb565b60405161007e93929190610ac2565b60405180910390f35b604051612710815260200161007e565b6100aa6100a5366004610aec565b6101d6565b60405161007e9190610b3a565b6100aa6100c5366004610b54565b61021b565b6100dd6100d8366004610bab565b610260565b60405161007e929190610bf0565b6100f361058b565b6000805481906001600160a01b031633146101295760405162461bcd60e51b815260040161012090610c12565b60405180910390fd5b61271087106101a85760008861012001518960c001518a60a0015161014e9190610c70565b6101589190610c70565b600060a08b018190526101008b018190526101208b0181905260c08b01526101e08a018051919250829161018d908390610c70565b90525061019a89866102a8565b8893509150600190506101cb565b60006101b489896102e1565b90506101c1898888610549565b8893509150600090505b955095509592505050565b6101de61058b565b6000546001600160a01b031633146102085760405162461bcd60e51b815260040161012090610c12565b61021283836102a8565b50815b92915050565b61022361058b565b6000546001600160a01b0316331461024d5760405162461bcd60e51b815260040161012090610c12565b610258848484610549565b509192915050565b61026861058b565b600080546001600160a01b031633146102935760405162461bcd60e51b815260040161012090610c12565b600061029f85856102e1565b94959350505050565b600061020083015261024082018160058111156102c7576102c761094e565b908160058111156102da576102da61094e565b9052505050565b600061271082106103435760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f7420736c617368203130302520776974686f7574206a61696c626f604482015265756e64696e6760d01b6064820152608401610120565b60008361012001518460c001518560a0015161035f9190610c70565b6103699190610c70565b9050600061271061037a8386610c83565b6103849190610c9a565b9050600081905080866101200151106103b6578086610120018181516103aa9190610cbc565b905250600090506103d1565b6101208601516103c69082610cbc565b600061012088015290505b801561044e578086610100015110610419578086610100018181516103f69190610cbc565b90525060a08601805182919061040d908390610cbc565b9052506000905061044e565b6101008601516104299082610cbc565b90508561010001518660a0018181516104429190610cbc565b90525060006101008701525b600081118015610471575060008660a001518760c0015161046f9190610c70565b115b1561051d5760008660a001518760c0015161048c9190610c70565b60c088015161049b9084610c83565b6104a59190610c9a565b905060008760a001518860c001516104bd9190610c70565b60a08901516104cc9085610c83565b6104d69190610c9a565b9050818860c0018181516104ea9190610cbc565b90525060a088018051829190610501908390610cbc565b90525061050e8183610c70565b6105189084610cbc565b925050505b6105278183610cbc565b915081866101e00181815161053c9190610c70565b9052509095945050505050565b6105538243610c70565b61020084015261024083018160058111156105705761057061094e565b908160058111156105835761058361094e565b905250505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600581111561064c5761064c61094e565b905290565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff8111828210171561068b5761068b610651565b60405290565b80356001600160a01b03811681146106a857600080fd5b919050565b600082601f8301126106be57600080fd5b813567ffffffffffffffff808211156106d9576106d9610651565b604051601f8301601f19908116603f0116810190828211818310171561070157610701610651565b8160405283815286602085880101111561071a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600681106106a857600080fd5b6000610260828403121561075c57600080fd5b610764610667565b905061076f82610691565b815261077d60208301610691565b602082015261078e60408301610691565b6040820152606082013567ffffffffffffffff808211156107ae57600080fd5b6107ba858386016106ad565b60608401526080848101359084015260a0808501359084015260c0808501359084015260e0808501359084015261010080850135908401526101208085013590840152610140808501359084015261016080850135908401526101809150610823828501610691565b918301919091526101a083810135908301526101c080840135908301526101e08084013590830152610200808401359083015261022090818401358181111561086b57600080fd5b610877868287016106ad565b8385015250505061024061088c81840161073a565b9082015292915050565b600080600080600060a086880312156108ae57600080fd5b853567ffffffffffffffff8111156108c557600080fd5b6108d188828901610749565b95505060208601359350604086013592506108ee6060870161073a565b91506108fc6080870161073a565b90509295509295909350565b6000815180845260005b8181101561092e57602081850181015186830182015201610912565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6006811061098257634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061026060208301516109b260208601826001600160a01b03169052565b5060408301516109cd60408601826001600160a01b03169052565b5060608301518160608601526109e582860182610908565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151610a5b828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152610aa18382610908565b9250505061024080840151610ab882870182610964565b5090949350505050565b606081526000610ad56060830186610986565b602083019490945250901515604090910152919050565b60008060408385031215610aff57600080fd5b823567ffffffffffffffff811115610b1657600080fd5b610b2285828601610749565b925050610b316020840161073a565b90509250929050565b602081526000610b4d6020830184610986565b9392505050565b600080600060608486031215610b6957600080fd5b833567ffffffffffffffff811115610b8057600080fd5b610b8c86828701610749565b93505060208401359150610ba26040850161073a565b90509250925092565b60008060408385031215610bbe57600080fd5b823567ffffffffffffffff811115610bd557600080fd5b610be185828601610749565b95602094909401359450505050565b604081526000610c036040830185610986565b90508260208301529392505050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561021557610215610c5a565b808202811582820484141761021557610215610c5a565b600082610cb757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561021557610215610c5a56fea26469706673582212207b537dedb1ff9035c844758012466cfe097788f03cea3d876f65d3f7bcccb30264736f6c63430008150033608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220f521dfcbc3cb8b516c16f450cc0b3f59fa019109d73913d47c59da7b8920d00464736f6c63430008150033",
}

// AutonityUpgradeTestABI is the input ABI used to generate the binding from.
// Deprecated: Use AutonityUpgradeTestMetaData.ABI instead.
var AutonityUpgradeTestABI = AutonityUpgradeTestMetaData.ABI

// Deprecated: Use AutonityUpgradeTestMetaData.Sigs instead.
// AutonityUpgradeTestFuncSigs maps the 4-byte function signature to its string representation.
var AutonityUpgradeTestFuncSigs = AutonityUpgradeTestMetaData.Sigs

// AutonityUpgradeTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AutonityUpgradeTestMetaData.Bin instead.
var AutonityUpgradeTestBin = AutonityUpgradeTestMetaData.Bin

// DeployAutonityUpgradeTest deploys a new Ethereum contract, binding an instance of AutonityUpgradeTest to it.
func (r *Runner) DeployAutonityUpgradeTest(opts *runOptions) (common.Address, uint64, *AutonityUpgradeTest, error) {
	parsed, err := AutonityUpgradeTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(AutonityUpgradeTestBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &AutonityUpgradeTest{contract: c}, nil
}

// AutonityUpgradeTest is an auto generated Go binding around an Ethereum contract.
type AutonityUpgradeTest struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// PROPOSERREWARDRATEPRECISION is a free data retrieval call binding the contract method 0x5115840b.
//
// Solidity: function PROPOSER_REWARD_RATE_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) PROPOSERREWARDRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "PROPOSER_REWARD_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WITHHOLDINGTHRESHOLDPRECISION is a free data retrieval call binding the contract method 0xe490389e.
//
// Solidity: function WITHHOLDING_THRESHOLD_PRECISION() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) WITHHOLDINGTHRESHOLDPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "WITHHOLDING_THRESHOLD_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _addr) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) BalanceOf(opts *runOptions, _addr common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "balanceOf", _addr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CirculatingSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "circulatingSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address) policy, (address,address,address,address,address,address,address,address) contracts, (address,uint256,uint256,uint256,uint256) protocol, uint256 contractVersion)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Config(opts *runOptions) (struct {
	Policy          AutonityPolicy
	Contracts       AutonityContracts
	Protocol        AutonityProtocol
	ContractVersion *big.Int
}, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "config")

	outstruct := new(struct {
		Policy          AutonityPolicy
		Contracts       AutonityContracts
		Protocol        AutonityProtocol
		ContractVersion *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Policy = *abi.ConvertType(out[0], new(AutonityPolicy)).(*AutonityPolicy)
	outstruct.Contracts = *abi.ConvertType(out[1], new(AutonityContracts)).(*AutonityContracts)
	outstruct.Protocol = *abi.ConvertType(out[2], new(AutonityProtocol)).(*AutonityProtocol)
	outstruct.ContractVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Deployer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "deployer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// EpochID is a free data retrieval call binding the contract method 0xc9d97af4.
//
// Solidity: function epochID() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochID(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochID")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochPeriodToBeApplied is a free data retrieval call binding the contract method 0x573963b8.
//
// Solidity: function epochPeriodToBeApplied() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochPeriodToBeApplied(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochPeriodToBeApplied")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochReward is a free data retrieval call binding the contract method 0x1604e416.
//
// Solidity: function epochReward() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochReward(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochReward")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// EpochTotalBondedStake is a free data retrieval call binding the contract method 0x9c98e471.
//
// Solidity: function epochTotalBondedStake() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) EpochTotalBondedStake(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "epochTotalBondedStake")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBlockPeriod is a free data retrieval call binding the contract method 0x43645969.
//
// Solidity: function getBlockPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetBlockPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getBlockPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xab8f6ffe.
//
// Solidity: function getCommittee() view returns((address,uint256,bytes)[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCommittee(opts *runOptions) ([]AutonityCommitteeMember, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCommittee")

	if err != nil {
		return *new([]AutonityCommitteeMember), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	return out0, consumed, err

}

// GetCommitteeEnodes is a free data retrieval call binding the contract method 0xa8b2216e.
//
// Solidity: function getCommitteeEnodes() view returns(string[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCommitteeEnodes(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCommitteeEnodes")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetCurrentEpochPeriod is a free data retrieval call binding the contract method 0x0aac2da1.
//
// Solidity: function getCurrentEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetCurrentEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getCurrentEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochByHeight is a free data retrieval call binding the contract method 0xaffb1cf1.
//
// Solidity: function getEpochByHeight(uint256 _height) view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochByHeight(opts *runOptions, _height *big.Int) (AutonityEpochInfo, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochByHeight", _height)

	if err != nil {
		return *new(AutonityEpochInfo), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)
	return out0, consumed, err

}

// GetEpochFromBlock is a free data retrieval call binding the contract method 0x96b477cb.
//
// Solidity: function getEpochFromBlock(uint256 _block) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochFromBlock(opts *runOptions, _block *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochFromBlock", _block)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetEpochInfo is a free data retrieval call binding the contract method 0xa9fd1a8f.
//
// Solidity: function getEpochInfo() view returns(((address,uint256,bytes)[],uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochInfo(opts *runOptions) (AutonityEpochInfo, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochInfo")

	if err != nil {
		return *new(AutonityEpochInfo), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityEpochInfo)).(*AutonityEpochInfo)
	return out0, consumed, err

}

// GetEpochPeriod is a free data retrieval call binding the contract method 0xdfb1a4d2.
//
// Solidity: function getEpochPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetEpochPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getEpochPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLastEpochBlock is a free data retrieval call binding the contract method 0x731b3a03.
//
// Solidity: function getLastEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetLastEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getLastEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxCommitteeSize is a free data retrieval call binding the contract method 0x819b6463.
//
// Solidity: function getMaxCommitteeSize() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMaxCommitteeSize(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMaxCommitteeSize")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMaxScheduleDuration is a free data retrieval call binding the contract method 0xfed76a56.
//
// Solidity: function getMaxScheduleDuration() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMaxScheduleDuration(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMaxScheduleDuration")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetMinimumBaseFee is a free data retrieval call binding the contract method 0x11220633.
//
// Solidity: function getMinimumBaseFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetMinimumBaseFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getMinimumBaseFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// GetNextEpochBlock is a free data retrieval call binding the contract method 0x25ce1bb9.
//
// Solidity: function getNextEpochBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetNextEpochBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getNextEpochBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetSchedule(opts *runOptions, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)
	return out0, consumed, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTotalSchedules(opts *runOptions, _vault common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xf7866ee3.
//
// Solidity: function getTreasuryAccount() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTreasuryAccount(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTreasuryAccount")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryFee is a free data retrieval call binding the contract method 0x29070c6d.
//
// Solidity: function getTreasuryFee() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetTreasuryFee(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getTreasuryFee")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingPeriod is a free data retrieval call binding the contract method 0x6fd2c80b.
//
// Solidity: function getUnbondingPeriod() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetUnbondingPeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getUnbondingPeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetUnbondingShare is a free data retrieval call binding the contract method 0x8d347287.
//
// Solidity: function getUnbondingShare(uint256 _unbondingID) view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetUnbondingShare(opts *runOptions, _unbondingID *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getUnbondingShare", _unbondingID)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _addr) view returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetValidator(opts *runOptions, _addr common.Address) (AutonityValidator, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getValidator", _addr)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// GetValidatorState is a free data retrieval call binding the contract method 0x5b7d6c36.
//
// Solidity: function getValidatorState(address _addr) view returns(uint8)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetValidatorState(opts *runOptions, _addr common.Address) (uint8, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getValidatorState", _addr)

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) GetVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "getVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InflationReserve is a free data retrieval call binding the contract method 0x9ac31074.
//
// Solidity: function inflationReserve() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) InflationReserve(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "inflationReserve")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsUnbondingReleased is a free data retrieval call binding the contract method 0xe294df7c.
//
// Solidity: function isUnbondingReleased(uint256 _unbondingID) view returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) IsUnbondingReleased(opts *runOptions, _unbondingID *big.Int) (bool, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "isUnbondingReleased", _unbondingID)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// LastEpochTime is a free data retrieval call binding the contract method 0x89c614b8.
//
// Solidity: function lastEpochTime() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LastEpochTime(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "lastEpochTime")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastFinalizedBlock is a free data retrieval call binding the contract method 0xae1da0b5.
//
// Solidity: function lastFinalizedBlock() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LastFinalizedBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "lastFinalizedBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Slasher(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "slasher")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _AutonityUpgradeTest.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetLiquidLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf1d592a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetLiquidLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "SetLiquidLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ActivateValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb46e5520.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallActivateValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "activateValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallBurn(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "burn", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x852c4849.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallChangeCommissionRate(r *Runner, opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "changeCommissionRate", _validator, _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ComputeCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xae1f5fa0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallComputeCommittee(r *Runner, opts *runOptions) ([]common.Address, []common.Address, []common.Address, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "computeCommittee")
	r.revertSnapshot(snap)

	if err != nil {
		return *new([]common.Address), *new([]common.Address), *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	out2 := *abi.ConvertType(out[2], new([]common.Address)).(*[]common.Address)
	return out0, out1, out2, consumed, err

}

// CreateSchedule is a free data retrieval call for a paid mutator transaction binding the contract method 0x354c40a7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallCreateSchedule(r *Runner, opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallFinalize(r *Runner, opts *runOptions) (bool, bool, []AutonityCommitteeMember, *big.Int, *big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), *new(bool), *new([]AutonityCommitteeMember), *new(*big.Int), *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new([]AutonityCommitteeMember)).(*[]AutonityCommitteeMember)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	return out0, out1, out2, out3, out4, out5, consumed, err

}

// FinalizeInitialization is a free data retrieval call for a paid mutator transaction binding the contract method 0x4da3baec.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallFinalizeInitialization(r *Runner, opts *runOptions, delta *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalizeInitialization", delta)
	r.revertSnapshot(snap)
	return consumed, err

}

// Jail is a free data retrieval call for a paid mutator transaction binding the contract method 0x154d76d7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallJail(r *Runner, opts *runOptions, _nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "jail", _nodeAddress, _jailtime, _newJailedState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Jailbound is a free data retrieval call for a paid mutator transaction binding the contract method 0x8ef8c2fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallJailbound(r *Runner, opts *runOptions, _nodeAddress common.Address, _newJailboundState uint8) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "jailbound", _nodeAddress, _newJailboundState)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallMint(r *Runner, opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "mint", _addr, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// PauseValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae65e7a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallPauseValidator(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "pauseValidator", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// RegisterValidator is a free data retrieval call for a paid mutator transaction binding the contract method 0x84467fdb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallRegisterValidator(r *Runner, opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x1250a28d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAcuContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xd372c07e.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetAcuContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAcuContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommitteeSize is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bac7dad.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetCommitteeSize(r *Runner, opts *runOptions, _size *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setCommitteeSize", _size)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetEpochPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setEpochPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInflationControllerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xf03b959d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetInflationControllerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setInflationControllerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMaxScheduleDuration is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bb2e477.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetMaxScheduleDuration(r *Runner, opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinimumBaseFee is a free data retrieval call for a paid mutator transaction binding the contract method 0xcb696f54.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetMinimumBaseFee(r *Runner, opts *runOptions, _price *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMinimumBaseFee", _price)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOmissionAccountabilityContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb47c3eaa.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetOmissionAccountabilityContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOmissionAccountabilityContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperatorAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0x520fdbbc.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetOperatorAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOperatorAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracleContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x496ccd9b.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetOracleContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOracleContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetProposerRewardRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x416f86a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetProposerRewardRate(r *Runner, opts *runOptions, _proposerRewardRate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setProposerRewardRate", _proposerRewardRate)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSlasher is a free data retrieval call for a paid mutator transaction binding the contract method 0xaabc2496.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSlasher(address _slasher) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetSlasher(r *Runner, opts *runOptions, _slasher common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSlasher", _slasher)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizationContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfd19fb9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetStabilizationContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setStabilizationContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControlContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ecbadd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetSupplyControlContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSupplyControlContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryAccount is a free data retrieval call for a paid mutator transaction binding the contract method 0xd886f8a2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetTreasuryAccount(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryAccount", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetTreasuryFee is a free data retrieval call for a paid mutator transaction binding the contract method 0x77e741c7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetTreasuryFee(r *Runner, opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryFee", _treasuryFee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUnbondingPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x114eaf55.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetUnbondingPeriod(r *Runner, opts *runOptions, _period *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUnbondingPeriod", _period)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetUpgradeManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xceaad455.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetUpgradeManagerContract(r *Runner, opts *runOptions, _address common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUpgradeManagerContract", _address)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetWithheldRewardsPool is a free data retrieval call for a paid mutator transaction binding the contract method 0x39f9eb1f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetWithheldRewardsPool(r *Runner, opts *runOptions, _pool common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setWithheldRewardsPool", _pool)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetWithholdingThreshold is a free data retrieval call for a paid mutator transaction binding the contract method 0x905d76e9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSetWithholdingThreshold(r *Runner, opts *runOptions, _withholdingThreshold *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "setWithholdingThreshold", _withholdingThreshold)
	r.revertSnapshot(snap)
	return consumed, err

}

// Slash is a free data retrieval call for a paid mutator transaction binding the contract method 0x02fb4d85.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSlash(r *Runner, opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "slash", _nodeAddress, _slashingRate)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SlashAndJail is a free data retrieval call for a paid mutator transaction binding the contract method 0x122b4122.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallSlashAndJail(r *Runner, opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (struct {
	SlashingAmount   *big.Int
	JailReleaseBlock *big.Int
	IsJailbound      bool
}, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "slashAndJail", _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	r.revertSnapshot(snap)

	outstruct := new(struct {
		SlashingAmount   *big.Int
		JailReleaseBlock *big.Int
		IsJailbound      bool
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.SlashingAmount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.JailReleaseBlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsJailbound = *abi.ConvertType(out[2], new(bool)).(*bool)
	return *outstruct, consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallTransfer(r *Runner, opts *runOptions, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "transfer", _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _AutonityUpgradeTest.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateEnode is a free data retrieval call for a paid mutator transaction binding the contract method 0x784304b5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpdateEnode(r *Runner, opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateEnode", _nodeAddress, _enode)
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _AutonityUpgradeTest.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidLogicContract is a paid mutator transaction binding the contract method 0xf1d592a7.
//
// Solidity: function SetLiquidLogicContract(address _contract) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetLiquidLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "SetLiquidLogicContract", _contract)
	return consumed, err
}

// ActivateValidator is a paid mutator transaction binding the contract method 0xb46e5520.
//
// Solidity: function activateValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ActivateValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "activateValidator", _address)
	return consumed, err
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "approve", spender, amount)
	return consumed, err
}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Burn(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "burn", _addr, _amount)
	return consumed, err
}

// ChangeCommissionRate is a paid mutator transaction binding the contract method 0x852c4849.
//
// Solidity: function changeCommissionRate(address _validator, uint256 _rate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ChangeCommissionRate(opts *runOptions, _validator common.Address, _rate *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "changeCommissionRate", _validator, _rate)
	return consumed, err
}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ComputeCommittee is a paid mutator transaction binding the contract method 0xae1f5fa0.
//
// Solidity: function computeCommittee() returns(address[], address[], address[])
func (_AutonityUpgradeTest *AutonityUpgradeTest) ComputeCommittee(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "computeCommittee")
	return consumed, err
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x354c40a7.
//
// Solidity: function createSchedule(address _scheduleVault, uint256 _amount, uint256 _startTime, uint256 _totalDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) CreateSchedule(opts *runOptions, _scheduleVault common.Address, _amount *big.Int, _startTime *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "createSchedule", _scheduleVault, _amount, _startTime, _totalDuration)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool, bool, (address,uint256,bytes)[], uint256, uint256, uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalize")
	return consumed, err
}

// FinalizeInitialization is a paid mutator transaction binding the contract method 0x4da3baec.
//
// Solidity: function finalizeInitialization(uint256 delta) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) FinalizeInitialization(opts *runOptions, delta *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "finalizeInitialization", delta)
	return consumed, err
}

// Jail is a paid mutator transaction binding the contract method 0x154d76d7.
//
// Solidity: function jail(address _nodeAddress, uint256 _jailtime, uint8 _newJailedState) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Jail(opts *runOptions, _nodeAddress common.Address, _jailtime *big.Int, _newJailedState uint8) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "jail", _nodeAddress, _jailtime, _newJailedState)
	return consumed, err
}

// Jailbound is a paid mutator transaction binding the contract method 0x8ef8c2fd.
//
// Solidity: function jailbound(address _nodeAddress, uint8 _newJailboundState) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Jailbound(opts *runOptions, _nodeAddress common.Address, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "jailbound", _nodeAddress, _newJailboundState)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _addr, uint256 _amount) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Mint(opts *runOptions, _addr common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "mint", _addr, _amount)
	return consumed, err
}

// PauseValidator is a paid mutator transaction binding the contract method 0x0ae65e7a.
//
// Solidity: function pauseValidator(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) PauseValidator(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "pauseValidator", _address)
	return consumed, err
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x84467fdb.
//
// Solidity: function registerValidator(string _enode, address _oracleAddress, bytes _consensusKey, bytes _signatures) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) RegisterValidator(opts *runOptions, _enode string, _oracleAddress common.Address, _consensusKey []byte, _signatures []byte) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "registerValidator", _enode, _oracleAddress, _consensusKey, _signatures)
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "resetContractUpgrade")
	return consumed, err
}

// SetAccountabilityContract is a paid mutator transaction binding the contract method 0x1250a28d.
//
// Solidity: function setAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAccountabilityContract", _address)
	return consumed, err
}

// SetAcuContract is a paid mutator transaction binding the contract method 0xd372c07e.
//
// Solidity: function setAcuContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetAcuContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setAcuContract", _address)
	return consumed, err
}

// SetCommitteeSize is a paid mutator transaction binding the contract method 0x8bac7dad.
//
// Solidity: function setCommitteeSize(uint256 _size) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetCommitteeSize(opts *runOptions, _size *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setCommitteeSize", _size)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetEpochPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setEpochPeriod", _period)
	return consumed, err
}

// SetInflationControllerContract is a paid mutator transaction binding the contract method 0xf03b959d.
//
// Solidity: function setInflationControllerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetInflationControllerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setInflationControllerContract", _address)
	return consumed, err
}

// SetMaxScheduleDuration is a paid mutator transaction binding the contract method 0x8bb2e477.
//
// Solidity: function setMaxScheduleDuration(uint256 _newMaxDuration) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetMaxScheduleDuration(opts *runOptions, _newMaxDuration *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMaxScheduleDuration", _newMaxDuration)
	return consumed, err
}

// SetMinimumBaseFee is a paid mutator transaction binding the contract method 0xcb696f54.
//
// Solidity: function setMinimumBaseFee(uint256 _price) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetMinimumBaseFee(opts *runOptions, _price *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setMinimumBaseFee", _price)
	return consumed, err
}

// SetOmissionAccountabilityContract is a paid mutator transaction binding the contract method 0xb47c3eaa.
//
// Solidity: function setOmissionAccountabilityContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetOmissionAccountabilityContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOmissionAccountabilityContract", _address)
	return consumed, err
}

// SetOperatorAccount is a paid mutator transaction binding the contract method 0x520fdbbc.
//
// Solidity: function setOperatorAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetOperatorAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOperatorAccount", _account)
	return consumed, err
}

// SetOracleContract is a paid mutator transaction binding the contract method 0x496ccd9b.
//
// Solidity: function setOracleContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetOracleContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setOracleContract", _address)
	return consumed, err
}

// SetProposerRewardRate is a paid mutator transaction binding the contract method 0x416f86a2.
//
// Solidity: function setProposerRewardRate(uint256 _proposerRewardRate) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetProposerRewardRate(opts *runOptions, _proposerRewardRate *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setProposerRewardRate", _proposerRewardRate)
	return consumed, err
}

// SetSlasher is a paid mutator transaction binding the contract method 0xaabc2496.
//
// Solidity: function setSlasher(address _slasher) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetSlasher(opts *runOptions, _slasher common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSlasher", _slasher)
	return consumed, err
}

// SetStabilizationContract is a paid mutator transaction binding the contract method 0xcfd19fb9.
//
// Solidity: function setStabilizationContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetStabilizationContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setStabilizationContract", _address)
	return consumed, err
}

// SetSupplyControlContract is a paid mutator transaction binding the contract method 0xb3ecbadd.
//
// Solidity: function setSupplyControlContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetSupplyControlContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setSupplyControlContract", _address)
	return consumed, err
}

// SetTreasuryAccount is a paid mutator transaction binding the contract method 0xd886f8a2.
//
// Solidity: function setTreasuryAccount(address _account) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetTreasuryAccount(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryAccount", _account)
	return consumed, err
}

// SetTreasuryFee is a paid mutator transaction binding the contract method 0x77e741c7.
//
// Solidity: function setTreasuryFee(uint256 _treasuryFee) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetTreasuryFee(opts *runOptions, _treasuryFee *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setTreasuryFee", _treasuryFee)
	return consumed, err
}

// SetUnbondingPeriod is a paid mutator transaction binding the contract method 0x114eaf55.
//
// Solidity: function setUnbondingPeriod(uint256 _period) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetUnbondingPeriod(opts *runOptions, _period *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUnbondingPeriod", _period)
	return consumed, err
}

// SetUpgradeManagerContract is a paid mutator transaction binding the contract method 0xceaad455.
//
// Solidity: function setUpgradeManagerContract(address _address) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetUpgradeManagerContract(opts *runOptions, _address common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setUpgradeManagerContract", _address)
	return consumed, err
}

// SetWithheldRewardsPool is a paid mutator transaction binding the contract method 0x39f9eb1f.
//
// Solidity: function setWithheldRewardsPool(address _pool) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetWithheldRewardsPool(opts *runOptions, _pool common.Address) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setWithheldRewardsPool", _pool)
	return consumed, err
}

// SetWithholdingThreshold is a paid mutator transaction binding the contract method 0x905d76e9.
//
// Solidity: function setWithholdingThreshold(uint256 _withholdingThreshold) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) SetWithholdingThreshold(opts *runOptions, _withholdingThreshold *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "setWithholdingThreshold", _withholdingThreshold)
	return consumed, err
}

// Slash is a paid mutator transaction binding the contract method 0x02fb4d85.
//
// Solidity: function slash(address _nodeAddress, uint256 _slashingRate) returns(uint256 slashingAmount)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Slash(opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "slash", _nodeAddress, _slashingRate)
	return consumed, err
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x122b4122.
//
// Solidity: function slashAndJail(address _nodeAddress, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns(uint256 slashingAmount, uint256 jailReleaseBlock, bool isJailbound)
func (_AutonityUpgradeTest *AutonityUpgradeTest) SlashAndJail(opts *runOptions, _nodeAddress common.Address, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "slashAndJail", _nodeAddress, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Transfer(opts *runOptions, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "transfer", _recipient, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_AutonityUpgradeTest *AutonityUpgradeTest) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_AutonityUpgradeTest *AutonityUpgradeTest) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateEnode is a paid mutator transaction binding the contract method 0x784304b5.
//
// Solidity: function updateEnode(address _nodeAddress, string _enode) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpdateEnode(opts *runOptions, _nodeAddress common.Address, _enode string) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "updateEnode", _nodeAddress, _enode)
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_AutonityUpgradeTest *AutonityUpgradeTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _AutonityUpgradeTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// AutonityUpgradeTestActivatedValidatorIterator is returned from FilterActivatedValidator and is used to iterate over the raw logs and unpacked data for ActivatedValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestActivatedValidatorIterator struct {
			Event *AutonityUpgradeTestActivatedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestActivatedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestActivatedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestActivatedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestActivatedValidator represents a ActivatedValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestActivatedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterActivatedValidator is a free log retrieval operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterActivatedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestActivatedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestActivatedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "ActivatedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchActivatedValidator is a free log subscription operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchActivatedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestActivatedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "ActivatedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestActivatedValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseActivatedValidator is a log parse operation binding the contract event 0x60fcbf2d07dc712a93e59fb28f1edb626d7c2497c57ba71a8c0b3999ecb9a3b5.
		//
		// Solidity: event ActivatedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseActivatedValidator(log types.Log) (*AutonityUpgradeTestActivatedValidator, error) {
			event := new(AutonityUpgradeTestActivatedValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "ActivatedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestApprovalIterator struct {
			Event *AutonityUpgradeTestApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestApproval represents a Approval event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*AutonityUpgradeTestApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestApprovalIterator{contract: _AutonityUpgradeTest.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchApproval(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestApproval)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseApproval(log types.Log) (*AutonityUpgradeTestApproval, error) {
			event := new(AutonityUpgradeTestApproval)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestBondingRejectedIterator is returned from FilterBondingRejected and is used to iterate over the raw logs and unpacked data for BondingRejected events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBondingRejectedIterator struct {
			Event *AutonityUpgradeTestBondingRejected // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestBondingRejected)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestBondingRejected)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestBondingRejectedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestBondingRejected represents a BondingRejected event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBondingRejected struct {
			Validator common.Address;
			Delegator common.Address;
			Amount *big.Int;
			State uint8;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBondingRejected is a free log retrieval operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterBondingRejected(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestBondingRejectedIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestBondingRejectedIterator{contract: _AutonityUpgradeTest.contract, event: "BondingRejected", logs: logs, sub: sub}, nil
 		}

		// WatchBondingRejected is a free log subscription operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchBondingRejected(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBondingRejected, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BondingRejected", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestBondingRejected)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBondingRejected is a log parse operation binding the contract event 0x1ff2b052afa4bb37ce30d9aaccde416a700b97e632d089111749af937f878342.
		//
		// Solidity: event BondingRejected(address indexed validator, address indexed delegator, uint256 amount, uint8 state)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseBondingRejected(log types.Log) (*AutonityUpgradeTestBondingRejected, error) {
			event := new(AutonityUpgradeTestBondingRejected)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BondingRejected", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestBurnedStakeIterator is returned from FilterBurnedStake and is used to iterate over the raw logs and unpacked data for BurnedStake events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBurnedStakeIterator struct {
			Event *AutonityUpgradeTestBurnedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestBurnedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestBurnedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestBurnedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestBurnedStake represents a BurnedStake event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestBurnedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurnedStake is a free log retrieval operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterBurnedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestBurnedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestBurnedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "BurnedStake", logs: logs, sub: sub}, nil
 		}

		// WatchBurnedStake is a free log subscription operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchBurnedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestBurnedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "BurnedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestBurnedStake)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurnedStake is a log parse operation binding the contract event 0x5024dbeedf0c06664c9bd7be836915730c955e936972c020683dadf11d5488a3.
		//
		// Solidity: event BurnedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseBurnedStake(log types.Log) (*AutonityUpgradeTestBurnedStake, error) {
			event := new(AutonityUpgradeTestBurnedStake)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "BurnedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCallFailedIterator struct {
			Event *AutonityUpgradeTestCallFailed // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestCallFailedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestCallFailed)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestCallFailed)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestCallFailedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestCallFailedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestCallFailed represents a CallFailed event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCallFailed struct {
			To common.Address;
			MethodSignature string;
			ReturnData []byte;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCallFailed is a free log retrieval operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterCallFailed(opts *bind.FilterOpts) (*AutonityUpgradeTestCallFailedIterator, error) {





			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestCallFailedIterator{contract: _AutonityUpgradeTest.contract, event: "CallFailed", logs: logs, sub: sub}, nil
 		}

		// WatchCallFailed is a free log subscription operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCallFailed) (event.Subscription, error) {





			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CallFailed")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestCallFailed)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCallFailed is a log parse operation binding the contract event 0x1137d8c966ce69b9630fb2294be011f3d64cc56e91fad7d375f0662568e9d352.
		//
		// Solidity: event CallFailed(address to, string methodSignature, bytes returnData)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseCallFailed(log types.Log) (*AutonityUpgradeTestCallFailed, error) {
			event := new(AutonityUpgradeTestCallFailed)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CallFailed", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestCommissionRateChangeIterator is returned from FilterCommissionRateChange and is used to iterate over the raw logs and unpacked data for CommissionRateChange events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCommissionRateChangeIterator struct {
			Event *AutonityUpgradeTestCommissionRateChange // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestCommissionRateChange)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestCommissionRateChange)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestCommissionRateChangeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestCommissionRateChange represents a CommissionRateChange event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestCommissionRateChange struct {
			Validator common.Address;
			Rate *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterCommissionRateChange is a free log retrieval operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterCommissionRateChange(opts *bind.FilterOpts, validator []common.Address) (*AutonityUpgradeTestCommissionRateChangeIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestCommissionRateChangeIterator{contract: _AutonityUpgradeTest.contract, event: "CommissionRateChange", logs: logs, sub: sub}, nil
 		}

		// WatchCommissionRateChange is a free log subscription operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchCommissionRateChange(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestCommissionRateChange, validator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "CommissionRateChange", validatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestCommissionRateChange)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseCommissionRateChange is a log parse operation binding the contract event 0x4fba51c92fa3d6ad8374d394f6cd5766857552e153d7384a8f23aa4ce9a8a7cf.
		//
		// Solidity: event CommissionRateChange(address indexed validator, uint256 rate)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseCommissionRateChange(log types.Log) (*AutonityUpgradeTestCommissionRateChange, error) {
			event := new(AutonityUpgradeTestCommissionRateChange)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "CommissionRateChange", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestEpochPeriodUpdatedIterator is returned from FilterEpochPeriodUpdated and is used to iterate over the raw logs and unpacked data for EpochPeriodUpdated events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestEpochPeriodUpdatedIterator struct {
			Event *AutonityUpgradeTestEpochPeriodUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestEpochPeriodUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestEpochPeriodUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestEpochPeriodUpdated represents a EpochPeriodUpdated event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestEpochPeriodUpdated struct {
			Period *big.Int;
			ToBeAppliedAtBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterEpochPeriodUpdated is a free log retrieval operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterEpochPeriodUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestEpochPeriodUpdatedIterator, error) {




			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestEpochPeriodUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "EpochPeriodUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchEpochPeriodUpdated is a free log subscription operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchEpochPeriodUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestEpochPeriodUpdated) (event.Subscription, error) {




			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "EpochPeriodUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestEpochPeriodUpdated)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseEpochPeriodUpdated is a log parse operation binding the contract event 0x2eea6438d890c8603d4df81ad1bad2a4ea45c02b4837165f461ff3c81603abc7.
		//
		// Solidity: event EpochPeriodUpdated(uint256 period, uint256 toBeAppliedAtBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseEpochPeriodUpdated(log types.Log) (*AutonityUpgradeTestEpochPeriodUpdated, error) {
			event := new(AutonityUpgradeTestEpochPeriodUpdated)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "EpochPeriodUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestMinimumBaseFeeUpdatedIterator is returned from FilterMinimumBaseFeeUpdated and is used to iterate over the raw logs and unpacked data for MinimumBaseFeeUpdated events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMinimumBaseFeeUpdatedIterator struct {
			Event *AutonityUpgradeTestMinimumBaseFeeUpdated // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestMinimumBaseFeeUpdated)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestMinimumBaseFeeUpdatedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestMinimumBaseFeeUpdated represents a MinimumBaseFeeUpdated event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMinimumBaseFeeUpdated struct {
			GasPrice *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMinimumBaseFeeUpdated is a free log retrieval operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterMinimumBaseFeeUpdated(opts *bind.FilterOpts) (*AutonityUpgradeTestMinimumBaseFeeUpdatedIterator, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestMinimumBaseFeeUpdatedIterator{contract: _AutonityUpgradeTest.contract, event: "MinimumBaseFeeUpdated", logs: logs, sub: sub}, nil
 		}

		// WatchMinimumBaseFeeUpdated is a free log subscription operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchMinimumBaseFeeUpdated(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMinimumBaseFeeUpdated) (event.Subscription, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MinimumBaseFeeUpdated")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMinimumBaseFeeUpdated is a log parse operation binding the contract event 0x1f4d2fc7529047a5bd96d3229bfea127fd18b7748f13586e097c69fccd389128.
		//
		// Solidity: event MinimumBaseFeeUpdated(uint256 gasPrice)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseMinimumBaseFeeUpdated(log types.Log) (*AutonityUpgradeTestMinimumBaseFeeUpdated, error) {
			event := new(AutonityUpgradeTestMinimumBaseFeeUpdated)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MinimumBaseFeeUpdated", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestMintedStakeIterator is returned from FilterMintedStake and is used to iterate over the raw logs and unpacked data for MintedStake events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMintedStakeIterator struct {
			Event *AutonityUpgradeTestMintedStake // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestMintedStakeIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestMintedStake)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestMintedStake)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestMintedStakeIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestMintedStakeIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestMintedStake represents a MintedStake event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestMintedStake struct {
			Addr common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMintedStake is a free log retrieval operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterMintedStake(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestMintedStakeIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestMintedStakeIterator{contract: _AutonityUpgradeTest.contract, event: "MintedStake", logs: logs, sub: sub}, nil
 		}

		// WatchMintedStake is a free log subscription operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchMintedStake(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestMintedStake, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "MintedStake", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestMintedStake)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMintedStake is a log parse operation binding the contract event 0x48490b4407bb949b708ec5f514b4167f08f4969baaf78d53b05028adf369bfcf.
		//
		// Solidity: event MintedStake(address indexed addr, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseMintedStake(log types.Log) (*AutonityUpgradeTestMintedStake, error) {
			event := new(AutonityUpgradeTestMintedStake)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "MintedStake", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewBondingRequestIterator is returned from FilterNewBondingRequest and is used to iterate over the raw logs and unpacked data for NewBondingRequest events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewBondingRequestIterator struct {
			Event *AutonityUpgradeTestNewBondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewBondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewBondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewBondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewBondingRequest represents a NewBondingRequest event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewBondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewBondingRequest is a free log retrieval operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewBondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewBondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewBondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewBondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewBondingRequest is a free log subscription operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewBondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewBondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewBondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewBondingRequest)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewBondingRequest is a log parse operation binding the contract event 0xc46aaee12f38035617ad448c04a7956119f7c7ed395ecc347b898817451ddb8d.
		//
		// Solidity: event NewBondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewBondingRequest(log types.Log) (*AutonityUpgradeTestNewBondingRequest, error) {
			event := new(AutonityUpgradeTestNewBondingRequest)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewBondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewEpochIterator is returned from FilterNewEpoch and is used to iterate over the raw logs and unpacked data for NewEpoch events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewEpochIterator struct {
			Event *AutonityUpgradeTestNewEpoch // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewEpochIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewEpoch)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewEpoch)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewEpochIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewEpochIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewEpoch represents a NewEpoch event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewEpoch struct {
			Epoch *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewEpoch is a free log retrieval operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewEpoch(opts *bind.FilterOpts) (*AutonityUpgradeTestNewEpochIterator, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewEpochIterator{contract: _AutonityUpgradeTest.contract, event: "NewEpoch", logs: logs, sub: sub}, nil
 		}

		// WatchNewEpoch is a free log subscription operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewEpoch(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewEpoch) (event.Subscription, error) {



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewEpoch")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewEpoch)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewEpoch is a log parse operation binding the contract event 0xebad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e335.
		//
		// Solidity: event NewEpoch(uint256 epoch)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewEpoch(log types.Log) (*AutonityUpgradeTestNewEpoch, error) {
			event := new(AutonityUpgradeTestNewEpoch)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewEpoch", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewScheduleIterator is returned from FilterNewSchedule and is used to iterate over the raw logs and unpacked data for NewSchedule events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewScheduleIterator struct {
			Event *AutonityUpgradeTestNewSchedule // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewScheduleIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewSchedule)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewSchedule)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewScheduleIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewScheduleIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewSchedule represents a NewSchedule event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewSchedule struct {
			ScheduleVault common.Address;
			Amount *big.Int;
			Start *big.Int;
			TotalDuration *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSchedule is a free log retrieval operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewSchedule(opts *bind.FilterOpts, scheduleVault []common.Address) (*AutonityUpgradeTestNewScheduleIterator, error) {

			var scheduleVaultRule []interface{}
			for _, scheduleVaultItem := range scheduleVault {
				scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
			}




			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewSchedule", scheduleVaultRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewScheduleIterator{contract: _AutonityUpgradeTest.contract, event: "NewSchedule", logs: logs, sub: sub}, nil
 		}

		// WatchNewSchedule is a free log subscription operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewSchedule(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewSchedule, scheduleVault []common.Address) (event.Subscription, error) {

			var scheduleVaultRule []interface{}
			for _, scheduleVaultItem := range scheduleVault {
				scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
			}




			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewSchedule", scheduleVaultRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewSchedule)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewSchedule", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSchedule is a log parse operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewSchedule(log types.Log) (*AutonityUpgradeTestNewSchedule, error) {
			event := new(AutonityUpgradeTestNewSchedule)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewSchedule", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestNewUnbondingRequestIterator is returned from FilterNewUnbondingRequest and is used to iterate over the raw logs and unpacked data for NewUnbondingRequest events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewUnbondingRequestIterator struct {
			Event *AutonityUpgradeTestNewUnbondingRequest // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestNewUnbondingRequest)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestNewUnbondingRequestIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestNewUnbondingRequest represents a NewUnbondingRequest event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestNewUnbondingRequest struct {
			Validator common.Address;
			Delegator common.Address;
			SelfBonded bool;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewUnbondingRequest is a free log retrieval operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterNewUnbondingRequest(opts *bind.FilterOpts, validator []common.Address, delegator []common.Address) (*AutonityUpgradeTestNewUnbondingRequestIterator, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestNewUnbondingRequestIterator{contract: _AutonityUpgradeTest.contract, event: "NewUnbondingRequest", logs: logs, sub: sub}, nil
 		}

		// WatchNewUnbondingRequest is a free log subscription operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchNewUnbondingRequest(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestNewUnbondingRequest, validator []common.Address, delegator []common.Address) (event.Subscription, error) {

			var validatorRule []interface{}
			for _, validatorItem := range validator {
				validatorRule = append(validatorRule, validatorItem)
			}
			var delegatorRule []interface{}
			for _, delegatorItem := range delegator {
				delegatorRule = append(delegatorRule, delegatorItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "NewUnbondingRequest", validatorRule, delegatorRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestNewUnbondingRequest)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewUnbondingRequest is a log parse operation binding the contract event 0x63f8870909f7c59c9c4932bf98dbd491647c8d2e89ca0a032aacdd943a13e2fc.
		//
		// Solidity: event NewUnbondingRequest(address indexed validator, address indexed delegator, bool selfBonded, uint256 amount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseNewUnbondingRequest(log types.Log) (*AutonityUpgradeTestNewUnbondingRequest, error) {
			event := new(AutonityUpgradeTestNewUnbondingRequest)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "NewUnbondingRequest", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestPausedValidatorIterator is returned from FilterPausedValidator and is used to iterate over the raw logs and unpacked data for PausedValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestPausedValidatorIterator struct {
			Event *AutonityUpgradeTestPausedValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestPausedValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestPausedValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestPausedValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestPausedValidator represents a PausedValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestPausedValidator struct {
			Treasury common.Address;
			Addr common.Address;
			EffectiveBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterPausedValidator is a free log retrieval operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterPausedValidator(opts *bind.FilterOpts, treasury []common.Address, addr []common.Address) (*AutonityUpgradeTestPausedValidatorIterator, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestPausedValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "PausedValidator", logs: logs, sub: sub}, nil
 		}

		// WatchPausedValidator is a free log subscription operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchPausedValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestPausedValidator, treasury []common.Address, addr []common.Address) (event.Subscription, error) {

			var treasuryRule []interface{}
			for _, treasuryItem := range treasury {
				treasuryRule = append(treasuryRule, treasuryItem)
			}
			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "PausedValidator", treasuryRule, addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestPausedValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParsePausedValidator is a log parse operation binding the contract event 0x75bdcdbe540758778e669d108fbcb7ede734f27f46e4e5525eeb8ecf91849a9c.
		//
		// Solidity: event PausedValidator(address indexed treasury, address indexed addr, uint256 effectiveBlock)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParsePausedValidator(log types.Log) (*AutonityUpgradeTestPausedValidator, error) {
			event := new(AutonityUpgradeTestPausedValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "PausedValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestRegisteredValidatorIterator is returned from FilterRegisteredValidator and is used to iterate over the raw logs and unpacked data for RegisteredValidator events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRegisteredValidatorIterator struct {
			Event *AutonityUpgradeTestRegisteredValidator // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestRegisteredValidator)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestRegisteredValidator)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestRegisteredValidatorIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestRegisteredValidator represents a RegisteredValidator event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRegisteredValidator struct {
			Treasury common.Address;
			Addr common.Address;
			OracleAddress common.Address;
			Enode string;
			LiquidStateContract common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRegisteredValidator is a free log retrieval operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterRegisteredValidator(opts *bind.FilterOpts) (*AutonityUpgradeTestRegisteredValidatorIterator, error) {







			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestRegisteredValidatorIterator{contract: _AutonityUpgradeTest.contract, event: "RegisteredValidator", logs: logs, sub: sub}, nil
 		}

		// WatchRegisteredValidator is a free log subscription operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchRegisteredValidator(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRegisteredValidator) (event.Subscription, error) {







			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "RegisteredValidator")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestRegisteredValidator)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRegisteredValidator is a log parse operation binding the contract event 0x8ad8bd2eb6950e5f332fd3a6dca48cb358ecfe3057848902b98cbdfe455c915c.
		//
		// Solidity: event RegisteredValidator(address treasury, address addr, address oracleAddress, string enode, address liquidStateContract)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseRegisteredValidator(log types.Log) (*AutonityUpgradeTestRegisteredValidator, error) {
			event := new(AutonityUpgradeTestRegisteredValidator)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "RegisteredValidator", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRewardedIterator struct {
			Event *AutonityUpgradeTestRewarded // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestRewardedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestRewarded)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestRewarded)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestRewardedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestRewardedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestRewarded represents a Rewarded event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestRewarded struct {
			Addr common.Address;
			AtnAmount *big.Int;
			NtnAmount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRewarded is a free log retrieval operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterRewarded(opts *bind.FilterOpts, addr []common.Address) (*AutonityUpgradeTestRewardedIterator, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestRewardedIterator{contract: _AutonityUpgradeTest.contract, event: "Rewarded", logs: logs, sub: sub}, nil
 		}

		// WatchRewarded is a free log subscription operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchRewarded(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestRewarded, addr []common.Address) (event.Subscription, error) {

			var addrRule []interface{}
			for _, addrItem := range addr {
				addrRule = append(addrRule, addrItem)
			}



			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Rewarded", addrRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestRewarded)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRewarded is a log parse operation binding the contract event 0x291e8ba3c0f4b0bd86e6e2346fcee1e7ca0975b1cc1886bfbc722d34f3f24d91.
		//
		// Solidity: event Rewarded(address indexed addr, uint256 atnAmount, uint256 ntnAmount)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseRewarded(log types.Log) (*AutonityUpgradeTestRewarded, error) {
			event := new(AutonityUpgradeTestRewarded)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Rewarded", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// AutonityUpgradeTestTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestTransferIterator struct {
			Event *AutonityUpgradeTestTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *AutonityUpgradeTestTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(AutonityUpgradeTestTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(AutonityUpgradeTestTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *AutonityUpgradeTestTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *AutonityUpgradeTestTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// AutonityUpgradeTestTransfer represents a Transfer event raised by the AutonityUpgradeTest contract.
		type AutonityUpgradeTestTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_AutonityUpgradeTest *AutonityUpgradeTest) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AutonityUpgradeTestTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &AutonityUpgradeTestTransferIterator{contract: _AutonityUpgradeTest.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AutonityUpgradeTestTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _AutonityUpgradeTest.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(AutonityUpgradeTestTransfer)
						if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_AutonityUpgradeTest *AutonityUpgradeTest) ParseTransfer(log types.Log) (*AutonityUpgradeTestTransfer, error) {
			event := new(AutonityUpgradeTestTransfer)
			if err := _AutonityUpgradeTest.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// BeneficiaryHandlerMetaData contains all meta data concerning the BeneficiaryHandler contract.
var BeneficiaryHandlerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"fca78d11": "getUniqueContractID(address,uint256)",
		"635bf933": "totalContracts(address)",
	},
}

// BeneficiaryHandlerABI is the input ABI used to generate the binding from.
// Deprecated: Use BeneficiaryHandlerMetaData.ABI instead.
var BeneficiaryHandlerABI = BeneficiaryHandlerMetaData.ABI

// Deprecated: Use BeneficiaryHandlerMetaData.Sigs instead.
// BeneficiaryHandlerFuncSigs maps the 4-byte function signature to its string representation.
var BeneficiaryHandlerFuncSigs = BeneficiaryHandlerMetaData.Sigs

// BeneficiaryHandler is an auto generated Go binding around an Ethereum contract.
type BeneficiaryHandler struct {
	*contract
}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandler) GetUniqueContractID(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _BeneficiaryHandler.call(opts, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_BeneficiaryHandler *BeneficiaryHandler) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _BeneficiaryHandler.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

		// BeneficiaryHandlerBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the BeneficiaryHandler contract.
		type BeneficiaryHandlerBeneficiaryChangedIterator struct {
			Event *BeneficiaryHandlerBeneficiaryChanged // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(BeneficiaryHandlerBeneficiaryChanged)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(BeneficiaryHandlerBeneficiaryChanged)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *BeneficiaryHandlerBeneficiaryChangedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// BeneficiaryHandlerBeneficiaryChanged represents a BeneficiaryChanged event raised by the BeneficiaryHandler contract.
		type BeneficiaryHandlerBeneficiaryChanged struct {
			NewBeneficiary common.Address;
			OldBeneficiary common.Address;
			ContractID *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
 		func (_BeneficiaryHandler *BeneficiaryHandler) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*BeneficiaryHandlerBeneficiaryChangedIterator, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _BeneficiaryHandler.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return &BeneficiaryHandlerBeneficiaryChangedIterator{contract: _BeneficiaryHandler.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
 		}

		// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_BeneficiaryHandler *BeneficiaryHandler) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *BeneficiaryHandlerBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _BeneficiaryHandler.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(BeneficiaryHandlerBeneficiaryChanged)
						if err := _BeneficiaryHandler.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_BeneficiaryHandler *BeneficiaryHandler) ParseBeneficiaryChanged(log types.Log) (*BeneficiaryHandlerBeneficiaryChanged, error) {
			event := new(BeneficiaryHandlerBeneficiaryChanged)
			if err := _BeneficiaryHandler.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// BytesLibMetaData contains all meta data concerning the BytesLib contract.
var BytesLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220831cbf1d093207c822ca0bb8903ee29676712d9a6abe4b340d9c5562c8a851e464736f6c63430008150033",
}

// BytesLibABI is the input ABI used to generate the binding from.
// Deprecated: Use BytesLibMetaData.ABI instead.
var BytesLibABI = BytesLibMetaData.ABI

// BytesLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BytesLibMetaData.Bin instead.
var BytesLibBin = BytesLibMetaData.Bin

// DeployBytesLib deploys a new Ethereum contract, binding an instance of BytesLib to it.
func (r *Runner) DeployBytesLib(opts *runOptions) (common.Address, uint64, *BytesLib, error) {
	parsed, err := BytesLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(BytesLibBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &BytesLib{contract: c}, nil
}

// BytesLib is an auto generated Go binding around an Ethereum contract.
type BytesLib struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ContractBaseMetaData contains all meta data concerning the ContractBase contract.
var ContractBaseMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"}]",
}

// ContractBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractBaseMetaData.ABI instead.
var ContractBaseABI = ContractBaseMetaData.ABI

// ContractBase is an auto generated Go binding around an Ethereum contract.
type ContractBase struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

		// ContractBaseFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the ContractBase contract.
		type ContractBaseFundsReleasedIterator struct {
			Event *ContractBaseFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ContractBaseFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ContractBaseFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ContractBaseFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ContractBaseFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ContractBaseFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ContractBaseFundsReleased represents a FundsReleased event raised by the ContractBase contract.
		type ContractBaseFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_ContractBase *ContractBase) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*ContractBaseFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _ContractBase.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &ContractBaseFundsReleasedIterator{contract: _ContractBase.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_ContractBase *ContractBase) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *ContractBaseFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _ContractBase.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ContractBaseFundsReleased)
						if err := _ContractBase.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_ContractBase *ContractBase) ParseFundsReleased(log types.Log) (*ContractBaseFundsReleased, error) {
			event := new(ContractBaseFundsReleased)
			if err := _ContractBase.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// DelegateCallerMetaData contains all meta data concerning the DelegateCaller contract.
var DelegateCallerMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b53667027e6f060c2e72e397db2d1fa9f22d2ce03e4bdabd9068999655b4a52c64736f6c63430008150033",
}

// DelegateCallerABI is the input ABI used to generate the binding from.
// Deprecated: Use DelegateCallerMetaData.ABI instead.
var DelegateCallerABI = DelegateCallerMetaData.ABI

// DelegateCallerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DelegateCallerMetaData.Bin instead.
var DelegateCallerBin = DelegateCallerMetaData.Bin

// DeployDelegateCaller deploys a new Ethereum contract, binding an instance of DelegateCaller to it.
func (r *Runner) DeployDelegateCaller(opts *runOptions) (common.Address, uint64, *DelegateCaller, error) {
	parsed, err := DelegateCallerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(DelegateCallerBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &DelegateCaller{contract: c}, nil
}

// DelegateCaller is an auto generated Go binding around an Ethereum contract.
type DelegateCaller struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// HelpersMetaData contains all meta data concerning the Helpers contract.
var HelpersMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f08ec662b3647da9f8d9adbbfb5ae571333af0be6a27cf20a23d7dccab133b1b64736f6c63430008150033",
}

// HelpersABI is the input ABI used to generate the binding from.
// Deprecated: Use HelpersMetaData.ABI instead.
var HelpersABI = HelpersMetaData.ABI

// HelpersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HelpersMetaData.Bin instead.
var HelpersBin = HelpersMetaData.Bin

// DeployHelpers deploys a new Ethereum contract, binding an instance of Helpers to it.
func (r *Runner) DeployHelpers(opts *runOptions) (common.Address, uint64, *Helpers, error) {
	parsed, err := HelpersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(HelpersBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Helpers{contract: c}, nil
}

// Helpers is an auto generated Go binding around an Ethereum contract.
type Helpers struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IACUMetaData contains all meta data concerning the IACU contract.
var IACUMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"a2e62045": "update()",
	},
}

// IACUABI is the input ABI used to generate the binding from.
// Deprecated: Use IACUMetaData.ABI instead.
var IACUABI = IACUMetaData.ABI

// Deprecated: Use IACUMetaData.Sigs instead.
// IACUFuncSigs maps the 4-byte function signature to its string representation.
var IACUFuncSigs = IACUMetaData.Sigs

// IACU is an auto generated Go binding around an Ethereum contract.
type IACU struct {
	*contract
}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACU) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IACU.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACU) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IACU.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// Update is a free data retrieval call for a paid mutator transaction binding the contract method 0xa2e62045.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function update() returns(bool status)
func (_IACU *IACU) CallUpdate(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IACU.call(opts, "update")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IACU *IACU) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IACU *IACU) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "setOracle", oracle)
	return consumed, err
}

// Update is a paid mutator transaction binding the contract method 0xa2e62045.
//
// Solidity: function update() returns(bool status)
func (_IACU *IACU) Update(opts *runOptions) (uint64, error) {
	_, consumed, err := _IACU.call(opts, "update")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IAccountabilityMetaData contains all meta data concerning the IAccountability contract.
var IAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InnocenceProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewAccusation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_offender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_severity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewFaultProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"SlashingEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnd\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_committee\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a8031a1d": "distributeRewards(address,uint256)",
		"6c9789b0": "finalize(bool)",
		"e08b14ed": "setCommittee(address[])",
		"6b5f444c": "setEpochPeriod(uint256)",
	},
}

// IAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAccountabilityMetaData.ABI instead.
var IAccountabilityABI = IAccountabilityMetaData.ABI

// Deprecated: Use IAccountabilityMetaData.Sigs instead.
// IAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var IAccountabilityFuncSigs = IAccountabilityMetaData.Sigs

// IAccountability is an auto generated Go binding around an Ethereum contract.
type IAccountability struct {
	*contract
}

// DistributeRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xa8031a1d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountability) CallDistributeRewards(r *Runner, opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "distributeRewards", _validator, _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountability) CallFinalize(r *Runner, opts *runOptions, _epochEnd bool) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "finalize", _epochEnd)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe08b14ed.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee(address[] _committee) returns()
func (_IAccountability *IAccountability) CallSetCommittee(r *Runner, opts *runOptions, _committee []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "setCommittee", _committee)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x6b5f444c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountability) CallSetEpochPeriod(r *Runner, opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IAccountability.call(opts, "setEpochPeriod", _newPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa8031a1d.
//
// Solidity: function distributeRewards(address _validator, uint256 _ntnReward) payable returns()
func (_IAccountability *IAccountability) DistributeRewards(opts *runOptions, _validator common.Address, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "distributeRewards", _validator, _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnd) returns()
func (_IAccountability *IAccountability) Finalize(opts *runOptions, _epochEnd bool) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "finalize", _epochEnd)
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe08b14ed.
//
// Solidity: function setCommittee(address[] _committee) returns()
func (_IAccountability *IAccountability) SetCommittee(opts *runOptions, _committee []common.Address) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "setCommittee", _committee)
	return consumed, err
}

// SetEpochPeriod is a paid mutator transaction binding the contract method 0x6b5f444c.
//
// Solidity: function setEpochPeriod(uint256 _newPeriod) returns()
func (_IAccountability *IAccountability) SetEpochPeriod(opts *runOptions, _newPeriod *big.Int) (uint64, error) {
	_, consumed, err := _IAccountability.call(opts, "setEpochPeriod", _newPeriod)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IAccountabilityInnocenceProvenIterator is returned from FilterInnocenceProven and is used to iterate over the raw logs and unpacked data for InnocenceProven events raised by the IAccountability contract.
		type IAccountabilityInnocenceProvenIterator struct {
			Event *IAccountabilityInnocenceProven // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityInnocenceProvenIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityInnocenceProven)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityInnocenceProven)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityInnocenceProvenIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityInnocenceProvenIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityInnocenceProven represents a InnocenceProven event raised by the IAccountability contract.
		type IAccountabilityInnocenceProven struct {
			Offender common.Address;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInnocenceProven is a free log retrieval operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
 		func (_IAccountability *IAccountability) FilterInnocenceProven(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityInnocenceProvenIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityInnocenceProvenIterator{contract: _IAccountability.contract, event: "InnocenceProven", logs: logs, sub: sub}, nil
 		}

		// WatchInnocenceProven is a free log subscription operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_IAccountability *IAccountability) WatchInnocenceProven(opts *bind.WatchOpts, sink chan<- *IAccountabilityInnocenceProven, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}


			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "InnocenceProven", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityInnocenceProven)
						if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInnocenceProven is a log parse operation binding the contract event 0x1fa96beb8dddcb7d4484dd00c4059e872439f7a474a2ecf49c430fc6e86c9e1f.
		//
		// Solidity: event InnocenceProven(address indexed _offender, uint256 _id)
		func (_IAccountability *IAccountability) ParseInnocenceProven(log types.Log) (*IAccountabilityInnocenceProven, error) {
			event := new(IAccountabilityInnocenceProven)
			if err := _IAccountability.contract.UnpackLog(event, "InnocenceProven", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilityNewAccusationIterator is returned from FilterNewAccusation and is used to iterate over the raw logs and unpacked data for NewAccusation events raised by the IAccountability contract.
		type IAccountabilityNewAccusationIterator struct {
			Event *IAccountabilityNewAccusation // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityNewAccusationIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityNewAccusation)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityNewAccusation)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityNewAccusationIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityNewAccusationIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityNewAccusation represents a NewAccusation event raised by the IAccountability contract.
		type IAccountabilityNewAccusation struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewAccusation is a free log retrieval operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_IAccountability *IAccountability) FilterNewAccusation(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewAccusationIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityNewAccusationIterator{contract: _IAccountability.contract, event: "NewAccusation", logs: logs, sub: sub}, nil
 		}

		// WatchNewAccusation is a free log subscription operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) WatchNewAccusation(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewAccusation, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewAccusation", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityNewAccusation)
						if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewAccusation is a log parse operation binding the contract event 0x2e8e354b41470731dafa7c3df150e9498a8d5b9c51ff0259fbf77f721ba40351.
		//
		// Solidity: event NewAccusation(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) ParseNewAccusation(log types.Log) (*IAccountabilityNewAccusation, error) {
			event := new(IAccountabilityNewAccusation)
			if err := _IAccountability.contract.UnpackLog(event, "NewAccusation", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilityNewFaultProofIterator is returned from FilterNewFaultProof and is used to iterate over the raw logs and unpacked data for NewFaultProof events raised by the IAccountability contract.
		type IAccountabilityNewFaultProofIterator struct {
			Event *IAccountabilityNewFaultProof // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilityNewFaultProofIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilityNewFaultProof)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilityNewFaultProof)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilityNewFaultProofIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilityNewFaultProofIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilityNewFaultProof represents a NewFaultProof event raised by the IAccountability contract.
		type IAccountabilityNewFaultProof struct {
			Offender common.Address;
			Severity *big.Int;
			Id *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewFaultProof is a free log retrieval operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
 		func (_IAccountability *IAccountability) FilterNewFaultProof(opts *bind.FilterOpts, _offender []common.Address) (*IAccountabilityNewFaultProofIterator, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return &IAccountabilityNewFaultProofIterator{contract: _IAccountability.contract, event: "NewFaultProof", logs: logs, sub: sub}, nil
 		}

		// WatchNewFaultProof is a free log subscription operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) WatchNewFaultProof(opts *bind.WatchOpts, sink chan<- *IAccountabilityNewFaultProof, _offender []common.Address) (event.Subscription, error) {

			var _offenderRule []interface{}
			for _, _offenderItem := range _offender {
				_offenderRule = append(_offenderRule, _offenderItem)
			}



			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "NewFaultProof", _offenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilityNewFaultProof)
						if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewFaultProof is a log parse operation binding the contract event 0x6b7783718ab8e152c193eb08bf76eed1191fcd1677a23a7fe9d338265aad132f.
		//
		// Solidity: event NewFaultProof(address indexed _offender, uint256 _severity, uint256 _id)
		func (_IAccountability *IAccountability) ParseNewFaultProof(log types.Log) (*IAccountabilityNewFaultProof, error) {
			event := new(IAccountabilityNewFaultProof)
			if err := _IAccountability.contract.UnpackLog(event, "NewFaultProof", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IAccountabilitySlashingEventIterator is returned from FilterSlashingEvent and is used to iterate over the raw logs and unpacked data for SlashingEvent events raised by the IAccountability contract.
		type IAccountabilitySlashingEventIterator struct {
			Event *IAccountabilitySlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IAccountabilitySlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IAccountabilitySlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IAccountabilitySlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IAccountabilitySlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IAccountabilitySlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IAccountabilitySlashingEvent represents a SlashingEvent event raised by the IAccountability contract.
		type IAccountabilitySlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			EventId *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterSlashingEvent is a free log retrieval operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
 		func (_IAccountability *IAccountability) FilterSlashingEvent(opts *bind.FilterOpts) (*IAccountabilitySlashingEventIterator, error) {







			logs, sub, err := _IAccountability.contract.FilterLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return &IAccountabilitySlashingEventIterator{contract: _IAccountability.contract, event: "SlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchSlashingEvent is a free log subscription operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_IAccountability *IAccountability) WatchSlashingEvent(opts *bind.WatchOpts, sink chan<- *IAccountabilitySlashingEvent) (event.Subscription, error) {







			logs, sub, err := _IAccountability.contract.WatchLogs(opts, "SlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IAccountabilitySlashingEvent)
						if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseSlashingEvent is a log parse operation binding the contract event 0x6617e612ea2d01b5a235997fa4963b56b1097df6f968a82972433e9ff852e0f9.
		//
		// Solidity: event SlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound, uint256 eventId)
		func (_IAccountability *IAccountability) ParseSlashingEvent(log types.Log) (*IAccountabilitySlashingEvent, error) {
			event := new(IAccountabilitySlashingEvent)
			if err := _IAccountability.contract.UnpackLog(event, "SlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IAutonityMetaData contains all meta data concerning the IAutonity contract.
var IAutonityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e7f43c68": "getOperator()",
		"833b1fce": "getOracle()",
	},
}

// IAutonityABI is the input ABI used to generate the binding from.
// Deprecated: Use IAutonityMetaData.ABI instead.
var IAutonityABI = IAutonityMetaData.ABI

// Deprecated: Use IAutonityMetaData.Sigs instead.
// IAutonityFuncSigs maps the 4-byte function signature to its string representation.
var IAutonityFuncSigs = IAutonityMetaData.Sigs

// IAutonity is an auto generated Go binding around an Ethereum contract.
type IAutonity struct {
	*contract
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IAutonity *IAutonity) GetOperator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IAutonity.call(opts, "getOperator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetOracle is a free data retrieval call binding the contract method 0x833b1fce.
//
// Solidity: function getOracle() view returns(address)
func (_IAutonity *IAutonity) GetOracle(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IAutonity.call(opts, "getOracle")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// Deprecated: Use IERC20MetaData.Sigs instead.
// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = IERC20MetaData.Sigs

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	*contract
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20) BalanceOf(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IERC20.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallTransfer(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "transfer", recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) CallTransferFrom(r *Runner, opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IERC20.call(opts, "transferFrom", sender, recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "approve", spender, amount)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) Transfer(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "transfer", recipient, amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20) TransferFrom(opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _IERC20.call(opts, "transferFrom", sender, recipient, amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
		type IERC20ApprovalIterator struct {
			Event *IERC20Approval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IERC20ApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IERC20Approval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IERC20Approval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IERC20ApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IERC20ApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IERC20Approval represents a Approval event raised by the IERC20 contract.
		type IERC20Approval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_IERC20 *IERC20) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_IERC20 *IERC20) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IERC20Approval)
						if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_IERC20 *IERC20) ParseApproval(log types.Log) (*IERC20Approval, error) {
			event := new(IERC20Approval)
			if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
		type IERC20TransferIterator struct {
			Event *IERC20Transfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IERC20TransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IERC20Transfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IERC20Transfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IERC20TransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IERC20TransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
		type IERC20Transfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_IERC20 *IERC20) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_IERC20 *IERC20) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IERC20Transfer)
						if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_IERC20 *IERC20) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
			event := new(IERC20Transfer)
			if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IInflationControllerMetaData contains all meta data concerning the IInflationController contract.
var IInflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
	},
}

// IInflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use IInflationControllerMetaData.ABI instead.
var IInflationControllerABI = IInflationControllerMetaData.ABI

// Deprecated: Use IInflationControllerMetaData.Sigs instead.
// IInflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var IInflationControllerFuncSigs = IInflationControllerMetaData.Sigs

// IInflationController is an auto generated Go binding around an Ethereum contract.
type IInflationController struct {
	*contract
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_IInflationController *IInflationController) CalculateSupplyDelta(opts *runOptions, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _IInflationController.call(opts, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ILiquidMetaData contains all meta data concerning the ILiquid contract.
var ILiquidMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
}

// ILiquidABI is the input ABI used to generate the binding from.
// Deprecated: Use ILiquidMetaData.ABI instead.
var ILiquidABI = ILiquidMetaData.ABI

// Deprecated: Use ILiquidMetaData.Sigs instead.
// ILiquidFuncSigs maps the 4-byte function signature to its string representation.
var ILiquidFuncSigs = ILiquidMetaData.Sigs

// ILiquid is an auto generated Go binding around an Ethereum contract.
type ILiquid struct {
	*contract
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ILiquid *ILiquid) Allowance(opts *runOptions, owner common.Address, spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ILiquid *ILiquid) BalanceOf(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_ILiquid *ILiquid) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_ILiquid *ILiquid) GetCommissionRate(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_ILiquid *ILiquid) GetTreasury(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getTreasury")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_ILiquid *ILiquid) GetTreasuryUnclaimedATN(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_ILiquid *ILiquid) GetValidator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "getValidator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquid) LockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ILiquid *ILiquid) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ILiquid *ILiquid) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ILiquid *ILiquid) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_ILiquid *ILiquid) UnclaimedRewards(opts *runOptions, _account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "unclaimedRewards", _account)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_ILiquid *ILiquid) UnlockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ILiquid.call(opts, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) CallApprove(r *Runner, opts *runOptions, spender common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "approve", spender, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallBurn(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "burn", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_ILiquid *ILiquid) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimTreasuryATN is a free data retrieval call for a paid mutator transaction binding the contract method 0xbd96102f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimTreasuryATN() returns()
func (_ILiquid *ILiquid) CallClaimTreasuryATN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "claimTreasuryATN")
	r.revertSnapshot(snap)
	return consumed, err

}

// Lock is a free data retrieval call for a paid mutator transaction binding the contract method 0x282d3fdf.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallLock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "lock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallMint(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "mint", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Redistribute is a free data retrieval call for a paid mutator transaction binding the contract method 0xa0ce552d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_ILiquid *ILiquid) CallRedistribute(r *Runner, opts *runOptions, _ntnReward *big.Int) (*big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "redistribute", _ntnReward)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SetCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x19fac8fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquid *ILiquid) CallSetCommissionRate(r *Runner, opts *runOptions, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "setCommissionRate", _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) CallTransfer(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "transfer", recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) CallTransferFrom(r *Runner, opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ILiquid.call(opts, "transferFrom", sender, recipient, amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unlock is a free data retrieval call for a paid mutator transaction binding the contract method 0x7eee288d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) CallUnlock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ILiquid.call(opts, "unlock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) Approve(opts *runOptions, spender common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "approve", spender, amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Burn(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "burn", _account, _amount)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_ILiquid *ILiquid) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "claimRewards")
	return consumed, err
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_ILiquid *ILiquid) ClaimTreasuryATN(opts *runOptions) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "claimTreasuryATN")
	return consumed, err
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Lock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "lock", _account, _amount)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Mint(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "mint", _account, _amount)
	return consumed, err
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_ILiquid *ILiquid) Redistribute(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "redistribute", _ntnReward)
	return consumed, err
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_ILiquid *ILiquid) SetCommissionRate(opts *runOptions, _rate *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "setCommissionRate", _rate)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) Transfer(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "transfer", recipient, amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ILiquid *ILiquid) TransferFrom(opts *runOptions, sender common.Address, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "transferFrom", sender, recipient, amount)
	return consumed, err
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_ILiquid *ILiquid) Unlock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _ILiquid.call(opts, "unlock", _account, _amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ILiquidApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ILiquid contract.
		type ILiquidApprovalIterator struct {
			Event *ILiquidApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ILiquidApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ILiquidApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ILiquidApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ILiquidApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ILiquidApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ILiquidApproval represents a Approval event raised by the ILiquid contract.
		type ILiquidApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_ILiquid *ILiquid) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ILiquidApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _ILiquid.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &ILiquidApprovalIterator{contract: _ILiquid.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_ILiquid *ILiquid) WatchApproval(opts *bind.WatchOpts, sink chan<- *ILiquidApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _ILiquid.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ILiquidApproval)
						if err := _ILiquid.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_ILiquid *ILiquid) ParseApproval(log types.Log) (*ILiquidApproval, error) {
			event := new(ILiquidApproval)
			if err := _ILiquid.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ILiquidTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ILiquid contract.
		type ILiquidTransferIterator struct {
			Event *ILiquidTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ILiquidTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ILiquidTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ILiquidTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ILiquidTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ILiquidTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ILiquidTransfer represents a Transfer event raised by the ILiquid contract.
		type ILiquidTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_ILiquid *ILiquid) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ILiquidTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _ILiquid.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &ILiquidTransferIterator{contract: _ILiquid.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_ILiquid *ILiquid) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ILiquidTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _ILiquid.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ILiquidTransfer)
						if err := _ILiquid.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_ILiquid *ILiquid) ParseTransfer(log types.Log) (*ILiquidTransfer, error) {
			event := new(ILiquidTransfer)
			if err := _ILiquid.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// IOmissionAccountabilityMetaData contains all meta data concerning the IOmissionAccountability contract.
var IOmissionAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeProposerRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnded\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getInactivityScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLookbackWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"_committee\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_treasuries\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochBlock\",\"type\":\"uint256\"}],\"name\":\"setEpochBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"eeb92233": "distributeProposerRewards(uint256)",
		"6c9789b0": "finalize(bool)",
		"c549176e": "getDelta()",
		"9a11e0e6": "getInactivityScore(address)",
		"5ca1809c": "getLookbackWindow()",
		"7f5e2f11": "getScaleFactor()",
		"53b1821b": "getTotalEffort()",
		"e3deef9c": "setCommittee((address,uint256,bytes)[],address[])",
		"c024cc2c": "setEpochBlock(uint256)",
		"b3ab15fb": "setOperator(address)",
	},
}

// IOmissionAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use IOmissionAccountabilityMetaData.ABI instead.
var IOmissionAccountabilityABI = IOmissionAccountabilityMetaData.ABI

// Deprecated: Use IOmissionAccountabilityMetaData.Sigs instead.
// IOmissionAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var IOmissionAccountabilityFuncSigs = IOmissionAccountabilityMetaData.Sigs

// IOmissionAccountability is an auto generated Go binding around an Ethereum contract.
type IOmissionAccountability struct {
	*contract
}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountability) GetDelta(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOmissionAccountability.call(opts, "getDelta")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountability) GetInactivityScore(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IOmissionAccountability.call(opts, "getInactivityScore", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountability) GetLookbackWindow(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOmissionAccountability.call(opts, "getLookbackWindow")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_IOmissionAccountability *IOmissionAccountability) GetScaleFactor(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOmissionAccountability.call(opts, "getScaleFactor")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_IOmissionAccountability *IOmissionAccountability) GetTotalEffort(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOmissionAccountability.call(opts, "getTotalEffort")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DistributeProposerRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xeeb92233.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_IOmissionAccountability *IOmissionAccountability) CallDistributeProposerRewards(r *Runner, opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOmissionAccountability.call(opts, "distributeProposerRewards", _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_IOmissionAccountability *IOmissionAccountability) CallFinalize(r *Runner, opts *runOptions, _epochEnded bool) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IOmissionAccountability.call(opts, "finalize", _epochEnded)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe3deef9c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_IOmissionAccountability *IOmissionAccountability) CallSetCommittee(r *Runner, opts *runOptions, _committee []AutonityCommitteeMember, _treasuries []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOmissionAccountability.call(opts, "setCommittee", _committee, _treasuries)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochBlock is a free data retrieval call for a paid mutator transaction binding the contract method 0xc024cc2c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_IOmissionAccountability *IOmissionAccountability) CallSetEpochBlock(r *Runner, opts *runOptions, _epochBlock *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOmissionAccountability.call(opts, "setEpochBlock", _epochBlock)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_IOmissionAccountability *IOmissionAccountability) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOmissionAccountability.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_IOmissionAccountability *IOmissionAccountability) DistributeProposerRewards(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _IOmissionAccountability.call(opts, "distributeProposerRewards", _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_IOmissionAccountability *IOmissionAccountability) Finalize(opts *runOptions, _epochEnded bool) (uint64, error) {
	_, consumed, err := _IOmissionAccountability.call(opts, "finalize", _epochEnded)
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_IOmissionAccountability *IOmissionAccountability) SetCommittee(opts *runOptions, _committee []AutonityCommitteeMember, _treasuries []common.Address) (uint64, error) {
	_, consumed, err := _IOmissionAccountability.call(opts, "setCommittee", _committee, _treasuries)
	return consumed, err
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_IOmissionAccountability *IOmissionAccountability) SetEpochBlock(opts *runOptions, _epochBlock *big.Int) (uint64, error) {
	_, consumed, err := _IOmissionAccountability.call(opts, "setEpochBlock", _epochBlock)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOmissionAccountability *IOmissionAccountability) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _IOmissionAccountability.call(opts, "setOperator", _operator)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IOracleMetaData contains all meta data concerning the IOracle contract.
var IOracleMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"33f98c77": "latestRoundData(string)",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"307de9b6": "vote(uint256,int256[],uint256)",
	},
}

// IOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use IOracleMetaData.ABI instead.
var IOracleABI = IOracleMetaData.ABI

// Deprecated: Use IOracleMetaData.Sigs instead.
// IOracleFuncSigs maps the 4-byte function signature to its string representation.
var IOracleFuncSigs = IOracleMetaData.Sigs

// IOracle is an auto generated Go binding around an Ethereum contract.
type IOracle struct {
	*contract
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_IOracle *IOracle) GetPrecision(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getPrecision")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_IOracle *IOracle) GetRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracle) GetRoundData(opts *runOptions, _round *big.Int, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[] _symbols)
func (_IOracle *IOracle) GetSymbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getSymbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_IOracle *IOracle) GetVotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_IOracle *IOracle) GetVoters(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "getVoters")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_IOracle *IOracle) LatestRoundData(opts *runOptions, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _IOracle.call(opts, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracle) CallFinalize(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IOracle.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracle) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSymbols is a free data retrieval call for a paid mutator transaction binding the contract method 0x8d4f75d2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracle) CallSetSymbols(r *Runner, opts *runOptions, _symbols []string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setSymbols", _symbols)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetVoters is a free data retrieval call for a paid mutator transaction binding the contract method 0x845023f2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracle) CallSetVoters(r *Runner, opts *runOptions, _newVoters []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "setVoters", _newVoters)
	r.revertSnapshot(snap)
	return consumed, err

}

// Vote is a free data retrieval call for a paid mutator transaction binding the contract method 0x307de9b6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracle) CallVote(r *Runner, opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IOracle.call(opts, "vote", _commit, _reports, _salt)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_IOracle *IOracle) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "finalize")
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_IOracle *IOracle) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setOperator", _operator)
	return consumed, err
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_IOracle *IOracle) SetSymbols(opts *runOptions, _symbols []string) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setSymbols", _symbols)
	return consumed, err
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_IOracle *IOracle) SetVoters(opts *runOptions, _newVoters []common.Address) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "setVoters", _newVoters)
	return consumed, err
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_IOracle *IOracle) Vote(opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	_, consumed, err := _IOracle.call(opts, "vote", _commit, _reports, _salt)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// IOracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the IOracle contract.
		type IOracleNewRoundIterator struct {
			Event *IOracleNewRound // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleNewRoundIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleNewRound)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleNewRound)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleNewRoundIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleNewRoundIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleNewRound represents a NewRound event raised by the IOracle contract.
		type IOracleNewRound struct {
			Round *big.Int;
			Height *big.Int;
			Timestamp *big.Int;
			VotePeriod *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
 		func (_IOracle *IOracle) FilterNewRound(opts *bind.FilterOpts) (*IOracleNewRoundIterator, error) {






			logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return &IOracleNewRoundIterator{contract: _IOracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
 		}

		// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_IOracle *IOracle) WatchNewRound(opts *bind.WatchOpts, sink chan<- *IOracleNewRound) (event.Subscription, error) {






			logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleNewRound)
						if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_IOracle *IOracle) ParseNewRound(log types.Log) (*IOracleNewRound, error) {
			event := new(IOracleNewRound)
			if err := _IOracle.contract.UnpackLog(event, "NewRound", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IOracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the IOracle contract.
		type IOracleNewSymbolsIterator struct {
			Event *IOracleNewSymbols // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleNewSymbolsIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleNewSymbols)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleNewSymbols)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleNewSymbolsIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleNewSymbolsIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleNewSymbols represents a NewSymbols event raised by the IOracle contract.
		type IOracleNewSymbols struct {
			Symbols []string;
			Round *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
 		func (_IOracle *IOracle) FilterNewSymbols(opts *bind.FilterOpts) (*IOracleNewSymbolsIterator, error) {




			logs, sub, err := _IOracle.contract.FilterLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return &IOracleNewSymbolsIterator{contract: _IOracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
 		}

		// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_IOracle *IOracle) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *IOracleNewSymbols) (event.Subscription, error) {




			logs, sub, err := _IOracle.contract.WatchLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleNewSymbols)
						if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_IOracle *IOracle) ParseNewSymbols(log types.Log) (*IOracleNewSymbols, error) {
			event := new(IOracleNewSymbols)
			if err := _IOracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// IOracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the IOracle contract.
		type IOracleVotedIterator struct {
			Event *IOracleVoted // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *IOracleVotedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(IOracleVoted)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(IOracleVoted)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *IOracleVotedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *IOracleVotedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// IOracleVoted represents a Voted event raised by the IOracle contract.
		type IOracleVoted struct {
			Voter common.Address;
			Votes []*big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
 		func (_IOracle *IOracle) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*IOracleVotedIterator, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _IOracle.contract.FilterLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return &IOracleVotedIterator{contract: _IOracle.contract, event: "Voted", logs: logs, sub: sub}, nil
 		}

		// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_IOracle *IOracle) WatchVoted(opts *bind.WatchOpts, sink chan<- *IOracleVoted, _voter []common.Address) (event.Subscription, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _IOracle.contract.WatchLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(IOracleVoted)
						if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_IOracle *IOracle) ParseVoted(log types.Log) (*IOracleVoted, error) {
			event := new(IOracleVoted)
			if err := _IOracle.contract.UnpackLog(event, "Voted", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// ISlasherMetaData contains all meta data concerning the ISlasher contract.
var ISlasherMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"f189d66c": "jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint8)",
		"c44a5b21": "jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint8)",
		"f774fac0": "slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256)",
		"64d61bbe": "slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint256,uint8,uint8)",
	},
}

// ISlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use ISlasherMetaData.ABI instead.
var ISlasherABI = ISlasherMetaData.ABI

// Deprecated: Use ISlasherMetaData.Sigs instead.
// ISlasherFuncSigs maps the 4-byte function signature to its string representation.
var ISlasherFuncSigs = ISlasherMetaData.Sigs

// ISlasher is an auto generated Go binding around an Ethereum contract.
type ISlasher struct {
	*contract
}

// Jail is a free data retrieval call for a paid mutator transaction binding the contract method 0xf189d66c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasher) CallJail(r *Runner, opts *runOptions, _val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (AutonityValidator, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ISlasher.call(opts, "jail", _val, _jailtime, _newJailedState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// Jailbound is a free data retrieval call for a paid mutator transaction binding the contract method 0xc44a5b21.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasher) CallJailbound(r *Runner, opts *runOptions, _val AutonityValidator, _newJailboundState uint8) (AutonityValidator, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ISlasher.call(opts, "jailbound", _val, _newJailboundState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// Slash is a free data retrieval call for a paid mutator transaction binding the contract method 0xf774fac0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_ISlasher *ISlasher) CallSlash(r *Runner, opts *runOptions, _val AutonityValidator, _slashingRate *big.Int) (AutonityValidator, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ISlasher.call(opts, "slash", _val, _slashingRate)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SlashAndJail is a free data retrieval call for a paid mutator transaction binding the contract method 0x64d61bbe.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_ISlasher *ISlasher) CallSlashAndJail(r *Runner, opts *runOptions, _val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (AutonityValidator, *big.Int, bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _ISlasher.call(opts, "slashAndJail", _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), *new(*big.Int), *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)
	return out0, out1, out2, consumed, err

}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasher) Jail(opts *runOptions, _val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (uint64, error) {
	_, consumed, err := _ISlasher.call(opts, "jail", _val, _jailtime, _newJailedState)
	return consumed, err
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_ISlasher *ISlasher) Jailbound(opts *runOptions, _val AutonityValidator, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _ISlasher.call(opts, "jailbound", _val, _newJailboundState)
	return consumed, err
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_ISlasher *ISlasher) Slash(opts *runOptions, _val AutonityValidator, _slashingRate *big.Int) (uint64, error) {
	_, consumed, err := _ISlasher.call(opts, "slash", _val, _slashingRate)
	return consumed, err
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_ISlasher *ISlasher) SlashAndJail(opts *runOptions, _val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _ISlasher.call(opts, "slashAndJail", _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IStabilizationMetaData contains all meta data concerning the IStabilization contract.
var IStabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
	},
}

// IStabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use IStabilizationMetaData.ABI instead.
var IStabilizationABI = IStabilizationMetaData.ABI

// Deprecated: Use IStabilizationMetaData.Sigs instead.
// IStabilizationFuncSigs maps the 4-byte function signature to its string representation.
var IStabilizationFuncSigs = IStabilizationMetaData.Sigs

// IStabilization is an auto generated Go binding around an Ethereum contract.
type IStabilization struct {
	*contract
}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilization) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStabilization.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilization) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStabilization.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_IStabilization *IStabilization) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _IStabilization.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_IStabilization *IStabilization) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _IStabilization.call(opts, "setOracle", oracle)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IStakeableVestingMetaData contains all meta data concerning the IStakeableVesting contract.
var IStakeableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
}

// IStakeableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakeableVestingMetaData.ABI instead.
var IStakeableVestingABI = IStakeableVestingMetaData.ABI

// Deprecated: Use IStakeableVestingMetaData.Sigs instead.
// IStakeableVestingFuncSigs maps the 4-byte function signature to its string representation.
var IStakeableVestingFuncSigs = IStakeableVestingMetaData.Sigs

// IStakeableVesting is an auto generated Go binding around an Ethereum contract.
type IStakeableVesting struct {
	*contract
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_IStakeableVesting *IStakeableVesting) ContractTotalValue(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_IStakeableVesting *IStakeableVesting) GetBeneficiary(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "getBeneficiary")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVesting) GetContract(opts *runOptions) (ContractBaseContract, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "getContract")

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_IStakeableVesting *IStakeableVesting) GetLinkedValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_IStakeableVesting *IStakeableVesting) GetManagerContractAddress(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVesting) LiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVesting) LockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_IStakeableVesting *IStakeableVesting) UnclaimedRewards(opts *runOptions, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "unclaimedRewards", _validator)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_IStakeableVesting *IStakeableVesting) UnclaimedRewards0(opts *runOptions) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "unclaimedRewards0")

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_IStakeableVesting *IStakeableVesting) UnlockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVesting) VestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "vestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_IStakeableVesting *IStakeableVesting) WithdrawableVestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _IStakeableVesting.call(opts, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVesting) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IStakeableVesting.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xe2bb8234.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_IStakeableVesting *IStakeableVesting) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "changeContractBeneficiary", _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_IStakeableVesting *IStakeableVesting) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards0 is a free data retrieval call for a paid mutator transaction binding the contract method 0xef5cfb8c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(address _validator) returns()
func (_IStakeableVesting *IStakeableVesting) CallClaimRewards0(r *Runner, opts *runOptions, _validator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "claimRewards0", _validator)
	r.revertSnapshot(snap)
	return consumed, err

}

// CreateContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae0a609.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_IStakeableVesting *IStakeableVesting) CallCreateContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x0b52f809.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllLNTN() returns()
func (_IStakeableVesting *IStakeableVesting) CallReleaseAllLNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "releaseAllLNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xb693fc09.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN() returns()
func (_IStakeableVesting *IStakeableVesting) CallReleaseAllNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "releaseAllNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x69d89575.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFunds() returns()
func (_IStakeableVesting *IStakeableVesting) CallReleaseFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "releaseFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3c6f2fa6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVesting) CallReleaseLNTN(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "releaseLNTN", _validator, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xfc028e36.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVesting) CallReleaseNTN(r *Runner, opts *runOptions, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "releaseNTN", _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x57895ca2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setManagerContract(address _managerContract) returns()
func (_IStakeableVesting *IStakeableVesting) CallSetManagerContract(r *Runner, opts *runOptions, _managerContract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "setManagerContract", _managerContract)
	r.revertSnapshot(snap)
	return consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVesting) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IStakeableVesting.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0xd06117ff.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFunds() returns()
func (_IStakeableVesting *IStakeableVesting) CallUpdateFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _IStakeableVesting.call(opts, "updateFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateFundsAndGetContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x46e1448d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVesting) CallUpdateFundsAndGetContract(r *Runner, opts *runOptions) (ContractBaseContract, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _IStakeableVesting.call(opts, "updateFundsAndGetContract")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVesting) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_IStakeableVesting *IStakeableVesting) ChangeContractBeneficiary(opts *runOptions, _recipient common.Address) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "changeContractBeneficiary", _recipient)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_IStakeableVesting *IStakeableVesting) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "claimRewards")
	return consumed, err
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_IStakeableVesting *IStakeableVesting) ClaimRewards0(opts *runOptions, _validator common.Address) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "claimRewards0", _validator)
	return consumed, err
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_IStakeableVesting *IStakeableVesting) CreateContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_IStakeableVesting *IStakeableVesting) ReleaseAllLNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "releaseAllLNTN")
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_IStakeableVesting *IStakeableVesting) ReleaseAllNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "releaseAllNTN")
	return consumed, err
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_IStakeableVesting *IStakeableVesting) ReleaseFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "releaseFunds")
	return consumed, err
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVesting) ReleaseLNTN(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "releaseLNTN", _validator, _amount)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_IStakeableVesting *IStakeableVesting) ReleaseNTN(opts *runOptions, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "releaseNTN", _amount)
	return consumed, err
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_IStakeableVesting *IStakeableVesting) SetManagerContract(opts *runOptions, _managerContract common.Address) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "setManagerContract", _managerContract)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_IStakeableVesting *IStakeableVesting) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_IStakeableVesting *IStakeableVesting) UpdateFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "updateFunds")
	return consumed, err
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_IStakeableVesting *IStakeableVesting) UpdateFundsAndGetContract(opts *runOptions) (uint64, error) {
	_, consumed, err := _IStakeableVesting.call(opts, "updateFundsAndGetContract")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// IStakeableVestingManagerMetaData contains all meta data concerning the IStakeableVestingManager contract.
var IStakeableVestingManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"stakeableVestingLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a04ab5f8": "stakeableVestingLogicContract()",
	},
}

// IStakeableVestingManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakeableVestingManagerMetaData.ABI instead.
var IStakeableVestingManagerABI = IStakeableVestingManagerMetaData.ABI

// Deprecated: Use IStakeableVestingManagerMetaData.Sigs instead.
// IStakeableVestingManagerFuncSigs maps the 4-byte function signature to its string representation.
var IStakeableVestingManagerFuncSigs = IStakeableVestingManagerMetaData.Sigs

// IStakeableVestingManager is an auto generated Go binding around an Ethereum contract.
type IStakeableVestingManager struct {
	*contract
}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_IStakeableVestingManager *IStakeableVestingManager) StakeableVestingLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _IStakeableVestingManager.call(opts, "stakeableVestingLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ISupplyControlMetaData contains all meta data concerning the ISupplyControl contract.
var ISupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
}

// ISupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use ISupplyControlMetaData.ABI instead.
var ISupplyControlABI = ISupplyControlMetaData.ABI

// Deprecated: Use ISupplyControlMetaData.Sigs instead.
// ISupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var ISupplyControlFuncSigs = ISupplyControlMetaData.Sigs

// ISupplyControl is an auto generated Go binding around an Ethereum contract.
type ISupplyControl struct {
	*contract
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControl) AvailableSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "availableSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_ISupplyControl *ISupplyControl) Stabilizer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "stabilizer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ISupplyControl *ISupplyControl) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _ISupplyControl.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x44df8e70.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControl) CallBurn(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "burn")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControl) CallMint(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "mint", recipient, amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControl) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizer is a free data retrieval call for a paid mutator transaction binding the contract method 0xdb7f521a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControl) CallSetStabilizer(r *Runner, opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _ISupplyControl.call(opts, "setStabilizer", stabilizer_)
	r.revertSnapshot(snap)
	return consumed, err

}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_ISupplyControl *ISupplyControl) Burn(opts *runOptions) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "burn")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_ISupplyControl *ISupplyControl) Mint(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "mint", recipient, amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_ISupplyControl *ISupplyControl) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "setOperator", operator)
	return consumed, err
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_ISupplyControl *ISupplyControl) SetStabilizer(opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	_, consumed, err := _ISupplyControl.call(opts, "setStabilizer", stabilizer_)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// ISupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the ISupplyControl contract.
		type ISupplyControlBurnIterator struct {
			Event *ISupplyControlBurn // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ISupplyControlBurnIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ISupplyControlBurn)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ISupplyControlBurn)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ISupplyControlBurnIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ISupplyControlBurnIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ISupplyControlBurn represents a Burn event raised by the ISupplyControl contract.
		type ISupplyControlBurn struct {
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
 		func (_ISupplyControl *ISupplyControl) FilterBurn(opts *bind.FilterOpts) (*ISupplyControlBurnIterator, error) {



			logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return &ISupplyControlBurnIterator{contract: _ISupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
 		}

		// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_ISupplyControl *ISupplyControl) WatchBurn(opts *bind.WatchOpts, sink chan<- *ISupplyControlBurn) (event.Subscription, error) {



			logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ISupplyControlBurn)
						if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_ISupplyControl *ISupplyControl) ParseBurn(log types.Log) (*ISupplyControlBurn, error) {
			event := new(ISupplyControlBurn)
			if err := _ISupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// ISupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the ISupplyControl contract.
		type ISupplyControlMintIterator struct {
			Event *ISupplyControlMint // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ISupplyControlMintIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ISupplyControlMint)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ISupplyControlMint)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ISupplyControlMintIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ISupplyControlMintIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ISupplyControlMint represents a Mint event raised by the ISupplyControl contract.
		type ISupplyControlMint struct {
			Recipient common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
 		func (_ISupplyControl *ISupplyControl) FilterMint(opts *bind.FilterOpts) (*ISupplyControlMintIterator, error) {




			logs, sub, err := _ISupplyControl.contract.FilterLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return &ISupplyControlMintIterator{contract: _ISupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
 		}

		// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_ISupplyControl *ISupplyControl) WatchMint(opts *bind.WatchOpts, sink chan<- *ISupplyControlMint) (event.Subscription, error) {




			logs, sub, err := _ISupplyControl.contract.WatchLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ISupplyControlMint)
						if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_ISupplyControl *ISupplyControl) ParseMint(log types.Log) (*ISupplyControlMint, error) {
			event := new(ISupplyControlMint)
			if err := _ISupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// InflationControllerMetaData contains all meta data concerning the InflationController contract.
var InflationControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"internalType\":\"structInflationController.Params\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Convert_Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Div_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Div_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Mul_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Mul_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflationReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEpochTime\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"inflationRateInitial\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationRateTransition\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationCurveConvexity\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationTransitionPeriod\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"inflationReserveDecayRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"92eff3cd": "calculateSupplyDelta(uint256,uint256,uint256,uint256)",
		"cff0ab96": "params()",
	},
	Bin: "0x608060405234801561001057600080fd5b506040516110c43803806110c483398101604081905261002f9161005c565b805160005560208101516001556040810151600255606081015160035560800151600455426005556100d9565b600060a0828403121561006e57600080fd5b60405160a081016001600160401b038111828210171561009e57634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b610fdc806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806392eff3cd1461003b578063cff0ab9614610061575b600080fd5b61004e610049366004610e97565b6100a3565b6040519081526020015b60405180910390f35b60005460015460025460035460045461007b949392919085565b604080519586526020860194909452928401919091526060830152608082015260a001610058565b6000806100bc600554856100b79190610edf565b610150565b905060006100d1600554856100b79190610edf565b60035490915081136100f1576100e88783836101da565b92505050610148565b60035482121561013857600061010d88846000600301546101da565b9050600061012188600060030154856102da565b905061012d8183610ef2565b945050505050610148565b6101438683836102da565b925050505b949350505050565b6000610168670de0b6b3a7640000600160ff1b610f1b565b821215610190576040516399474eeb60e01b8152600481018390526024015b60405180910390fd5b6101a9670de0b6b3a76400006001600160ff1b03610f1b565b8213156101cc57604051639d58109160e01b815260048101839052602401610187565b50670de0b6b3a76400000290565b6000806101f46000600201546101f06000610150565b1490565b156102305760005460015461022991906102249061021c9061021690846102fe565b8861030d565b6003546103d8565b610485565b90506102a2565b600061024461021c6000600201548761030d565b9050600061027c6102666102578461049a565b6102616001610150565b6102fe565b61027761025760006002015461049a565b6103d8565b60005460015491925061029d916102249061029790836102fe565b8461030d565b925050505b60006102c36102b9836102b489610150565b61030d565b6102b486886102fe565b90506102ce816104ef565b925050505b9392505050565b60006101486102f66102ee6102b987610150565b60045461030d565b6104ef565b90565b60006102d36102fb8385610f57565b60008282600160ff1b8214806103265750600160ff1b81145b156103445760405163a6070c2560e01b815260040160405180910390fd5b60008060008412610355578361035a565b836000035b91506000831261036a578261036f565b826000035b9050600061037d8383610503565b90506001600160ff1b038111156103b15760405163120b5b4360e01b81526004810189905260248101889052604401610187565b600019858518136103cb816103c7578260000390565b8290565b9998505050505050505050565b60008282600160ff1b8214806103f15750600160ff1b81145b1561040f576040516309fe2b4560e41b815260040160405180910390fd5b600080600084126104205783610425565b836000035b915060008312610435578261043a565b826000035b9050600061045183670de0b6b3a7640000846105b9565b90506001600160ff1b038111156103b15760405163d49c26b360e01b81526004810189905260248101889052604401610187565b60006102d36102fb8385610f7e565b92915050565b600081680736ea4425c11ac6308113156104ca5760405163ca7ec0c560e01b815260048101849052602401610187565b6714057b7ef767814f81026101486104ea670de0b6b3a7640000835b0590565b61068d565b6000610494670de0b6b3a764000083610f1b565b60008080600019848609848602925082811083820303915050806000036105375750670de0b6b3a764000090049050610494565b670de0b6b3a7640000811061056957604051635173648d60e01b81526004810186905260248101859052604401610187565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b60008080600019858709858702925082811083820303915050806000036105f3578382816105e9576105e9610f05565b04925050506102d3565b83811061062457604051630c740aef60e31b8152600481018790526024810186905260448101859052606401610187565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081818112156106ea5768033dd1780914b97114198112156106b35750600092915050565b6106e36106c66102fb6104ea8460000390565b6ec097ce7bc90715b34b9f1000000000816104e6576104e6610f05565b9150610731565b680a688906bd8affffff81131561071657604051626c1a0560e31b815260048101849052602401610187565b670de0b6b3a7640000604082901b056101486102fb82610737565b50919050565b600160bf1b67ff000000000000008216156108445767800000000000000082161561076b5768016a09e667f3bcc9090260401c5b67400000000000000082161561078a576801306fe0a31b7152df0260401c5b6720000000000000008216156107a9576801172b83c7d517adce0260401c5b6710000000000000008216156107c85768010b5586cf9890f62a0260401c5b6708000000000000008216156107e7576801059b0d31585743ae0260401c5b67040000000000000082161561080657680102c9a3e778060ee70260401c5b6702000000000000008216156108255768010163da9fb33356d80260401c5b67010000000000000082161561084457680100b1afa5abcbed610260401c5b66ff0000000000008216156109435766800000000000008216156108715768010058c86da1c09ea20260401c5b664000000000000082161561088f576801002c605e2e8cec500260401c5b66200000000000008216156108ad57680100162f3904051fa10260401c5b66100000000000008216156108cb576801000b175effdc76ba0260401c5b66080000000000008216156108e957680100058ba01fb9f96d0260401c5b66040000000000008216156109075768010002c5cc37da94920260401c5b6602000000000000821615610925576801000162e525ee05470260401c5b66010000000000008216156109435768010000b17255775c040260401c5b65ff0000000000821615610a39576580000000000082161561096e576801000058b91b5bc9ae0260401c5b6540000000000082161561098b57680100002c5c89d5ec6d0260401c5b652000000000008216156109a85768010000162e43f4f8310260401c5b651000000000008216156109c557680100000b1721bcfc9a0260401c5b650800000000008216156109e25768010000058b90cf1e6e0260401c5b650400000000008216156109ff576801000002c5c863b73f0260401c5b65020000000000821615610a1c57680100000162e430e5a20260401c5b65010000000000821615610a39576801000000b1721835510260401c5b64ff00000000821615610b2657648000000000821615610a6257680100000058b90c0b490260401c5b644000000000821615610a7e5768010000002c5c8601cc0260401c5b642000000000821615610a9a576801000000162e42fff00260401c5b641000000000821615610ab65768010000000b17217fbb0260401c5b640800000000821615610ad2576801000000058b90bfce0260401c5b640400000000821615610aee57680100000002c5c85fe30260401c5b640200000000821615610b0a5768010000000162e42ff10260401c5b640100000000821615610b2657680100000000b17217f80260401c5b63ff000000821615610c0a576380000000821615610b4d5768010000000058b90bfc0260401c5b6340000000821615610b68576801000000002c5c85fe0260401c5b6320000000821615610b8357680100000000162e42ff0260401c5b6310000000821615610b9e576801000000000b17217f0260401c5b6308000000821615610bb957680100000000058b90c00260401c5b6304000000821615610bd45768010000000002c5c8600260401c5b6302000000821615610bef576801000000000162e4300260401c5b6301000000821615610c0a5768010000000000b172180260401c5b62ff0000821615610ce55762800000821615610c2f576801000000000058b90c0260401c5b62400000821615610c4957680100000000002c5c860260401c5b62200000821615610c635768010000000000162e430260401c5b62100000821615610c7d57680100000000000b17210260401c5b62080000821615610c975768010000000000058b910260401c5b62040000821615610cb1576801000000000002c5c80260401c5b62020000821615610ccb57680100000000000162e40260401c5b62010000821615610ce5576801000000000000b1720260401c5b61ff00821615610db757618000821615610d0857680100000000000058b90260401c5b614000821615610d215768010000000000002c5d0260401c5b612000821615610d3a576801000000000000162e0260401c5b611000821615610d535768010000000000000b170260401c5b610800821615610d6c576801000000000000058c0260401c5b610400821615610d8557680100000000000002c60260401c5b610200821615610d9e57680100000000000001630260401c5b610100821615610db757680100000000000000b10260401c5b60ff821615610e80576080821615610dd857680100000000000000590260401c5b6040821615610df0576801000000000000002c0260401c5b6020821615610e0857680100000000000000160260401c5b6010821615610e20576801000000000000000b0260401c5b6008821615610e3857680100000000000000060260401c5b6004821615610e5057680100000000000000030260401c5b6002821615610e6857680100000000000000010260401c5b6001821615610e8057680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b60008060008060808587031215610ead57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561049457610494610ec9565b8082018082111561049457610494610ec9565b634e487b7160e01b600052601260045260246000fd5b600082610f3857634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610f5257610f52610ec9565b500590565b8181036000831280158383131683831282161715610f7757610f77610ec9565b5092915050565b8082018281126000831280158216821582161715610f9e57610f9e610ec9565b50509291505056fea2646970667358221220504f3314895e62f29ab0c4b64de9dfae65546185267645a44e47d1b435d782dc64736f6c63430008150033",
}

// InflationControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use InflationControllerMetaData.ABI instead.
var InflationControllerABI = InflationControllerMetaData.ABI

// Deprecated: Use InflationControllerMetaData.Sigs instead.
// InflationControllerFuncSigs maps the 4-byte function signature to its string representation.
var InflationControllerFuncSigs = InflationControllerMetaData.Sigs

// InflationControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InflationControllerMetaData.Bin instead.
var InflationControllerBin = InflationControllerMetaData.Bin

// DeployInflationController deploys a new Ethereum contract, binding an instance of InflationController to it.
func (r *Runner) DeployInflationController(opts *runOptions, _params InflationControllerParams) (common.Address, uint64, *InflationController, error) {
	parsed, err := InflationControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(InflationControllerBin), _params)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &InflationController{contract: c}, nil
}

// InflationController is an auto generated Go binding around an Ethereum contract.
type InflationController struct {
	*contract
}

// CalculateSupplyDelta is a free data retrieval call binding the contract method 0x92eff3cd.
//
// Solidity: function calculateSupplyDelta(uint256 _currentSupply, uint256 _inflationReserve, uint256 _lastEpochTime, uint256 _currentEpochTime) view returns(uint256)
func (_InflationController *InflationController) CalculateSupplyDelta(opts *runOptions, _currentSupply *big.Int, _inflationReserve *big.Int, _lastEpochTime *big.Int, _currentEpochTime *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _InflationController.call(opts, "calculateSupplyDelta", _currentSupply, _inflationReserve, _lastEpochTime, _currentEpochTime)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(int256 inflationRateInitial, int256 inflationRateTransition, int256 inflationCurveConvexity, int256 inflationTransitionPeriod, int256 inflationReserveDecayRate)
func (_InflationController *InflationController) Params(opts *runOptions) (struct {
	InflationRateInitial      *big.Int
	InflationRateTransition   *big.Int
	InflationCurveConvexity   *big.Int
	InflationTransitionPeriod *big.Int
	InflationReserveDecayRate *big.Int
}, uint64, error) {
	out, consumed, err := _InflationController.call(opts, "params")

	outstruct := new(struct {
		InflationRateInitial      *big.Int
		InflationRateTransition   *big.Int
		InflationCurveConvexity   *big.Int
		InflationTransitionPeriod *big.Int
		InflationReserveDecayRate *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InflationRateInitial = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.InflationRateTransition = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.InflationCurveConvexity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.InflationTransitionPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.InflationReserveDecayRate = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidLogicMetaData contains all meta data concerning the LiquidLogic contract.
var LiquidLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COMMISSION_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_UNIT_RECIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryATN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryUnclaimedATN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unclaimedATN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedNTN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"2f2c3f2e": "COMMISSION_RATE_PRECISION()",
		"187cf4d7": "FEE_FACTOR_UNIT_RECIP()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"9dc29fac": "burn(address,uint256)",
		"372500ab": "claimRewards()",
		"bd96102f": "claimTreasuryATN()",
		"313ce567": "decimals()",
		"3e4eb36c": "getCommissionRate()",
		"3b19e84a": "getTreasury()",
		"1eeffad0": "getTreasuryUnclaimedATN()",
		"1195e07e": "getValidator()",
		"282d3fdf": "lock(address,uint256)",
		"59355736": "lockedBalanceOf(address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"a0ce552d": "redistribute(uint256)",
		"19fac8fd": "setCommissionRate(uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"949813b8": "unclaimedRewards(address)",
		"7eee288d": "unlock(address,uint256)",
		"84955c88": "unlockedBalanceOf(address)",
	},
	Bin: "",
}

// LiquidLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidLogicMetaData.ABI instead.
var LiquidLogicABI = LiquidLogicMetaData.ABI

// Deprecated: Use LiquidLogicMetaData.Sigs instead.
// LiquidLogicFuncSigs maps the 4-byte function signature to its string representation.
var LiquidLogicFuncSigs = LiquidLogicMetaData.Sigs

// LiquidLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidLogicMetaData.Bin instead.
var LiquidLogicBin = LiquidLogicMetaData.Bin

// DeployLiquidLogic deploys a new Ethereum contract, binding an instance of LiquidLogic to it.
func (r *Runner) DeployLiquidLogic(opts *runOptions) (common.Address, uint64, *LiquidLogic, error) {
	parsed, err := LiquidLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidLogicBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidLogic{contract: c}, nil
}

// LiquidLogic is an auto generated Go binding around an Ethereum contract.
type LiquidLogic struct {
	*contract
}

// COMMISSIONRATEPRECISION is a free data retrieval call binding the contract method 0x2f2c3f2e.
//
// Solidity: function COMMISSION_RATE_PRECISION() view returns(uint256)
func (_LiquidLogic *LiquidLogic) COMMISSIONRATEPRECISION(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "COMMISSION_RATE_PRECISION")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// FEEFACTORUNITRECIP is a free data retrieval call binding the contract method 0x187cf4d7.
//
// Solidity: function FEE_FACTOR_UNIT_RECIP() view returns(uint256)
func (_LiquidLogic *LiquidLogic) FEEFACTORUNITRECIP(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "FEE_FACTOR_UNIT_RECIP")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _owner, address _spender) view returns(uint256)
func (_LiquidLogic *LiquidLogic) Allowance(opts *runOptions, _owner common.Address, _spender common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "allowance", _owner, _spender)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) BalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "balanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_LiquidLogic *LiquidLogic) Decimals(opts *runOptions) (uint8, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "decimals")

	if err != nil {
		return *new(uint8), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	return out0, consumed, err

}

// GetCommissionRate is a free data retrieval call binding the contract method 0x3e4eb36c.
//
// Solidity: function getCommissionRate() view returns(uint256)
func (_LiquidLogic *LiquidLogic) GetCommissionRate(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getCommissionRate")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTreasury is a free data retrieval call binding the contract method 0x3b19e84a.
//
// Solidity: function getTreasury() view returns(address)
func (_LiquidLogic *LiquidLogic) GetTreasury(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getTreasury")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetTreasuryUnclaimedATN is a free data retrieval call binding the contract method 0x1eeffad0.
//
// Solidity: function getTreasuryUnclaimedATN() view returns(uint256)
func (_LiquidLogic *LiquidLogic) GetTreasuryUnclaimedATN(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getTreasuryUnclaimedATN")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1195e07e.
//
// Solidity: function getValidator() view returns(address)
func (_LiquidLogic *LiquidLogic) GetValidator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "getValidator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LockedBalanceOf is a free data retrieval call binding the contract method 0x59355736.
//
// Solidity: function lockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) LockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "lockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_LiquidLogic *LiquidLogic) Name(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "name")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_LiquidLogic *LiquidLogic) Symbol(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "symbol")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_LiquidLogic *LiquidLogic) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _account) view returns(uint256 _unclaimedATN, uint256 _unclaimedNTN)
func (_LiquidLogic *LiquidLogic) UnclaimedRewards(opts *runOptions, _account common.Address) (struct {
	UnclaimedATN *big.Int
	UnclaimedNTN *big.Int
}, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "unclaimedRewards", _account)

	outstruct := new(struct {
		UnclaimedATN *big.Int
		UnclaimedNTN *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.UnclaimedATN = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnclaimedNTN = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedBalanceOf is a free data retrieval call binding the contract method 0x84955c88.
//
// Solidity: function unlockedBalanceOf(address _delegator) view returns(uint256)
func (_LiquidLogic *LiquidLogic) UnlockedBalanceOf(opts *runOptions, _delegator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _LiquidLogic.call(opts, "unlockedBalanceOf", _delegator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Approve is a free data retrieval call for a paid mutator transaction binding the contract method 0x095ea7b3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) CallApprove(r *Runner, opts *runOptions, _spender common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "approve", _spender, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x9dc29fac.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallBurn(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "burn", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogic) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimTreasuryATN is a free data retrieval call for a paid mutator transaction binding the contract method 0xbd96102f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogic) CallClaimTreasuryATN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "claimTreasuryATN")
	r.revertSnapshot(snap)
	return consumed, err

}

// Lock is a free data retrieval call for a paid mutator transaction binding the contract method 0x282d3fdf.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallLock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "lock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallMint(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "mint", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Redistribute is a free data retrieval call for a paid mutator transaction binding the contract method 0xa0ce552d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogic) CallRedistribute(r *Runner, opts *runOptions, _ntnReward *big.Int) (*big.Int, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "redistribute", _ntnReward)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SetCommissionRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x19fac8fd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogic) CallSetCommissionRate(r *Runner, opts *runOptions, _rate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "setCommissionRate", _rate)
	r.revertSnapshot(snap)
	return consumed, err

}

// Transfer is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9059cbb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogic) CallTransfer(r *Runner, opts *runOptions, _to common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "transfer", _to, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// TransferFrom is a free data retrieval call for a paid mutator transaction binding the contract method 0x23b872dd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) CallTransferFrom(r *Runner, opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _LiquidLogic.call(opts, "transferFrom", _sender, _recipient, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Unlock is a free data retrieval call for a paid mutator transaction binding the contract method 0x7eee288d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) CallUnlock(r *Runner, opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _LiquidLogic.call(opts, "unlock", _account, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) Approve(opts *runOptions, _spender common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "approve", _spender, _amount)
	return consumed, err
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Burn(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "burn", _account, _amount)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_LiquidLogic *LiquidLogic) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "claimRewards")
	return consumed, err
}

// ClaimTreasuryATN is a paid mutator transaction binding the contract method 0xbd96102f.
//
// Solidity: function claimTreasuryATN() returns()
func (_LiquidLogic *LiquidLogic) ClaimTreasuryATN(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "claimTreasuryATN")
	return consumed, err
}

// Lock is a paid mutator transaction binding the contract method 0x282d3fdf.
//
// Solidity: function lock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Lock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "lock", _account, _amount)
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Mint(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "mint", _account, _amount)
	return consumed, err
}

// Redistribute is a paid mutator transaction binding the contract method 0xa0ce552d.
//
// Solidity: function redistribute(uint256 _ntnReward) payable returns(uint256, uint256)
func (_LiquidLogic *LiquidLogic) Redistribute(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "redistribute", _ntnReward)
	return consumed, err
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 _rate) returns()
func (_LiquidLogic *LiquidLogic) SetCommissionRate(opts *runOptions, _rate *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "setCommissionRate", _rate)
	return consumed, err
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool _success)
func (_LiquidLogic *LiquidLogic) Transfer(opts *runOptions, _to common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "transfer", _to, _amount)
	return consumed, err
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _sender, address _recipient, uint256 _amount) returns(bool)
func (_LiquidLogic *LiquidLogic) TransferFrom(opts *runOptions, _sender common.Address, _recipient common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "transferFrom", _sender, _recipient, _amount)
	return consumed, err
}

// Unlock is a paid mutator transaction binding the contract method 0x7eee288d.
//
// Solidity: function unlock(address _account, uint256 _amount) returns()
func (_LiquidLogic *LiquidLogic) Unlock(opts *runOptions, _account common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "unlock", _account, _amount)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidLogic *LiquidLogic) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidLogic *LiquidLogic) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidLogic.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// LiquidLogicApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the LiquidLogic contract.
		type LiquidLogicApprovalIterator struct {
			Event *LiquidLogicApproval // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *LiquidLogicApprovalIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(LiquidLogicApproval)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(LiquidLogicApproval)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *LiquidLogicApprovalIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *LiquidLogicApprovalIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// LiquidLogicApproval represents a Approval event raised by the LiquidLogic contract.
		type LiquidLogicApproval struct {
			Owner common.Address;
			Spender common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
 		func (_LiquidLogic *LiquidLogic) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*LiquidLogicApprovalIterator, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return &LiquidLogicApprovalIterator{contract: _LiquidLogic.contract, event: "Approval", logs: logs, sub: sub}, nil
 		}

		// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_LiquidLogic *LiquidLogic) WatchApproval(opts *bind.WatchOpts, sink chan<- *LiquidLogicApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

			var ownerRule []interface{}
			for _, ownerItem := range owner {
				ownerRule = append(ownerRule, ownerItem)
			}
			var spenderRule []interface{}
			for _, spenderItem := range spender {
				spenderRule = append(spenderRule, spenderItem)
			}


			logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(LiquidLogicApproval)
						if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
		//
		// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
		func (_LiquidLogic *LiquidLogic) ParseApproval(log types.Log) (*LiquidLogicApproval, error) {
			event := new(LiquidLogicApproval)
			if err := _LiquidLogic.contract.UnpackLog(event, "Approval", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// LiquidLogicTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the LiquidLogic contract.
		type LiquidLogicTransferIterator struct {
			Event *LiquidLogicTransfer // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *LiquidLogicTransferIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(LiquidLogicTransfer)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(LiquidLogicTransfer)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *LiquidLogicTransferIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *LiquidLogicTransferIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// LiquidLogicTransfer represents a Transfer event raised by the LiquidLogic contract.
		type LiquidLogicTransfer struct {
			From common.Address;
			To common.Address;
			Value *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
 		func (_LiquidLogic *LiquidLogic) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*LiquidLogicTransferIterator, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _LiquidLogic.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return &LiquidLogicTransferIterator{contract: _LiquidLogic.contract, event: "Transfer", logs: logs, sub: sub}, nil
 		}

		// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_LiquidLogic *LiquidLogic) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LiquidLogicTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

			var fromRule []interface{}
			for _, fromItem := range from {
				fromRule = append(fromRule, fromItem)
			}
			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}


			logs, sub, err := _LiquidLogic.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(LiquidLogicTransfer)
						if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
		//
		// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
		func (_LiquidLogic *LiquidLogic) ParseTransfer(log types.Log) (*LiquidLogicTransfer, error) {
			event := new(LiquidLogicTransfer)
			if err := _LiquidLogic.contract.UnpackLog(event, "Transfer", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// LiquidStateMetaData contains all meta data concerning the LiquidState contract.
var LiquidStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516105cb3803806105cb83398101604081905261002f916101af565b806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610091919061029f565b83111561009d57600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e39083906020016102b8565b604051602081830303815290604052600a9081610100919061036e565b508160405160200161011291906102b8565b604051602081830303815290604052600b908161012f919061036e565b5050601080546001600160a01b031916331790555061042d92505050565b6001600160a01b038116811461016257600080fd5b50565b80516101708161014d565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101a657818101518382015260200161018e565b50506000910152565b600080600080600060a086880312156101c757600080fd5b85516101d28161014d565b60208701519095506101e38161014d565b6040870151606088015191955093506001600160401b038082111561020757600080fd5b818801915088601f83011261021b57600080fd5b81518181111561022d5761022d610175565b604051601f8201601f19908116603f0116810190838211818310171561025557610255610175565b816040528281528b602084870101111561026e57600080fd5b61027f83602083016020880161018b565b809650505050505061029360808701610165565b90509295509295909350565b6000602082840312156102b157600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102d881600585016020870161018b565b9190910160050192915050565b600181811c908216806102f957607f821691505b60208210810361031957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561036957600081815260208120601f850160051c810160208610156103465750805b601f850160051c820191505b8181101561036557828155600101610352565b5050505b505050565b81516001600160401b0381111561038757610387610175565b61039b8161039584546102e5565b8461031f565b602080601f8311600181146103d057600084156103b85750858301515b600019600386901b1c1916600185901b178555610365565b600085815260208120601f198616915b828110156103ff578886015182559484019460019091019084016103e0565b508582101561041d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61018f8061043c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610106565b005b6100226100145b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a59190610129565b90506001600160a01b0381166101015760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610123573d6000fd5b503d6000f35b60006020828403121561013b57600080fd5b81516001600160a01b038116811461015257600080fd5b939250505056fea2646970667358221220f521dfcbc3cb8b516c16f450cc0b3f59fa019109d73913d47c59da7b8920d00464736f6c63430008150033",
}

// LiquidStateABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateMetaData.ABI instead.
var LiquidStateABI = LiquidStateMetaData.ABI

// LiquidStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateMetaData.Bin instead.
var LiquidStateBin = LiquidStateMetaData.Bin

// DeployLiquidState deploys a new Ethereum contract, binding an instance of LiquidState to it.
func (r *Runner) DeployLiquidState(opts *runOptions, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, uint64, *LiquidState, error) {
	parsed, err := LiquidStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStateBin), _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidState{contract: c}, nil
}

// LiquidState is an auto generated Go binding around an Ethereum contract.
type LiquidState struct {
	*contract
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidState *LiquidState) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidState.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidState *LiquidState) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidState.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidStateTestMetaData contains all meta data concerning the LiquidStateTest contract.
var LiquidStateTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_liquidLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"liquidLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"96f18a32": "liquidLogicContract()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161063738038061063783398101604081905261002f916101b9565b8484848484806001600160a01b0316632f2c3f2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610072573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009691906102a9565b8311156100a257600080fd5b600c80546001600160a01b038088166001600160a01b031992831617909255600d805492871692909116919091179055600e8390556040516100e89083906020016102c2565b604051602081830303815290604052600a90816101059190610378565b508160405160200161011791906102c2565b604051602081830303815290604052600b90816101349190610378565b5050601080546001600160a01b0319163317905550610437975050505050505050565b6001600160a01b038116811461016c57600080fd5b50565b805161017a81610157565b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101b0578181015183820152602001610198565b50506000910152565b600080600080600060a086880312156101d157600080fd5b85516101dc81610157565b60208701519095506101ed81610157565b6040870151606088015191955093506001600160401b038082111561021157600080fd5b818801915088601f83011261022557600080fd5b8151818111156102375761023761017f565b604051601f8201601f19908116603f0116810190838211818310171561025f5761025f61017f565b816040528281528b602084870101111561027857600080fd5b610289836020830160208801610195565b809650505050505061029d6080870161016f565b90509295509295909350565b6000602082840312156102bb57600080fd5b5051919050565b644c4e544e2d60d81b8152600082516102e2816005850160208701610195565b9190910160050192915050565b600181811c9082168061030357607f821691505b60208210810361032357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561037357600081815260208120601f850160051c810160208610156103505750805b601f850160051c820191505b8181101561036f5782815560010161035c565b5050505b505050565b81516001600160401b038111156103915761039161017f565b6103a58161039f84546102ef565b84610329565b602080601f8311600181146103da57600084156103c25750858301515b600019600386901b1c1916600185901b17855561036f565b600085815260208120601f198616915b82811015610409578886015182559484019460019091019084016103ea565b50858210156104275787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101f1806104466000396000f3fe6080604052600436106100225760003560e01c806396f18a321461004d57610042565b366100425761004061003261007e565b6001600160a01b0316610159565b005b61004061003261007e565b34801561005957600080fd5b5061006261017c565b6040516001600160a01b03909116815260200160405180910390f35b600080601060009054906101000a90046001600160a01b03166001600160a01b03166396f18a326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f8919061018b565b90506001600160a01b0381166101545760405162461bcd60e51b815260206004820152601d60248201527f6c6971756964206c6f67696320636f6e7472616374206e6f7420736574000000604482015260640160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610176573d6000fd5b503d6000f35b600061018661007e565b905090565b60006020828403121561019d57600080fd5b81516001600160a01b03811681146101b457600080fd5b939250505056fea2646970667358221220a9e2953207030efe01772e58aa7fbaebdb682f4ac046b112fb78d1fa2c700f1d64736f6c63430008150033",
}

// LiquidStateTestABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStateTestMetaData.ABI instead.
var LiquidStateTestABI = LiquidStateTestMetaData.ABI

// Deprecated: Use LiquidStateTestMetaData.Sigs instead.
// LiquidStateTestFuncSigs maps the 4-byte function signature to its string representation.
var LiquidStateTestFuncSigs = LiquidStateTestMetaData.Sigs

// LiquidStateTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStateTestMetaData.Bin instead.
var LiquidStateTestBin = LiquidStateTestMetaData.Bin

// DeployLiquidStateTest deploys a new Ethereum contract, binding an instance of LiquidStateTest to it.
func (r *Runner) DeployLiquidStateTest(opts *runOptions, _validator common.Address, _treasury common.Address, _commissionRate *big.Int, _index string, _liquidLogicAddress common.Address) (common.Address, uint64, *LiquidStateTest, error) {
	parsed, err := LiquidStateTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStateTestBin), _validator, _treasury, _commissionRate, _index, _liquidLogicAddress)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidStateTest{contract: c}, nil
}

// LiquidStateTest is an auto generated Go binding around an Ethereum contract.
type LiquidStateTest struct {
	*contract
}

// LiquidLogicContract is a free data retrieval call binding the contract method 0x96f18a32.
//
// Solidity: function liquidLogicContract() view returns(address)
func (_LiquidStateTest *LiquidStateTest) LiquidLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _LiquidStateTest.call(opts, "liquidLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_LiquidStateTest *LiquidStateTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _LiquidStateTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_LiquidStateTest *LiquidStateTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _LiquidStateTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// LiquidStorageMetaData contains all meta data concerning the LiquidStorage contract.
var LiquidStorageMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220585df2382e098e8065a71e2dd0d98c0b603da4ca26b4b9272b2307e44013c98664736f6c63430008150033",
}

// LiquidStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStorageMetaData.ABI instead.
var LiquidStorageABI = LiquidStorageMetaData.ABI

// LiquidStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStorageMetaData.Bin instead.
var LiquidStorageBin = LiquidStorageMetaData.Bin

// DeployLiquidStorage deploys a new Ethereum contract, binding an instance of LiquidStorage to it.
func (r *Runner) DeployLiquidStorage(opts *runOptions) (common.Address, uint64, *LiquidStorage, error) {
	parsed, err := LiquidStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(LiquidStorageBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &LiquidStorage{contract: c}, nil
}

// LiquidStorage is an auto generated Go binding around an Ethereum contract.
type LiquidStorage struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// NonStakeableVestingMetaData contains all meta data concerning the NonStakeableVesting contract.
var NonStakeableVestingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getExpiredFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getScheduleTracker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unsubscribedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredFromContract\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"structNonStakeableVesting.ScheduleTracker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"releaseAllFundsForTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scheduleID\",\"type\":\"uint256\"}],\"name\":\"releaseExpiredFundsForTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"aad55726": "getContract(address,uint256)",
		"213fe2b7": "getContracts(address)",
		"a803c8f4": "getExpiredFunds(address,uint256)",
		"80e53d93": "getScheduleTracker(uint256)",
		"fca78d11": "getUniqueContractID(address,uint256)",
		"bc47a074": "newContract(address,uint256,uint256,uint256)",
		"5558c922": "releaseAllFundsForTreasury(uint256)",
		"3577a8f8": "releaseAllNTN(uint256)",
		"c3aeff1f": "releaseExpiredFundsForTreasury(uint256)",
		"81170628": "releaseNTN(uint256,uint256)",
		"635bf933": "totalContracts(address)",
		"25078446": "vestedFunds(address,uint256)",
		"def25f38": "withdrawableVestedFunds(address,uint256)",
	},
	Bin: "0x608060405234801561001057600080fd5b50604051611ab6380380611ab683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611a23806100936000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a803c8f41161008c578063bc47a07411610066578063bc47a0741461021a578063c3aeff1f1461022d578063def25f3814610240578063fca78d111461025357600080fd5b8063a803c8f4146101d4578063a9f45b62146101e7578063aad55726146101fa57600080fd5b80635558c922116100c85780635558c9221461014e578063635bf9331461016157806380e53d931461018a57806381170628146101c157600080fd5b8063213fe2b7146100ef57806325078446146101185780633577a8f814610139575b600080fd5b6101026100fd366004611692565b610266565b60405161010f91906116af565b60405180910390f35b61012b610126366004611734565b6103a7565b60405190815260200161010f565b61014c610147366004611760565b6103c4565b005b61014c61015c366004611760565b610409565b61012b61016f366004611692565b6001600160a01b031660009081526001602052604090205490565b61019d610198366004611760565b610631565b6040805182518152602080840151908201529181015115159082015260600161010f565b61014c6101cf366004611779565b610695565b61012b6101e2366004611734565b61072b565b61014c6101f536600461179b565b61075c565b61020d610208366004611734565b610838565b60405161010f91906117dd565b61014c610228366004611822565b6108be565b61014c61023b366004611760565b610ccc565b61012b61024e366004611734565b610e64565b61012b610261366004611734565b610e78565b6001600160a01b038116600090815260016020526040812080546060929067ffffffffffffffff81111561029c5761029c61185d565b6040519080825280602002602001820160405280156102d557816020015b6102c26115e2565b8152602001906001900390816102ba5790505b50905060005b825481101561039f5760048382815481106102f8576102f8611873565b90600052602060002001548154811061031357610313611873565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152825183908390811061038157610381611873565b602002602001018190525080806103979061189f565b9150506102db565b509392505050565b60006103bb6103b68484610e78565b610eff565b90505b92915050565b60006103d03383610e78565b9050610404600482815481106103e8576103e8611873565b90600052602060002090600602016103ff83610ffc565b6110c3565b505050565b60008054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e91906118b8565b6001600160a01b0316336001600160a01b0316146104e35760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207472656173757279206163636f756e74000060448201526064015b60405180910390fd5b60008054604051633932626d60e11b8152306004820152602481018490526001600160a01b0390911690637264c4da9060440160a060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055791906118d5565b90508060600151816040015161056d9190611953565b816080015110156105d05760405162461bcd60e51b815260206004820152602760248201527f7363686564756c6520746f74616c206475726174696f6e206e6f7420657870696044820152661c9959081e595d60ca1b60648201526084016104da565b6000828152600360205260409020600281015460ff16610605576106058183600001518155600201805460ff19166001179055565b610622338260010154836000015461061d9190611953565b611151565b60008082556001909101555050565b610657604051806060016040528060008152602001600081526020016000151581525090565b506000908152600360209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b60006106a13384610e78565b90506106ac81610ffc565b8211156106fb5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f75676820756e6c6f636b65642066756e64730000000000000060448201526064016104da565b6107256004828154811061071157610711611873565b9060005260206000209060060201836110c3565b50505050565b600060056107398484610e78565b8154811061074957610749611873565b9060005260206000200154905092915050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906118b8565b6001600160a01b03161461081f5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016104da565b600061082b8484610e78565b905061072584828461120e565b6108406115e2565b600461084c8484610e78565b8154811061085c5761085c611873565b60009182526020918290206040805160c081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906118b8565b6001600160a01b0316146109815760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016104da565b60008054604051633932626d60e11b8152306004820152602481018590526001600160a01b0390911690637264c4da9060440160a060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f591906118d5565b600084815260036020526040902060028101549192509060ff16610a2e57610a2e8183600001518155600201805460ff19166001179055565b8054851115610aa55760405162461bcd60e51b815260206004820152603860248201527f6e6f7420656e6f7567682066756e647320746f206372656174652061206e657760448201527f20636f6e747261637420756e646572207363686564756c65000000000000000060648201526084016104da565b6000610ab08761139f565b6004549091508114610afa5760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b60448201526064016104da565b6000610b0f84602001518560000151896113e6565b90506000610b3389610b21848b611966565b87604001518989606001516000611405565b6004805460018082018355600092835283517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6006938402908101919091556020808601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c8301556040808701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d84015560608701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015560808701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f84015560a08701517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a0909301805460ff1916931515939093179092556005805493840190557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0909201879055878452919052812089905585549192508991869190610ca1908490611966565b9250508190555081846001016000828254610cbc9190611953565b9091555050505050505050505050565b60008054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4191906118b8565b6001600160a01b0316336001600160a01b031614610da15760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207472656173757279206163636f756e74000060448201526064016104da565b6000818152600360205260409020600281015460ff16610e4b5760008054604051633932626d60e11b8152306004820152602481018590526001600160a01b0390911690637264c4da9060440160a060405180830381865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f91906118d5565b519050610e4982828155600201805460ff19166001179055565b505b610e59338260010154611151565b600060019091015550565b60006103bb610e738484610e78565b610ffc565b6001600160a01b0382166000908152600160205260408120548210610ed55760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a590818dbdb9d1c9858dd081a59606a1b60448201526064016104da565b6001600160a01b038316600090815260016020526040902080548390811061074957610749611873565b6000805482825260066020526040808320549051633932626d60e11b8152306004820152602481019190915282916001600160a01b031690637264c4da9060440160a060405180830381865afa158015610f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8191906118d5565b905060058381548110610f9657610f96611873565b906000526020600020015460048481548110610fb457610fb4611873565b906000526020600020906006020160010154610fe183602001518460000151610fdc88611541565b6113e6565b610feb9190611966565b610ff59190611966565b9392505050565b6000806004838154811061101257611012611873565b9060005260206000209060060201905060008054906101000a90046001600160a01b03166001600160a01b03166389c614b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611979565b816003015482600201546110ab9190611953565b11156110ba5750600092915050565b610ff583610eff565b81546000908211156110f15782546110db9083611966565b90506110ec833385600001546115a3565b611102565b8115611102576111028333846115a3565b6000546001600160a01b0316337feed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb61113a8486611966565b60405190815260200160405180910390a392915050565b6000805460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190611992565b9050806104045760405162461bcd60e51b8152602060048201526013602482015272139513881b9bdd081d1c985b9cd9995c9c9959606a1b60448201526064016104da565b6001600160a01b03831660009081526001602081905260408220805490929161123691611966565b67ffffffffffffffff81111561124e5761124e61185d565b604051908082528060200260200182016040528015611277578160200160208202803683370190505b5090506000805b8354811015611305578584828154811061129a5761129a611873565b906000526020600020015403156112f3578381815481106112bd576112bd611873565b90600052602060002001548383806112d49061189f565b9450815181106112e6576112e6611873565b6020026020010181815250505b806112fd8161189f565b91505061127e565b506001600160a01b0386166000908152600160209081526040909120835161132f9285019061161a565b506001600160a01b03808516600081815260016020818152604080842080549384018155845292200188905551918816917f893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf7389061138f9089815260200190565b60405180910390a3505050505050565b600280546001600160a01b0383166000908152600160208181526040832080549283018155835282200182905582549092836113da8361189f565b90915550909392505050565b6000826113f383866119b4565b6113fd91906119cb565b949350505050565b61140d6115e2565b6001600160a01b03871661146e5760405162461bcd60e51b815260206004820152602260248201527f62656e65666963696172792063616e6e6f74206265207a65726f206164647265604482015261737360f01b60648201526084016104da565b600086116114be5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f7369746976650000000000000060448201526064016104da565b83831161150d5760405162461bcd60e51b815260206004820152601e60248201527f656e64206d7573742062652067726561746572207468616e20636c696666000060448201526064016104da565b506040805160c0810182529586526000602087015285019390935260608401919091526080830152151560a0820152919050565b6000806004838154811061155757611557611873565b906000526020600020906006020190506005838154811061157a5761157a611873565b9060005260206000200154816001015482600001546115999190611953565b610ff59190611953565b808360000160008282546115b79190611966565b92505081905550808360010160008282546115d29190611953565b9091555061040490508282611151565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b828054828255906000526020600020908101928215611655579160200282015b8281111561165557825182559160200191906001019061163a565b50611661929150611665565b5090565b5b808211156116615760008155600101611666565b6001600160a01b038116811461168f57600080fd5b50565b6000602082840312156116a457600080fd5b8135610ff58161167a565b6020808252825182820181905260009190848201906040850190845b8181101561172857611715838551805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b9284019260c092909201916001016116cb565b50909695505050505050565b6000806040838503121561174757600080fd5b82356117528161167a565b946020939093013593505050565b60006020828403121561177257600080fd5b5035919050565b6000806040838503121561178c57600080fd5b50508035926020909101359150565b6000806000606084860312156117b057600080fd5b83356117bb8161167a565b92506020840135915060408401356117d28161167a565b809150509250925092565b60c081016103be8284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a08301525050565b6000806000806080858703121561183857600080fd5b84356118438161167a565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016118b1576118b1611889565b5060010190565b6000602082840312156118ca57600080fd5b8151610ff58161167a565b600060a082840312156118e757600080fd5b60405160a0810181811067ffffffffffffffff8211171561191857634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b808201808211156103be576103be611889565b818103818111156103be576103be611889565b60006020828403121561198b57600080fd5b5051919050565b6000602082840312156119a457600080fd5b81518015158114610ff557600080fd5b80820281158282048414176103be576103be611889565b6000826119e857634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220579f17dd000754ab82a85d25a5296245fcf3a47d05ac8f790dea6023740c670464736f6c63430008150033",
}

// NonStakeableVestingABI is the input ABI used to generate the binding from.
// Deprecated: Use NonStakeableVestingMetaData.ABI instead.
var NonStakeableVestingABI = NonStakeableVestingMetaData.ABI

// Deprecated: Use NonStakeableVestingMetaData.Sigs instead.
// NonStakeableVestingFuncSigs maps the 4-byte function signature to its string representation.
var NonStakeableVestingFuncSigs = NonStakeableVestingMetaData.Sigs

// NonStakeableVestingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NonStakeableVestingMetaData.Bin instead.
var NonStakeableVestingBin = NonStakeableVestingMetaData.Bin

// DeployNonStakeableVesting deploys a new Ethereum contract, binding an instance of NonStakeableVesting to it.
func (r *Runner) DeployNonStakeableVesting(opts *runOptions, _autonity common.Address) (common.Address, uint64, *NonStakeableVesting, error) {
	parsed, err := NonStakeableVestingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(NonStakeableVestingBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &NonStakeableVesting{contract: c}, nil
}

// NonStakeableVesting is an auto generated Go binding around an Ethereum contract.
type NonStakeableVesting struct {
	*contract
}

// GetContract is a free data retrieval call binding the contract method 0xaad55726.
//
// Solidity: function getContract(address _beneficiary, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVesting) GetContract(opts *runOptions, _beneficiary common.Address, _id *big.Int) (ContractBaseContract, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "getContract", _beneficiary, _id)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_NonStakeableVesting *NonStakeableVesting) GetContracts(opts *runOptions, _beneficiary common.Address) ([]ContractBaseContract, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)
	return out0, consumed, err

}

// GetExpiredFunds is a free data retrieval call binding the contract method 0xa803c8f4.
//
// Solidity: function getExpiredFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVesting) GetExpiredFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "getExpiredFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetScheduleTracker is a free data retrieval call binding the contract method 0x80e53d93.
//
// Solidity: function getScheduleTracker(uint256 _id) view returns((uint256,uint256,bool))
func (_NonStakeableVesting *NonStakeableVesting) GetScheduleTracker(opts *runOptions, _id *big.Int) (NonStakeableVestingScheduleTracker, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "getScheduleTracker", _id)

	if err != nil {
		return *new(NonStakeableVestingScheduleTracker), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(NonStakeableVestingScheduleTracker)).(*NonStakeableVestingScheduleTracker)
	return out0, consumed, err

}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVesting) GetUniqueContractID(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVesting) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x25078446.
//
// Solidity: function vestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVesting) VestedFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "vestedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0xdef25f38.
//
// Solidity: function withdrawableVestedFunds(address _beneficiary, uint256 _id) view returns(uint256)
func (_NonStakeableVesting *NonStakeableVesting) WithdrawableVestedFunds(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _NonStakeableVesting.call(opts, "withdrawableVestedFunds", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9f45b62.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakeableVesting *NonStakeableVesting) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakeableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// NewContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xbc47a074.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID, uint256 _cliffDuration) returns()
func (_NonStakeableVesting *NonStakeableVesting) CallNewContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int, _cliffDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakeableVesting.call(opts, "newContract", _beneficiary, _amount, _scheduleID, _cliffDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllFundsForTreasury is a free data retrieval call for a paid mutator transaction binding the contract method 0x5558c922.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVesting) CallReleaseAllFundsForTreasury(r *Runner, opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakeableVesting.call(opts, "releaseAllFundsForTreasury", _scheduleID)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3577a8f8.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_NonStakeableVesting *NonStakeableVesting) CallReleaseAllNTN(r *Runner, opts *runOptions, _id *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakeableVesting.call(opts, "releaseAllNTN", _id)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseExpiredFundsForTreasury is a free data retrieval call for a paid mutator transaction binding the contract method 0xc3aeff1f.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseExpiredFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVesting) CallReleaseExpiredFundsForTreasury(r *Runner, opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakeableVesting.call(opts, "releaseExpiredFundsForTreasury", _scheduleID)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x81170628.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_NonStakeableVesting *NonStakeableVesting) CallReleaseNTN(r *Runner, opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _NonStakeableVesting.call(opts, "releaseNTN", _id, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_NonStakeableVesting *NonStakeableVesting) ChangeContractBeneficiary(opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	_, consumed, err := _NonStakeableVesting.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	return consumed, err
}

// NewContract is a paid mutator transaction binding the contract method 0xbc47a074.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _scheduleID, uint256 _cliffDuration) returns()
func (_NonStakeableVesting *NonStakeableVesting) NewContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _scheduleID *big.Int, _cliffDuration *big.Int) (uint64, error) {
	_, consumed, err := _NonStakeableVesting.call(opts, "newContract", _beneficiary, _amount, _scheduleID, _cliffDuration)
	return consumed, err
}

// ReleaseAllFundsForTreasury is a paid mutator transaction binding the contract method 0x5558c922.
//
// Solidity: function releaseAllFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVesting) ReleaseAllFundsForTreasury(opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	_, consumed, err := _NonStakeableVesting.call(opts, "releaseAllFundsForTreasury", _scheduleID)
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0x3577a8f8.
//
// Solidity: function releaseAllNTN(uint256 _id) returns()
func (_NonStakeableVesting *NonStakeableVesting) ReleaseAllNTN(opts *runOptions, _id *big.Int) (uint64, error) {
	_, consumed, err := _NonStakeableVesting.call(opts, "releaseAllNTN", _id)
	return consumed, err
}

// ReleaseExpiredFundsForTreasury is a paid mutator transaction binding the contract method 0xc3aeff1f.
//
// Solidity: function releaseExpiredFundsForTreasury(uint256 _scheduleID) returns()
func (_NonStakeableVesting *NonStakeableVesting) ReleaseExpiredFundsForTreasury(opts *runOptions, _scheduleID *big.Int) (uint64, error) {
	_, consumed, err := _NonStakeableVesting.call(opts, "releaseExpiredFundsForTreasury", _scheduleID)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0x81170628.
//
// Solidity: function releaseNTN(uint256 _id, uint256 _amount) returns()
func (_NonStakeableVesting *NonStakeableVesting) ReleaseNTN(opts *runOptions, _id *big.Int, _amount *big.Int) (uint64, error) {
	_, consumed, err := _NonStakeableVesting.call(opts, "releaseNTN", _id, _amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// NonStakeableVestingBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the NonStakeableVesting contract.
		type NonStakeableVestingBeneficiaryChangedIterator struct {
			Event *NonStakeableVestingBeneficiaryChanged // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *NonStakeableVestingBeneficiaryChangedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(NonStakeableVestingBeneficiaryChanged)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(NonStakeableVestingBeneficiaryChanged)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *NonStakeableVestingBeneficiaryChangedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *NonStakeableVestingBeneficiaryChangedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// NonStakeableVestingBeneficiaryChanged represents a BeneficiaryChanged event raised by the NonStakeableVesting contract.
		type NonStakeableVestingBeneficiaryChanged struct {
			NewBeneficiary common.Address;
			OldBeneficiary common.Address;
			ContractID *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
 		func (_NonStakeableVesting *NonStakeableVesting) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*NonStakeableVestingBeneficiaryChangedIterator, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _NonStakeableVesting.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return &NonStakeableVestingBeneficiaryChangedIterator{contract: _NonStakeableVesting.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
 		}

		// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_NonStakeableVesting *NonStakeableVesting) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *NonStakeableVestingBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _NonStakeableVesting.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(NonStakeableVestingBeneficiaryChanged)
						if err := _NonStakeableVesting.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_NonStakeableVesting *NonStakeableVesting) ParseBeneficiaryChanged(log types.Log) (*NonStakeableVestingBeneficiaryChanged, error) {
			event := new(NonStakeableVestingBeneficiaryChanged)
			if err := _NonStakeableVesting.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// NonStakeableVestingFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the NonStakeableVesting contract.
		type NonStakeableVestingFundsReleasedIterator struct {
			Event *NonStakeableVestingFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *NonStakeableVestingFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(NonStakeableVestingFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(NonStakeableVestingFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *NonStakeableVestingFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *NonStakeableVestingFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// NonStakeableVestingFundsReleased represents a FundsReleased event raised by the NonStakeableVesting contract.
		type NonStakeableVestingFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_NonStakeableVesting *NonStakeableVesting) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*NonStakeableVestingFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _NonStakeableVesting.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &NonStakeableVestingFundsReleasedIterator{contract: _NonStakeableVesting.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_NonStakeableVesting *NonStakeableVesting) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *NonStakeableVestingFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _NonStakeableVesting.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(NonStakeableVestingFundsReleased)
						if err := _NonStakeableVesting.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_NonStakeableVesting *NonStakeableVesting) ParseFundsReleased(log types.Log) (*NonStakeableVestingFundsReleased, error) {
			event := new(NonStakeableVestingFundsReleased)
			if err := _NonStakeableVesting.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// OmissionAccountabilityMetaData contains all meta data concerning the OmissionAccountability contract.
var OmissionAccountabilityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_treasuries\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"inactivityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lookbackWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastPerformanceWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialJailingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialProbationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSlashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"internalType\":\"structOmissionAccountability.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"}],\"name\":\"InactivityJailingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isJailbound\",\"type\":\"bool\"}],\"name\":\"InactivitySlashingEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"absenteesLastHeight\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inactivityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lookbackWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastPerformanceWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialJailingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialProbationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSlashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ntnReward\",\"type\":\"uint256\"}],\"name\":\"distributeProposerRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochCollusionDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"faultyProposers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faultyProposersInWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_epochEnded\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getInactivityScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLookbackWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inactiveValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inactivityCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inactivityScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActive\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"probationPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposerEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"repeatedOffences\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"}],\"internalType\":\"structAutonity.CommitteeMember[]\",\"name\":\"_committee\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_treasuries\",\"type\":\"address[]\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochBlock\",\"type\":\"uint256\"}],\"name\":\"setEpochBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inactivityThreshold\",\"type\":\"uint256\"}],\"name\":\"setInactivityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialJailingPeriod\",\"type\":\"uint256\"}],\"name\":\"setInitialJailingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialProbationPeriod\",\"type\":\"uint256\"}],\"name\":\"setInitialProbationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSlashingRate\",\"type\":\"uint256\"}],\"name\":\"setInitialSlashingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lookbackWindow\",\"type\":\"uint256\"}],\"name\":\"setLookbackWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pastPerformanceWeight\",\"type\":\"uint256\"}],\"name\":\"setPastPerformanceWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEffort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"ce4b5bbe": "SCALE_FACTOR()",
		"b2776025": "absenteesLastHeight(uint256)",
		"79502c55": "config()",
		"eeb92233": "distributeProposerRewards(uint256)",
		"5d30b907": "epochCollusionDegree(uint256)",
		"f95bbd7f": "faultyProposers(uint256)",
		"e8711a97": "faultyProposersInWindow()",
		"6c9789b0": "finalize(bool)",
		"c549176e": "getDelta()",
		"9a11e0e6": "getInactivityScore(address)",
		"5ca1809c": "getLookbackWindow()",
		"7f5e2f11": "getScaleFactor()",
		"53b1821b": "getTotalEffort()",
		"b8d5712a": "inactiveValidators(uint256,address)",
		"5426b5ea": "inactivityCounter(address)",
		"278112dc": "inactivityScores(address)",
		"c2ec28d6": "lastActive(address)",
		"70432e8b": "probationPeriods(address)",
		"d2aaca57": "proposerEffort(address)",
		"eb231a1a": "repeatedOffences(address)",
		"e3deef9c": "setCommittee((address,uint256,bytes)[],address[])",
		"025ff0a5": "setDelta(uint256)",
		"c024cc2c": "setEpochBlock(uint256)",
		"d7eaef49": "setInactivityThreshold(uint256)",
		"482893c7": "setInitialJailingPeriod(uint256)",
		"7e716823": "setInitialProbationPeriod(uint256)",
		"48fa7127": "setInitialSlashingRate(uint256)",
		"8bbde7e5": "setLookbackWindow(uint256)",
		"b3ab15fb": "setOperator(address)",
		"f85cffe2": "setPastPerformanceWeight(uint256)",
		"1ede5a1a": "totalEffort()",
	},
	Bin: "0x60806040523480156200001157600080fd5b50604051620031b1380380620031b183398101604081905262000034916200060d565b80516127101015620000a55760405162461bcd60e51b815260206004820152602f60248201527f696e6163746976697479207468726573686f6c642063616e6e6f74206578636560448201526e32b21039b1b0b632903330b1ba37b960891b60648201526084015b60405180910390fd5b61271081604001511115620001185760405162461bcd60e51b815260206004820152603260248201527f7061737420706572666f726d616e6365207765696768742063616e6e6f7420656044820152713c31b2b2b21039b1b0b632903330b1ba37b960711b60648201526084016200009c565b6127108160a001511115620001965760405162461bcd60e51b815260206004820152603b60248201527f696e697469616c20736c617368696e6720726174652063616e6e6f742065786360448201527f65656420736c617368696e67207261746520707265636973696f6e000000000060648201526084016200009c565b601980546001600160a01b0319166001600160a01b0386169081179091556040805163a9fd1a8f60e01b815290516000929163a9fd1a8f91600480830192869291908290030181865afa158015620001f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200021c9190810190620006fa565b90508160c00151816080015114620002c35760405162461bcd60e51b815260206004820152605360248201527f6d69736d61746368206265747765656e2064656c74612073746f72656420696e60448201527f204175746f6e69747920636f6e747261637420616e6420746865206f6e65206960648201527f6e204f6d697373696f6e20636f6e747261637400000000000000000000000000608482015260a4016200009c565b600580546001600160a01b0319166001600160a01b0386161790558151601255602082015160135560408201516014556060820151601555608082015160165560a082015160175560c082015160185560005b815151811015620003fe576000826000015182815181106200033c576200033c620008ed565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b03909216919091178155918101519282019290925560408201516002820190620003a0908262000992565b505050600019600a6000808481548110620003bf57620003bf620008ed565b600091825260208083206003909202909101546001600160a01b0316835282019290925260400190205580620003f58162000a5e565b91505062000316565b508251620004149060019060208601906200042d565b505060135460035550506018546004555062000a869050565b82805482825590600052602060002090810192821562000485579160200282015b828111156200048557825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200044e565b506200049392915062000497565b5090565b5b8082111562000493576000815560010162000498565b6001600160a01b0381168114620004c457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715620005025762000502620004c7565b60405290565b604051606081016001600160401b0381118282101715620005025762000502620004c7565b604051601f8201601f191681016001600160401b0381118282101715620005585762000558620004c7565b604052919050565b60006001600160401b038211156200057c576200057c620004c7565b5060051b60200190565b600060e082840312156200059957600080fd5b60405160e081016001600160401b0381118282101715620005be57620005be620004c7565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201525092915050565b60008060008061014085870312156200062557600080fd5b84516200063281620004ae565b809450506020808601516200064781620004ae565b60408701519094506001600160401b038111156200066457600080fd5b8601601f810188136200067657600080fd5b80516200068d620006878262000560565b6200052d565b81815260059190911b8201830190838101908a831115620006ad57600080fd5b928401925b82841015620006d8578351620006c881620004ae565b82529284019290840190620006b2565b8096505050505050620006ef866060870162000586565b905092959194509250565b6000602082840312156200070d57600080fd5b81516001600160401b03808211156200072557600080fd5b9083019060a082860312156200073a57600080fd5b62000744620004dd565b8251828111156200075457600080fd5b8301601f810187136200076657600080fd5b805162000777620006878262000560565b8082825260208201915060208360051b8501019250898311156200079a57600080fd5b602084015b83811015620008b157805187811115620007b857600080fd5b8501601f196060828e0382011215620007d057600080fd5b620007da62000508565b6020830151620007ea81620004ae565b81526040830151602082015260608301518a8111156200080957600080fd5b8084019350508d603f8401126200081f57600080fd5b60208301518a811115620008375762000837620004c7565b6200084a602084601f840116016200052d565b92508083528e60408286010111156200086257600080fd5b60005b818110156200088857604081860101516020828601015260208101905062000865565b50600060208285010152508160408201528086525050506020830192506020810190506200079f565b50808552505050506020830151602082015260408301516040820152606083015160608201526080830151608082015280935050505092915050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200091857607f821691505b6020821081036200093957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200098d57600081815260208120601f850160051c81016020861015620009685750805b601f850160051c820191505b81811015620009895782815560010162000974565b5050505b505050565b81516001600160401b03811115620009ae57620009ae620004c7565b620009c681620009bf845462000903565b846200093f565b602080601f831160018114620009fe5760008415620009e55750858301515b600019600386901b1c1916600185901b17855562000989565b600085815260208120601f198616915b8281101562000a2f5788860151825594840194600190910190840162000a0e565b508582101562000a4e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820162000a7f57634e487b7160e01b600052601160045260246000fd5b5060010190565b61271b8062000a966000396000f3fe6080604052600436106101d85760003560e01c80639a11e0e611610102578063d2aaca5711610095578063eb231a1a11610064578063eb231a1a146105e6578063eeb9223314610613578063f85cffe214610626578063f95bbd7f1461064657600080fd5b8063d2aaca5714610563578063d7eaef4914610590578063e3deef9c146105b0578063e8711a97146105d057600080fd5b8063c024cc2c116100d1578063c024cc2c146104eb578063c2ec28d61461050b578063c549176e14610538578063ce4b5bbe1461054d57600080fd5b80639a11e0e614610412578063b277602514610448578063b3ab15fb14610480578063b8d5712a146104a057600080fd5b80635ca1809c1161017a57806379502c551161014957806379502c55146103595780637e716823146103bd5780637f5e2f11146103dd5780638bbde7e5146103f257600080fd5b80635ca1809c146102d75780635d30b907146102ec5780636c9789b01461030c57806370432e8b1461032c57600080fd5b8063482893c7116101b6578063482893c71461025557806348fa71271461027557806353b1821b146102955780635426b5ea146102aa57600080fd5b8063025ff0a5146101dd5780631ede5a1a146101ff578063278112dc14610228575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611ea9565b610676565b005b34801561020b57600080fd5b50610215600c5481565b6040519081526020015b60405180910390f35b34801561023457600080fd5b50610215610243366004611ed7565b600e6020526000908152604090205481565b34801561026157600080fd5b506101fd610270366004611ea9565b6107a8565b34801561028157600080fd5b506101fd610290366004611ea9565b6107d7565b3480156102a157600080fd5b50600c54610215565b3480156102b657600080fd5b506102156102c5366004611ed7565b600b6020526000908152604090205481565b3480156102e357600080fd5b50600354610215565b3480156102f857600080fd5b50610215610307366004611ea9565b610866565b34801561031857600080fd5b50610215610327366004611f09565b610887565b34801561033857600080fd5b50610215610347366004611ed7565b600f6020526000908152604090205481565b34801561036557600080fd5b506012546013546014546015546016546017546018546103889695949392919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161021f565b3480156103c957600080fd5b506101fd6103d8366004611ea9565b610b36565b3480156103e957600080fd5b50612710610215565b3480156103fe57600080fd5b506101fd61040d366004611ea9565b610b65565b34801561041e57600080fd5b5061021561042d366004611ed7565b6001600160a01b03166000908152600e602052604090205490565b34801561045457600080fd5b50610468610463366004611ea9565b610c8e565b6040516001600160a01b03909116815260200161021f565b34801561048c57600080fd5b506101fd61049b366004611ed7565b610cb8565b3480156104ac57600080fd5b506104db6104bb366004611f26565b600860209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161021f565b3480156104f757600080fd5b506101fd610506366004611ea9565b610d04565b34801561051757600080fd5b50610215610526366004611ed7565b600a6020526000908152604090205481565b34801561054457600080fd5b50600454610215565b34801561055957600080fd5b5061021561271081565b34801561056f57600080fd5b5061021561057e366004611ed7565b600d6020526000908152604090205481565b34801561059c57600080fd5b506101fd6105ab366004611ea9565b610d33565b3480156105bc57600080fd5b506101fd6105cb36600461205e565b610e3e565b3480156105dc57600080fd5b5061021560075481565b3480156105f257600080fd5b50610215610601366004611ed7565b60106020526000908152604090205481565b6101fd610621366004611ea9565b610f66565b34801561063257600080fd5b506101fd610641366004611ea9565b611284565b34801561065257600080fd5b506104db610661366004611ea9565b60066020526000908152604090205460ff1681565b6005546001600160a01b031633146106a95760405162461bcd60e51b81526004016106a0906121d5565b60405180910390fd5b60028110156106fa5760405162461bcd60e51b815260206004820152601c60248201527f64656c7461206e6565647320746f206265206174206c6561737420320000000060448201526064016106a0565b60195460408051636fd8d26960e11b815290516000926001600160a01b03169163dfb1a4d29160048083019260209291908290030181865afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190612205565b905060016003548361077a9190612234565b6107849190612247565b81116107a25760405162461bcd60e51b81526004016106a09061225a565b50600455565b6005546001600160a01b031633146107d25760405162461bcd60e51b81526004016106a0906121d5565b601555565b6005546001600160a01b031633146108015760405162461bcd60e51b81526004016106a0906121d5565b6127108111156108615760405162461bcd60e51b815260206004820152602560248201527f63616e6e6f742065786365656420736c617368696e672072617465207072656360448201526434b9b4b7b760d91b60648201526084016106a0565b601755565b6011818154811061087657600080fd5b600091825260209091200154905081565b6019546000906001600160a01b031633146108b45760405162461bcd60e51b81526004016106a0906122b7565b6018546002546000916108c691612234565b43111590506000808060006108e1856012600601548661137f565b92509250925084156108fd5750506018549350610b3192505050565b60185460009061090d9043612247565b90506007546012600101546002546109259190612234565b61092f9190612234565b81106109a2575b600060075411801561098357506007546013546006916000916109599085612247565b6109639190612247565b61096e906001612234565b815260208101919091526040016000205460ff165b156109a2576007805490600061099883612303565b9190505550610936565b83156109f9576000818152600660209081526040808320805460ff19166001179055418352600b90915281208054916109da8361231a565b9091555050600780549060006109ef8361231a565b9190505550610a55565b6000818152600660209081526040808320805460ff19169055418352600d90915281208054859290610a2c908490612234565b9250508190555082600c6000828254610a459190612234565b90915550610a559050828261144b565b8715610b25576000610a656116e2565b9050610a70816118e8565b60005b600054811015610ad1576000600b6000808481548110610a9557610a95612333565b600091825260208083206003909202909101546001600160a01b0316835282019290925260400190205580610ac98161231a565b915050610a73565b5060006007819055610ae590600990611d7e565b601180546001810182556000919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6801556003546013556004546018555b50506018549450505050505b919050565b6005546001600160a01b03163314610b605760405162461bcd60e51b81526004016106a0906121d5565b601655565b6005546001600160a01b03163314610b8f5760405162461bcd60e51b81526004016106a0906121d5565b6001811015610be05760405162461bcd60e51b815260206004820152601a60248201527f6c6f6f6b6261636b57696e646f772063616e6e6f74206265203000000000000060448201526064016106a0565b60195460408051636fd8d26960e11b815290516000926001600160a01b03169163dfb1a4d29160048083019260209291908290030181865afa158015610c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4e9190612205565b9050600182600454610c609190612234565b610c6a9190612247565b8111610c885760405162461bcd60e51b81526004016106a09061225a565b50600355565b60098181548110610c9e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6019546001600160a01b03163314610ce25760405162461bcd60e51b81526004016106a0906122b7565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6019546001600160a01b03163314610d2e5760405162461bcd60e51b81526004016106a0906122b7565b600255565b6005546001600160a01b03163314610d5d5760405162461bcd60e51b81526004016106a0906121d5565b612710811115610daf5760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420657863656564207363616c6520666163746f7200000000000060448201526064016106a0565b601454811015610e395760405162461bcd60e51b815260206004820152604960248201527f696e61637469766974795468726573686f6c64206e6565647320746f2062652060448201527f67726561746572206f7220657175616c20746f2070617374506572666f726d616064820152681b98d955d95a59da1d60ba1b608482015260a4016106a0565b601255565b6019546001600160a01b03163314610e685760405162461bcd60e51b81526004016106a0906122b7565b610e73600080611d9f565b60005b8251811015610f4d576000838281518110610e9357610e93612333565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b0319166001600160a01b03909216919091178155918101519282019290925560408201516002820190610ef590826123d1565b505050600019600a6000808481548110610f1157610f11612333565b600091825260208083206003909202909101546001600160a01b0316835282019290925260400190205580610f458161231a565b915050610e76565b508051610f61906001906020840190611dc0565b505050565b6019546001600160a01b03163314610f905760405162461bcd60e51b81526004016106a0906122b7565b4760005b60005481101561127a576000808281548110610fb257610fb2612333565b600091825260208083206003909202909101546001600160a01b0316808352600d9091526040909120549091501561126757600c546001600160a01b0382166000908152600d602052604081205490919061100e908690612491565b61101891906124a8565b600c546001600160a01b0384166000908152600d602052604081205492935091611043908890612491565b61104d91906124a8565b9050811561119c5760006001858154811061106a5761106a612333565b60009182526020822001546040516001600160a01b03909116916108fc918691818181858888f193505050503d80600081146110c2576040519150601f19603f3d011682016040523d82523d6000602084013e6110c7565b606091505b505090508061119a57601960009054906101000a90046001600160a01b03166001600160a01b031663f7866ee36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114791906124ca565b6001600160a01b03168360405160006040518083038185875af1925050503d8060008114611191576040519150601f19603f3d011682016040523d82523d6000602084013e611196565b606091505b5050505b505b801561124b57601954600180546001600160a01b039092169163a9059cbb9190879081106111cc576111cc612333565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124991906124e7565b505b50506001600160a01b0381166000908152600d60205260408120555b50806112728161231a565b915050610f94565b50506000600c5550565b6005546001600160a01b031633146112ae5760405162461bcd60e51b81526004016106a0906121d5565b6127108111156113005760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420657863656564207363616c6520666163746f7200000000000060448201526064016106a0565b60125481111561137a576040805162461bcd60e51b81526020600482015260248101919091527f70617374506572666f726d616e63655765696768742063616e6e6f742062652060448201527f67726561746572207468616e20696e61637469766974795468726573686f6c6460648201526084016106a0565b601455565b60405183151560f890811b602083015260218201849052604182018390526000918291606091839060610160405160208183030381529060405290506000806000835160208501865af46113d257600080fd5b503d60008167ffffffffffffffff8111156113ef576113ef611f56565b6040519080825280601f01601f191660200182016040528015611419576020820181803683370190505b509050816000602083013e808060200190518101906114389190612504565b9650965096505050505093509350939050565b60005b6009548110156114df57611489836009838154811061146f5761146f612333565b6000918252602090912001546001600160a01b0316611d17565b6114cd57600019600a6000600984815481106114a7576114a7612333565b60009182526020808320909101546001600160a01b031683528201929092526040019020555b806114d78161231a565b91505061144e565b5081516114f3906009906020850190611dc0565b5060005b8251811015610f6157600082815260086020526040812084516001929086908590811061152657611526612333565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600a600084838151811061157b5761157b612333565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600019036115fa576115b76001836125be565b600a60008584815181106115cd576115cd612333565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b60075460135460025461160d9190612234565b6116179190612234565b82106116d05760075460135461162d9190612234565b6116379083612247565b600a600085848151811061164d5761164d612333565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054116116d057600b600084838151811061169157611691612333565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008154809291906116ca9061231a565b91905055505b806116da8161231a565b9150506114f7565b600080601960009054906101000a90046001600160a01b03166001600160a01b0316630aac2da16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175c9190612205565b6018546013549192506000918291906117759085612247565b611780906001612234565b61178a9190612247565b60145490915060009061179f90612710612247565b905060005b6000548110156118de5760008082815481106117c2576117c2612333565b600091825260208083206003909202909101546001600160a01b0316808352600b909152604090912054909150841015611812576001600160a01b0381166000908152600b602052604090208490555b600061182085612710612491565b6014546001600160a01b0384166000908152600e6020526040902054879161184791612491565b6118519190612491565b6001600160a01b0384166000908152600b602052604090205486906118799061271090612491565b6118839190612491565b61188d9190612234565b61189791906124a8565b6012549091508111156118b257856118ae8161231a565b9650505b6001600160a01b039091166000908152600e6020526040902055806118d68161231a565b9150506117a4565b5091949350505050565b60005b600054811015611d1357600080828154811061190957611909612333565b6000918252602082206003919091020154601954604051632dbeb61b60e11b81526001600160a01b03928316600482018190529450911690635b7d6c3690602401602060405180830381865afa158015611967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198b91906125e5565b905060028160058111156119a1576119a1612606565b14806119be575060038160058111156119bc576119bc612606565b145b156119ca575050611d01565b6012546001600160a01b0383166000908152600e602052604090205411611a70576001600160a01b0382166000908152600f602052604090205415611a6b576001600160a01b0382166000908152600f60205260408120805491611a2d83612303565b90915550506001600160a01b0382166000908152600f60205260408120549003611a6b576001600160a01b0382166000908152601060205260408120555b611cfe565b6001600160a01b0382166000908152601060205260408120805491611a948361231a565b90915550506001600160a01b038216600090815260106020526040812054611abc9080612491565b9050600081601260030154611ad19190612491565b9050600082601260040154611ae69190612491565b6001600160a01b0386166000908152600f602052604090205490915015611c0e5760008784601260050154611b1b9190612491565b611b259190612491565b601954604051630915a09160e11b8152919250600091829182916001600160a01b039091169063122b412290611b68908c9088908b90600490600590820161263e565b6060604051808303816000875af1158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab9190612680565b604080516001600160a01b038e16815260208101859052908101839052811515606082015292955090935091507f3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f9060800160405180910390a150505050611ccd565b60195460405163154d76d760e01b81526000916001600160a01b03169063154d76d790611c43908990879060049081016126b9565b6020604051808303816000875af1158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c869190612205565b604080516001600160a01b0389168152602081018390529192507fb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64910160405180910390a1505b6001600160a01b0385166000908152600f602052604081208054839290611cf5908490612234565b90915550505050505b50505b80611d0b8161231a565b9150506118eb565b5050565b6000805b8351811015611d7257826001600160a01b0316848281518110611d4057611d40612333565b60200260200101516001600160a01b031603611d60576001915050611d78565b80611d6a8161231a565b915050611d1b565b50600090505b92915050565b5080546000825590600052602060002090810190611d9c9190611e25565b50565b5080546000825560030290600052602060002090810190611d9c9190611e3a565b828054828255906000526020600020908101928215611e15579160200282015b82811115611e1557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611de0565b50611e21929150611e25565b5090565b5b80821115611e215760008155600101611e26565b80821115611e215780546001600160a01b0319168155600060018201819055611e666002830182611e6f565b50600301611e3a565b508054611e7b90612349565b6000825580601f10611e8b575050565b601f016020900490600052602060002090810190611d9c9190611e25565b600060208284031215611ebb57600080fd5b5035919050565b6001600160a01b0381168114611d9c57600080fd5b600060208284031215611ee957600080fd5b8135611ef481611ec2565b9392505050565b8015158114611d9c57600080fd5b600060208284031215611f1b57600080fd5b8135611ef481611efb565b60008060408385031215611f3957600080fd5b823591506020830135611f4b81611ec2565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611f8f57611f8f611f56565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fbe57611fbe611f56565b604052919050565b600067ffffffffffffffff821115611fe057611fe0611f56565b5060051b60200190565b600082601f830112611ffb57600080fd5b8135602061201061200b83611fc6565b611f95565b82815260059290921b8401810191818101908684111561202f57600080fd5b8286015b8481101561205357803561204681611ec2565b8352918301918301612033565b509695505050505050565b6000806040838503121561207157600080fd5b823567ffffffffffffffff8082111561208957600080fd5b818501915085601f83011261209d57600080fd5b813560206120ad61200b83611fc6565b82815260059290921b840181019181810190898411156120cc57600080fd5b8286015b848110156121a7578035868111156120e757600080fd5b8701601f196060828e03820112156120fe57600080fd5b612106611f6c565b8683013561211381611ec2565b815260408301358782015260608301358981111561213057600080fd5b8084019350508d603f84011261214557600080fd5b868301358981111561215957612159611f56565b6121698884601f84011601611f95565b92508083528e604082860101111561218057600080fd5b806040850189850137600090830188015260408101919091528452509183019183016120d0565b50965050860135925050808211156121be57600080fd5b506121cb85828601611fea565b9150509250929050565b6020808252601690820152753932b9ba3934b1ba32b2103a379037b832b930ba37b960511b604082015260600190565b60006020828403121561221757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611d7857611d7861221e565b81810381811115611d7857611d7861221e565b6020808252603c908201527f65706f636820706572696f64206e6565647320746f206265206772656174657260408201527f207468616e2064656c74612b6c6f6f6b6261636b57696e646f772d3100000000606082015260800190565b6020808252602c908201527f66756e6374696f6e207265737472696374656420746f20746865204175746f6e60408201526b1a5d1e4810dbdb9d1c9858dd60a21b606082015260800190565b6000816123125761231261221e565b506000190190565b60006001820161232c5761232c61221e565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061235d57607f821691505b60208210810361237d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610f6157600081815260208120601f850160051c810160208610156123aa5750805b601f850160051c820191505b818110156123c9578281556001016123b6565b505050505050565b815167ffffffffffffffff8111156123eb576123eb611f56565b6123ff816123f98454612349565b84612383565b602080601f831160018114612434576000841561241c5750858301515b600019600386901b1c1916600185901b1785556123c9565b600085815260208120601f198616915b8281101561246357888601518255948401946001909101908401612444565b50858210156124815787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417611d7857611d7861221e565b6000826124c557634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156124dc57600080fd5b8151611ef481611ec2565b6000602082840312156124f957600080fd5b8151611ef481611efb565b60008060006060848603121561251957600080fd5b835161252481611efb565b809350506020808501519250604085015167ffffffffffffffff81111561254a57600080fd5b8501601f8101871361255b57600080fd5b805161256961200b82611fc6565b81815260059190911b8201830190838101908983111561258857600080fd5b928401925b828410156125af5783516125a081611ec2565b8252928401929084019061258d565b80955050505050509250925092565b81810360008312801583831316838312821617156125de576125de61221e565b5092915050565b6000602082840312156125f757600080fd5b815160068110611ef457600080fd5b634e487b7160e01b600052602160045260246000fd5b6006811061263a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0386168152602081018590526040810184905260a08101612669606083018561261c565b612676608083018461261c565b9695505050505050565b60008060006060848603121561269557600080fd5b835192506020840151915060408401516126ae81611efb565b809150509250925092565b6001600160a01b038416815260208101839052606081016126dd604083018461261c565b94935050505056fea2646970667358221220a0c13e8f12f69eb038d08e1dae346aacd6baf23ea52915d0635d16ba92aaee3a64736f6c63430008150033",
}

// OmissionAccountabilityABI is the input ABI used to generate the binding from.
// Deprecated: Use OmissionAccountabilityMetaData.ABI instead.
var OmissionAccountabilityABI = OmissionAccountabilityMetaData.ABI

// Deprecated: Use OmissionAccountabilityMetaData.Sigs instead.
// OmissionAccountabilityFuncSigs maps the 4-byte function signature to its string representation.
var OmissionAccountabilityFuncSigs = OmissionAccountabilityMetaData.Sigs

// OmissionAccountabilityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OmissionAccountabilityMetaData.Bin instead.
var OmissionAccountabilityBin = OmissionAccountabilityMetaData.Bin

// DeployOmissionAccountability deploys a new Ethereum contract, binding an instance of OmissionAccountability to it.
func (r *Runner) DeployOmissionAccountability(opts *runOptions, _autonity common.Address, _operator common.Address, _treasuries []common.Address, _config OmissionAccountabilityConfig) (common.Address, uint64, *OmissionAccountability, error) {
	parsed, err := OmissionAccountabilityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(OmissionAccountabilityBin), _autonity, _operator, _treasuries, _config)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &OmissionAccountability{contract: c}, nil
}

// OmissionAccountability is an auto generated Go binding around an Ethereum contract.
type OmissionAccountability struct {
	*contract
}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) SCALEFACTOR(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// AbsenteesLastHeight is a free data retrieval call binding the contract method 0xb2776025.
//
// Solidity: function absenteesLastHeight(uint256 ) view returns(address)
func (_OmissionAccountability *OmissionAccountability) AbsenteesLastHeight(opts *runOptions, arg0 *big.Int) (common.Address, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "absenteesLastHeight", arg0)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 inactivityThreshold, uint256 lookbackWindow, uint256 pastPerformanceWeight, uint256 initialJailingPeriod, uint256 initialProbationPeriod, uint256 initialSlashingRate, uint256 delta)
func (_OmissionAccountability *OmissionAccountability) Config(opts *runOptions) (struct {
	InactivityThreshold    *big.Int
	LookbackWindow         *big.Int
	PastPerformanceWeight  *big.Int
	InitialJailingPeriod   *big.Int
	InitialProbationPeriod *big.Int
	InitialSlashingRate    *big.Int
	Delta                  *big.Int
}, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "config")

	outstruct := new(struct {
		InactivityThreshold    *big.Int
		LookbackWindow         *big.Int
		PastPerformanceWeight  *big.Int
		InitialJailingPeriod   *big.Int
		InitialProbationPeriod *big.Int
		InitialSlashingRate    *big.Int
		Delta                  *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.InactivityThreshold = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LookbackWindow = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.PastPerformanceWeight = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.InitialJailingPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.InitialProbationPeriod = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.InitialSlashingRate = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Delta = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// EpochCollusionDegree is a free data retrieval call binding the contract method 0x5d30b907.
//
// Solidity: function epochCollusionDegree(uint256 ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) EpochCollusionDegree(opts *runOptions, arg0 *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "epochCollusionDegree", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// FaultyProposers is a free data retrieval call binding the contract method 0xf95bbd7f.
//
// Solidity: function faultyProposers(uint256 ) view returns(bool)
func (_OmissionAccountability *OmissionAccountability) FaultyProposers(opts *runOptions, arg0 *big.Int) (bool, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "faultyProposers", arg0)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// FaultyProposersInWindow is a free data retrieval call binding the contract method 0xe8711a97.
//
// Solidity: function faultyProposersInWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) FaultyProposersInWindow(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "faultyProposersInWindow")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetDelta is a free data retrieval call binding the contract method 0xc549176e.
//
// Solidity: function getDelta() view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) GetDelta(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "getDelta")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetInactivityScore is a free data retrieval call binding the contract method 0x9a11e0e6.
//
// Solidity: function getInactivityScore(address _validator) view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) GetInactivityScore(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "getInactivityScore", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetLookbackWindow is a free data retrieval call binding the contract method 0x5ca1809c.
//
// Solidity: function getLookbackWindow() view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) GetLookbackWindow(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "getLookbackWindow")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetScaleFactor is a free data retrieval call binding the contract method 0x7f5e2f11.
//
// Solidity: function getScaleFactor() pure returns(uint256)
func (_OmissionAccountability *OmissionAccountability) GetScaleFactor(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "getScaleFactor")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetTotalEffort is a free data retrieval call binding the contract method 0x53b1821b.
//
// Solidity: function getTotalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) GetTotalEffort(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "getTotalEffort")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InactiveValidators is a free data retrieval call binding the contract method 0xb8d5712a.
//
// Solidity: function inactiveValidators(uint256 , address ) view returns(bool)
func (_OmissionAccountability *OmissionAccountability) InactiveValidators(opts *runOptions, arg0 *big.Int, arg1 common.Address) (bool, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "inactiveValidators", arg0, arg1)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// InactivityCounter is a free data retrieval call binding the contract method 0x5426b5ea.
//
// Solidity: function inactivityCounter(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) InactivityCounter(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "inactivityCounter", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InactivityScores is a free data retrieval call binding the contract method 0x278112dc.
//
// Solidity: function inactivityScores(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) InactivityScores(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "inactivityScores", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastActive is a free data retrieval call binding the contract method 0xc2ec28d6.
//
// Solidity: function lastActive(address ) view returns(int256)
func (_OmissionAccountability *OmissionAccountability) LastActive(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "lastActive", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ProbationPeriods is a free data retrieval call binding the contract method 0x70432e8b.
//
// Solidity: function probationPeriods(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) ProbationPeriods(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "probationPeriods", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ProposerEffort is a free data retrieval call binding the contract method 0xd2aaca57.
//
// Solidity: function proposerEffort(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) ProposerEffort(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "proposerEffort", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// RepeatedOffences is a free data retrieval call binding the contract method 0xeb231a1a.
//
// Solidity: function repeatedOffences(address ) view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) RepeatedOffences(opts *runOptions, arg0 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "repeatedOffences", arg0)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// TotalEffort is a free data retrieval call binding the contract method 0x1ede5a1a.
//
// Solidity: function totalEffort() view returns(uint256)
func (_OmissionAccountability *OmissionAccountability) TotalEffort(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _OmissionAccountability.call(opts, "totalEffort")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DistributeProposerRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0xeeb92233.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_OmissionAccountability *OmissionAccountability) CallDistributeProposerRewards(r *Runner, opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "distributeProposerRewards", _ntnReward)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x6c9789b0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_OmissionAccountability *OmissionAccountability) CallFinalize(r *Runner, opts *runOptions, _epochEnded bool) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _OmissionAccountability.call(opts, "finalize", _epochEnded)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SetCommittee is a free data retrieval call for a paid mutator transaction binding the contract method 0xe3deef9c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetCommittee(r *Runner, opts *runOptions, _committee []AutonityCommitteeMember, _treasuries []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setCommittee", _committee, _treasuries)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetDelta is a free data retrieval call for a paid mutator transaction binding the contract method 0x025ff0a5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setDelta(uint256 _delta) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetDelta(r *Runner, opts *runOptions, _delta *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setDelta", _delta)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetEpochBlock is a free data retrieval call for a paid mutator transaction binding the contract method 0xc024cc2c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetEpochBlock(r *Runner, opts *runOptions, _epochBlock *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setEpochBlock", _epochBlock)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInactivityThreshold is a free data retrieval call for a paid mutator transaction binding the contract method 0xd7eaef49.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInactivityThreshold(uint256 _inactivityThreshold) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetInactivityThreshold(r *Runner, opts *runOptions, _inactivityThreshold *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setInactivityThreshold", _inactivityThreshold)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInitialJailingPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x482893c7.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInitialJailingPeriod(uint256 _initialJailingPeriod) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetInitialJailingPeriod(r *Runner, opts *runOptions, _initialJailingPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setInitialJailingPeriod", _initialJailingPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInitialProbationPeriod is a free data retrieval call for a paid mutator transaction binding the contract method 0x7e716823.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInitialProbationPeriod(uint256 _initialProbationPeriod) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetInitialProbationPeriod(r *Runner, opts *runOptions, _initialProbationPeriod *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setInitialProbationPeriod", _initialProbationPeriod)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetInitialSlashingRate is a free data retrieval call for a paid mutator transaction binding the contract method 0x48fa7127.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setInitialSlashingRate(uint256 _initialSlashingRate) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetInitialSlashingRate(r *Runner, opts *runOptions, _initialSlashingRate *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setInitialSlashingRate", _initialSlashingRate)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLookbackWindow is a free data retrieval call for a paid mutator transaction binding the contract method 0x8bbde7e5.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setLookbackWindow(uint256 _lookbackWindow) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetLookbackWindow(r *Runner, opts *runOptions, _lookbackWindow *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setLookbackWindow", _lookbackWindow)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetPastPerformanceWeight is a free data retrieval call for a paid mutator transaction binding the contract method 0xf85cffe2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setPastPerformanceWeight(uint256 _pastPerformanceWeight) returns()
func (_OmissionAccountability *OmissionAccountability) CallSetPastPerformanceWeight(r *Runner, opts *runOptions, _pastPerformanceWeight *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _OmissionAccountability.call(opts, "setPastPerformanceWeight", _pastPerformanceWeight)
	r.revertSnapshot(snap)
	return consumed, err

}

// DistributeProposerRewards is a paid mutator transaction binding the contract method 0xeeb92233.
//
// Solidity: function distributeProposerRewards(uint256 _ntnReward) payable returns()
func (_OmissionAccountability *OmissionAccountability) DistributeProposerRewards(opts *runOptions, _ntnReward *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "distributeProposerRewards", _ntnReward)
	return consumed, err
}

// Finalize is a paid mutator transaction binding the contract method 0x6c9789b0.
//
// Solidity: function finalize(bool _epochEnded) returns(uint256)
func (_OmissionAccountability *OmissionAccountability) Finalize(opts *runOptions, _epochEnded bool) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "finalize", _epochEnded)
	return consumed, err
}

// SetCommittee is a paid mutator transaction binding the contract method 0xe3deef9c.
//
// Solidity: function setCommittee((address,uint256,bytes)[] _committee, address[] _treasuries) returns()
func (_OmissionAccountability *OmissionAccountability) SetCommittee(opts *runOptions, _committee []AutonityCommitteeMember, _treasuries []common.Address) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setCommittee", _committee, _treasuries)
	return consumed, err
}

// SetDelta is a paid mutator transaction binding the contract method 0x025ff0a5.
//
// Solidity: function setDelta(uint256 _delta) returns()
func (_OmissionAccountability *OmissionAccountability) SetDelta(opts *runOptions, _delta *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setDelta", _delta)
	return consumed, err
}

// SetEpochBlock is a paid mutator transaction binding the contract method 0xc024cc2c.
//
// Solidity: function setEpochBlock(uint256 _epochBlock) returns()
func (_OmissionAccountability *OmissionAccountability) SetEpochBlock(opts *runOptions, _epochBlock *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setEpochBlock", _epochBlock)
	return consumed, err
}

// SetInactivityThreshold is a paid mutator transaction binding the contract method 0xd7eaef49.
//
// Solidity: function setInactivityThreshold(uint256 _inactivityThreshold) returns()
func (_OmissionAccountability *OmissionAccountability) SetInactivityThreshold(opts *runOptions, _inactivityThreshold *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setInactivityThreshold", _inactivityThreshold)
	return consumed, err
}

// SetInitialJailingPeriod is a paid mutator transaction binding the contract method 0x482893c7.
//
// Solidity: function setInitialJailingPeriod(uint256 _initialJailingPeriod) returns()
func (_OmissionAccountability *OmissionAccountability) SetInitialJailingPeriod(opts *runOptions, _initialJailingPeriod *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setInitialJailingPeriod", _initialJailingPeriod)
	return consumed, err
}

// SetInitialProbationPeriod is a paid mutator transaction binding the contract method 0x7e716823.
//
// Solidity: function setInitialProbationPeriod(uint256 _initialProbationPeriod) returns()
func (_OmissionAccountability *OmissionAccountability) SetInitialProbationPeriod(opts *runOptions, _initialProbationPeriod *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setInitialProbationPeriod", _initialProbationPeriod)
	return consumed, err
}

// SetInitialSlashingRate is a paid mutator transaction binding the contract method 0x48fa7127.
//
// Solidity: function setInitialSlashingRate(uint256 _initialSlashingRate) returns()
func (_OmissionAccountability *OmissionAccountability) SetInitialSlashingRate(opts *runOptions, _initialSlashingRate *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setInitialSlashingRate", _initialSlashingRate)
	return consumed, err
}

// SetLookbackWindow is a paid mutator transaction binding the contract method 0x8bbde7e5.
//
// Solidity: function setLookbackWindow(uint256 _lookbackWindow) returns()
func (_OmissionAccountability *OmissionAccountability) SetLookbackWindow(opts *runOptions, _lookbackWindow *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setLookbackWindow", _lookbackWindow)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_OmissionAccountability *OmissionAccountability) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setOperator", _operator)
	return consumed, err
}

// SetPastPerformanceWeight is a paid mutator transaction binding the contract method 0xf85cffe2.
//
// Solidity: function setPastPerformanceWeight(uint256 _pastPerformanceWeight) returns()
func (_OmissionAccountability *OmissionAccountability) SetPastPerformanceWeight(opts *runOptions, _pastPerformanceWeight *big.Int) (uint64, error) {
	_, consumed, err := _OmissionAccountability.call(opts, "setPastPerformanceWeight", _pastPerformanceWeight)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// OmissionAccountabilityInactivityJailingEventIterator is returned from FilterInactivityJailingEvent and is used to iterate over the raw logs and unpacked data for InactivityJailingEvent events raised by the OmissionAccountability contract.
		type OmissionAccountabilityInactivityJailingEventIterator struct {
			Event *OmissionAccountabilityInactivityJailingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OmissionAccountabilityInactivityJailingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OmissionAccountabilityInactivityJailingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OmissionAccountabilityInactivityJailingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OmissionAccountabilityInactivityJailingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OmissionAccountabilityInactivityJailingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OmissionAccountabilityInactivityJailingEvent represents a InactivityJailingEvent event raised by the OmissionAccountability contract.
		type OmissionAccountabilityInactivityJailingEvent struct {
			Validator common.Address;
			ReleaseBlock *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInactivityJailingEvent is a free log retrieval operation binding the contract event 0xb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64.
		//
		// Solidity: event InactivityJailingEvent(address validator, uint256 releaseBlock)
 		func (_OmissionAccountability *OmissionAccountability) FilterInactivityJailingEvent(opts *bind.FilterOpts) (*OmissionAccountabilityInactivityJailingEventIterator, error) {




			logs, sub, err := _OmissionAccountability.contract.FilterLogs(opts, "InactivityJailingEvent")
			if err != nil {
				return nil, err
			}
			return &OmissionAccountabilityInactivityJailingEventIterator{contract: _OmissionAccountability.contract, event: "InactivityJailingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchInactivityJailingEvent is a free log subscription operation binding the contract event 0xb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64.
		//
		// Solidity: event InactivityJailingEvent(address validator, uint256 releaseBlock)
		func (_OmissionAccountability *OmissionAccountability) WatchInactivityJailingEvent(opts *bind.WatchOpts, sink chan<- *OmissionAccountabilityInactivityJailingEvent) (event.Subscription, error) {




			logs, sub, err := _OmissionAccountability.contract.WatchLogs(opts, "InactivityJailingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OmissionAccountabilityInactivityJailingEvent)
						if err := _OmissionAccountability.contract.UnpackLog(event, "InactivityJailingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInactivityJailingEvent is a log parse operation binding the contract event 0xb057cb17fba40b7eb122da4822729894f42ef37e5e2b74e6081fd7efe5de4b64.
		//
		// Solidity: event InactivityJailingEvent(address validator, uint256 releaseBlock)
		func (_OmissionAccountability *OmissionAccountability) ParseInactivityJailingEvent(log types.Log) (*OmissionAccountabilityInactivityJailingEvent, error) {
			event := new(OmissionAccountabilityInactivityJailingEvent)
			if err := _OmissionAccountability.contract.UnpackLog(event, "InactivityJailingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// OmissionAccountabilityInactivitySlashingEventIterator is returned from FilterInactivitySlashingEvent and is used to iterate over the raw logs and unpacked data for InactivitySlashingEvent events raised by the OmissionAccountability contract.
		type OmissionAccountabilityInactivitySlashingEventIterator struct {
			Event *OmissionAccountabilityInactivitySlashingEvent // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OmissionAccountabilityInactivitySlashingEventIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OmissionAccountabilityInactivitySlashingEvent)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OmissionAccountabilityInactivitySlashingEvent)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OmissionAccountabilityInactivitySlashingEventIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OmissionAccountabilityInactivitySlashingEventIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OmissionAccountabilityInactivitySlashingEvent represents a InactivitySlashingEvent event raised by the OmissionAccountability contract.
		type OmissionAccountabilityInactivitySlashingEvent struct {
			Validator common.Address;
			Amount *big.Int;
			ReleaseBlock *big.Int;
			IsJailbound bool;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterInactivitySlashingEvent is a free log retrieval operation binding the contract event 0x3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f.
		//
		// Solidity: event InactivitySlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound)
 		func (_OmissionAccountability *OmissionAccountability) FilterInactivitySlashingEvent(opts *bind.FilterOpts) (*OmissionAccountabilityInactivitySlashingEventIterator, error) {






			logs, sub, err := _OmissionAccountability.contract.FilterLogs(opts, "InactivitySlashingEvent")
			if err != nil {
				return nil, err
			}
			return &OmissionAccountabilityInactivitySlashingEventIterator{contract: _OmissionAccountability.contract, event: "InactivitySlashingEvent", logs: logs, sub: sub}, nil
 		}

		// WatchInactivitySlashingEvent is a free log subscription operation binding the contract event 0x3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f.
		//
		// Solidity: event InactivitySlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound)
		func (_OmissionAccountability *OmissionAccountability) WatchInactivitySlashingEvent(opts *bind.WatchOpts, sink chan<- *OmissionAccountabilityInactivitySlashingEvent) (event.Subscription, error) {






			logs, sub, err := _OmissionAccountability.contract.WatchLogs(opts, "InactivitySlashingEvent")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OmissionAccountabilityInactivitySlashingEvent)
						if err := _OmissionAccountability.contract.UnpackLog(event, "InactivitySlashingEvent", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseInactivitySlashingEvent is a log parse operation binding the contract event 0x3cac37f432247a020a7112d5052bc279f35e1e3b80b0aab0eca49d1773ed3e3f.
		//
		// Solidity: event InactivitySlashingEvent(address validator, uint256 amount, uint256 releaseBlock, bool isJailbound)
		func (_OmissionAccountability *OmissionAccountability) ParseInactivitySlashingEvent(log types.Log) (*OmissionAccountabilityInactivitySlashingEvent, error) {
			event := new(OmissionAccountabilityInactivitySlashingEvent)
			if err := _OmissionAccountability.contract.UnpackLog(event, "InactivitySlashingEvent", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// OracleMetaData contains all meta data concerning the Oracle contract.
var OracleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votePeriod\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"NewSymbols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVoterUpdateRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"latestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"internalType\":\"structIOracle.RoundData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"setSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newVoters\",\"type\":\"address[]\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolUpdatedRound\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commit\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_reports\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVoter\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"4bb278f3": "finalize()",
		"9670c0bc": "getPrecision()",
		"9f8743f7": "getRound()",
		"3c8510fd": "getRoundData(uint256,string)",
		"df7f710e": "getSymbols()",
		"b78dec52": "getVotePeriod()",
		"cdd72253": "getVoters()",
		"e6a02a28": "lastRoundBlock()",
		"aa2f89b5": "lastVoterUpdateRound()",
		"33f98c77": "latestRoundData(string)",
		"5281b5c6": "newSymbols(uint256)",
		"4c56ea56": "reports(string,address)",
		"146ca531": "round()",
		"b3ab15fb": "setOperator(address)",
		"8d4f75d2": "setSymbols(string[])",
		"845023f2": "setVoters(address[])",
		"08f21ff5": "symbolUpdatedRound()",
		"ccce413b": "symbols(uint256)",
		"307de9b6": "vote(uint256,int256[],uint256)",
		"a7813587": "votePeriod()",
		"5412b3ae": "votingInfo(address)",
	},
	Bin: "0x6080604052600160ff1b600755600160ff1b6008553480156200002157600080fd5b5060405162002d3438038062002d34833981016040819052620000449162000639565b600280546001600160a01b038087166001600160a01b03199283161790925560038054928616929091169190911790558151620000899060009060208501906200035f565b5081516200009f9060019060208501906200035f565b5080600981905550620000c485600060018851620000be91906200074e565b62000181565b8451620000d9906004906020880190620003bc565b508451620000ef906005906020880190620003bc565b5060016006819055600d8054909101815560009081525b855181101562000175576001600b60008884815181106200012b576200012b6200076a565b6020908102919091018101516001600160a01b03168252810191909152604001600020600201805460ff1916911515919091179055806200016c8162000780565b91505062000106565b505050505050620009c3565b8082126200018e57505050565b81816000856002620001a185856200079c565b620001ad9190620007c6565b620001b9908762000806565b81518110620001cc57620001cc6200076a565b602002602001015190505b8183136200032b575b806001600160a01b0316868481518110620001ff57620001ff6200076a565b60200260200101516001600160a01b031610156200022c5782620002238162000831565b935050620001e0565b806001600160a01b03168683815181106200024b576200024b6200076a565b60200260200101516001600160a01b031611156200027857816200026f816200084c565b9250506200022c565b81831362000325578582815181106200029557620002956200076a565b6020026020010151868481518110620002b257620002b26200076a565b6020026020010151878581518110620002cf57620002cf6200076a565b60200260200101888581518110620002eb57620002eb6200076a565b6001600160a01b0393841660209182029290920101529116905282620003118162000831565b935050818062000321906200084c565b9250505b620001d7565b8185121562000341576200034186868462000181565b8383121562000357576200035786848662000181565b505050505050565b828054828255906000526020600020908101928215620003aa579160200282015b82811115620003aa5782518290620003999082620008f7565b509160200191906001019062000380565b50620003b892915062000422565b5090565b82805482825590600052602060002090810192821562000414579160200282015b828111156200041457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003dd565b50620003b892915062000443565b80821115620003b85760006200043982826200045a565b5060010162000422565b5b80821115620003b8576000815560010162000444565b50805462000468906200086c565b6000825580601f1062000479575050565b601f01602090049060005260206000209081019062000499919062000443565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620004dd57620004dd6200049c565b604052919050565b60006001600160401b038211156200050157620005016200049c565b5060051b60200190565b80516001600160a01b03811681146200052357600080fd5b919050565b6000601f83818401126200053b57600080fd5b82516020620005546200054e83620004e5565b620004b2565b82815260059290921b850181019181810190878411156200057457600080fd5b8287015b848110156200062d5780516001600160401b03808211156200059a5760008081fd5b818a0191508a603f830112620005b05760008081fd5b8582015181811115620005c757620005c76200049c565b620005da818a01601f19168801620004b2565b915080825260408c81838601011115620005f45760008081fd5b60005b8281101562000614578481018201518482018a01528801620005f7565b5050600090820187015284525091830191830162000578565b50979650505050505050565b600080600080600060a086880312156200065257600080fd5b85516001600160401b03808211156200066a57600080fd5b818801915088601f8301126200067f57600080fd5b81516020620006926200054e83620004e5565b82815260059290921b8401810191818101908c841115620006b257600080fd5b948201945b83861015620006db57620006cb866200050b565b82529482019490820190620006b7565b9950620006ec90508a82016200050b565b97505050620006fe604089016200050b565b945060608801519150808211156200071557600080fd5b50620007248882890162000528565b925050608086015190509295509295909350565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000764576200076462000738565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820162000795576200079562000738565b5060010190565b8181036000831280158383131683831282161715620007bf57620007bf62000738565b5092915050565b600082620007e457634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161562000801576200080162000738565b500590565b808201828112600083128015821682158216171562000829576200082962000738565b505092915050565b60006001600160ff1b01820162000795576200079562000738565b6000600160ff1b820162000864576200086462000738565b506000190190565b600181811c908216806200088157607f821691505b602082108103620008a257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008f257600081815260208120601f850160051c81016020861015620008d15750805b601f850160051c820191505b818110156200035757828155600101620008dd565b505050565b81516001600160401b038111156200091357620009136200049c565b6200092b816200092484546200086c565b84620008a8565b602080601f8311600181146200096357600084156200094a5750858301515b600019600386901b1c1916600185901b17855562000357565b600085815260208120601f198616915b82811015620009945788860151825594840194600190910190840162000973565b5085821015620009b35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61236180620009d36000396000f3fe6080604052600436106101225760003560e01c80638d4f75d2116100a5578063b3ab15fb1161006c578063b3ab15fb1461038c578063b78dec52146103ac578063ccce413b146103c1578063cdd72253146103e1578063df7f710e14610403578063e6a02a281461042557005b80638d4f75d2146103155780639670c0bc146103355780639f8743f71461034b578063a781358714610360578063aa2f89b51461037657005b80634bb278f3116100e95780634bb278f3146101ff5780634c56ea56146102245780635281b5c61461026c5780635412b3ae14610299578063845023f2146102f557005b806308f21ff51461012b578063146ca53114610154578063307de9b61461016a57806333f98c771461018a5780633c8510fd146101df57005b3661012957005b005b34801561013757600080fd5b5061014160085481565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061014160065481565b34801561017657600080fd5b5061012961018536600461198c565b61043b565b34801561019657600080fd5b506101aa6101a5366004611ac8565b610682565b60405161014b919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b3480156101eb57600080fd5b506101aa6101fa366004611afd565b61076c565b34801561020b57600080fd5b5061021461082d565b604051901515815260200161014b565b34801561023057600080fd5b5061014161023f366004611b60565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205481565b34801561027857600080fd5b5061028c610287366004611bae565b6109d0565b60405161014b9190611c17565b3480156102a557600080fd5b506102d86102b4366004611c31565b600b6020526000908152604090208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161014b565b34801561030157600080fd5b50610129610310366004611c70565b610a7c565b34801561032157600080fd5b50610129610330366004611d0d565b610b25565b34801561034157600080fd5b5062989680610141565b34801561035757600080fd5b50600654610141565b34801561036c57600080fd5b5061014160095481565b34801561038257600080fd5b5061014160075481565b34801561039857600080fd5b506101296103a7366004611c31565b610c95565b3480156103b857600080fd5b50600954610141565b3480156103cd57600080fd5b5061028c6103dc366004611bae565b610ce1565b3480156103ed57600080fd5b506103f6610cf1565b60405161014b9190611dbe565b34801561040f57600080fd5b50610418610d53565b60405161014b9190611e60565b34801561043157600080fd5b50610141600a5481565b336000908152600b602052604090206002015460ff166104a25760405162461bcd60e51b815260206004820152601960248201527f7265737472696374656420746f206f6e6c7920766f746572730000000000000060448201526064015b60405180910390fd5b600654336000908152600b6020526040902054036104f25760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481d9bdd1959609a1b6044820152606401610499565b336000908152600b602052604081206001810180549087905581546006549092559181900361052257505061067c565b600054841461053257505061067c565b60016006546105419190611e89565b8114158061057e5750848484336040516020016105619493929190611e9c565b6040516020818303038152906040528051906020012060001c8214155b156105fa5760005b6000548110156105f2576001600160ff1b03600c600083815481106105ad576105ad611ee7565b906000526020600020016040516105c49190611f37565b90815260408051602092819003830190203360009081529252902055806105ea81611fad565b915050610586565b50505061067c565b60005b848110156106785785858281811061061757610617611ee7565b90506020020135600c6000838154811061063357610633611ee7565b9060005260206000200160405161064a9190611f37565b908152604080516020928190038301902033600090815292529020558061067081611fad565b9150506105fd565b5050505b50505050565b6106af60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d60016006546106c29190611e89565b815481106106d2576106d2611ee7565b90600052602060002001836040516106ea9190611fc6565b90815260408051918290036020908101832060608401835280548452600180820154928501929092526002015460ff16151583830152815160808101909252600654929350600092829161073d91611e89565b815260200183600001518152602001836020015181526020018360400151151581525090508092505050919050565b61079960405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000600d84815481106107ae576107ae611ee7565b90600052602060002001836040516107c69190611fc6565b9081526040805191829003602090810183206060808501845281548552600182015485840190815260029092015460ff16151585850190815284516080810186528a8152955193860193909352905192840192909252511515908201529150505b92915050565b6002546000906001600160a01b0316331461085a5760405162461bcd60e51b815260040161049990611fe2565b600954600a5461086a9190612025565b43106109ca5760005b6000548110156108985761088681610f11565b610891600182612025565b9050610873565b50600654600754036109155760005b600554811015610913576001600b6000600584815481106108ca576108ca611ee7565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600201805460ff19169115159190911790558061090b81611fad565b9150506108a7565b505b600654600754610926906001612038565b0361093357610933611218565b43600a8190555060016006600082825461094d9190612025565b9091555050600854610960906002612038565b6006540361097a5760018054610978916000916117de565b505b60065460095460408051928352436020840152429083015260608201527fb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e59060800160405180910390a150600190565b50600090565b600181815481106109e057600080fd5b9060005260206000200160009150905080546109fb90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2790611efd565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b505050505081565b6002546001600160a01b03163314610aa65760405162461bcd60e51b815260040161049990611fe2565b8051600003610aef5760405162461bcd60e51b8152602060048201526015602482015274566f746572732063616e277420626520656d70747960581b6044820152606401610499565b610b0881600060018451610b039190611e89565b6113f5565b8051610b1b906005906020840190611836565b5050600654600755565b6003546001600160a01b03163314610b785760405162461bcd60e51b81526020600482015260166024820152753932b9ba3934b1ba32b2103a379037b832b930ba37b960511b6044820152606401610499565b8051600003610bc25760405162461bcd60e51b815260206004820152601660248201527573796d626f6c732063616e277420626520656d70747960501b6044820152606401610499565b600654600854610bd3906001612038565b14158015610be5575060065460085414155b610c315760405162461bcd60e51b815260206004820152601e60248201527f63616e2774206265207570646174656420696e207468697320726f756e6400006044820152606401610499565b8051610c44906001906020840190611897565b5060065460088190557faa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d908290610c7c906001612025565b604051610c8a929190612060565b60405180910390a150565b6002546001600160a01b03163314610cbf5760405162461bcd60e51b815260040161049990611fe2565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600081815481106109e057600080fd5b60606005805480602002602001604051908101604052809291908181526020018280548015610d4957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d2b575b5050505050905090565b60606006546008546001610d679190612038565b03610e43576001805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610dad90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd990611efd565b8015610e265780601f10610dfb57610100808354040283529160200191610e26565b820191906000526020600020905b815481529060010190602001808311610e0957829003601f168201915b505050505081526020019060010190610d8e565b50505050905090565b6000805480602002602001604051908101604052809291908181526020016000905b82821015610e3a578382906000526020600020018054610e8490611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb090611efd565b8015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b505050505081526020019060010190610e65565b6000808281548110610f2557610f25611ee7565b906000526020600020018054610f3a90611efd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6690611efd565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b50505050509050600060048054905067ffffffffffffffff811115610fda57610fda611a11565b604051908082528060200260200182016040528015611003578160200160208202803683370190505b5090506000805b60045481101561111a5760006004828154811061102957611029611ee7565b60009182526020808320909101546006546001600160a01b03909116808452600b90925260409092205490925014158061109d57506001600160ff1b03600c866040516110769190611fc6565b90815260408051602092819003830190206001600160a01b03851660009081529252902054145b156110a85750611108565b600c856040516110b89190611fc6565b90815260408051602092819003830190206001600160a01b0384166000908152925290205484846110e881611fad565b9550815181106110fa576110fa611ee7565b602002602001018181525050505b8061111281611fad565b91505061100a565b506000600d600160065461112e9190611e89565b8154811061113e5761113e611ee7565b90600052602060002001846040516111569190611fc6565b908152604051908190036020019020549050600082156111815761117a84846115a2565b9150600190505b600d80546001018082556000829052604080516060810182528581524260208201528415159181019190915260065490929181106111c1576111c1611ee7565b90600052602060002001866040516111d99190611fc6565b90815260408051602092819003830190208351815591830151600183015591909101516002909101805460ff1916911515919091179055505050505050565b6000805b6004548210801561122e575060055481105b15611373576005818154811061124657611246611ee7565b600091825260209091200154600480546001600160a01b03909216918490811061127257611272611ee7565b6000918252602090912001546001600160a01b0316036112ac578161129681611fad565b92505080806112a490611fad565b91505061121c565b600581815481106112bf576112bf611ee7565b600091825260209091200154600480546001600160a01b0390921691849081106112eb576112eb611ee7565b6000918252602090912001546001600160a01b0316101561136957600b60006004848154811061131d5761131d611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff191690558161136181611fad565b92505061121c565b806112a481611fad565b6004548210156113e057600b60006004848154811061139457611394611ee7565b60009182526020808320909101546001600160a01b0316835282019290925260400181208181556001810191909155600201805460ff19169055816113d881611fad565b925050611373565b600580546113f0916004916118dd565b505050565b80821261140157505050565b818160008560026114128585612082565b61141c91906120bf565b6114269087612038565b8151811061143657611436611ee7565b602002602001015190505b818313611574575b806001600160a01b031686848151811061146557611465611ee7565b60200260200101516001600160a01b0316101561148e5782611486816120ed565b935050611449565b806001600160a01b03168683815181106114aa576114aa611ee7565b60200260200101516001600160a01b031611156114d357816114cb81612105565b92505061148e565b81831361156f578582815181106114ec576114ec611ee7565b602002602001015186848151811061150657611506611ee7565b602002602001015187858151811061152057611520611ee7565b6020026020010188858151811061153957611539611ee7565b6001600160a01b039384166020918202929092010152911690528261155d816120ed565b935050818061156b90612105565b9250505b611441565b81851215611587576115878686846113f5565b8383121561159a5761159a8684866113f5565b505050505050565b6000816000036115b457506000610827565b6115ca8360006115c5600186611e89565b611666565b60006115d7600284612122565b90506115e4600284612136565b15611608578381815181106115fb576115fb611ee7565b602002602001015161165e565b600284828151811061161c5761161c611ee7565b6020026020010151856001846116329190611e89565b8151811061164257611642611ee7565b60200260200101516116549190612038565b61165e91906120bf565b949350505050565b8181808203611676575050505050565b60008560026116858787612082565b61168f91906120bf565b6116999087612038565b815181106116a9576116a9611ee7565b602002602001015190505b8183136117b8575b808684815181106116cf576116cf611ee7565b602002602001015112156116ef57826116e7816120ed565b9350506116bc565b85828151811061170157611701611ee7565b6020026020010151811215611722578161171a81612105565b9250506116ef565b8183136117b35785828151811061173b5761173b611ee7565b602002602001015186848151811061175557611755611ee7565b602002602001015187858151811061176f5761176f611ee7565b6020026020010188858151811061178857611788611ee7565b602090810291909101019190915252816117a181612105565b92505082806117af906120ed565b9350505b6116b4565b818512156117cb576117cb868684611666565b8383121561159a5761159a868486611666565b8280548282559060005260206000209081019282156118265760005260206000209182015b8281111561182657816118168482612190565b5091600101919060010190611803565b5061183292915061191d565b5090565b82805482825590600052602060002090810192821561188b579160200282015b8281111561188b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611856565b5061183292915061193a565b828054828255906000526020600020908101928215611826579160200282015b8281111561182657825182906118cd9082612271565b50916020019190600101906118b7565b82805482825590600052602060002090810192821561188b5760005260206000209182015b8281111561188b578254825591600101919060010190611902565b80821115611832576000611931828261194f565b5060010161191d565b5b80821115611832576000815560010161193b565b50805461195b90611efd565b6000825580601f1061196b575050565b601f016020900490600052602060002090810190611989919061193a565b50565b600080600080606085870312156119a257600080fd5b84359350602085013567ffffffffffffffff808211156119c157600080fd5b818701915087601f8301126119d557600080fd5b8135818111156119e457600080fd5b8860208260051b85010111156119f957600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a5057611a50611a11565b604052919050565b600082601f830112611a6957600080fd5b813567ffffffffffffffff811115611a8357611a83611a11565b611a96601f8201601f1916602001611a27565b818152846020838601011115611aab57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ada57600080fd5b813567ffffffffffffffff811115611af157600080fd5b61165e84828501611a58565b60008060408385031215611b1057600080fd5b82359150602083013567ffffffffffffffff811115611b2e57600080fd5b611b3a85828601611a58565b9150509250929050565b80356001600160a01b0381168114611b5b57600080fd5b919050565b60008060408385031215611b7357600080fd5b823567ffffffffffffffff811115611b8a57600080fd5b611b9685828601611a58565b925050611ba560208401611b44565b90509250929050565b600060208284031215611bc057600080fd5b5035919050565b60005b83811015611be2578181015183820152602001611bca565b50506000910152565b60008151808452611c03816020860160208601611bc7565b601f01601f19169290920160200192915050565b602081526000611c2a6020830184611beb565b9392505050565b600060208284031215611c4357600080fd5b611c2a82611b44565b600067ffffffffffffffff821115611c6657611c66611a11565b5060051b60200190565b60006020808385031215611c8357600080fd5b823567ffffffffffffffff811115611c9a57600080fd5b8301601f81018513611cab57600080fd5b8035611cbe611cb982611c4c565b611a27565b81815260059190911b82018301908381019087831115611cdd57600080fd5b928401925b82841015611d0257611cf384611b44565b82529284019290840190611ce2565b979650505050505050565b60006020808385031215611d2057600080fd5b823567ffffffffffffffff80821115611d3857600080fd5b818501915085601f830112611d4c57600080fd5b8135611d5a611cb982611c4c565b81815260059190911b83018401908481019088831115611d7957600080fd5b8585015b83811015611db157803585811115611d955760008081fd5b611da38b89838a0101611a58565b845250918601918601611d7d565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611dff5783516001600160a01b031683529284019291840191600101611dda565b50909695505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611e53578284038952611e41848351611beb565b98850198935090840190600101611e29565b5091979650505050505050565b602081526000611c2a6020830184611e0b565b634e487b7160e01b600052601160045260246000fd5b8181038181111561082757610827611e73565b60008186825b87811015611ec0578135835260209283019290910190600101611ea2565b5050938452505060601b6bffffffffffffffffffffffff1916602082015260340192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611f1157607f821691505b602082108103611f3157634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354611f4581611efd565b60018281168015611f5d5760018114611f7257611fa1565b60ff1984168752821515830287019450611fa1565b8760005260208060002060005b85811015611f985781548a820152908401908201611f7f565b50505082870194505b50929695505050505050565b600060018201611fbf57611fbf611e73565b5060010190565b60008251611fd8818460208701611bc7565b9190910192915050565b60208082526023908201527f7265737472696374656420746f20746865206175746f6e69747920636f6e74726040820152621858dd60ea1b606082015260800190565b8082018082111561082757610827611e73565b808201828112600083128015821682158216171561205857612058611e73565b505092915050565b6040815260006120736040830185611e0b565b90508260208301529392505050565b81810360008312801583831316838312821617156120a2576120a2611e73565b5092915050565b634e487b7160e01b600052601260045260246000fd5b6000826120ce576120ce6120a9565b600160ff1b8214600019841416156120e8576120e8611e73565b500590565b60006001600160ff1b018201611fbf57611fbf611e73565b6000600160ff1b820161211a5761211a611e73565b506000190190565b600082612131576121316120a9565b500490565b600082612145576121456120a9565b500690565b601f8211156113f057600081815260208120601f850160051c810160208610156121715750805b601f850160051c820191505b8181101561159a5782815560010161217d565b81810361219b575050565b6121a58254611efd565b67ffffffffffffffff8111156121bd576121bd611a11565b6121d1816121cb8454611efd565b8461214a565b6000601f82116001811461220557600083156121ed5750848201545b600019600385901b1c1916600184901b17845561226a565b600085815260209020601f19841690600086815260209020845b8381101561223f578286015482556001958601959091019060200161221f565b508583101561225d5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b815167ffffffffffffffff81111561228b5761228b611a11565b612299816121cb8454611efd565b602080601f8311600181146122ce57600084156122b65750858301515b600019600386901b1c1916600185901b17855561159a565b600085815260208120601f198616915b828110156122fd578886015182559484019460019091019084016122de565b508582101561231b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203c20d60b3688c4746f988dc74b8b4238d2ea704a050cfa1eb51d85c8e28d03b264736f6c63430008150033",
}

// OracleABI is the input ABI used to generate the binding from.
// Deprecated: Use OracleMetaData.ABI instead.
var OracleABI = OracleMetaData.ABI

// Deprecated: Use OracleMetaData.Sigs instead.
// OracleFuncSigs maps the 4-byte function signature to its string representation.
var OracleFuncSigs = OracleMetaData.Sigs

// OracleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OracleMetaData.Bin instead.
var OracleBin = OracleMetaData.Bin

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func (r *Runner) DeployOracle(opts *runOptions, _voters []common.Address, _autonity common.Address, _operator common.Address, _symbols []string, _votePeriod *big.Int) (common.Address, uint64, *Oracle, error) {
	parsed, err := OracleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(OracleBin), _voters, _autonity, _operator, _symbols, _votePeriod)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Oracle{contract: c}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	*contract
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() pure returns(uint256)
func (_Oracle *Oracle) GetPrecision(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getPrecision")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRound is a free data retrieval call binding the contract method 0x9f8743f7.
//
// Solidity: function getRound() view returns(uint256)
func (_Oracle *Oracle) GetRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetRoundData is a free data retrieval call binding the contract method 0x3c8510fd.
//
// Solidity: function getRoundData(uint256 _round, string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *Oracle) GetRoundData(opts *runOptions, _round *big.Int, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getRoundData", _round, _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// GetSymbols is a free data retrieval call binding the contract method 0xdf7f710e.
//
// Solidity: function getSymbols() view returns(string[])
func (_Oracle *Oracle) GetSymbols(opts *runOptions) ([]string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getSymbols")

	if err != nil {
		return *new([]string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)
	return out0, consumed, err

}

// GetVotePeriod is a free data retrieval call binding the contract method 0xb78dec52.
//
// Solidity: function getVotePeriod() view returns(uint256)
func (_Oracle *Oracle) GetVotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getVotePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetVoters is a free data retrieval call binding the contract method 0xcdd72253.
//
// Solidity: function getVoters() view returns(address[])
func (_Oracle *Oracle) GetVoters(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "getVoters")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// LastRoundBlock is a free data retrieval call binding the contract method 0xe6a02a28.
//
// Solidity: function lastRoundBlock() view returns(uint256)
func (_Oracle *Oracle) LastRoundBlock(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "lastRoundBlock")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LastVoterUpdateRound is a free data retrieval call binding the contract method 0xaa2f89b5.
//
// Solidity: function lastVoterUpdateRound() view returns(int256)
func (_Oracle *Oracle) LastVoterUpdateRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "lastVoterUpdateRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LatestRoundData is a free data retrieval call binding the contract method 0x33f98c77.
//
// Solidity: function latestRoundData(string _symbol) view returns((uint256,int256,uint256,bool) data)
func (_Oracle *Oracle) LatestRoundData(opts *runOptions, _symbol string) (IOracleRoundData, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "latestRoundData", _symbol)

	if err != nil {
		return *new(IOracleRoundData), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(IOracleRoundData)).(*IOracleRoundData)
	return out0, consumed, err

}

// NewSymbols is a free data retrieval call binding the contract method 0x5281b5c6.
//
// Solidity: function newSymbols(uint256 ) view returns(string)
func (_Oracle *Oracle) NewSymbols(opts *runOptions, arg0 *big.Int) (string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "newSymbols", arg0)

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Reports is a free data retrieval call binding the contract method 0x4c56ea56.
//
// Solidity: function reports(string , address ) view returns(int256)
func (_Oracle *Oracle) Reports(opts *runOptions, arg0 string, arg1 common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "reports", arg0, arg1)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Round is a free data retrieval call binding the contract method 0x146ca531.
//
// Solidity: function round() view returns(uint256)
func (_Oracle *Oracle) Round(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "round")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SymbolUpdatedRound is a free data retrieval call binding the contract method 0x08f21ff5.
//
// Solidity: function symbolUpdatedRound() view returns(int256)
func (_Oracle *Oracle) SymbolUpdatedRound(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "symbolUpdatedRound")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Symbols is a free data retrieval call binding the contract method 0xccce413b.
//
// Solidity: function symbols(uint256 ) view returns(string)
func (_Oracle *Oracle) Symbols(opts *runOptions, arg0 *big.Int) (string, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "symbols", arg0)

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// VotePeriod is a free data retrieval call binding the contract method 0xa7813587.
//
// Solidity: function votePeriod() view returns(uint256)
func (_Oracle *Oracle) VotePeriod(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "votePeriod")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VotingInfo is a free data retrieval call binding the contract method 0x5412b3ae.
//
// Solidity: function votingInfo(address ) view returns(uint256 round, uint256 commit, bool isVoter)
func (_Oracle *Oracle) VotingInfo(opts *runOptions, arg0 common.Address) (struct {
	Round   *big.Int
	Commit  *big.Int
	IsVoter bool
}, uint64, error) {
	out, consumed, err := _Oracle.call(opts, "votingInfo", arg0)

	outstruct := new(struct {
		Round   *big.Int
		Commit  *big.Int
		IsVoter bool
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Round = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Commit = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsVoter = *abi.ConvertType(out[2], new(bool)).(*bool)
	return *outstruct, consumed, err

}

// Finalize is a free data retrieval call for a paid mutator transaction binding the contract method 0x4bb278f3.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function finalize() returns(bool)
func (_Oracle *Oracle) CallFinalize(r *Runner, opts *runOptions) (bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Oracle.call(opts, "finalize")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *Oracle) CallSetOperator(r *Runner, opts *runOptions, _operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setOperator", _operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSymbols is a free data retrieval call for a paid mutator transaction binding the contract method 0x8d4f75d2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *Oracle) CallSetSymbols(r *Runner, opts *runOptions, _symbols []string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setSymbols", _symbols)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetVoters is a free data retrieval call for a paid mutator transaction binding the contract method 0x845023f2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *Oracle) CallSetVoters(r *Runner, opts *runOptions, _newVoters []common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "setVoters", _newVoters)
	r.revertSnapshot(snap)
	return consumed, err

}

// Vote is a free data retrieval call for a paid mutator transaction binding the contract method 0x307de9b6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *Oracle) CallVote(r *Runner, opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Oracle.call(opts, "vote", _commit, _reports, _salt)
	r.revertSnapshot(snap)
	return consumed, err

}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns(bool)
func (_Oracle *Oracle) Finalize(opts *runOptions) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "finalize")
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _operator) returns()
func (_Oracle *Oracle) SetOperator(opts *runOptions, _operator common.Address) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setOperator", _operator)
	return consumed, err
}

// SetSymbols is a paid mutator transaction binding the contract method 0x8d4f75d2.
//
// Solidity: function setSymbols(string[] _symbols) returns()
func (_Oracle *Oracle) SetSymbols(opts *runOptions, _symbols []string) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setSymbols", _symbols)
	return consumed, err
}

// SetVoters is a paid mutator transaction binding the contract method 0x845023f2.
//
// Solidity: function setVoters(address[] _newVoters) returns()
func (_Oracle *Oracle) SetVoters(opts *runOptions, _newVoters []common.Address) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "setVoters", _newVoters)
	return consumed, err
}

// Vote is a paid mutator transaction binding the contract method 0x307de9b6.
//
// Solidity: function vote(uint256 _commit, int256[] _reports, uint256 _salt) returns()
func (_Oracle *Oracle) Vote(opts *runOptions, _commit *big.Int, _reports []*big.Int, _salt *big.Int) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "vote", _commit, _reports, _salt)
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_Oracle *Oracle) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_Oracle *Oracle) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _Oracle.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// OracleNewRoundIterator is returned from FilterNewRound and is used to iterate over the raw logs and unpacked data for NewRound events raised by the Oracle contract.
		type OracleNewRoundIterator struct {
			Event *OracleNewRound // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleNewRoundIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleNewRound)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleNewRound)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleNewRoundIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleNewRoundIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleNewRound represents a NewRound event raised by the Oracle contract.
		type OracleNewRound struct {
			Round *big.Int;
			Height *big.Int;
			Timestamp *big.Int;
			VotePeriod *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewRound is a free log retrieval operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
 		func (_Oracle *Oracle) FilterNewRound(opts *bind.FilterOpts) (*OracleNewRoundIterator, error) {






			logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return &OracleNewRoundIterator{contract: _Oracle.contract, event: "NewRound", logs: logs, sub: sub}, nil
 		}

		// WatchNewRound is a free log subscription operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_Oracle *Oracle) WatchNewRound(opts *bind.WatchOpts, sink chan<- *OracleNewRound) (event.Subscription, error) {






			logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewRound")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleNewRound)
						if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewRound is a log parse operation binding the contract event 0xb5d8636ab45e6cac7a4a61cb7c77f77f61a454d73aa2e6139ff8dcaf463537e5.
		//
		// Solidity: event NewRound(uint256 _round, uint256 _height, uint256 _timestamp, uint256 _votePeriod)
		func (_Oracle *Oracle) ParseNewRound(log types.Log) (*OracleNewRound, error) {
			event := new(OracleNewRound)
			if err := _Oracle.contract.UnpackLog(event, "NewRound", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// OracleNewSymbolsIterator is returned from FilterNewSymbols and is used to iterate over the raw logs and unpacked data for NewSymbols events raised by the Oracle contract.
		type OracleNewSymbolsIterator struct {
			Event *OracleNewSymbols // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleNewSymbolsIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleNewSymbols)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleNewSymbols)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleNewSymbolsIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleNewSymbolsIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleNewSymbols represents a NewSymbols event raised by the Oracle contract.
		type OracleNewSymbols struct {
			Symbols []string;
			Round *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSymbols is a free log retrieval operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
 		func (_Oracle *Oracle) FilterNewSymbols(opts *bind.FilterOpts) (*OracleNewSymbolsIterator, error) {




			logs, sub, err := _Oracle.contract.FilterLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return &OracleNewSymbolsIterator{contract: _Oracle.contract, event: "NewSymbols", logs: logs, sub: sub}, nil
 		}

		// WatchNewSymbols is a free log subscription operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_Oracle *Oracle) WatchNewSymbols(opts *bind.WatchOpts, sink chan<- *OracleNewSymbols) (event.Subscription, error) {




			logs, sub, err := _Oracle.contract.WatchLogs(opts, "NewSymbols")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleNewSymbols)
						if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSymbols is a log parse operation binding the contract event 0xaa278e424da680ce5dad66510415760e78e0bd87d45c786c6e88bdde82f9342d.
		//
		// Solidity: event NewSymbols(string[] _symbols, uint256 _round)
		func (_Oracle *Oracle) ParseNewSymbols(log types.Log) (*OracleNewSymbols, error) {
			event := new(OracleNewSymbols)
			if err := _Oracle.contract.UnpackLog(event, "NewSymbols", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// OracleVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Oracle contract.
		type OracleVotedIterator struct {
			Event *OracleVoted // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *OracleVotedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(OracleVoted)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(OracleVoted)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *OracleVotedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *OracleVotedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// OracleVoted represents a Voted event raised by the Oracle contract.
		type OracleVoted struct {
			Voter common.Address;
			Votes []*big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterVoted is a free log retrieval operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
 		func (_Oracle *Oracle) FilterVoted(opts *bind.FilterOpts, _voter []common.Address) (*OracleVotedIterator, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _Oracle.contract.FilterLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return &OracleVotedIterator{contract: _Oracle.contract, event: "Voted", logs: logs, sub: sub}, nil
 		}

		// WatchVoted is a free log subscription operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_Oracle *Oracle) WatchVoted(opts *bind.WatchOpts, sink chan<- *OracleVoted, _voter []common.Address) (event.Subscription, error) {

			var _voterRule []interface{}
			for _, _voterItem := range _voter {
				_voterRule = append(_voterRule, _voterItem)
			}


			logs, sub, err := _Oracle.contract.WatchLogs(opts, "Voted", _voterRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(OracleVoted)
						if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseVoted is a log parse operation binding the contract event 0xd0d8560f1076ac6b216b1091a2571d6f9bc3e0889f4dbdbe1c7d1be7136714d3.
		//
		// Solidity: event Voted(address indexed _voter, int256[] _votes)
		func (_Oracle *Oracle) ParseVoted(log types.Log) (*OracleVoted, error) {
			event := new(OracleVoted)
			if err := _Oracle.contract.UnpackLog(event, "Voted", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// PrecompiledMetaData contains all meta data concerning the Precompiled contract.
var PrecompiledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ACCUSATION_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACTIVITY_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPUTE_COMMITTEE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENODE_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INNOCENCE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISBEHAVIOUR_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POP_VERIFIER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4dc925d3": "ACCUSATION_CONTRACT()",
		"625fb940": "ACTIVITY_CONTRACT()",
		"2090a442": "COMPUTE_COMMITTEE_CONTRACT()",
		"c13974e1": "ENODE_VERIFIER_CONTRACT()",
		"8e153dc3": "INNOCENCE_CONTRACT()",
		"925c5492": "MISBEHAVIOUR_CONTRACT()",
		"50d93720": "POP_VERIFIER_CONTRACT()",
		"d0a6d1a6": "SUCCESS()",
		"a4ad5d91": "UPGRADER_CONTRACT()",
	},
	Bin: "0x61014b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80638e153dc3116100705780638e153dc3146100df578063925c5492146100e7578063a4ad5d91146100ef578063c13974e1146100f7578063d0a6d1a6146100ff57600080fd5b80632090a442146100a25780634dc925d3146100c757806350d93720146100cf578063625fb940146100d7575b600080fd5b6100aa60fa81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100aa60fc81565b6100aa60fb81565b6100aa60f881565b6100aa60fd81565b6100aa60fe81565b6100aa60f981565b6100aa60ff81565b610107600181565b6040519081526020016100be56fea2646970667358221220862c3c62ad5b0873c5f0ca1689f1cbbc18a22f4c1120c89ab32e92e710a0738064736f6c63430008150033",
}

// PrecompiledABI is the input ABI used to generate the binding from.
// Deprecated: Use PrecompiledMetaData.ABI instead.
var PrecompiledABI = PrecompiledMetaData.ABI

// Deprecated: Use PrecompiledMetaData.Sigs instead.
// PrecompiledFuncSigs maps the 4-byte function signature to its string representation.
var PrecompiledFuncSigs = PrecompiledMetaData.Sigs

// PrecompiledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrecompiledMetaData.Bin instead.
var PrecompiledBin = PrecompiledMetaData.Bin

// DeployPrecompiled deploys a new Ethereum contract, binding an instance of Precompiled to it.
func (r *Runner) DeployPrecompiled(opts *runOptions) (common.Address, uint64, *Precompiled, error) {
	parsed, err := PrecompiledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(PrecompiledBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Precompiled{contract: c}, nil
}

// Precompiled is an auto generated Go binding around an Ethereum contract.
type Precompiled struct {
	*contract
}

// ACCUSATIONCONTRACT is a free data retrieval call binding the contract method 0x4dc925d3.
//
// Solidity: function ACCUSATION_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) ACCUSATIONCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "ACCUSATION_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// ACTIVITYCONTRACT is a free data retrieval call binding the contract method 0x625fb940.
//
// Solidity: function ACTIVITY_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) ACTIVITYCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "ACTIVITY_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// COMPUTECOMMITTEECONTRACT is a free data retrieval call binding the contract method 0x2090a442.
//
// Solidity: function COMPUTE_COMMITTEE_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) COMPUTECOMMITTEECONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "COMPUTE_COMMITTEE_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// ENODEVERIFIERCONTRACT is a free data retrieval call binding the contract method 0xc13974e1.
//
// Solidity: function ENODE_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) ENODEVERIFIERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "ENODE_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// INNOCENCECONTRACT is a free data retrieval call binding the contract method 0x8e153dc3.
//
// Solidity: function INNOCENCE_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) INNOCENCECONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "INNOCENCE_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// MISBEHAVIOURCONTRACT is a free data retrieval call binding the contract method 0x925c5492.
//
// Solidity: function MISBEHAVIOUR_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) MISBEHAVIOURCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "MISBEHAVIOUR_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// POPVERIFIERCONTRACT is a free data retrieval call binding the contract method 0x50d93720.
//
// Solidity: function POP_VERIFIER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) POPVERIFIERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "POP_VERIFIER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// SUCCESS is a free data retrieval call binding the contract method 0xd0a6d1a6.
//
// Solidity: function SUCCESS() view returns(uint256)
func (_Precompiled *Precompiled) SUCCESS(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "SUCCESS")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UPGRADERCONTRACT is a free data retrieval call binding the contract method 0xa4ad5d91.
//
// Solidity: function UPGRADER_CONTRACT() view returns(address)
func (_Precompiled *Precompiled) UPGRADERCONTRACT(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _Precompiled.call(opts, "UPGRADER_CONTRACT")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// QueueLibMetaData contains all meta data concerning the QueueLib contract.
var QueueLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d3ef982de540b222dd99eac4e2872ec64e764ec626670b7c77fd0ae92f06cc2b64736f6c63430008150033",
}

// QueueLibABI is the input ABI used to generate the binding from.
// Deprecated: Use QueueLibMetaData.ABI instead.
var QueueLibABI = QueueLibMetaData.ABI

// QueueLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use QueueLibMetaData.Bin instead.
var QueueLibBin = QueueLibMetaData.Bin

// DeployQueueLib deploys a new Ethereum contract, binding an instance of QueueLib to it.
func (r *Runner) DeployQueueLib(opts *runOptions) (common.Address, uint64, *QueueLib, error) {
	parsed, err := QueueLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(QueueLibBin))
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &QueueLib{contract: c}, nil
}

// QueueLib is an auto generated Go binding around an Ethereum contract.
type QueueLib struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ReentrancyGuardMetaData contains all meta data concerning the ReentrancyGuard contract.
var ReentrancyGuardMetaData = &bind.MetaData{
	ABI: "[]",
}

// ReentrancyGuardABI is the input ABI used to generate the binding from.
// Deprecated: Use ReentrancyGuardMetaData.ABI instead.
var ReentrancyGuardABI = ReentrancyGuardMetaData.ABI

// ReentrancyGuard is an auto generated Go binding around an Ethereum contract.
type ReentrancyGuard struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ScheduleControllerMetaData contains all meta data concerning the ScheduleController contract.
var ScheduleControllerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scheduleVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"NewSchedule\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"internalType\":\"structScheduleController.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTotalSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7264c4da": "getSchedule(address,uint256)",
		"088566e9": "getTotalSchedules(address)",
	},
}

// ScheduleControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ScheduleControllerMetaData.ABI instead.
var ScheduleControllerABI = ScheduleControllerMetaData.ABI

// Deprecated: Use ScheduleControllerMetaData.Sigs instead.
// ScheduleControllerFuncSigs maps the 4-byte function signature to its string representation.
var ScheduleControllerFuncSigs = ScheduleControllerMetaData.Sigs

// ScheduleController is an auto generated Go binding around an Ethereum contract.
type ScheduleController struct {
	*contract
}

// GetSchedule is a free data retrieval call binding the contract method 0x7264c4da.
//
// Solidity: function getSchedule(address _vault, uint256 _id) view returns((uint256,uint256,uint256,uint256,uint256))
func (_ScheduleController *ScheduleController) GetSchedule(opts *runOptions, _vault common.Address, _id *big.Int) (ScheduleControllerSchedule, uint64, error) {
	out, consumed, err := _ScheduleController.call(opts, "getSchedule", _vault, _id)

	if err != nil {
		return *new(ScheduleControllerSchedule), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ScheduleControllerSchedule)).(*ScheduleControllerSchedule)
	return out0, consumed, err

}

// GetTotalSchedules is a free data retrieval call binding the contract method 0x088566e9.
//
// Solidity: function getTotalSchedules(address _vault) view returns(uint256)
func (_ScheduleController *ScheduleController) GetTotalSchedules(opts *runOptions, _vault common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _ScheduleController.call(opts, "getTotalSchedules", _vault)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

		// ScheduleControllerNewScheduleIterator is returned from FilterNewSchedule and is used to iterate over the raw logs and unpacked data for NewSchedule events raised by the ScheduleController contract.
		type ScheduleControllerNewScheduleIterator struct {
			Event *ScheduleControllerNewSchedule // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *ScheduleControllerNewScheduleIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(ScheduleControllerNewSchedule)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(ScheduleControllerNewSchedule)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *ScheduleControllerNewScheduleIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *ScheduleControllerNewScheduleIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// ScheduleControllerNewSchedule represents a NewSchedule event raised by the ScheduleController contract.
		type ScheduleControllerNewSchedule struct {
			ScheduleVault common.Address;
			Amount *big.Int;
			Start *big.Int;
			TotalDuration *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterNewSchedule is a free log retrieval operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
 		func (_ScheduleController *ScheduleController) FilterNewSchedule(opts *bind.FilterOpts, scheduleVault []common.Address) (*ScheduleControllerNewScheduleIterator, error) {

			var scheduleVaultRule []interface{}
			for _, scheduleVaultItem := range scheduleVault {
				scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
			}




			logs, sub, err := _ScheduleController.contract.FilterLogs(opts, "NewSchedule", scheduleVaultRule)
			if err != nil {
				return nil, err
			}
			return &ScheduleControllerNewScheduleIterator{contract: _ScheduleController.contract, event: "NewSchedule", logs: logs, sub: sub}, nil
 		}

		// WatchNewSchedule is a free log subscription operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
		func (_ScheduleController *ScheduleController) WatchNewSchedule(opts *bind.WatchOpts, sink chan<- *ScheduleControllerNewSchedule, scheduleVault []common.Address) (event.Subscription, error) {

			var scheduleVaultRule []interface{}
			for _, scheduleVaultItem := range scheduleVault {
				scheduleVaultRule = append(scheduleVaultRule, scheduleVaultItem)
			}




			logs, sub, err := _ScheduleController.contract.WatchLogs(opts, "NewSchedule", scheduleVaultRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(ScheduleControllerNewSchedule)
						if err := _ScheduleController.contract.UnpackLog(event, "NewSchedule", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseNewSchedule is a log parse operation binding the contract event 0xe8c9fd2e555ad3e633f249786eff2a2a523c05e21f497fbf8daadfb2e78a1edd.
		//
		// Solidity: event NewSchedule(address indexed scheduleVault, uint256 amount, uint256 start, uint256 totalDuration)
		func (_ScheduleController *ScheduleController) ParseNewSchedule(log types.Log) (*ScheduleControllerNewSchedule, error) {
			event := new(ScheduleControllerNewSchedule)
			if err := _ScheduleController.contract.UnpackLog(event, "NewSchedule", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// SlasherMetaData contains all meta data concerning the Slasher contract.
var SlasherMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getSlashingPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"}],\"name\":\"jail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"jailbound\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"_val\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slashingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailtime\",\"type\":\"uint256\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailedState\",\"type\":\"uint8\"},{\"internalType\":\"enumValidatorState\",\"name\":\"_newJailboundState\",\"type\":\"uint8\"}],\"name\":\"slashAndJail\",\"outputs\":[{\"components\":[{\"internalType\":\"addresspayable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBondedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfUnbondingStakeLocked\",\"type\":\"uint256\"},{\"internalType\":\"contractILiquid\",\"name\":\"liquidStateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSlashed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"consensusKey\",\"type\":\"bytes\"},{\"internalType\":\"enumValidatorState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structAutonity.Validator\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"c1f1884b": "getSlashingPrecision()",
		"f189d66c": "jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint8)",
		"c44a5b21": "jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint8)",
		"f774fac0": "slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256)",
		"64d61bbe": "slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8),uint256,uint256,uint8,uint8)",
	},
	Bin: "0x608060405234801561001057600080fd5b50604051610d98380380610d9883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610d05806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806364d61bbe1461005c578063c1f1884b14610087578063c44a5b2114610097578063f189d66c146100b7578063f774fac0146100ca575b600080fd5b61006f61006a366004610896565b6100eb565b60405161007e93929190610ac2565b60405180910390f35b604051612710815260200161007e565b6100aa6100a5366004610aec565b6101d6565b60405161007e9190610b3a565b6100aa6100c5366004610b54565b61021b565b6100dd6100d8366004610bab565b610260565b60405161007e929190610bf0565b6100f361058b565b6000805481906001600160a01b031633146101295760405162461bcd60e51b815260040161012090610c12565b60405180910390fd5b61271087106101a85760008861012001518960c001518a60a0015161014e9190610c70565b6101589190610c70565b600060a08b018190526101008b018190526101208b0181905260c08b01526101e08a018051919250829161018d908390610c70565b90525061019a89866102a8565b8893509150600190506101cb565b60006101b489896102e1565b90506101c1898888610549565b8893509150600090505b955095509592505050565b6101de61058b565b6000546001600160a01b031633146102085760405162461bcd60e51b815260040161012090610c12565b61021283836102a8565b50815b92915050565b61022361058b565b6000546001600160a01b0316331461024d5760405162461bcd60e51b815260040161012090610c12565b610258848484610549565b509192915050565b61026861058b565b600080546001600160a01b031633146102935760405162461bcd60e51b815260040161012090610c12565b600061029f85856102e1565b94959350505050565b600061020083015261024082018160058111156102c7576102c761094e565b908160058111156102da576102da61094e565b9052505050565b600061271082106103435760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f7420736c617368203130302520776974686f7574206a61696c626f604482015265756e64696e6760d01b6064820152608401610120565b60008361012001518460c001518560a0015161035f9190610c70565b6103699190610c70565b9050600061271061037a8386610c83565b6103849190610c9a565b9050600081905080866101200151106103b6578086610120018181516103aa9190610cbc565b905250600090506103d1565b6101208601516103c69082610cbc565b600061012088015290505b801561044e578086610100015110610419578086610100018181516103f69190610cbc565b90525060a08601805182919061040d908390610cbc565b9052506000905061044e565b6101008601516104299082610cbc565b90508561010001518660a0018181516104429190610cbc565b90525060006101008701525b600081118015610471575060008660a001518760c0015161046f9190610c70565b115b1561051d5760008660a001518760c0015161048c9190610c70565b60c088015161049b9084610c83565b6104a59190610c9a565b905060008760a001518860c001516104bd9190610c70565b60a08901516104cc9085610c83565b6104d69190610c9a565b9050818860c0018181516104ea9190610cbc565b90525060a088018051829190610501908390610cbc565b90525061050e8183610c70565b6105189084610cbc565b925050505b6105278183610cbc565b915081866101e00181815161053c9190610c70565b9052509095945050505050565b6105538243610c70565b61020084015261024083018160058111156105705761057061094e565b908160058111156105835761058361094e565b905250505050565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000600581111561064c5761064c61094e565b905290565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff8111828210171561068b5761068b610651565b60405290565b80356001600160a01b03811681146106a857600080fd5b919050565b600082601f8301126106be57600080fd5b813567ffffffffffffffff808211156106d9576106d9610651565b604051601f8301601f19908116603f0116810190828211818310171561070157610701610651565b8160405283815286602085880101111561071a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600681106106a857600080fd5b6000610260828403121561075c57600080fd5b610764610667565b905061076f82610691565b815261077d60208301610691565b602082015261078e60408301610691565b6040820152606082013567ffffffffffffffff808211156107ae57600080fd5b6107ba858386016106ad565b60608401526080848101359084015260a0808501359084015260c0808501359084015260e0808501359084015261010080850135908401526101208085013590840152610140808501359084015261016080850135908401526101809150610823828501610691565b918301919091526101a083810135908301526101c080840135908301526101e08084013590830152610200808401359083015261022090818401358181111561086b57600080fd5b610877868287016106ad565b8385015250505061024061088c81840161073a565b9082015292915050565b600080600080600060a086880312156108ae57600080fd5b853567ffffffffffffffff8111156108c557600080fd5b6108d188828901610749565b95505060208601359350604086013592506108ee6060870161073a565b91506108fc6080870161073a565b90509295509295909350565b6000815180845260005b8181101561092e57602081850181015186830182015201610912565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6006811061098257634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061026060208301516109b260208601826001600160a01b03169052565b5060408301516109cd60408601826001600160a01b03169052565b5060608301518160608601526109e582860182610908565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151610a5b828701826001600160a01b03169052565b50506101a083810151908501526101c080840151908501526101e0808401519085015261020080840151908501526102208084015185830382870152610aa18382610908565b9250505061024080840151610ab882870182610964565b5090949350505050565b606081526000610ad56060830186610986565b602083019490945250901515604090910152919050565b60008060408385031215610aff57600080fd5b823567ffffffffffffffff811115610b1657600080fd5b610b2285828601610749565b925050610b316020840161073a565b90509250929050565b602081526000610b4d6020830184610986565b9392505050565b600080600060608486031215610b6957600080fd5b833567ffffffffffffffff811115610b8057600080fd5b610b8c86828701610749565b93505060208401359150610ba26040850161073a565b90509250925092565b60008060408385031215610bbe57600080fd5b823567ffffffffffffffff811115610bd557600080fd5b610be185828601610749565b95602094909401359450505050565b604081526000610c036040830185610986565b90508260208301529392505050565b60208082526028908201527f43616c6c207265737472696374656420746f20746865204175746f6e6974792060408201526710dbdb9d1c9858dd60c21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561021557610215610c5a565b808202811582820484141761021557610215610c5a565b600082610cb757634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561021557610215610c5a56fea26469706673582212207b537dedb1ff9035c844758012466cfe097788f03cea3d876f65d3f7bcccb30264736f6c63430008150033",
}

// SlasherABI is the input ABI used to generate the binding from.
// Deprecated: Use SlasherMetaData.ABI instead.
var SlasherABI = SlasherMetaData.ABI

// Deprecated: Use SlasherMetaData.Sigs instead.
// SlasherFuncSigs maps the 4-byte function signature to its string representation.
var SlasherFuncSigs = SlasherMetaData.Sigs

// SlasherBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlasherMetaData.Bin instead.
var SlasherBin = SlasherMetaData.Bin

// DeploySlasher deploys a new Ethereum contract, binding an instance of Slasher to it.
func (r *Runner) DeploySlasher(opts *runOptions, _autonity common.Address) (common.Address, uint64, *Slasher, error) {
	parsed, err := SlasherMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(SlasherBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Slasher{contract: c}, nil
}

// Slasher is an auto generated Go binding around an Ethereum contract.
type Slasher struct {
	*contract
}

// GetSlashingPrecision is a free data retrieval call binding the contract method 0xc1f1884b.
//
// Solidity: function getSlashingPrecision() view returns(uint256)
func (_Slasher *Slasher) GetSlashingPrecision(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Slasher.call(opts, "getSlashingPrecision")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Jail is a free data retrieval call for a paid mutator transaction binding the contract method 0xf189d66c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *Slasher) CallJail(r *Runner, opts *runOptions, _val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (AutonityValidator, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Slasher.call(opts, "jail", _val, _jailtime, _newJailedState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// Jailbound is a free data retrieval call for a paid mutator transaction binding the contract method 0xc44a5b21.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *Slasher) CallJailbound(r *Runner, opts *runOptions, _val AutonityValidator, _newJailboundState uint8) (AutonityValidator, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Slasher.call(opts, "jailbound", _val, _newJailboundState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	return out0, consumed, err

}

// Slash is a free data retrieval call for a paid mutator transaction binding the contract method 0xf774fac0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_Slasher *Slasher) CallSlash(r *Runner, opts *runOptions, _val AutonityValidator, _slashingRate *big.Int) (AutonityValidator, *big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Slasher.call(opts, "slash", _val, _slashingRate)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return out0, out1, consumed, err

}

// SlashAndJail is a free data retrieval call for a paid mutator transaction binding the contract method 0x64d61bbe.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_Slasher *Slasher) CallSlashAndJail(r *Runner, opts *runOptions, _val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (AutonityValidator, *big.Int, bool, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _Slasher.call(opts, "slashAndJail", _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(AutonityValidator), *new(*big.Int), *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(AutonityValidator)).(*AutonityValidator)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)
	return out0, out1, out2, consumed, err

}

// Jail is a paid mutator transaction binding the contract method 0xf189d66c.
//
// Solidity: function jail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _jailtime, uint8 _newJailedState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *Slasher) Jail(opts *runOptions, _val AutonityValidator, _jailtime *big.Int, _newJailedState uint8) (uint64, error) {
	_, consumed, err := _Slasher.call(opts, "jail", _val, _jailtime, _newJailedState)
	return consumed, err
}

// Jailbound is a paid mutator transaction binding the contract method 0xc44a5b21.
//
// Solidity: function jailbound((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8))
func (_Slasher *Slasher) Jailbound(opts *runOptions, _val AutonityValidator, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _Slasher.call(opts, "jailbound", _val, _newJailboundState)
	return consumed, err
}

// Slash is a paid mutator transaction binding the contract method 0xf774fac0.
//
// Solidity: function slash((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256)
func (_Slasher *Slasher) Slash(opts *runOptions, _val AutonityValidator, _slashingRate *big.Int) (uint64, error) {
	_, consumed, err := _Slasher.call(opts, "slash", _val, _slashingRate)
	return consumed, err
}

// SlashAndJail is a paid mutator transaction binding the contract method 0x64d61bbe.
//
// Solidity: function slashAndJail((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8) _val, uint256 _slashingRate, uint256 _jailtime, uint8 _newJailedState, uint8 _newJailboundState) returns((address,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,bytes,uint8), uint256, bool)
func (_Slasher *Slasher) SlashAndJail(opts *runOptions, _val AutonityValidator, _slashingRate *big.Int, _jailtime *big.Int, _newJailedState uint8, _newJailboundState uint8) (uint64, error) {
	_, consumed, err := _Slasher.call(opts, "slashAndJail", _val, _slashingRate, _jailtime, _newJailedState, _newJailboundState)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// StabilizationMetaData contains all meta data concerning the Stabilization contract.
var StabilizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"internalType\":\"structStabilization.Config\",\"name\":\"config_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"},{\"internalType\":\"contractIERC20\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDebtPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp2_InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Exp_InputTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"debtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDue\",\"type\":\"uint256\"}],\"name\":\"interestDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mcr\",\"type\":\"uint256\"}],\"name\":\"minimumCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCDPRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atnSupplyOperator\",\"type\":\"address\"}],\"name\":\"setAtnSupplyOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinDebtRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplyControl\",\"type\":\"address\"}],\"name\":\"setSupplyControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"underCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"eced5526": "SCALE()",
		"ce4b5bbe": "SCALE_FACTOR()",
		"5dcc9391": "SECONDS_IN_YEAR()",
		"68cd03f6": "accounts()",
		"c5ebeaec": "borrow(uint256)",
		"83baa174": "borrowLimit(uint256,uint256,uint256,uint256)",
		"840c7e24": "cdps(address)",
		"5891de72": "collateralPrice()",
		"79502c55": "config()",
		"54a9f42c": "debtAmount(address)",
		"50bf06bf": "debtAmount(address,uint256)",
		"b6b55f25": "deposit(uint256)",
		"15184245": "interestDue(uint256,uint256,uint256,uint256)",
		"042e02cf": "isLiquidatable(address)",
		"2f865568": "liquidate(address)",
		"08796696": "minimumCollateral(uint256,uint256,uint256)",
		"2c01c1b9": "removeCDPRestrictions()",
		"402d8883": "repay()",
		"3c1cb964": "setAtnSupplyOperator(address)",
		"946ce8cd": "setLiquidationRatio(uint256)",
		"7b44646a": "setMinCollateralizationRatio(uint256)",
		"53afe81d": "setMinDebtRequirement(uint256)",
		"b3ab15fb": "setOperator(address)",
		"7adbf973": "setOracle(address)",
		"52e5a050": "setSupplyControl(address)",
		"fbbe6991": "underCollateralized(uint256,uint256,uint256,uint256)",
		"2e1a7d4d": "withdraw(uint256)",
	},
	Bin: "0x60806040523480156200001157600080fd5b506040516200294538038062002945833981016040819052620000349162000144565b8560400151806000036200005b57604051630309cb8760e51b815260040160405180910390fd5b866020015187604001518082106200008657604051630309cb8760e51b815260040160405180910390fd5b5050865160208801516001556040880151600255606088015160035560809097015160045550600780546001600160a01b03199081166001600160a01b039788161790915560088054821695871695909517909455600a8054851693861693909317909255600b80546009805490951693861693909317909355600160a01b93166001600160a81b031990911617919091179055600d556000805562000232565b80516001600160a01b03811681146200013f57600080fd5b919050565b6000806000806000808688036101408112156200016057600080fd5b60a08112156200016f57600080fd5b5060405160a081016001600160401b0381118282101715620001a157634e487b7160e01b600052604160045260246000fd5b8060405250875181526020880151602082015260408801516040820152606088015160608201526080880151608082015280965050620001e460a0880162000127565b9450620001f460c0880162000127565b93506200020460e0880162000127565b925062000215610100880162000127565b915062000226610120880162000127565b90509295509295509295565b61270380620002426000396000f3fe60806040526004361061019c5760003560e01c80635dcc9391116100ec578063946ce8cd1161008a578063c5ebeaec11610064578063c5ebeaec146104d6578063ce4b5bbe146104f6578063eced55261461050b578063fbbe69911461052057600080fd5b8063946ce8cd14610476578063b3ab15fb14610496578063b6b55f25146104b657600080fd5b80637adbf973116100c65780637adbf973146103b45780637b44646a146103d457806383baa174146103f4578063840c7e241461041457600080fd5b80635dcc93911461032b57806368cd03f61461034357806379502c551461036557600080fd5b80633c1cb9641161015957806352e5a0501161013357806352e5a050146102b657806353afe81d146102d657806354a9f42c146102f65780635891de721461031657600080fd5b80633c1cb9641461026e578063402d88831461028e57806350bf06bf1461029657600080fd5b8063042e02cf146101a157806308796696146101d657806315184245146102045780632c01c1b9146102245780632e1a7d4d1461023b5780632f8655681461025b575b600080fd5b3480156101ad57600080fd5b506101c16101bc36600461233f565b610540565b60405190151581526020015b60405180910390f35b3480156101e257600080fd5b506101f66101f136600461235a565b610588565b6040519081526020016101cd565b34801561021057600080fd5b506101f661021f366004612386565b6105f2565b34801561023057600080fd5b50610239610682565b005b34801561024757600080fd5b506102396102563660046123b8565b6106c1565b61023961026936600461233f565b6108d0565b34801561027a57600080fd5b5061023961028936600461233f565b610b3c565b610239610b88565b3480156102a257600080fd5b506101f66102b13660046123d1565b610da1565b3480156102c257600080fd5b506102396102d136600461233f565b610e0d565b3480156102e257600080fd5b506102396102f13660046123b8565b610e59565b34801561030257600080fd5b506101f661031136600461233f565b610e88565b34801561032257600080fd5b506101f6610eff565b34801561033757600080fd5b506101f66301e1338081565b34801561034f57600080fd5b5061035861119e565b6040516101cd91906123fb565b34801561037157600080fd5b5060005460015460025460035460045461038c949392919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101cd565b3480156103c057600080fd5b506102396103cf36600461233f565b611200565b3480156103e057600080fd5b506102396103ef3660046123b8565b61124c565b34801561040057600080fd5b506101f661040f366004612386565b6112c4565b34801561042057600080fd5b5061045661042f36600461233f565b60056020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016101cd565b34801561048257600080fd5b506102396104913660046123b8565b61131a565b3480156104a257600080fd5b506102396104b136600461233f565b611370565b3480156104c257600080fd5b506102396104d13660046123b8565b6113bc565b3480156104e257600080fd5b506102396104f13660046123b8565b6115fc565b34801561050257600080fd5b506101f6611809565b34801561051757600080fd5b506101f6601281565b34801561052c57600080fd5b506101c161053b366004612386565b611818565b6001600160a01b038116600090815260056020526040812081610563824261186f565b5090506105808260010154610576610eff565b6001548490611818565b949350505050565b600082806000036105ab5760405162bfc92160e01b815260040160405180910390fd5b8315806105b6575082155b156105d457604051630309cb8760e51b815260040160405180910390fd5b836105df848761245e565b6105e9919061248b565b95945050505050565b60008183111561061557604051630309cb8760e51b815260040160405180910390fd5b848460006106376301e1338061063161062e89896124ad565b90565b906118e5565b9050600061064d6106488484611904565b611913565b9050600061067461066d61066661062e6012600a6125a4565b8490611966565b8690611904565b9a9950505050505050505050565b6008546001600160a01b031633146106ac576040516282b42960e81b815260040160405180910390fd5b600b805460ff60a01b19169055600d54600055565b80806000036106e35760405163162908e360e11b815260040160405180910390fd5b600b54600160a01b900460ff1680156107075750600c546001600160a01b03163314155b15610724576040516282b42960e81b815260040160405180910390fd5b33600090815260056020526040902060018101548311156107585760405163162908e360e11b815260040160405180910390fd5b6000610764824261186f565b5090506000610771610eff565b905061078883600101548284600060010154611818565b156107a657604051636229415360e01b815260040160405180910390fd5b6107ba836002015482600060020154610588565b8584600101546107ca91906124ad565b10156107e957604051633a23d82560e01b815260040160405180910390fd5b848360010160008282546107fd91906124ad565b909155505060095460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087791906125c0565b610894576040516312171d8360e31b815260040160405180910390fd5b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050505050565b600b54600160a01b900460ff16156108fa576040516282b42960e81b815260040160405180910390fd5b3460000361091b57604051637c946ed760e01b815260040160405180910390fd5b6001600160a01b0381166000908152600560205260408120600281015490910361095857604051638aa5baf360e01b815260040160405180910390fd5b600080610965834261186f565b915091506109838360010154610979610eff565b6001548590611818565b6109a057604051636ef5bcdd60e11b815260040160405180910390fd5b60006109ac83346124ad565b905060018401805442865560009182905560028601829055600386019190915560095460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4191906125c0565b610a5e576040516312171d8360e31b815260040160405180910390fd5b600b546001600160a01b03166344df8e70610a7985876124ad565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b50505050506000821115610af557604051339083156108fc029084906000818181858888f19350505050158015610af3573d6000803e3d6000fd5b505b6040513381526001600160a01b038716907fc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4906020015b60405180910390a2505050505050565b6008546001600160a01b03163314610b66576040516282b42960e81b815260040160405180910390fd5b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600b54600160a01b900460ff168015610bac5750600c546001600160a01b03163314155b15610bc9576040516282b42960e81b815260040160405180910390fd5b34600003610bea57604051637c946ed760e01b815260040160405180910390fd5b3360009081526005602052604081206002810154909103610c1e57604051638aa5baf360e01b815260040160405180910390fd5b600080610c2b834261186f565b915091508134108015610c485750600354610c4634846124ad565b105b15610c665760405163e6bd447960e01b815260040160405180910390fd5b80836003016000828254610c7a91906125db565b909155505042835560008080610c908634611975565b92509250925081866002016000828254610caa91906124ad565b9250508190555082866003016000828254610cc591906124ad565b90915550508115610d3a57600b60009054906101000a90046001600160a01b03166001600160a01b03166344df8e70836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d2057600080fd5b505af1158015610d34573d6000803e3d6000fd5b50505050505b8015610d6f57604051339082156108fc029083906000818181858888f19350505050158015610d6d573d6000803e3d6000fd5b505b60405134815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a59423190602001610b2c565b6001600160a01b0382166000908152600560205260408120805484918491821015610ddf57604051630309cb8760e51b815260040160405180910390fd5b6001600160a01b0386166000908152600560205260409020610e01818761186f565b50979650505050505050565b6008546001600160a01b03163314610e37576040516282b42960e81b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314610e83576040516282b42960e81b815260040160405180910390fd5b600355565b6040516350bf06bf60e01b81526001600160a01b038216600482015242602482015260009030906350bf06bf90604401602060405180830381865afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef991906125ee565b92915050565b600a546040805180820182526007815266272a2716a0aa2760c91b602082015290516333f98c7760e01b815260009283926001600160a01b03909116916333f98c7791610f4e91600401612607565b608060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190612655565b90508060600151610fb35760405163cb08be8160e01b815260040160405180910390fd5b6000816020015113610fd75760405162bfc92160e01b815260040160405180910390fd5b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e91906125ee565b61105a6012600a6125a4565b111561110257600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d791906125ee565b6110e36012600a6125a4565b6110ed919061248b565b81602001516110fc919061245e565b91505090565b61110e6012600a6125a4565b600a60009054906101000a90046001600160a01b03166001600160a01b0316639670c0bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118591906125ee565b61118f919061248b565b81602001516110fc919061248b565b606060068054806020026020016040519081016040528092919081815260200182805480156111f657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111d8575b5050505050905090565b6007546001600160a01b0316331461122a576040516282b42960e81b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b808060000361126e57604051630309cb8760e51b815260040160405180910390fd5b6001548280821061129257604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b031633146112bc576040516282b42960e81b815260040160405180910390fd5b505050600255565b60008315806112d1575081155b156112ef57604051630309cb8760e51b815260040160405180910390fd5b6112fb6012600a6125a4565b611305908361245e565b83611310868861245e565b6105df919061245e565b600254819080821061133f57604051630309cb8760e51b815260040160405180910390fd5b6008546001600160a01b03163314611369576040516282b42960e81b815260040160405180910390fd5b5050600155565b6007546001600160a01b0316331461139a576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b80806000036113de5760405163162908e360e11b815260040160405180910390fd5b600b54600160a01b900460ff1680156114025750600c546001600160a01b03163314155b1561141f576040516282b42960e81b815260040160405180910390fd5b600954604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa15801561146d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149191906125ee565b10156114b0576040516313be252b60e01b815260040160405180910390fd5b336000908152600560205260408120805490910361150b57600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031916331790555b4281556001810180548491906000906115259084906125db565b90915550506009546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a591906125c0565b6115c2576040516312171d8360e31b815260040160405180910390fd5b60405183815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2505050565b808060000361161e5760405163162908e360e11b815260040160405180910390fd5b600b54600160a01b900460ff1680156116425750600c546001600160a01b03163314155b1561165f576040516282b42960e81b815260040160405180910390fd5b336000908152600560205260408120908061167a834261186f565b909250905061168985836125db565b6003549092508210156116af5760405163e6bd447960e01b815260040160405180910390fd5b60006116b9610eff565b90506116d084600101548285600060010154611818565b156116ee57604051636229415360e01b815260040160405180910390fd5b600061170a8560010154836000600401546000600201546112c4565b90508084111561172d57604051633a23d82560e01b815260040160405180910390fd5b4285556002850180548891906000906117479084906125db565b925050819055508285600301600082825461176291906125db565b9091555050600b546040516340c10f1960e01b8152336004820152602481018990526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156117b357600080fd5b505af11580156117c7573d6000803e3d6000fd5b50506040518981523392507fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750915060200160405180910390a250505050505050565b6118156012600a6125a4565b81565b6000838060000361183b5760405162bfc92160e01b815260040160405180910390fd5b8360000361184c5760009150611866565b8284611858878961245e565b611862919061248b565b1091505b50949350505050565b6000808260000361189357604051630309cb8760e51b815260040160405180910390fd5b6000846003015485600201546118a991906125db565b855490915084036118bd57600091506118d1565b60005485546118ce918391876105f2565b91505b6118db82826125db565b9250509250929050565b60006118fd61062e84670de0b6b3a7640000856119e9565b9392505050565b60006118fd61062e8484611abc565b600081680736ea4425c11ac63081111561194857604051630d7b1d6560e11b8152600481018490526024015b60405180910390fd5b6714057b7ef767814f8102610580670de0b6b3a76400008204611b72565b60006118fd61062e83856124ad565b6000806000808560030154866002015461198f91906125db565b9050856003015485106119a65785600301546119a8565b845b93508085106119bb5785600201546119c5565b6119c584866124ad565b92508085116119d55760006119df565b6119df81866124ad565b9150509250925092565b6000808060001985870985870292508281108382030391505080600003611a2357838281611a1957611a19612475565b04925050506118fd565b838110611a5457604051630c740aef60e31b815260048101879052602481018690526044810185905260640161193f565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000808060001984860984860292508281108382030391505080600003611af05750670de0b6b3a764000090049050610ef9565b670de0b6b3a76400008110611b2257604051635173648d60e01b8152600481018690526024810185905260440161193f565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b600081680a688906bd8affffff811115611ba25760405163b3b6ba1f60e01b81526004810184905260240161193f565b6000611bba670de0b6b3a7640000604084901b61248b565b905061058061062e82600160bf1b67ff00000000000000821615611cd057678000000000000000821615611bf75768016a09e667f3bcc9090260401c5b674000000000000000821615611c16576801306fe0a31b7152df0260401c5b672000000000000000821615611c35576801172b83c7d517adce0260401c5b671000000000000000821615611c545768010b5586cf9890f62a0260401c5b670800000000000000821615611c73576801059b0d31585743ae0260401c5b670400000000000000821615611c9257680102c9a3e778060ee70260401c5b670200000000000000821615611cb15768010163da9fb33356d80260401c5b670100000000000000821615611cd057680100b1afa5abcbed610260401c5b66ff000000000000821615611dcf576680000000000000821615611cfd5768010058c86da1c09ea20260401c5b6640000000000000821615611d1b576801002c605e2e8cec500260401c5b6620000000000000821615611d3957680100162f3904051fa10260401c5b6610000000000000821615611d57576801000b175effdc76ba0260401c5b6608000000000000821615611d7557680100058ba01fb9f96d0260401c5b6604000000000000821615611d935768010002c5cc37da94920260401c5b6602000000000000821615611db1576801000162e525ee05470260401c5b6601000000000000821615611dcf5768010000b17255775c040260401c5b65ff0000000000821615611ec55765800000000000821615611dfa576801000058b91b5bc9ae0260401c5b65400000000000821615611e1757680100002c5c89d5ec6d0260401c5b65200000000000821615611e345768010000162e43f4f8310260401c5b65100000000000821615611e5157680100000b1721bcfc9a0260401c5b65080000000000821615611e6e5768010000058b90cf1e6e0260401c5b65040000000000821615611e8b576801000002c5c863b73f0260401c5b65020000000000821615611ea857680100000162e430e5a20260401c5b65010000000000821615611ec5576801000000b1721835510260401c5b64ff00000000821615611fb257648000000000821615611eee57680100000058b90c0b490260401c5b644000000000821615611f0a5768010000002c5c8601cc0260401c5b642000000000821615611f26576801000000162e42fff00260401c5b641000000000821615611f425768010000000b17217fbb0260401c5b640800000000821615611f5e576801000000058b90bfce0260401c5b640400000000821615611f7a57680100000002c5c85fe30260401c5b640200000000821615611f965768010000000162e42ff10260401c5b640100000000821615611fb257680100000000b17217f80260401c5b63ff000000821615612096576380000000821615611fd95768010000000058b90bfc0260401c5b6340000000821615611ff4576801000000002c5c85fe0260401c5b632000000082161561200f57680100000000162e42ff0260401c5b631000000082161561202a576801000000000b17217f0260401c5b630800000082161561204557680100000000058b90c00260401c5b63040000008216156120605768010000000002c5c8600260401c5b630200000082161561207b576801000000000162e4300260401c5b63010000008216156120965768010000000000b172180260401c5b62ff000082161561217157628000008216156120bb576801000000000058b90c0260401c5b624000008216156120d557680100000000002c5c860260401c5b622000008216156120ef5768010000000000162e430260401c5b6210000082161561210957680100000000000b17210260401c5b620800008216156121235768010000000000058b910260401c5b6204000082161561213d576801000000000002c5c80260401c5b6202000082161561215757680100000000000162e40260401c5b62010000821615612171576801000000000000b1720260401c5b61ff008216156122435761800082161561219457680100000000000058b90260401c5b6140008216156121ad5768010000000000002c5d0260401c5b6120008216156121c6576801000000000000162e0260401c5b6110008216156121df5768010000000000000b170260401c5b6108008216156121f8576801000000000000058c0260401c5b61040082161561221157680100000000000002c60260401c5b61020082161561222a57680100000000000001630260401c5b61010082161561224357680100000000000000b10260401c5b60ff82161561230c57608082161561226457680100000000000000590260401c5b604082161561227c576801000000000000002c0260401c5b602082161561229457680100000000000000160260401c5b60108216156122ac576801000000000000000b0260401c5b60088216156122c457680100000000000000060260401c5b60048216156122dc57680100000000000000030260401c5b60028216156122f457680100000000000000010260401c5b600182161561230c57680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b80356001600160a01b038116811461233a57600080fd5b919050565b60006020828403121561235157600080fd5b6118fd82612323565b60008060006060848603121561236f57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561239c57600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156123ca57600080fd5b5035919050565b600080604083850312156123e457600080fd5b6123ed83612323565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561243c5783516001600160a01b031683529284019291840191600101612417565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610ef957610ef9612448565b634e487b7160e01b600052601260045260246000fd5b6000826124a857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610ef957610ef9612448565b600181815b808511156124fb5781600019048211156124e1576124e1612448565b808516156124ee57918102915b93841c93908002906124c5565b509250929050565b60008261251257506001610ef9565b8161251f57506000610ef9565b8160018114612535576002811461253f5761255b565b6001915050610ef9565b60ff84111561255057612550612448565b50506001821b610ef9565b5060208310610133831016604e8410600b841016171561257e575081810a610ef9565b61258883836124c0565b806000190482111561259c5761259c612448565b029392505050565b60006118fd8383612503565b8051801515811461233a57600080fd5b6000602082840312156125d257600080fd5b6118fd826125b0565b80820180821115610ef957610ef9612448565b60006020828403121561260057600080fd5b5051919050565b600060208083528351808285015260005b8181101561263457858101830151858201604001528201612618565b506000604082860101526040601f19601f8301168501019250505092915050565b60006080828403121561266757600080fd5b6040516080810181811067ffffffffffffffff8211171561269857634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201526126c1606084016125b0565b6060820152939250505056fea26469706673582212207a768b57c71961c75833ae1ea222661cb0cc8868a609b324b9549f59d4f4115464736f6c63430008150033",
}

// StabilizationABI is the input ABI used to generate the binding from.
// Deprecated: Use StabilizationMetaData.ABI instead.
var StabilizationABI = StabilizationMetaData.ABI

// Deprecated: Use StabilizationMetaData.Sigs instead.
// StabilizationFuncSigs maps the 4-byte function signature to its string representation.
var StabilizationFuncSigs = StabilizationMetaData.Sigs

// StabilizationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StabilizationMetaData.Bin instead.
var StabilizationBin = StabilizationMetaData.Bin

// DeployStabilization deploys a new Ethereum contract, binding an instance of Stabilization to it.
func (r *Runner) DeployStabilization(opts *runOptions, config_ StabilizationConfig, autonity common.Address, operator common.Address, oracle common.Address, supplyControl common.Address, collateralToken common.Address) (common.Address, uint64, *Stabilization, error) {
	parsed, err := StabilizationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StabilizationBin), config_, autonity, operator, oracle, supplyControl, collateralToken)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &Stabilization{contract: c}, nil
}

// Stabilization is an auto generated Go binding around an Ethereum contract.
type Stabilization struct {
	*contract
}

// SCALE is a free data retrieval call binding the contract method 0xeced5526.
//
// Solidity: function SCALE() view returns(uint256)
func (_Stabilization *Stabilization) SCALE(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SCALE")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SCALEFACTOR is a free data retrieval call binding the contract method 0xce4b5bbe.
//
// Solidity: function SCALE_FACTOR() view returns(uint256)
func (_Stabilization *Stabilization) SCALEFACTOR(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SCALE_FACTOR")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// SECONDSINYEAR is a free data retrieval call binding the contract method 0x5dcc9391.
//
// Solidity: function SECONDS_IN_YEAR() view returns(uint256)
func (_Stabilization *Stabilization) SECONDSINYEAR(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "SECONDS_IN_YEAR")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Accounts is a free data retrieval call binding the contract method 0x68cd03f6.
//
// Solidity: function accounts() view returns(address[])
func (_Stabilization *Stabilization) Accounts(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "accounts")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// BorrowLimit is a free data retrieval call binding the contract method 0x83baa174.
//
// Solidity: function borrowLimit(uint256 collateral, uint256 price, uint256 targetPrice, uint256 mcr) pure returns(uint256)
func (_Stabilization *Stabilization) BorrowLimit(opts *runOptions, collateral *big.Int, price *big.Int, targetPrice *big.Int, mcr *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "borrowLimit", collateral, price, targetPrice, mcr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Cdps is a free data retrieval call binding the contract method 0x840c7e24.
//
// Solidity: function cdps(address ) view returns(uint256 timestamp, uint256 collateral, uint256 principal, uint256 interest)
func (_Stabilization *Stabilization) Cdps(opts *runOptions, arg0 common.Address) (struct {
	Timestamp  *big.Int
	Collateral *big.Int
	Principal  *big.Int
	Interest   *big.Int
}, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "cdps", arg0)

	outstruct := new(struct {
		Timestamp  *big.Int
		Collateral *big.Int
		Principal  *big.Int
		Interest   *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Collateral = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Principal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Interest = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// CollateralPrice is a free data retrieval call binding the contract method 0x5891de72.
//
// Solidity: function collateralPrice() view returns(uint256 price)
func (_Stabilization *Stabilization) CollateralPrice(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "collateralPrice")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint256 borrowInterestRate, uint256 liquidationRatio, uint256 minCollateralizationRatio, uint256 minDebtRequirement, uint256 targetPrice)
func (_Stabilization *Stabilization) Config(opts *runOptions) (struct {
	BorrowInterestRate        *big.Int
	LiquidationRatio          *big.Int
	MinCollateralizationRatio *big.Int
	MinDebtRequirement        *big.Int
	TargetPrice               *big.Int
}, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "config")

	outstruct := new(struct {
		BorrowInterestRate        *big.Int
		LiquidationRatio          *big.Int
		MinCollateralizationRatio *big.Int
		MinDebtRequirement        *big.Int
		TargetPrice               *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.BorrowInterestRate = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LiquidationRatio = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinCollateralizationRatio = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinDebtRequirement = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TargetPrice = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// DebtAmount is a free data retrieval call binding the contract method 0x50bf06bf.
//
// Solidity: function debtAmount(address account, uint256 timestamp) view returns(uint256 debt)
func (_Stabilization *Stabilization) DebtAmount(opts *runOptions, account common.Address, timestamp *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "debtAmount", account, timestamp)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// DebtAmount0 is a free data retrieval call binding the contract method 0x54a9f42c.
//
// Solidity: function debtAmount(address account) view returns(uint256 debt)
func (_Stabilization *Stabilization) DebtAmount0(opts *runOptions, account common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "debtAmount0", account)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// InterestDue is a free data retrieval call binding the contract method 0x15184245.
//
// Solidity: function interestDue(uint256 debt, uint256 rate, uint256 timeBorrow, uint256 timeDue) pure returns(uint256)
func (_Stabilization *Stabilization) InterestDue(opts *runOptions, debt *big.Int, rate *big.Int, timeBorrow *big.Int, timeDue *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "interestDue", debt, rate, timeBorrow, timeDue)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// IsLiquidatable is a free data retrieval call binding the contract method 0x042e02cf.
//
// Solidity: function isLiquidatable(address account) view returns(bool)
func (_Stabilization *Stabilization) IsLiquidatable(opts *runOptions, account common.Address) (bool, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "isLiquidatable", account)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// MinimumCollateral is a free data retrieval call binding the contract method 0x08796696.
//
// Solidity: function minimumCollateral(uint256 principal, uint256 price, uint256 mcr) pure returns(uint256)
func (_Stabilization *Stabilization) MinimumCollateral(opts *runOptions, principal *big.Int, price *big.Int, mcr *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "minimumCollateral", principal, price, mcr)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnderCollateralized is a free data retrieval call binding the contract method 0xfbbe6991.
//
// Solidity: function underCollateralized(uint256 collateral, uint256 price, uint256 debt, uint256 liquidationRatio) pure returns(bool)
func (_Stabilization *Stabilization) UnderCollateralized(opts *runOptions, collateral *big.Int, price *big.Int, debt *big.Int, liquidationRatio *big.Int) (bool, uint64, error) {
	out, consumed, err := _Stabilization.call(opts, "underCollateralized", collateral, price, debt, liquidationRatio)

	if err != nil {
		return *new(bool), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	return out0, consumed, err

}

// Borrow is a free data retrieval call for a paid mutator transaction binding the contract method 0xc5ebeaec.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *Stabilization) CallBorrow(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "borrow", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Deposit is a free data retrieval call for a paid mutator transaction binding the contract method 0xb6b55f25.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *Stabilization) CallDeposit(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "deposit", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Liquidate is a free data retrieval call for a paid mutator transaction binding the contract method 0x2f865568.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *Stabilization) CallLiquidate(r *Runner, opts *runOptions, account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "liquidate", account)
	r.revertSnapshot(snap)
	return consumed, err

}

// RemoveCDPRestrictions is a free data retrieval call for a paid mutator transaction binding the contract method 0x2c01c1b9.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function removeCDPRestrictions() returns()
func (_Stabilization *Stabilization) CallRemoveCDPRestrictions(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "removeCDPRestrictions")
	r.revertSnapshot(snap)
	return consumed, err

}

// Repay is a free data retrieval call for a paid mutator transaction binding the contract method 0x402d8883.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function repay() payable returns()
func (_Stabilization *Stabilization) CallRepay(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "repay")
	r.revertSnapshot(snap)
	return consumed, err

}

// SetAtnSupplyOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0x3c1cb964.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setAtnSupplyOperator(address atnSupplyOperator) returns()
func (_Stabilization *Stabilization) CallSetAtnSupplyOperator(r *Runner, opts *runOptions, atnSupplyOperator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setAtnSupplyOperator", atnSupplyOperator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetLiquidationRatio is a free data retrieval call for a paid mutator transaction binding the contract method 0x946ce8cd.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) CallSetLiquidationRatio(r *Runner, opts *runOptions, ratio *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setLiquidationRatio", ratio)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinCollateralizationRatio is a free data retrieval call for a paid mutator transaction binding the contract method 0x7b44646a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) CallSetMinCollateralizationRatio(r *Runner, opts *runOptions, ratio *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setMinCollateralizationRatio", ratio)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetMinDebtRequirement is a free data retrieval call for a paid mutator transaction binding the contract method 0x53afe81d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *Stabilization) CallSetMinDebtRequirement(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setMinDebtRequirement", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *Stabilization) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOracle is a free data retrieval call for a paid mutator transaction binding the contract method 0x7adbf973.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *Stabilization) CallSetOracle(r *Runner, opts *runOptions, oracle common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setOracle", oracle)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetSupplyControl is a free data retrieval call for a paid mutator transaction binding the contract method 0x52e5a050.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *Stabilization) CallSetSupplyControl(r *Runner, opts *runOptions, supplyControl common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "setSupplyControl", supplyControl)
	r.revertSnapshot(snap)
	return consumed, err

}

// Withdraw is a free data retrieval call for a paid mutator transaction binding the contract method 0x2e1a7d4d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *Stabilization) CallWithdraw(r *Runner, opts *runOptions, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Stabilization.call(opts, "withdraw", amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// Borrow is a paid mutator transaction binding the contract method 0xc5ebeaec.
//
// Solidity: function borrow(uint256 amount) returns()
func (_Stabilization *Stabilization) Borrow(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "borrow", amount)
	return consumed, err
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns()
func (_Stabilization *Stabilization) Deposit(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "deposit", amount)
	return consumed, err
}

// Liquidate is a paid mutator transaction binding the contract method 0x2f865568.
//
// Solidity: function liquidate(address account) payable returns()
func (_Stabilization *Stabilization) Liquidate(opts *runOptions, account common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "liquidate", account)
	return consumed, err
}

// RemoveCDPRestrictions is a paid mutator transaction binding the contract method 0x2c01c1b9.
//
// Solidity: function removeCDPRestrictions() returns()
func (_Stabilization *Stabilization) RemoveCDPRestrictions(opts *runOptions) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "removeCDPRestrictions")
	return consumed, err
}

// Repay is a paid mutator transaction binding the contract method 0x402d8883.
//
// Solidity: function repay() payable returns()
func (_Stabilization *Stabilization) Repay(opts *runOptions) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "repay")
	return consumed, err
}

// SetAtnSupplyOperator is a paid mutator transaction binding the contract method 0x3c1cb964.
//
// Solidity: function setAtnSupplyOperator(address atnSupplyOperator) returns()
func (_Stabilization *Stabilization) SetAtnSupplyOperator(opts *runOptions, atnSupplyOperator common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setAtnSupplyOperator", atnSupplyOperator)
	return consumed, err
}

// SetLiquidationRatio is a paid mutator transaction binding the contract method 0x946ce8cd.
//
// Solidity: function setLiquidationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) SetLiquidationRatio(opts *runOptions, ratio *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setLiquidationRatio", ratio)
	return consumed, err
}

// SetMinCollateralizationRatio is a paid mutator transaction binding the contract method 0x7b44646a.
//
// Solidity: function setMinCollateralizationRatio(uint256 ratio) returns()
func (_Stabilization *Stabilization) SetMinCollateralizationRatio(opts *runOptions, ratio *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setMinCollateralizationRatio", ratio)
	return consumed, err
}

// SetMinDebtRequirement is a paid mutator transaction binding the contract method 0x53afe81d.
//
// Solidity: function setMinDebtRequirement(uint256 amount) returns()
func (_Stabilization *Stabilization) SetMinDebtRequirement(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setMinDebtRequirement", amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_Stabilization *Stabilization) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setOperator", operator)
	return consumed, err
}

// SetOracle is a paid mutator transaction binding the contract method 0x7adbf973.
//
// Solidity: function setOracle(address oracle) returns()
func (_Stabilization *Stabilization) SetOracle(opts *runOptions, oracle common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setOracle", oracle)
	return consumed, err
}

// SetSupplyControl is a paid mutator transaction binding the contract method 0x52e5a050.
//
// Solidity: function setSupplyControl(address supplyControl) returns()
func (_Stabilization *Stabilization) SetSupplyControl(opts *runOptions, supplyControl common.Address) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "setSupplyControl", supplyControl)
	return consumed, err
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Stabilization *Stabilization) Withdraw(opts *runOptions, amount *big.Int) (uint64, error) {
	_, consumed, err := _Stabilization.call(opts, "withdraw", amount)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StabilizationBorrowIterator is returned from FilterBorrow and is used to iterate over the raw logs and unpacked data for Borrow events raised by the Stabilization contract.
		type StabilizationBorrowIterator struct {
			Event *StabilizationBorrow // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationBorrowIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationBorrow)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationBorrow)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationBorrowIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationBorrowIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationBorrow represents a Borrow event raised by the Stabilization contract.
		type StabilizationBorrow struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBorrow is a free log retrieval operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterBorrow(opts *bind.FilterOpts, account []common.Address) (*StabilizationBorrowIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Borrow", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationBorrowIterator{contract: _Stabilization.contract, event: "Borrow", logs: logs, sub: sub}, nil
 		}

		// WatchBorrow is a free log subscription operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchBorrow(opts *bind.WatchOpts, sink chan<- *StabilizationBorrow, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Borrow", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationBorrow)
						if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBorrow is a log parse operation binding the contract event 0xcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750.
		//
		// Solidity: event Borrow(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseBorrow(log types.Log) (*StabilizationBorrow, error) {
			event := new(StabilizationBorrow)
			if err := _Stabilization.contract.UnpackLog(event, "Borrow", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Stabilization contract.
		type StabilizationDepositIterator struct {
			Event *StabilizationDeposit // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationDepositIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationDeposit)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationDeposit)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationDepositIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationDepositIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationDeposit represents a Deposit event raised by the Stabilization contract.
		type StabilizationDeposit struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterDeposit(opts *bind.FilterOpts, account []common.Address) (*StabilizationDepositIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Deposit", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationDepositIterator{contract: _Stabilization.contract, event: "Deposit", logs: logs, sub: sub}, nil
 		}

		// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StabilizationDeposit, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Deposit", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationDeposit)
						if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
		//
		// Solidity: event Deposit(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseDeposit(log types.Log) (*StabilizationDeposit, error) {
			event := new(StabilizationDeposit)
			if err := _Stabilization.contract.UnpackLog(event, "Deposit", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationLiquidateIterator is returned from FilterLiquidate and is used to iterate over the raw logs and unpacked data for Liquidate events raised by the Stabilization contract.
		type StabilizationLiquidateIterator struct {
			Event *StabilizationLiquidate // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationLiquidateIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationLiquidate)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationLiquidate)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationLiquidateIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationLiquidateIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationLiquidate represents a Liquidate event raised by the Stabilization contract.
		type StabilizationLiquidate struct {
			Account common.Address;
			Liquidator common.Address;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterLiquidate is a free log retrieval operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
 		func (_Stabilization *Stabilization) FilterLiquidate(opts *bind.FilterOpts, account []common.Address) (*StabilizationLiquidateIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Liquidate", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationLiquidateIterator{contract: _Stabilization.contract, event: "Liquidate", logs: logs, sub: sub}, nil
 		}

		// WatchLiquidate is a free log subscription operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
		func (_Stabilization *Stabilization) WatchLiquidate(opts *bind.WatchOpts, sink chan<- *StabilizationLiquidate, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Liquidate", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationLiquidate)
						if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseLiquidate is a log parse operation binding the contract event 0xc3d81b2125598b9a2b024afe09e33981f0aa5b7bcbe3e30c4303a4dec209ddb4.
		//
		// Solidity: event Liquidate(address indexed account, address liquidator)
		func (_Stabilization *Stabilization) ParseLiquidate(log types.Log) (*StabilizationLiquidate, error) {
			event := new(StabilizationLiquidate)
			if err := _Stabilization.contract.UnpackLog(event, "Liquidate", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationRepayIterator is returned from FilterRepay and is used to iterate over the raw logs and unpacked data for Repay events raised by the Stabilization contract.
		type StabilizationRepayIterator struct {
			Event *StabilizationRepay // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationRepayIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationRepay)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationRepay)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationRepayIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationRepayIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationRepay represents a Repay event raised by the Stabilization contract.
		type StabilizationRepay struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterRepay is a free log retrieval operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterRepay(opts *bind.FilterOpts, account []common.Address) (*StabilizationRepayIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Repay", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationRepayIterator{contract: _Stabilization.contract, event: "Repay", logs: logs, sub: sub}, nil
 		}

		// WatchRepay is a free log subscription operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchRepay(opts *bind.WatchOpts, sink chan<- *StabilizationRepay, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Repay", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationRepay)
						if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseRepay is a log parse operation binding the contract event 0x5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231.
		//
		// Solidity: event Repay(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseRepay(log types.Log) (*StabilizationRepay, error) {
			event := new(StabilizationRepay)
			if err := _Stabilization.contract.UnpackLog(event, "Repay", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// StabilizationWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Stabilization contract.
		type StabilizationWithdrawIterator struct {
			Event *StabilizationWithdraw // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StabilizationWithdrawIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StabilizationWithdraw)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StabilizationWithdraw)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StabilizationWithdrawIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StabilizationWithdrawIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StabilizationWithdraw represents a Withdraw event raised by the Stabilization contract.
		type StabilizationWithdraw struct {
			Account common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
 		func (_Stabilization *Stabilization) FilterWithdraw(opts *bind.FilterOpts, account []common.Address) (*StabilizationWithdrawIterator, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.FilterLogs(opts, "Withdraw", accountRule)
			if err != nil {
				return nil, err
			}
			return &StabilizationWithdrawIterator{contract: _Stabilization.contract, event: "Withdraw", logs: logs, sub: sub}, nil
 		}

		// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StabilizationWithdraw, account []common.Address) (event.Subscription, error) {

			var accountRule []interface{}
			for _, accountItem := range account {
				accountRule = append(accountRule, accountItem)
			}


			logs, sub, err := _Stabilization.contract.WatchLogs(opts, "Withdraw", accountRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StabilizationWithdraw)
						if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
		//
		// Solidity: event Withdraw(address indexed account, uint256 amount)
		func (_Stabilization *Stabilization) ParseWithdraw(log types.Log) (*StabilizationWithdraw, error) {
			event := new(StabilizationWithdraw)
			if err := _Stabilization.contract.UnpackLog(event, "Withdraw", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakeableVestingLogicMetaData contains all meta data concerning the StakeableVestingLogic contract.
var StakeableVestingLogicMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
	Bin: "0x60806040523480156200001157600080fd5b50604051620031d6380380620031d6833981016040819052620000349162000063565b600080546001600160a01b039092166001600160a01b0319928316179055600580549091163317905562000095565b6000602082840312156200007657600080fd5b81516001600160a01b03811681146200008e57600080fd5b9392505050565b61313180620000a56000396000f3fe6080604052600436106101855760003560e01c8063949813b8116100d1578063d06117ff1161008a578063ef5cfb8c11610064578063ef5cfb8c146104d4578063f85f91b4146104f4578063f87e497f14610509578063fc028e36146105295761018c565b8063d06117ff14610481578063e2bb823414610496578063e7dfe331146104b65761018c565b8063949813b8146103c2578063958f85bd146103f7578063a515366a1461040c578063a5d059ca1461042c578063a72fb5c01461044c578063b693fc091461046c5761018c565b806346e1448d1161013e57806357a8f91a1161011857806357a8f91a14610363578063591a2adf1461037857806369d89575146103985780638069d30c146103ad5761018c565b806346e1448d146102ae578063565a2e2c1461031157806357895ca2146103435761018c565b80630ae0a609146101f45780630b52f809146102165780631ac1cacf1461022b578063372500ab146102565780633c4fc2721461026b5780633c6f2fa61461028e5761018c565b3661018c57005b60405162461bcd60e51b815260206004820152603260248201527f66616c6c6261636b206e6f7420696d706c656d656e74656420666f72205374616044820152716b6561626c6556657374696e674c6f67696360701b60648201526084015b60405180910390fd5b34801561020057600080fd5b5061021461020f366004612bbd565b610549565b005b34801561022257600080fd5b50610214610681565b34801561023757600080fd5b506102406106ef565b60405161024d9190612c01565b60405180910390f35b34801561026257600080fd5b50610214610751565b34801561027757600080fd5b5061028061078d565b60405190815260200161024d565b34801561029a57600080fd5b506102146102a9366004612c4e565b61079c565b3480156102ba57600080fd5b506102c3610974565b60405161024d9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b34801561031d57600080fd5b506004546001600160a01b03165b6040516001600160a01b03909116815260200161024d565b34801561034f57600080fd5b5061021461035e366004612c7a565b6109f0565b34801561036f57600080fd5b50610280610ad5565b34801561038457600080fd5b50610280610393366004612c7a565b610ae7565b3480156103a457600080fd5b50610214610afb565b3480156103b957600080fd5b50610280610b54565b3480156103ce57600080fd5b506103e26103dd366004612c7a565b610b5f565b6040805192835260208301919091520161024d565b34801561040357600080fd5b506102c3610b75565b34801561041857600080fd5b50610280610427366004612c4e565b610b7d565b34801561043857600080fd5b50610280610447366004612c4e565b610c7d565b34801561045857600080fd5b50610280610467366004612c7a565b610d76565b34801561047857600080fd5b50610214610d89565b34801561048d57600080fd5b50610214610de6565b3480156104a257600080fd5b506102146104b1366004612c7a565b610e18565b3480156104c257600080fd5b506005546001600160a01b031661032b565b3480156104e057600080fd5b506102146104ef366004612c7a565b610ea0565b34801561050057600080fd5b506103e2610ede565b34801561051557600080fd5b50610280610524366004612c7a565b610f58565b34801561053557600080fd5b50610214610544366004612c9e565b610f6b565b6005546001600160a01b0316331461059f5760405162461bcd60e51b815260206004820152601960248201527831b0b63632b91034b9903737ba103a34329036b0b730b3b2b960391b60448201526064016101eb565b6004546001600160a01b0316156105f85760405162461bcd60e51b815260206004820152601860248201527f636f6e747261637420616c72656164792063726561746564000000000000000060448201526064016101eb565b600480546001600160a01b0319166001600160a01b0387161790556106228585858585600161101a565b805160065560208082015160075560408083015160085560608301516009556080830151600a5560a090920151600b805460ff1916911515919091179055815180830190925285825260009101819052600c94909455505050600d5550565b6004546001600160a01b031633146106ab5760405162461bcd60e51b81526004016101eb90612cb7565b6106b3611156565b6000806106be6111d7565b9150915060006106cd83611280565b90506106e26106dc8285612d16565b83611439565b6106ea611484565b505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561074757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610729575b5050505050905090565b6004546001600160a01b0316331461077b5760405162461bcd60e51b81526004016101eb90612cb7565b610783611678565b61078b611484565b565b6000610797611829565b905090565b6004546001600160a01b031633146107c65760405162461bcd60e51b81526004016101eb90612cb7565b600081116108225760405162461bcd60e51b815260206004820152602360248201527f7265717569726520706f73697469766520616d6f756e7420746f207472616e736044820152623332b960e91b60648201526084016101eb565b61082a611156565b600061083d61083884611936565b61197f565b90508181101561088f5760405162461bcd60e51b815260206004820152601860248201527f6e6f7420656e6f75676820756e6c6f636b6564204c4e544e000000000000000060448201526064016101eb565b600061089b84846119eb565b90506000806108a86111d7565b91509150818311156108f85760405162461bcd60e51b81526020600482015260196024820152786e6f7420656e6f75676820756e6c6f636b65642066756e647360381b60448201526064016101eb565b826006600101600082825461090d9190612d29565b9091555061091d90508587611aa1565b61092686611936565b6004546040518781526001600160a01b0392831692909116906000805160206130dc8339815191529060200160405180910390a36109648382611439565b61096c611484565b505050505050565b61097c612aaa565b6004546001600160a01b031633146109a65760405162461bcd60e51b81526004016101eb90612cb7565b6109ae611156565b506040805160c08101825260065481526007546020820152600854918101919091526009546060820152600a546080820152600b5460ff16151560a082015290565b60005460408051631cfe878d60e31b8152905133926001600160a01b03169163e7f43c689160048083019260209291908290030181865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190612d4c565b6001600160a01b031614610ab35760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016101eb565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080610ae06111d7565b5092915050565b6000610af561083883611b6d565b92915050565b6004546001600160a01b03163314610b255760405162461bcd60e51b81526004016101eb90612cb7565b610b2d611156565b600080610b386111d7565b915091506000610b49600684611c14565b90506106cd81611280565b600080610ae0611c90565b600080610b6b83611db9565b9094909350915050565b6109ae612aaa565b6004546000906001600160a01b03163314610baa5760405162461bcd60e51b81526004016101eb90612cb7565b6000610bb4611e37565b9050610bf46040518060800160405280838152602001866001600160a01b031681526020018581526020016000815250600e611eaf90919063ffffffff16565b610bfe8482611f0c565b60005460405163528a9b3560e11b81526001600160a01b038681166004830152602482018690529091169063a515366a906044016020604051808303816000875af1158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190612d69565b949350505050565b6004546000906001600160a01b03163314610caa5760405162461bcd60e51b81526004016101eb90612cb7565b600080546040516352e82ce560e11b81526001600160a01b038681166004830152602482018690529091169063a5d059ca906044016020604051808303816000875af1158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190612d69565b90506000610d2e611e37565b9050610d6e6040518060800160405280838152602001876001600160a01b0316815260200160008152602001848152506010611eaf90919063ffffffff16565b509392505050565b6000610af5610d8483611b6d565b611f43565b6004546001600160a01b03163314610db35760405162461bcd60e51b81526004016101eb90612cb7565b610dbb611f72565b600080610dc66111d7565b915091506000610dd7600684611c14565b90506106ea6106dc8285612d16565b6004546001600160a01b03163314610e105760405162461bcd60e51b81526004016101eb90612cb7565b61078b611156565b6005546001600160a01b03163314610e6e5760405162461bcd60e51b815260206004820152601960248201527831b0b63632b91034b9903737ba103a34329036b0b730b3b2b960391b60448201526064016101eb565b610e76611678565b610e7e611484565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610eca5760405162461bcd60e51b81526004016101eb90612cb7565b610ed381611f7a565b610edb611484565b50565b60008060005b600154811015610f5357600080610f2160018481548110610f0757610f07612d82565b6000918252602090912001546001600160a01b0316611db9565b9092509050610f308286612d29565b9450610f3c8185612d29565b935050508080610f4b90612d98565b915050610ee4565b509091565b6000610af5610f6683611b6d565b612097565b6004546001600160a01b03163314610f955760405162461bcd60e51b81526004016101eb90612cb7565b610f9d611f72565b600080610fa86111d7565b9150915081831115610ff85760405162461bcd60e51b81526020600482015260196024820152786e6f7420656e6f75676820756e6c6f636b65642066756e647360381b60448201526064016101eb565b6000611005600685611c14565b90506110146106dc8286612d16565b50505050565b611022612aaa565b6001600160a01b0387166110835760405162461bcd60e51b815260206004820152602260248201527f62656e65666963696172792063616e6e6f74206265207a65726f206164647265604482015261737360f01b60648201526084016101eb565b600086116110d35760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742073686f756c6420626520706f7369746976650000000000000060448201526064016101eb565b8383116111225760405162461bcd60e51b815260206004820152601e60248201527f656e64206d7573742062652067726561746572207468616e20636c696666000060448201526064016101eb565b506040805160c0810182529586526000602087015285019390935260608401919091526080830152151560a0820152919050565b61115e6120c6565b611166612160565b6000546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190612d69565b600655565b60095460085460009182916111ec9190612d29565b60008054906101000a90046001600160a01b03166001600160a01b03166389c614b86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112619190612d69565b10156112705750600091829150565b611278611c90565b915091509091565b6001548190600090819081908190815b818110801561129f5750600087115b1561140c57600181815481106112b7576112b7612d82565b6000918252602090912001546001600160a01b031695506112da61083887611936565b945084156113fa576112ec86866119eb565b9350838710611353576112ff8488612d16565b965061130b8587611aa1565b61131486611936565b6001600160a01b0316336001600160a01b03166000805160206130dc8339815191528760405161134691815260200190565b60405180910390a36113fa565b61135d8688612238565b9250848311156113a85760405162461bcd60e51b8152602060048201526016602482015275636f6e76657273696f6e206e6f7420776f726b696e6760501b60448201526064016101eb565b600096506113b68387611aa1565b6113bf86611936565b6001600160a01b0316336001600160a01b03166000805160206130dc833981519152856040516113f191815260200190565b60405180910390a35b8061140481612d98565b915050611290565b506114178688612d16565b60078054600090611429908490612d29565b9091555095979650505050505050565b81600003611445575050565b600d54600c54600090839061145b908490612d16565b6114659086612db1565b61146f9190612dc8565b905061147b8183612d29565b600d5550505050565b306000808080611492611e37565b905060005b60015481101561096c5760036000600183815481106114b8576114b8612d82565b60009182526020808320909101546001600160a01b03168352820192909252604001902092505b6114ea826001612d29565b6001840154146116665782546040516370a0823160e01b81526001600160a01b03888116600483015260009216906370a0823190602401602060405180830381865afa15801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190612d69565b11611666578254604051631293027760e31b81526001600160a01b0388811660048301529091169063949813b8906024016040805180830381865afa1580156115af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d39190612dea565b9095509350841515806115e65750600084115b6116665761161a6001828154811061160057611600612d82565b6000918252602090912001546001600160a01b03166122e4565b60015481101561166657600360006001838154811061163b5761163b612d82565b60009182526020808320909101546001600160a01b03168352820192909252604001902092506114df565b8061167081612d98565b915050611497565b600080546040516370a0823160e01b815230600482018190529283319290916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190612d69565b60015490915060005b818110156117935761172e6001828154811061171457611714612d82565b6000918252602090912001546001600160a01b0316611936565b6001600160a01b031663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561176857600080fd5b505af115801561177c573d6000803e3d6000fd5b50505050808061178b90612d98565b9150506116f6565b506110146117ab846001600160a01b03871631612d16565b6000546040516370a0823160e01b81526001600160a01b038881166004830152869216906370a08231906024015b602060405180830381865afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a9190612d69565b6118249190612d16565b612471565b600080546040516370a0823160e01b81523060048201528291829182916001600160a01b0316906370a0823190602401602060405180830381865afa158015611876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189a9190612d69565b60015490915060005b8181101561190857600181815481106118be576118be612d82565b6000918252602090912001546001600160a01b031694506118de85610d76565b93506118ea85856119eb565b6118f49084612d29565b92508061190081612d98565b9150506118a3565b5061191161251f565b611919612739565b6119239084612d29565b61192d9190612d29565b94505050505090565b6001600160a01b0381811660009081526003602052604081205490911661196057611960826127b8565b506001600160a01b039081166000908152600360205260409020541690565b604051631092ab9160e31b81523060048201526000906001600160a01b038316906384955c88906024015b602060405180830381865afa1580156119c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af59190612d69565b6000816000036119fd57506000610af5565b60008054604051630c825d9760e11b81526001600160a01b03868116600483015290911690631904bb2e90602401600060405180830381865afa158015611a48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a709190810190612f03565b9050806101a001518161010001518260a00151611a8d9190612d16565b611a979085612db1565b610c759190612dc8565b6000611aac82611936565b6004805460405163a9059cbb60e01b81526001600160a01b039182169281019290925260248201869052919091169063a9059cbb906044016020604051808303816000875af1158015611b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b279190613076565b9050806106ea5760405162461bcd60e51b815260206004820152601460248201527313139513881d1c985b9cd9995c8819985a5b195960621b60448201526064016101eb565b6001600160a01b038082166000908152600360205260408120549091168015611b965792915050565b600054604051630c825d9760e11b81526001600160a01b03858116600483015290911690631904bb2e90602401600060405180830381865afa158015611be0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c089190810190612f03565b61018001519392505050565b8154600090821115611c42578254611c2c9083612d16565b9050611c3d833385600001546127ef565b611c53565b8115611c5357611c538333846127ef565b6000546001600160a01b0316336000805160206130dc833981519152611c798486612d16565b60405190815260200160405180910390a392915050565b60008060008060009054906101000a90046001600160a01b03166001600160a01b03166389c614b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190612d69565b60085490915080821015611d255750600093849350915050565b600a54600c54600d54600085611d3b8587612d29565b11611d5157611d4a8284612d16565b9050611d7e565b8184611d5d8789612d16565b611d679086612db1565b611d719190612dc8565b611d7b9190612d16565b90505b611d86611829565b96508015611daf57611d988284612d16565b611da28289612db1565b611dac9190612dc8565b97505b5050505050509091565b600080611dc583611b6d565b604051631293027760e31b81523060048201526001600160a01b03919091169063949813b8906024016040805180830381865afa158015611e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2e9190612dea565b91509150915091565b60008060009054906101000a90046001600160a01b03166001600160a01b031663c9d97af46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e8b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107979190612d69565b600191820180548084018255600091825260209182902083516004909202019081559082015192810180546001600160a01b0319166001600160a01b03909416939093179092556040810151600283015560600151600390910155565b611f158261282e565b611f20816001612d29565b6001600160a01b0390921660009081526003602052604090206001019190915550565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a08231906024016119aa565b610783611156565b600080546040516370a0823160e01b815230600482018190529283319290916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fef9190612d69565b9050611ffa84611936565b6001600160a01b031663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561203457600080fd5b505af1158015612048573d6000803e3d6000fd5b5050505061101482846001600160a01b0316316120659190612d16565b6000546040516370a0823160e01b81526001600160a01b038781166004830152859216906370a08231906024016117d9565b604051632c9aab9b60e11b81523060048201526000906001600160a01b038316906359355736906024016119aa565b6000806120d1611e37565b600f8054600e5492935090915b81811015612140578281815481106120f8576120f8612d82565b906000526020600020906004020194508385600001541015612140576001850154855461212e916001600160a01b0316906128c4565b8061213881612d98565b9150506120de565b600e54612159906121519083612d16565b600e90612911565b5050505050565b6011805460105460009291905b8181101561221f5782818154811061218757612187612d82565b6000918252602082209154600491820290920160038101546040516338a537df60e21b81529283015295506001600160a01b039091169063e294df7c90602401602060405180830381865afa1580156121e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122089190613076565b1561221f578061221781612d98565b91505061216d565b601054611014906122309083612d16565b601090612911565b60008160000361224a57506000610af5565b60008054604051630c825d9760e11b81526001600160a01b03868116600483015290911690631904bb2e90602401600060405180830381865afa158015612295573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122bd9190810190612f03565b90508061010001518160a001516122d49190612d16565b6101a0820151611a979085612db1565b6001600160a01b038116600090815260026020526040902054600154810361237257600180548061231757612317613098565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b039490941684526002825260408085208590556003909252908320805490911681556001019190915550565b6001805460009190612385908290612d16565b8154811061239557612395612d82565b6000918252602090912001546001600160a01b031690508060016123b98185612d16565b815481106123c9576123c9612d82565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559183168152600290915260409020829055600180548061241357612413613098565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b039590951685526003825260408086208054909216825560019190910185905560029091528320929092555050565b6004546040516000916001600160a01b03169084908381818185875af1925050503d80600081146124be576040519150601f19603f3d011682016040523d82523d6000602084013e6124c3565b606091505b50509050806125095760405162461bcd60e51b81526020600482015260126024820152713330b4b632b2103a379039b2b7321020aa2760711b60448201526064016101eb565b6004546106ea906001600160a01b0316836129ed565b60008060008061252d612ae2565b6000612537611e37565b6011805460105492935090915b8181101561272c5782818154811061255e5761255e612d82565b90600052602060002090600402019550838660000154031561272c5760005460038701546040516338a537df60e21b81526001600160a01b039092169163e294df7c916125b19160040190815260200190565b602060405180830381865afa1580156125ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f29190613076565b61271a576000546003870154604051638d34728760e01b81526001600160a01b0390921691638d3472879161262d9160040190815260200190565b602060405180830381865afa15801561264a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266e9190612d69565b9650861561271a576000546001870154604051630c825d9760e11b81526001600160a01b039182166004820152911690631904bb2e90602401600060405180830381865afa1580156126c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126ec9190810190612f03565b94508460e001518560c00151886127039190612db1565b61270d9190612dc8565b6127179089612d29565b97505b8061272481612d98565b915050612544565b5095979650505050505050565b600080600080612747611e37565b600f8054600e5492935090915b818110156127ad5782818154811061276e5761276e612d82565b906000526020600020906004020194508385600001541061279b5760028501546127989087612d29565b95505b806127a581612d98565b915050612754565b509395945050505050565b6127c181611b6d565b6001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b808360000160008282546128039190612d16565b925050819055508083600101600082825461281e9190612d29565b909155506106ea905082826129ed565b6001600160a01b0381166000908152600260205260409020541561284f5750565b6001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038481169182179092559154600092835260026020908152604080852092909255600390529091205416610edb57610edb816127b8565b6128cf816001612d29565b6001600160a01b0383166000908152600360205260409020600101540361290d576001600160a01b0382166000908152600360205260408120600101555b5050565b81546001830154612923908290612d16565b8211156129725760405162461bcd60e51b815260206004820181905260248201527f6e6f7420656e6f75676820656c656d656e747320696e2074686520717565756560448201526064016101eb565b60005b82156129e65783600101828154811061299057612990612d82565b600091825260208220600260049092020190810182905581815560038101919091556001810180546001600160a01b03191690559050816129d081612d98565b92505082806129de906130ae565b935050612975565b5090915550565b6000805460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015612a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a659190613076565b9050806106ea5760405162461bcd60e51b8152602060048201526013602482015272139513881b9bdd081d1c985b9cd9995c9c9959606a1b60448201526064016101eb565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180610260016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160006005811115612ba357612ba36130c5565b905290565b6001600160a01b0381168114610edb57600080fd5b600080600080600060a08688031215612bd557600080fd5b8535612be081612ba8565b97602087013597506040870135966060810135965060800135945092505050565b6020808252825182820181905260009190848201906040850190845b81811015612c425783516001600160a01b031683529284019291840191600101612c1d565b50909695505050505050565b60008060408385031215612c6157600080fd5b8235612c6c81612ba8565b946020939093013593505050565b600060208284031215612c8c57600080fd5b8135612c9781612ba8565b9392505050565b600060208284031215612cb057600080fd5b5035919050565b60208082526029908201527f63616c6c6572206973206e6f742062656e6566696369617279206f66207468656040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610af557610af5612d00565b80820180821115610af557610af5612d00565b8051612d4781612ba8565b919050565b600060208284031215612d5e57600080fd5b8151612c9781612ba8565b600060208284031215612d7b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201612daa57612daa612d00565b5060010190565b8082028115828204841417610af557610af5612d00565b600082612de557634e487b7160e01b600052601260045260246000fd5b500490565b60008060408385031215612dfd57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052604160045260246000fd5b604051610260810167ffffffffffffffff81118282101715612e4857612e48612e0e565b60405290565b600082601f830112612e5f57600080fd5b815167ffffffffffffffff80821115612e7a57612e7a612e0e565b604051601f8301601f19908116603f01168101908282118183101715612ea257612ea2612e0e565b81604052838152602092508683858801011115612ebe57600080fd5b600091505b83821015612ee05785820183015181830184015290820190612ec3565b600093810190920192909252949350505050565b805160068110612d4757600080fd5b600060208284031215612f1557600080fd5b815167ffffffffffffffff80821115612f2d57600080fd5b908301906102608286031215612f4257600080fd5b612f4a612e24565b612f5383612d3c565b8152612f6160208401612d3c565b6020820152612f7260408401612d3c565b6040820152606083015182811115612f8957600080fd5b612f9587828601612e4e565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160808401518183015250610180613001818501612d3c565b908201526101a083810151908201526101c080840151908201526101e080840151908201526102008084015190820152610220808401518381111561304557600080fd5b61305188828701612e4e565b8284015250506102409150613067828401612ef4565b91810191909152949350505050565b60006020828403121561308857600080fd5b81518015158114612c9757600080fd5b634e487b7160e01b600052603160045260246000fd5b6000816130bd576130bd612d00565b506000190190565b634e487b7160e01b600052602160045260246000fdfeeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fba264697066735822122057f3cc684820fa7d353ced074120d0300b7e7b8e79c4b7adf5b3a9613511095c64736f6c63430008150033",
}

// StakeableVestingLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingLogicMetaData.ABI instead.
var StakeableVestingLogicABI = StakeableVestingLogicMetaData.ABI

// Deprecated: Use StakeableVestingLogicMetaData.Sigs instead.
// StakeableVestingLogicFuncSigs maps the 4-byte function signature to its string representation.
var StakeableVestingLogicFuncSigs = StakeableVestingLogicMetaData.Sigs

// StakeableVestingLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingLogicMetaData.Bin instead.
var StakeableVestingLogicBin = StakeableVestingLogicMetaData.Bin

// DeployStakeableVestingLogic deploys a new Ethereum contract, binding an instance of StakeableVestingLogic to it.
func (r *Runner) DeployStakeableVestingLogic(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakeableVestingLogic, error) {
	parsed, err := StakeableVestingLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakeableVestingLogicBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakeableVestingLogic{contract: c}, nil
}

// StakeableVestingLogic is an auto generated Go binding around an Ethereum contract.
type StakeableVestingLogic struct {
	*contract
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) ContractTotalValue(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogic) GetBeneficiary(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "getBeneficiary")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogic) GetContract(opts *runOptions) (ContractBaseContract, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "getContract")

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogic *StakeableVestingLogic) GetLinkedValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogic *StakeableVestingLogic) GetManagerContractAddress(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) LiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) LockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakeableVestingLogic *StakeableVestingLogic) UnclaimedRewards(opts *runOptions, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "unclaimedRewards", _validator)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakeableVestingLogic *StakeableVestingLogic) UnclaimedRewards0(opts *runOptions) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "unclaimedRewards0")

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) UnlockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) VestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "vestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) WithdrawableVestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogic.call(opts, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakeableVestingLogic.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xe2bb8234.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "changeContractBeneficiary", _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards0 is a free data retrieval call for a paid mutator transaction binding the contract method 0xef5cfb8c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallClaimRewards0(r *Runner, opts *runOptions, _validator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "claimRewards0", _validator)
	r.revertSnapshot(snap)
	return consumed, err

}

// CreateContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae0a609.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallCreateContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x0b52f809.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallReleaseAllLNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseAllLNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xb693fc09.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallReleaseAllNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseAllNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x69d89575.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallReleaseFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3c6f2fa6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallReleaseLNTN(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseLNTN", _validator, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xfc028e36.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallReleaseNTN(r *Runner, opts *runOptions, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseNTN", _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x57895ca2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallSetManagerContract(r *Runner, opts *runOptions, _managerContract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "setManagerContract", _managerContract)
	r.revertSnapshot(snap)
	return consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakeableVestingLogic.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0xd06117ff.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CallUpdateFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogic.call(opts, "updateFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateFundsAndGetContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x46e1448d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogic) CallUpdateFundsAndGetContract(r *Runner, opts *runOptions) (ContractBaseContract, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakeableVestingLogic.call(opts, "updateFundsAndGetContract")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ChangeContractBeneficiary(opts *runOptions, _recipient common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "changeContractBeneficiary", _recipient)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "claimRewards")
	return consumed, err
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ClaimRewards0(opts *runOptions, _validator common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "claimRewards0", _validator)
	return consumed, err
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) CreateContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ReleaseAllLNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseAllLNTN")
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ReleaseAllNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseAllNTN")
	return consumed, err
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ReleaseFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseFunds")
	return consumed, err
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ReleaseLNTN(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseLNTN", _validator, _amount)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) ReleaseNTN(opts *runOptions, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "releaseNTN", _amount)
	return consumed, err
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogic *StakeableVestingLogic) SetManagerContract(opts *runOptions, _managerContract common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "setManagerContract", _managerContract)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogic *StakeableVestingLogic) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogic *StakeableVestingLogic) UpdateFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "updateFunds")
	return consumed, err
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogic *StakeableVestingLogic) UpdateFundsAndGetContract(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "updateFundsAndGetContract")
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogic) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakeableVestingLogic *StakeableVestingLogic) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogic.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StakeableVestingLogicFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the StakeableVestingLogic contract.
		type StakeableVestingLogicFundsReleasedIterator struct {
			Event *StakeableVestingLogicFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StakeableVestingLogicFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StakeableVestingLogicFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StakeableVestingLogicFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StakeableVestingLogicFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StakeableVestingLogicFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StakeableVestingLogicFundsReleased represents a FundsReleased event raised by the StakeableVestingLogic contract.
		type StakeableVestingLogicFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_StakeableVestingLogic *StakeableVestingLogic) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*StakeableVestingLogicFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakeableVestingLogic.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &StakeableVestingLogicFundsReleasedIterator{contract: _StakeableVestingLogic.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakeableVestingLogic *StakeableVestingLogic) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *StakeableVestingLogicFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakeableVestingLogic.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StakeableVestingLogicFundsReleased)
						if err := _StakeableVestingLogic.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakeableVestingLogic *StakeableVestingLogic) ParseFundsReleased(log types.Log) (*StakeableVestingLogicFundsReleased, error) {
			event := new(StakeableVestingLogicFundsReleased)
			if err := _StakeableVestingLogic.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakeableVestingLogicTestMetaData contains all meta data concerning the StakeableVestingLogicTest contract.
var StakeableVestingLogicTestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"liquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"lockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAllNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseNTN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"}],\"name\":\"setManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_atnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ntnRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unlockedLiquidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsAndGetContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableVestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a515366a": "bond(address,uint256)",
		"e2bb8234": "changeContractBeneficiary(address)",
		"372500ab": "claimRewards()",
		"ef5cfb8c": "claimRewards(address)",
		"cfae4141": "clearValidators()",
		"3c4fc272": "contractTotalValue()",
		"0ae0a609": "createContract(address,uint256,uint256,uint256,uint256)",
		"565a2e2c": "getBeneficiary()",
		"958f85bd": "getContract()",
		"1ac1cacf": "getLinkedValidators()",
		"e7dfe331": "getManagerContractAddress()",
		"a72fb5c0": "liquidBalance(address)",
		"f87e497f": "lockedLiquidBalance(address)",
		"0b52f809": "releaseAllLNTN()",
		"b693fc09": "releaseAllNTN()",
		"69d89575": "releaseFunds()",
		"3c6f2fa6": "releaseLNTN(address,uint256)",
		"fc028e36": "releaseNTN(uint256)",
		"57895ca2": "setManagerContract(address)",
		"a5d059ca": "unbond(address,uint256)",
		"f85f91b4": "unclaimedRewards()",
		"949813b8": "unclaimedRewards(address)",
		"591a2adf": "unlockedLiquidBalance(address)",
		"d06117ff": "updateFunds()",
		"46e1448d": "updateFundsAndGetContract()",
		"8069d30c": "vestedFunds()",
		"57a8f91a": "withdrawableVestedFunds()",
	},
	Bin: "",
}

// StakeableVestingLogicTestABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingLogicTestMetaData.ABI instead.
var StakeableVestingLogicTestABI = StakeableVestingLogicTestMetaData.ABI

// Deprecated: Use StakeableVestingLogicTestMetaData.Sigs instead.
// StakeableVestingLogicTestFuncSigs maps the 4-byte function signature to its string representation.
var StakeableVestingLogicTestFuncSigs = StakeableVestingLogicTestMetaData.Sigs

// StakeableVestingLogicTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingLogicTestMetaData.Bin instead.
var StakeableVestingLogicTestBin = StakeableVestingLogicTestMetaData.Bin

// DeployStakeableVestingLogicTest deploys a new Ethereum contract, binding an instance of StakeableVestingLogicTest to it.
func (r *Runner) DeployStakeableVestingLogicTest(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakeableVestingLogicTest, error) {
	parsed, err := StakeableVestingLogicTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakeableVestingLogicTestBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakeableVestingLogicTest{contract: c}, nil
}

// StakeableVestingLogicTest is an auto generated Go binding around an Ethereum contract.
type StakeableVestingLogicTest struct {
	*contract
}

// ContractTotalValue is a free data retrieval call binding the contract method 0x3c4fc272.
//
// Solidity: function contractTotalValue() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ContractTotalValue(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "contractTotalValue")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x565a2e2c.
//
// Solidity: function getBeneficiary() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) GetBeneficiary(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "getBeneficiary")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContract is a free data retrieval call binding the contract method 0x958f85bd.
//
// Solidity: function getContract() view returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) GetContract(opts *runOptions) (ContractBaseContract, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "getContract")

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// GetLinkedValidators is a free data retrieval call binding the contract method 0x1ac1cacf.
//
// Solidity: function getLinkedValidators() view returns(address[])
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) GetLinkedValidators(opts *runOptions) ([]common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "getLinkedValidators")

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetManagerContractAddress is a free data retrieval call binding the contract method 0xe7dfe331.
//
// Solidity: function getManagerContractAddress() view returns(address)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) GetManagerContractAddress(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "getManagerContractAddress")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// LiquidBalance is a free data retrieval call binding the contract method 0xa72fb5c0.
//
// Solidity: function liquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) LiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "liquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// LockedLiquidBalance is a free data retrieval call binding the contract method 0xf87e497f.
//
// Solidity: function lockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) LockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "lockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0x949813b8.
//
// Solidity: function unclaimedRewards(address _validator) view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) UnclaimedRewards(opts *runOptions, _validator common.Address) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "unclaimedRewards", _validator)

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnclaimedRewards0 is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256 _atnRewards, uint256 _ntnRewards)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) UnclaimedRewards0(opts *runOptions) (struct {
	AtnRewards *big.Int
	NtnRewards *big.Int
}, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "unclaimedRewards0")

	outstruct := new(struct {
		AtnRewards *big.Int
		NtnRewards *big.Int
	})
	if err != nil {
		return *outstruct, consumed, err
	}

	outstruct.AtnRewards = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NtnRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	return *outstruct, consumed, err

}

// UnlockedLiquidBalance is a free data retrieval call binding the contract method 0x591a2adf.
//
// Solidity: function unlockedLiquidBalance(address _validator) view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) UnlockedLiquidBalance(opts *runOptions, _validator common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "unlockedLiquidBalance", _validator)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// VestedFunds is a free data retrieval call binding the contract method 0x8069d30c.
//
// Solidity: function vestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) VestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "vestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// WithdrawableVestedFunds is a free data retrieval call binding the contract method 0x57a8f91a.
//
// Solidity: function withdrawableVestedFunds() view returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) WithdrawableVestedFunds(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingLogicTest.call(opts, "withdrawableVestedFunds")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Bond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa515366a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallBond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakeableVestingLogicTest.call(opts, "bond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xe2bb8234.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "changeContractBeneficiary", _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards is a free data retrieval call for a paid mutator transaction binding the contract method 0x372500ab.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallClaimRewards(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "claimRewards")
	r.revertSnapshot(snap)
	return consumed, err

}

// ClaimRewards0 is a free data retrieval call for a paid mutator transaction binding the contract method 0xef5cfb8c.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallClaimRewards0(r *Runner, opts *runOptions, _validator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "claimRewards0", _validator)
	r.revertSnapshot(snap)
	return consumed, err

}

// ClearValidators is a free data retrieval call for a paid mutator transaction binding the contract method 0xcfae4141.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function clearValidators() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallClearValidators(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "clearValidators")
	r.revertSnapshot(snap)
	return consumed, err

}

// CreateContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x0ae0a609.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallCreateContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x0b52f809.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallReleaseAllLNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseAllLNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseAllNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xb693fc09.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallReleaseAllNTN(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseAllNTN")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0x69d89575.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallReleaseFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseLNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0x3c6f2fa6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallReleaseLNTN(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseLNTN", _validator, _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// ReleaseNTN is a free data retrieval call for a paid mutator transaction binding the contract method 0xfc028e36.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallReleaseNTN(r *Runner, opts *runOptions, _amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseNTN", _amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetManagerContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x57895ca2.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallSetManagerContract(r *Runner, opts *runOptions, _managerContract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "setManagerContract", _managerContract)
	r.revertSnapshot(snap)
	return consumed, err

}

// Unbond is a free data retrieval call for a paid mutator transaction binding the contract method 0xa5d059ca.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallUnbond(r *Runner, opts *runOptions, _validator common.Address, _amount *big.Int) (*big.Int, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakeableVestingLogicTest.call(opts, "unbond", _validator, _amount)
	r.revertSnapshot(snap)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// UpdateFunds is a free data retrieval call for a paid mutator transaction binding the contract method 0xd06117ff.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallUpdateFunds(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingLogicTest.call(opts, "updateFunds")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpdateFundsAndGetContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x46e1448d.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CallUpdateFundsAndGetContract(r *Runner, opts *runOptions) (ContractBaseContract, uint64, error) {
	snap := r.snapshot()

	out, consumed, err := _StakeableVestingLogicTest.call(opts, "updateFundsAndGetContract")
	r.revertSnapshot(snap)

	if err != nil {
		return *new(ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(ContractBaseContract)).(*ContractBaseContract)
	return out0, consumed, err

}

// Bond is a paid mutator transaction binding the contract method 0xa515366a.
//
// Solidity: function bond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) Bond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "bond", _validator, _amount)
	return consumed, err
}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xe2bb8234.
//
// Solidity: function changeContractBeneficiary(address _recipient) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ChangeContractBeneficiary(opts *runOptions, _recipient common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "changeContractBeneficiary", _recipient)
	return consumed, err
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ClaimRewards(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "claimRewards")
	return consumed, err
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0xef5cfb8c.
//
// Solidity: function claimRewards(address _validator) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ClaimRewards0(opts *runOptions, _validator common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "claimRewards0", _validator)
	return consumed, err
}

// ClearValidators is a paid mutator transaction binding the contract method 0xcfae4141.
//
// Solidity: function clearValidators() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ClearValidators(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "clearValidators")
	return consumed, err
}

// CreateContract is a paid mutator transaction binding the contract method 0x0ae0a609.
//
// Solidity: function createContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) CreateContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "createContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// ReleaseAllLNTN is a paid mutator transaction binding the contract method 0x0b52f809.
//
// Solidity: function releaseAllLNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ReleaseAllLNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseAllLNTN")
	return consumed, err
}

// ReleaseAllNTN is a paid mutator transaction binding the contract method 0xb693fc09.
//
// Solidity: function releaseAllNTN() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ReleaseAllNTN(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseAllNTN")
	return consumed, err
}

// ReleaseFunds is a paid mutator transaction binding the contract method 0x69d89575.
//
// Solidity: function releaseFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ReleaseFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseFunds")
	return consumed, err
}

// ReleaseLNTN is a paid mutator transaction binding the contract method 0x3c6f2fa6.
//
// Solidity: function releaseLNTN(address _validator, uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ReleaseLNTN(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseLNTN", _validator, _amount)
	return consumed, err
}

// ReleaseNTN is a paid mutator transaction binding the contract method 0xfc028e36.
//
// Solidity: function releaseNTN(uint256 _amount) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ReleaseNTN(opts *runOptions, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "releaseNTN", _amount)
	return consumed, err
}

// SetManagerContract is a paid mutator transaction binding the contract method 0x57895ca2.
//
// Solidity: function setManagerContract(address _managerContract) returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) SetManagerContract(opts *runOptions, _managerContract common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "setManagerContract", _managerContract)
	return consumed, err
}

// Unbond is a paid mutator transaction binding the contract method 0xa5d059ca.
//
// Solidity: function unbond(address _validator, uint256 _amount) returns(uint256)
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) Unbond(opts *runOptions, _validator common.Address, _amount *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "unbond", _validator, _amount)
	return consumed, err
}

// UpdateFunds is a paid mutator transaction binding the contract method 0xd06117ff.
//
// Solidity: function updateFunds() returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) UpdateFunds(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "updateFunds")
	return consumed, err
}

// UpdateFundsAndGetContract is a paid mutator transaction binding the contract method 0x46e1448d.
//
// Solidity: function updateFundsAndGetContract() returns((uint256,uint256,uint256,uint256,uint256,bool))
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) UpdateFundsAndGetContract(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "updateFundsAndGetContract")
	return consumed, err
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakeableVestingLogicTest *StakeableVestingLogicTest) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingLogicTest.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StakeableVestingLogicTestFundsReleasedIterator is returned from FilterFundsReleased and is used to iterate over the raw logs and unpacked data for FundsReleased events raised by the StakeableVestingLogicTest contract.
		type StakeableVestingLogicTestFundsReleasedIterator struct {
			Event *StakeableVestingLogicTestFundsReleased // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StakeableVestingLogicTestFundsReleasedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StakeableVestingLogicTestFundsReleased)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StakeableVestingLogicTestFundsReleased)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StakeableVestingLogicTestFundsReleasedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StakeableVestingLogicTestFundsReleasedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StakeableVestingLogicTestFundsReleased represents a FundsReleased event raised by the StakeableVestingLogicTest contract.
		type StakeableVestingLogicTestFundsReleased struct {
			To common.Address;
			Token common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterFundsReleased is a free log retrieval operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
 		func (_StakeableVestingLogicTest *StakeableVestingLogicTest) FilterFundsReleased(opts *bind.FilterOpts, to []common.Address, token []common.Address) (*StakeableVestingLogicTestFundsReleasedIterator, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakeableVestingLogicTest.contract.FilterLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return &StakeableVestingLogicTestFundsReleasedIterator{contract: _StakeableVestingLogicTest.contract, event: "FundsReleased", logs: logs, sub: sub}, nil
 		}

		// WatchFundsReleased is a free log subscription operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakeableVestingLogicTest *StakeableVestingLogicTest) WatchFundsReleased(opts *bind.WatchOpts, sink chan<- *StakeableVestingLogicTestFundsReleased, to []common.Address, token []common.Address) (event.Subscription, error) {

			var toRule []interface{}
			for _, toItem := range to {
				toRule = append(toRule, toItem)
			}
			var tokenRule []interface{}
			for _, tokenItem := range token {
				tokenRule = append(tokenRule, tokenItem)
			}


			logs, sub, err := _StakeableVestingLogicTest.contract.WatchLogs(opts, "FundsReleased", toRule, tokenRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StakeableVestingLogicTestFundsReleased)
						if err := _StakeableVestingLogicTest.contract.UnpackLog(event, "FundsReleased", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseFundsReleased is a log parse operation binding the contract event 0xeed10c470424824e4a4309075162f10b9989088b23fbed2349698cedd44493fb.
		//
		// Solidity: event FundsReleased(address indexed to, address indexed token, uint256 amount)
		func (_StakeableVestingLogicTest *StakeableVestingLogicTest) ParseFundsReleased(log types.Log) (*StakeableVestingLogicTestFundsReleased, error) {
			event := new(StakeableVestingLogicTestFundsReleased)
			if err := _StakeableVestingLogicTest.contract.UnpackLog(event, "FundsReleased", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakeableVestingManagerMetaData contains all meta data concerning the StakeableVestingManager contract.
var StakeableVestingManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeContractBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniqueContractID\",\"type\":\"uint256\"}],\"name\":\"getContractAccount\",\"outputs\":[{\"internalType\":\"contractIStakeableVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContractAccount\",\"outputs\":[{\"internalType\":\"contractIStakeableVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContractAccounts\",\"outputs\":[{\"internalType\":\"contractIStakeableVesting[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentNTNAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"}],\"internalType\":\"structContractBase.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUniqueContractID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDuration\",\"type\":\"uint256\"}],\"name\":\"newContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setStakeableVestingLogicContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeableVestingLogicContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"a9f45b62": "changeContractBeneficiary(address,uint256,address)",
		"a0a8e460": "contractVersion()",
		"5cdc502d": "getContractAccount(address,uint256)",
		"0bdeeda4": "getContractAccount(uint256)",
		"531ffd2f": "getContractAccounts(address)",
		"213fe2b7": "getContracts(address)",
		"fca78d11": "getUniqueContractID(address,uint256)",
		"2d8d17c6": "newContract(address,uint256,uint256,uint256,uint256)",
		"2c272d38": "setStakeableVestingLogicContract(address)",
		"a04ab5f8": "stakeableVestingLogicContract()",
		"635bf933": "totalContracts(address)",
	},
	Bin: "",
}

// StakeableVestingManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingManagerMetaData.ABI instead.
var StakeableVestingManagerABI = StakeableVestingManagerMetaData.ABI

// Deprecated: Use StakeableVestingManagerMetaData.Sigs instead.
// StakeableVestingManagerFuncSigs maps the 4-byte function signature to its string representation.
var StakeableVestingManagerFuncSigs = StakeableVestingManagerMetaData.Sigs

// StakeableVestingManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingManagerMetaData.Bin instead.
var StakeableVestingManagerBin = StakeableVestingManagerMetaData.Bin

// DeployStakeableVestingManager deploys a new Ethereum contract, binding an instance of StakeableVestingManager to it.
func (r *Runner) DeployStakeableVestingManager(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakeableVestingManager, error) {
	parsed, err := StakeableVestingManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakeableVestingManagerBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakeableVestingManager{contract: c}, nil
}

// StakeableVestingManager is an auto generated Go binding around an Ethereum contract.
type StakeableVestingManager struct {
	*contract
}

// ContractVersion is a free data retrieval call binding the contract method 0xa0a8e460.
//
// Solidity: function contractVersion() view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManager) ContractVersion(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "contractVersion")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// GetContractAccount is a free data retrieval call binding the contract method 0x0bdeeda4.
//
// Solidity: function getContractAccount(uint256 _uniqueContractID) view returns(address)
func (_StakeableVestingManager *StakeableVestingManager) GetContractAccount(opts *runOptions, _uniqueContractID *big.Int) (common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "getContractAccount", _uniqueContractID)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContractAccount0 is a free data retrieval call binding the contract method 0x5cdc502d.
//
// Solidity: function getContractAccount(address _beneficiary, uint256 _id) view returns(address)
func (_StakeableVestingManager *StakeableVestingManager) GetContractAccount0(opts *runOptions, _beneficiary common.Address, _id *big.Int) (common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "getContractAccount0", _beneficiary, _id)

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// GetContractAccounts is a free data retrieval call binding the contract method 0x531ffd2f.
//
// Solidity: function getContractAccounts(address _beneficiary) view returns(address[])
func (_StakeableVestingManager *StakeableVestingManager) GetContractAccounts(opts *runOptions, _beneficiary common.Address) ([]common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "getContractAccounts", _beneficiary)

	if err != nil {
		return *new([]common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	return out0, consumed, err

}

// GetContracts is a free data retrieval call binding the contract method 0x213fe2b7.
//
// Solidity: function getContracts(address _beneficiary) view returns((uint256,uint256,uint256,uint256,uint256,bool)[])
func (_StakeableVestingManager *StakeableVestingManager) GetContracts(opts *runOptions, _beneficiary common.Address) ([]ContractBaseContract, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "getContracts", _beneficiary)

	if err != nil {
		return *new([]ContractBaseContract), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]ContractBaseContract)).(*[]ContractBaseContract)
	return out0, consumed, err

}

// GetUniqueContractID is a free data retrieval call binding the contract method 0xfca78d11.
//
// Solidity: function getUniqueContractID(address _beneficiary, uint256 _id) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManager) GetUniqueContractID(opts *runOptions, _beneficiary common.Address, _id *big.Int) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "getUniqueContractID", _beneficiary, _id)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// StakeableVestingLogicContract is a free data retrieval call binding the contract method 0xa04ab5f8.
//
// Solidity: function stakeableVestingLogicContract() view returns(address)
func (_StakeableVestingManager *StakeableVestingManager) StakeableVestingLogicContract(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "stakeableVestingLogicContract")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalContracts is a free data retrieval call binding the contract method 0x635bf933.
//
// Solidity: function totalContracts(address _beneficiary) view returns(uint256)
func (_StakeableVestingManager *StakeableVestingManager) TotalContracts(opts *runOptions, _beneficiary common.Address) (*big.Int, uint64, error) {
	out, consumed, err := _StakeableVestingManager.call(opts, "totalContracts", _beneficiary)

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// ChangeContractBeneficiary is a free data retrieval call for a paid mutator transaction binding the contract method 0xa9f45b62.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakeableVestingManager *StakeableVestingManager) CallChangeContractBeneficiary(r *Runner, opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingManager.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	r.revertSnapshot(snap)
	return consumed, err

}

// NewContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x2d8d17c6.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingManager *StakeableVestingManager) CallNewContract(r *Runner, opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingManager.call(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStakeableVestingLogicContract is a free data retrieval call for a paid mutator transaction binding the contract method 0x2c272d38.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStakeableVestingLogicContract(address _contract) returns()
func (_StakeableVestingManager *StakeableVestingManager) CallSetStakeableVestingLogicContract(r *Runner, opts *runOptions, _contract common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _StakeableVestingManager.call(opts, "setStakeableVestingLogicContract", _contract)
	r.revertSnapshot(snap)
	return consumed, err

}

// ChangeContractBeneficiary is a paid mutator transaction binding the contract method 0xa9f45b62.
//
// Solidity: function changeContractBeneficiary(address _beneficiary, uint256 _id, address _recipient) returns()
func (_StakeableVestingManager *StakeableVestingManager) ChangeContractBeneficiary(opts *runOptions, _beneficiary common.Address, _id *big.Int, _recipient common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingManager.call(opts, "changeContractBeneficiary", _beneficiary, _id, _recipient)
	return consumed, err
}

// NewContract is a paid mutator transaction binding the contract method 0x2d8d17c6.
//
// Solidity: function newContract(address _beneficiary, uint256 _amount, uint256 _startTime, uint256 _cliffDuration, uint256 _totalDuration) returns()
func (_StakeableVestingManager *StakeableVestingManager) NewContract(opts *runOptions, _beneficiary common.Address, _amount *big.Int, _startTime *big.Int, _cliffDuration *big.Int, _totalDuration *big.Int) (uint64, error) {
	_, consumed, err := _StakeableVestingManager.call(opts, "newContract", _beneficiary, _amount, _startTime, _cliffDuration, _totalDuration)
	return consumed, err
}

// SetStakeableVestingLogicContract is a paid mutator transaction binding the contract method 0x2c272d38.
//
// Solidity: function setStakeableVestingLogicContract(address _contract) returns()
func (_StakeableVestingManager *StakeableVestingManager) SetStakeableVestingLogicContract(opts *runOptions, _contract common.Address) (uint64, error) {
	_, consumed, err := _StakeableVestingManager.call(opts, "setStakeableVestingLogicContract", _contract)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakeableVestingManager *StakeableVestingManager) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingManager.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// StakeableVestingManagerBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the StakeableVestingManager contract.
		type StakeableVestingManagerBeneficiaryChangedIterator struct {
			Event *StakeableVestingManagerBeneficiaryChanged // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *StakeableVestingManagerBeneficiaryChangedIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(StakeableVestingManagerBeneficiaryChanged)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(StakeableVestingManagerBeneficiaryChanged)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *StakeableVestingManagerBeneficiaryChangedIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *StakeableVestingManagerBeneficiaryChangedIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// StakeableVestingManagerBeneficiaryChanged represents a BeneficiaryChanged event raised by the StakeableVestingManager contract.
		type StakeableVestingManagerBeneficiaryChanged struct {
			NewBeneficiary common.Address;
			OldBeneficiary common.Address;
			ContractID *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
 		func (_StakeableVestingManager *StakeableVestingManager) FilterBeneficiaryChanged(opts *bind.FilterOpts, newBeneficiary []common.Address, oldBeneficiary []common.Address) (*StakeableVestingManagerBeneficiaryChangedIterator, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _StakeableVestingManager.contract.FilterLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return &StakeableVestingManagerBeneficiaryChangedIterator{contract: _StakeableVestingManager.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
 		}

		// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_StakeableVestingManager *StakeableVestingManager) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *StakeableVestingManagerBeneficiaryChanged, newBeneficiary []common.Address, oldBeneficiary []common.Address) (event.Subscription, error) {

			var newBeneficiaryRule []interface{}
			for _, newBeneficiaryItem := range newBeneficiary {
				newBeneficiaryRule = append(newBeneficiaryRule, newBeneficiaryItem)
			}
			var oldBeneficiaryRule []interface{}
			for _, oldBeneficiaryItem := range oldBeneficiary {
				oldBeneficiaryRule = append(oldBeneficiaryRule, oldBeneficiaryItem)
			}


			logs, sub, err := _StakeableVestingManager.contract.WatchLogs(opts, "BeneficiaryChanged", newBeneficiaryRule, oldBeneficiaryRule)
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(StakeableVestingManagerBeneficiaryChanged)
						if err := _StakeableVestingManager.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x893ca4c0017fb7a30186cb3f7c82b127e989d3079f8473989c10e06edf1cf738.
		//
		// Solidity: event BeneficiaryChanged(address indexed newBeneficiary, address indexed oldBeneficiary, uint256 contractID)
		func (_StakeableVestingManager *StakeableVestingManager) ParseBeneficiaryChanged(log types.Log) (*StakeableVestingManagerBeneficiaryChanged, error) {
			event := new(StakeableVestingManagerBeneficiaryChanged)
			if err := _StakeableVestingManager.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// StakeableVestingStateMetaData contains all meta data concerning the StakeableVestingState contract.
var StakeableVestingStateMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_autonity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b5060405161023c38038061023c83398101604081905261002f9161005d565b600080546001600160a01b039092166001600160a01b0319928316179055600580549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b6101a08061009c6000396000f3fe6080604052366100245761002261001461002b565b6001600160a01b0316610117565b005b6100226100145b600080600560009054906101000a90046001600160a01b03166001600160a01b031663a04ab5f86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a5919061013a565b90506001600160a01b0381166101125760405162461bcd60e51b815260206004820152602860248201527f7374616b6561626c652076657374696e67206c6f67696320636f6e7472616374604482015267081b9bdd081cd95d60c21b606482015260840160405180910390fd5b919050565b3660008037600080366000845af43d6000803e80610134573d6000fd5b503d6000f35b60006020828403121561014c57600080fd5b81516001600160a01b038116811461016357600080fd5b939250505056fea2646970667358221220c652fa2cdcee74bb6cc315fd287f9320d0fd458bd6d49e58ee630ce3ae5a855f64736f6c63430008150033",
}

// StakeableVestingStateABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingStateMetaData.ABI instead.
var StakeableVestingStateABI = StakeableVestingStateMetaData.ABI

// StakeableVestingStateBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeableVestingStateMetaData.Bin instead.
var StakeableVestingStateBin = StakeableVestingStateMetaData.Bin

// DeployStakeableVestingState deploys a new Ethereum contract, binding an instance of StakeableVestingState to it.
func (r *Runner) DeployStakeableVestingState(opts *runOptions, _autonity common.Address) (common.Address, uint64, *StakeableVestingState, error) {
	parsed, err := StakeableVestingStateMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(StakeableVestingStateBin), _autonity)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &StakeableVestingState{contract: c}, nil
}

// StakeableVestingState is an auto generated Go binding around an Ethereum contract.
type StakeableVestingState struct {
	*contract
}

// Fallback is a paid mutator transaction binding the contract fallback function.
// WARNING! UNTESTED
// Solidity: fallback() payable returns()
func (_StakeableVestingState *StakeableVestingState) Fallback(opts *runOptions, calldata []byte) (uint64, error) {
	_, consumed, err := _StakeableVestingState.call(opts, "", calldata)
	return consumed, err
}

// Receive is a paid mutator transaction binding the contract receive function.
// WARNING! UNTESTED
// Solidity: receive() payable returns()
func (_StakeableVestingState *StakeableVestingState) Receive(opts *runOptions) (uint64, error) {
	_, consumed, err := _StakeableVestingState.call(opts, "")
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// StakeableVestingStorageMetaData contains all meta data concerning the StakeableVestingStorage contract.
var StakeableVestingStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// StakeableVestingStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeableVestingStorageMetaData.ABI instead.
var StakeableVestingStorageABI = StakeableVestingStorageMetaData.ABI

// StakeableVestingStorage is an auto generated Go binding around an Ethereum contract.
type StakeableVestingStorage struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// SupplyControlMetaData contains all meta data concerning the SupplyControl contract.
var SupplyControlMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilizer_\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7ecc2b56": "availableSupply()",
		"44df8e70": "burn()",
		"40c10f19": "mint(address,uint256)",
		"b3ab15fb": "setOperator(address)",
		"db7f521a": "setStabilizer(address)",
		"7e47961c": "stabilizer()",
		"18160ddd": "totalSupply()",
	},
	Bin: "0x6080604052604051610512380380610512833981016040819052610022916100a5565b3460000361004357604051637c946ed760e01b815260040160405180910390fd5b600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560008054919093169116179055346001556100e8565b80516001600160a01b03811681146100a057600080fd5b919050565b6000806000606084860312156100ba57600080fd5b6100c384610089565b92506100d160208501610089565b91506100df60408501610089565b90509250925092565b61041b806100f76000396000f3fe6080604052600436106100705760003560e01c80637e47961c1161004e5780637e47961c146100c85780637ecc2b5614610100578063b3ab15fb14610113578063db7f521a1461013357600080fd5b806318160ddd1461007557806340c10f191461009e57806344df8e70146100c0575b600080fd5b34801561008157600080fd5b5061008b60015481565b6040519081526020015b60405180910390f35b3480156100aa57600080fd5b506100be6100b9366004610399565b610153565b005b6100be610265565b3480156100d457600080fd5b506000546100e8906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b34801561010c57600080fd5b504761008b565b34801561011f57600080fd5b506100be61012e3660046103c3565b6102e5565b34801561013f57600080fd5b506100be61014e3660046103c3565b610331565b6000546001600160a01b0316331461017d576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821615806101a057506000546001600160a01b038381169116145b156101be57604051634e46966960e11b815260040160405180910390fd5b8015806101ca57504781115b156101e85760405163162908e360e11b815260040160405180910390fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561021e573d6000803e3d6000fd5b50604080516001600160a01b0384168152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a15050565b3460000361028657604051637c946ed760e01b815260040160405180910390fd5b6000546001600160a01b031633146102b0576040516282b42960e81b815260040160405180910390fd5b6040513481527fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb9060200160405180910390a1565b6002546001600160a01b0316331461030f576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461035b576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461039457600080fd5b919050565b600080604083850312156103ac57600080fd5b6103b58361037d565b946020939093013593505050565b6000602082840312156103d557600080fd5b6103de8261037d565b939250505056fea26469706673582212207646b2e6881a2d6269951386532b4fc6a3409fe50e89f6a55b709c4060cd997f64736f6c63430008150033",
}

// SupplyControlABI is the input ABI used to generate the binding from.
// Deprecated: Use SupplyControlMetaData.ABI instead.
var SupplyControlABI = SupplyControlMetaData.ABI

// Deprecated: Use SupplyControlMetaData.Sigs instead.
// SupplyControlFuncSigs maps the 4-byte function signature to its string representation.
var SupplyControlFuncSigs = SupplyControlMetaData.Sigs

// SupplyControlBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SupplyControlMetaData.Bin instead.
var SupplyControlBin = SupplyControlMetaData.Bin

// DeploySupplyControl deploys a new Ethereum contract, binding an instance of SupplyControl to it.
func (r *Runner) DeploySupplyControl(opts *runOptions, autonity common.Address, operator common.Address, stabilizer_ common.Address) (common.Address, uint64, *SupplyControl, error) {
	parsed, err := SupplyControlMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(SupplyControlBin), autonity, operator, stabilizer_)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &SupplyControl{contract: c}, nil
}

// SupplyControl is an auto generated Go binding around an Ethereum contract.
type SupplyControl struct {
	*contract
}

// AvailableSupply is a free data retrieval call binding the contract method 0x7ecc2b56.
//
// Solidity: function availableSupply() view returns(uint256)
func (_SupplyControl *SupplyControl) AvailableSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "availableSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Stabilizer is a free data retrieval call binding the contract method 0x7e47961c.
//
// Solidity: function stabilizer() view returns(address)
func (_SupplyControl *SupplyControl) Stabilizer(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "stabilizer")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SupplyControl *SupplyControl) TotalSupply(opts *runOptions) (*big.Int, uint64, error) {
	out, consumed, err := _SupplyControl.call(opts, "totalSupply")

	if err != nil {
		return *new(*big.Int), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0, consumed, err

}

// Burn is a free data retrieval call for a paid mutator transaction binding the contract method 0x44df8e70.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControl) CallBurn(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "burn")
	r.revertSnapshot(snap)
	return consumed, err

}

// Mint is a free data retrieval call for a paid mutator transaction binding the contract method 0x40c10f19.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControl) CallMint(r *Runner, opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "mint", recipient, amount)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControl) CallSetOperator(r *Runner, opts *runOptions, operator common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "setOperator", operator)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetStabilizer is a free data retrieval call for a paid mutator transaction binding the contract method 0xdb7f521a.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControl) CallSetStabilizer(r *Runner, opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _SupplyControl.call(opts, "setStabilizer", stabilizer_)
	r.revertSnapshot(snap)
	return consumed, err

}

// Burn is a paid mutator transaction binding the contract method 0x44df8e70.
//
// Solidity: function burn() payable returns()
func (_SupplyControl *SupplyControl) Burn(opts *runOptions) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "burn")
	return consumed, err
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address recipient, uint256 amount) returns()
func (_SupplyControl *SupplyControl) Mint(opts *runOptions, recipient common.Address, amount *big.Int) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "mint", recipient, amount)
	return consumed, err
}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address operator) returns()
func (_SupplyControl *SupplyControl) SetOperator(opts *runOptions, operator common.Address) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "setOperator", operator)
	return consumed, err
}

// SetStabilizer is a paid mutator transaction binding the contract method 0xdb7f521a.
//
// Solidity: function setStabilizer(address stabilizer_) returns()
func (_SupplyControl *SupplyControl) SetStabilizer(opts *runOptions, stabilizer_ common.Address) (uint64, error) {
	_, consumed, err := _SupplyControl.call(opts, "setStabilizer", stabilizer_)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

		// SupplyControlBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the SupplyControl contract.
		type SupplyControlBurnIterator struct {
			Event *SupplyControlBurn // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *SupplyControlBurnIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(SupplyControlBurn)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(SupplyControlBurn)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *SupplyControlBurnIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *SupplyControlBurnIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// SupplyControlBurn represents a Burn event raised by the SupplyControl contract.
		type SupplyControlBurn struct {
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
 		func (_SupplyControl *SupplyControl) FilterBurn(opts *bind.FilterOpts) (*SupplyControlBurnIterator, error) {



			logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return &SupplyControlBurnIterator{contract: _SupplyControl.contract, event: "Burn", logs: logs, sub: sub}, nil
 		}

		// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_SupplyControl *SupplyControl) WatchBurn(opts *bind.WatchOpts, sink chan<- *SupplyControlBurn) (event.Subscription, error) {



			logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Burn")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(SupplyControlBurn)
						if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
		//
		// Solidity: event Burn(uint256 amount)
		func (_SupplyControl *SupplyControl) ParseBurn(log types.Log) (*SupplyControlBurn, error) {
			event := new(SupplyControlBurn)
			if err := _SupplyControl.contract.UnpackLog(event, "Burn", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


		// SupplyControlMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the SupplyControl contract.
		type SupplyControlMintIterator struct {
			Event *SupplyControlMint // Event containing the contract specifics and raw log

			contract *bind.BoundContract // Generic contract to use for unpacking event data
			event    string              // Event name to use for unpacking event data

			logs chan types.Log        // Log channel receiving the found contract events
			sub  ethereum.Subscription // Subscription for errors, completion and termination
			done bool                  // Whether the subscription completed delivering logs
			fail error                 // Occurred error to stop iteration
		}
		// Next advances the iterator to the subsequent event, returning whether there
		// are any more events found. In case of a retrieval or parsing error, false is
		// returned and Error() can be queried for the exact failure.
		func (it *SupplyControlMintIterator) Next() bool {
			// If the iterator failed, stop iterating
			if (it.fail != nil) {
				return false
			}
			// If the iterator completed, deliver directly whatever's available
			if (it.done) {
				select {
				case log := <-it.logs:
					it.Event = new(SupplyControlMint)
					if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
						it.fail = err
						return false
					}
					it.Event.Raw = log
					return true

				default:
					return false
				}
			}
			// Iterator still in progress, wait for either a data or an error event
			select {
			case log := <-it.logs:
				it.Event = new(SupplyControlMint)
				if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
					it.fail = err
					return false
				}
				it.Event.Raw = log
				return true

			case err := <-it.sub.Err():
				it.done = true
				it.fail = err
				return it.Next()
			}
		}
		// Error returns any retrieval or parsing error occurred during filtering.
		func (it *SupplyControlMintIterator) Error() error {
			return it.fail
		}
		// Close terminates the iteration process, releasing any pending underlying
		// resources.
		func (it *SupplyControlMintIterator) Close() error {
			it.sub.Unsubscribe()
			return nil
		}

		// SupplyControlMint represents a Mint event raised by the SupplyControl contract.
		type SupplyControlMint struct {
			Recipient common.Address;
			Amount *big.Int;
			Raw types.Log // Blockchain specific contextual infos
		}

		// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
 		func (_SupplyControl *SupplyControl) FilterMint(opts *bind.FilterOpts) (*SupplyControlMintIterator, error) {




			logs, sub, err := _SupplyControl.contract.FilterLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return &SupplyControlMintIterator{contract: _SupplyControl.contract, event: "Mint", logs: logs, sub: sub}, nil
 		}

		// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_SupplyControl *SupplyControl) WatchMint(opts *bind.WatchOpts, sink chan<- *SupplyControlMint) (event.Subscription, error) {




			logs, sub, err := _SupplyControl.contract.WatchLogs(opts, "Mint")
			if err != nil {
				return nil, err
			}
			return event.NewSubscription(func(quit <-chan struct{}) error {
				defer sub.Unsubscribe()
				for {
					select {
					case log := <-logs:
						// New log arrived, parse the event and forward to the user
						event := new(SupplyControlMint)
						if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
							return err
						}
						event.Raw = log

						select {
						case sink <- event:
						case err := <-sub.Err():
							return err
						case <-quit:
							return nil
						}
					case err := <-sub.Err():
						return err
					case <-quit:
						return nil
					}
				}
			}), nil
		}

		// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
		//
		// Solidity: event Mint(address recipient, uint256 amount)
		func (_SupplyControl *SupplyControl) ParseMint(log types.Log) (*SupplyControlMint, error) {
			event := new(SupplyControlMint)
			if err := _SupplyControl.contract.UnpackLog(event, "Mint", log); err != nil {
				return nil, err
			}
			event.Raw = log
			return event, nil
		}


*/

// TestBaseMetaData contains all meta data concerning the TestBase contract.
var TestBaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"bfb4ebcf": "Foo()",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161041238038061041283398101604081905261002f91610058565b600061003b82826101aa565b5050610269565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006b57600080fd5b82516001600160401b038082111561008257600080fd5b818501915085601f83011261009657600080fd5b8151818111156100a8576100a8610042565b604051601f8201601f19908116603f011681019083821181831017156100d0576100d0610042565b8160405282815288868487010111156100e857600080fd5b600093505b8284101561010a57848401860151818501870152928501926100ed565b600086848301015280965050505050505092915050565b600181811c9082168061013557607f821691505b60208210810361015557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101a557600081815260208120601f850160051c810160208610156101825750805b601f850160051c820191505b818110156101a15782815560010161018e565b5050505b505050565b81516001600160401b038111156101c3576101c3610042565b6101d7816101d18454610121565b8461015b565b602080601f83116001811461020c57600084156101f45750858301515b600019600386901b1c1916600185901b1785556101a1565b600085815260208120601f198616915b8281101561023b5788860151825594840194600190910190840161021c565b50858210156102595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806102786000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bfb4ebcf14610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212201b192f23bee31d5c495e48a277f8d30c2b6bce49cc044b7628edf9f4ae1568fb64736f6c63430008150033",
}

// TestBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use TestBaseMetaData.ABI instead.
var TestBaseABI = TestBaseMetaData.ABI

// Deprecated: Use TestBaseMetaData.Sigs instead.
// TestBaseFuncSigs maps the 4-byte function signature to its string representation.
var TestBaseFuncSigs = TestBaseMetaData.Sigs

// TestBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestBaseMetaData.Bin instead.
var TestBaseBin = TestBaseMetaData.Bin

// DeployTestBase deploys a new Ethereum contract, binding an instance of TestBase to it.
func (r *Runner) DeployTestBase(opts *runOptions, _foo string) (common.Address, uint64, *TestBase, error) {
	parsed, err := TestBaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(TestBaseBin), _foo)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &TestBase{contract: c}, nil
}

// TestBase is an auto generated Go binding around an Ethereum contract.
type TestBase struct {
	*contract
}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestBase *TestBase) Foo(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestBase.call(opts, "Foo")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

/* EVENTS ARE NOT YET SUPPORTED

 */

// TestUpgradedMetaData contains all meta data concerning the TestUpgraded contract.
var TestUpgradedMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Bar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Foo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_foo\",\"type\":\"string\"}],\"name\":\"FooBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b0a378b0": "Bar()",
		"bfb4ebcf": "Foo()",
		"1e4f3395": "FooBar(string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161068838038061068883398101604081905261002f9161010e565b80600061003c82826101fa565b506001905061004b83826101fa565b5050506102b9565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261007a57600080fd5b81516001600160401b038082111561009457610094610053565b604051601f8301601f19908116603f011681019082821181831017156100bc576100bc610053565b816040528381526020925086838588010111156100d857600080fd5b600091505b838210156100fa57858201830151818301840152908201906100dd565b600093810190920192909252949350505050565b6000806040838503121561012157600080fd5b82516001600160401b038082111561013857600080fd5b61014486838701610069565b9350602085015191508082111561015a57600080fd5b5061016785828601610069565b9150509250929050565b600181811c9082168061018557607f821691505b6020821081036101a557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101f557600081815260208120601f850160051c810160208610156101d25750805b601f850160051c820191505b818110156101f1578281556001016101de565b5050505b505050565b81516001600160401b0381111561021357610213610053565b610227816102218454610171565b846101ab565b602080601f83116001811461025c57600084156102445750858301515b600019600386901b1c1916600185901b1785556101f1565b600085815260208120601f198616915b8281101561028b5788860151825594840194600190910190840161026c565b50858210156102a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6103c0806102c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e4f339514610046578063b0a378b01461005b578063bfb4ebcf14610079575b600080fd5b610059610054366004610142565b610081565b005b610063610091565b60405161007091906101f3565b60405180910390f35b61006361011f565b600061008d82826102ca565b5050565b6001805461009e90610241565b80601f01602080910402602001604051908101604052809291908181526020018280546100ca90610241565b80156101175780601f106100ec57610100808354040283529160200191610117565b820191906000526020600020905b8154815290600101906020018083116100fa57829003601f168201915b505050505081565b6000805461009e90610241565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561015457600080fd5b813567ffffffffffffffff8082111561016c57600080fd5b818401915084601f83011261018057600080fd5b8135818111156101925761019261012c565b604051601f8201601f19908116603f011681019083821181831017156101ba576101ba61012c565b816040528281528760208487010111156101d357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561022057858101830151858201604001528201610204565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061025557607f821691505b60208210810361027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102c557600081815260208120601f850160051c810160208610156102a25750805b601f850160051c820191505b818110156102c1578281556001016102ae565b5050505b505050565b815167ffffffffffffffff8111156102e4576102e461012c565b6102f8816102f28454610241565b8461027b565b602080601f83116001811461032d57600084156103155750858301515b600019600386901b1c1916600185901b1785556102c1565b600085815260208120601f198616915b8281101561035c5788860151825594840194600190910190840161033d565b508582101561037a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122084adb99670f18da2c82367bee85dcb2c6f83e9150e06924e5f66cdb7a26276b964736f6c63430008150033",
}

// TestUpgradedABI is the input ABI used to generate the binding from.
// Deprecated: Use TestUpgradedMetaData.ABI instead.
var TestUpgradedABI = TestUpgradedMetaData.ABI

// Deprecated: Use TestUpgradedMetaData.Sigs instead.
// TestUpgradedFuncSigs maps the 4-byte function signature to its string representation.
var TestUpgradedFuncSigs = TestUpgradedMetaData.Sigs

// TestUpgradedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestUpgradedMetaData.Bin instead.
var TestUpgradedBin = TestUpgradedMetaData.Bin

// DeployTestUpgraded deploys a new Ethereum contract, binding an instance of TestUpgraded to it.
func (r *Runner) DeployTestUpgraded(opts *runOptions, _bar string, _foo string) (common.Address, uint64, *TestUpgraded, error) {
	parsed, err := TestUpgradedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(TestUpgradedBin), _bar, _foo)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &TestUpgraded{contract: c}, nil
}

// TestUpgraded is an auto generated Go binding around an Ethereum contract.
type TestUpgraded struct {
	*contract
}

// Bar is a free data retrieval call binding the contract method 0xb0a378b0.
//
// Solidity: function Bar() view returns(string)
func (_TestUpgraded *TestUpgraded) Bar(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestUpgraded.call(opts, "Bar")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// Foo is a free data retrieval call binding the contract method 0xbfb4ebcf.
//
// Solidity: function Foo() view returns(string)
func (_TestUpgraded *TestUpgraded) Foo(opts *runOptions) (string, uint64, error) {
	out, consumed, err := _TestUpgraded.call(opts, "Foo")

	if err != nil {
		return *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	return out0, consumed, err

}

// FooBar is a free data retrieval call for a paid mutator transaction binding the contract method 0x1e4f3395.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgraded) CallFooBar(r *Runner, opts *runOptions, _foo string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _TestUpgraded.call(opts, "FooBar", _foo)
	r.revertSnapshot(snap)
	return consumed, err

}

// FooBar is a paid mutator transaction binding the contract method 0x1e4f3395.
//
// Solidity: function FooBar(string _foo) returns()
func (_TestUpgraded *TestUpgraded) FooBar(opts *runOptions, _foo string) (uint64, error) {
	_, consumed, err := _TestUpgraded.call(opts, "FooBar", _foo)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// UpgradeManagerMetaData contains all meta data concerning the UpgradeManager contract.
var UpgradeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"autonity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"55463ceb": "autonity()",
		"570ca735": "operator()",
		"b3ab15fb": "setOperator(address)",
		"6e3d9ff0": "upgrade(address,string)",
	},
	Bin: "0x608060405234801561001057600080fd5b5060405161044338038061044383398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610385806100be6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355463ceb14610051578063570ca735146100805780636e3d9ff014610093578063b3ab15fb146100a8575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610064906001600160a01b031681565b6100a66100a1366004610220565b6100bb565b005b6100a66100b63660046102e2565b610166565b6001546001600160a01b0316331461011a5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064015b60405180910390fd5b60405160f9906000906101339085908590602001610304565b6040516020818303038152906040529050600080825160208401855af43d6000803e808015610161573d6000f35b3d6000fd5b6000546001600160a01b031633146101cc5760405162461bcd60e51b815260206004820152602360248201527f63616c6c6572206973206e6f7420746865204175746f6e69747920636f6e74726044820152621858dd60ea1b6064820152608401610111565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461020557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561023357600080fd5b61023c836101ee565b9150602083013567ffffffffffffffff8082111561025957600080fd5b818501915085601f83011261026d57600080fd5b81358181111561027f5761027f61020a565b604051601f8201601f19908116603f011681019083821181831017156102a7576102a761020a565b816040528281528860208487010111156102c057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156102f457600080fd5b6102fd826101ee565b9392505050565b6bffffffffffffffffffffffff198360601b1681526000825160005b8181101561033d5760208186018101516014868401015201610320565b5060009201601401918252509291505056fea2646970667358221220b4a7a54f61270cff1d5d72adf6b4650ea968150216c3563883a09ac3b1d3506a64736f6c63430008150033",
}

// UpgradeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeManagerMetaData.ABI instead.
var UpgradeManagerABI = UpgradeManagerMetaData.ABI

// Deprecated: Use UpgradeManagerMetaData.Sigs instead.
// UpgradeManagerFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeManagerFuncSigs = UpgradeManagerMetaData.Sigs

// UpgradeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UpgradeManagerMetaData.Bin instead.
var UpgradeManagerBin = UpgradeManagerMetaData.Bin

// DeployUpgradeManager deploys a new Ethereum contract, binding an instance of UpgradeManager to it.
func (r *Runner) DeployUpgradeManager(opts *runOptions, _autonity common.Address, _operator common.Address) (common.Address, uint64, *UpgradeManager, error) {
	parsed, err := UpgradeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	if parsed == nil {
		return common.Address{}, 0, nil, errors.New("GetABI returned nil")
	}

	address, gasConsumed, c, err := r.deployContract(opts, parsed, common.FromHex(UpgradeManagerBin), _autonity, _operator)
	if err != nil {
		return common.Address{}, 0, nil, err
	}
	return address, gasConsumed, &UpgradeManager{contract: c}, nil
}

// UpgradeManager is an auto generated Go binding around an Ethereum contract.
type UpgradeManager struct {
	*contract
}

// Autonity is a free data retrieval call binding the contract method 0x55463ceb.
//
// Solidity: function autonity() view returns(address)
func (_UpgradeManager *UpgradeManager) Autonity(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _UpgradeManager.call(opts, "autonity")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_UpgradeManager *UpgradeManager) Operator(opts *runOptions) (common.Address, uint64, error) {
	out, consumed, err := _UpgradeManager.call(opts, "operator")

	if err != nil {
		return *new(common.Address), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	return out0, consumed, err

}

// SetOperator is a free data retrieval call for a paid mutator transaction binding the contract method 0xb3ab15fb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManager) CallSetOperator(r *Runner, opts *runOptions, _account common.Address) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _UpgradeManager.call(opts, "setOperator", _account)
	r.revertSnapshot(snap)
	return consumed, err

}

// Upgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x6e3d9ff0.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManager) CallUpgrade(r *Runner, opts *runOptions, _target common.Address, _data string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _UpgradeManager.call(opts, "upgrade", _target, _data)
	r.revertSnapshot(snap)
	return consumed, err

}

// SetOperator is a paid mutator transaction binding the contract method 0xb3ab15fb.
//
// Solidity: function setOperator(address _account) returns()
func (_UpgradeManager *UpgradeManager) SetOperator(opts *runOptions, _account common.Address) (uint64, error) {
	_, consumed, err := _UpgradeManager.call(opts, "setOperator", _account)
	return consumed, err
}

// Upgrade is a paid mutator transaction binding the contract method 0x6e3d9ff0.
//
// Solidity: function upgrade(address _target, string _data) returns()
func (_UpgradeManager *UpgradeManager) Upgrade(opts *runOptions, _target common.Address, _data string) (uint64, error) {
	_, consumed, err := _UpgradeManager.call(opts, "upgrade", _target, _data)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// UpgradeableMetaData contains all meta data concerning the Upgradeable contract.
var UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"completeContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetContractUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"872cf059": "completeContractUpgrade()",
		"b66b3e79": "getNewContract()",
		"cf9c5719": "resetContractUpgrade()",
		"b2ea9adb": "upgradeContract(bytes,string)",
	},
}

// UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use UpgradeableMetaData.ABI instead.
var UpgradeableABI = UpgradeableMetaData.ABI

// Deprecated: Use UpgradeableMetaData.Sigs instead.
// UpgradeableFuncSigs maps the 4-byte function signature to its string representation.
var UpgradeableFuncSigs = UpgradeableMetaData.Sigs

// Upgradeable is an auto generated Go binding around an Ethereum contract.
type Upgradeable struct {
	*contract
}

// GetNewContract is a free data retrieval call binding the contract method 0xb66b3e79.
//
// Solidity: function getNewContract() view returns(bytes, string)
func (_Upgradeable *Upgradeable) GetNewContract(opts *runOptions) ([]byte, string, uint64, error) {
	out, consumed, err := _Upgradeable.call(opts, "getNewContract")

	if err != nil {
		return *new([]byte), *new(string), consumed, err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	return out0, out1, consumed, err

}

// CompleteContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0x872cf059.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CallCompleteContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "completeContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// ResetContractUpgrade is a free data retrieval call for a paid mutator transaction binding the contract method 0xcf9c5719.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CallResetContractUpgrade(r *Runner, opts *runOptions) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "resetContractUpgrade")
	r.revertSnapshot(snap)
	return consumed, err

}

// UpgradeContract is a free data retrieval call for a paid mutator transaction binding the contract method 0xb2ea9adb.
// Similar to eth_call from rpc calls or function.call from truffle, it reverts the state after the call and returns the output. The output is extracted
// the same way as done above for view only functions.
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *Upgradeable) CallUpgradeContract(r *Runner, opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	snap := r.snapshot()

	_, consumed, err := _Upgradeable.call(opts, "upgradeContract", _bytecode, _abi)
	r.revertSnapshot(snap)
	return consumed, err

}

// CompleteContractUpgrade is a paid mutator transaction binding the contract method 0x872cf059.
//
// Solidity: function completeContractUpgrade() returns()
func (_Upgradeable *Upgradeable) CompleteContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "completeContractUpgrade")
	return consumed, err
}

// ResetContractUpgrade is a paid mutator transaction binding the contract method 0xcf9c5719.
//
// Solidity: function resetContractUpgrade() returns()
func (_Upgradeable *Upgradeable) ResetContractUpgrade(opts *runOptions) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "resetContractUpgrade")
	return consumed, err
}

// UpgradeContract is a paid mutator transaction binding the contract method 0xb2ea9adb.
//
// Solidity: function upgradeContract(bytes _bytecode, string _abi) returns()
func (_Upgradeable *Upgradeable) UpgradeContract(opts *runOptions, _bytecode []byte, _abi string) (uint64, error) {
	_, consumed, err := _Upgradeable.call(opts, "upgradeContract", _bytecode, _abi)
	return consumed, err
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ValidatorManagerMetaData contains all meta data concerning the ValidatorManager contract.
var ValidatorManagerMetaData = &bind.MetaData{
	ABI: "[]",
}

// ValidatorManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerMetaData.ABI instead.
var ValidatorManagerABI = ValidatorManagerMetaData.ABI

// ValidatorManager is an auto generated Go binding around an Ethereum contract.
type ValidatorManager struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */

// ValidatorManagerStorageMetaData contains all meta data concerning the ValidatorManagerStorage contract.
var ValidatorManagerStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// ValidatorManagerStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorManagerStorageMetaData.ABI instead.
var ValidatorManagerStorageABI = ValidatorManagerStorageMetaData.ABI

// ValidatorManagerStorage is an auto generated Go binding around an Ethereum contract.
type ValidatorManagerStorage struct {
	*contract
}

/* EVENTS ARE NOT YET SUPPORTED

 */
